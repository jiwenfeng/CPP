// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.broadcast.proto

#ifndef PROTOBUF_server_2ebroadcast_2eproto__INCLUDED
#define PROTOBUF_server_2ebroadcast_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2ebroadcast_2eproto();
void protobuf_AssignDesc_server_2ebroadcast_2eproto();
void protobuf_ShutdownFile_server_2ebroadcast_2eproto();

class broadcast;

enum broadcast_TYPE {
  broadcast_TYPE_broadcast_all = 0,
  broadcast_TYPE_broadcast_mut = 1
};
bool broadcast_TYPE_IsValid(int value);
const broadcast_TYPE broadcast_TYPE_TYPE_MIN = broadcast_TYPE_broadcast_all;
const broadcast_TYPE broadcast_TYPE_TYPE_MAX = broadcast_TYPE_broadcast_mut;
const int broadcast_TYPE_TYPE_ARRAYSIZE = broadcast_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* broadcast_TYPE_descriptor();
inline const ::std::string& broadcast_TYPE_Name(broadcast_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    broadcast_TYPE_descriptor(), value);
}
inline bool broadcast_TYPE_Parse(
    const ::std::string& name, broadcast_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<broadcast_TYPE>(
    broadcast_TYPE_descriptor(), name, value);
}
// ===================================================================

class broadcast : public ::google::protobuf::Message {
 public:
  broadcast();
  virtual ~broadcast();

  broadcast(const broadcast& from);

  inline broadcast& operator=(const broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast& default_instance();

  void Swap(broadcast* other);

  // implements Message ----------------------------------------------

  broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadcast& from);
  void MergeFrom(const broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef broadcast_TYPE TYPE;
  static const TYPE broadcast_all = broadcast_TYPE_broadcast_all;
  static const TYPE broadcast_mut = broadcast_TYPE_broadcast_mut;
  static inline bool TYPE_IsValid(int value) {
    return broadcast_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    broadcast_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    broadcast_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    broadcast_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return broadcast_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return broadcast_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return broadcast_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .server.broadcast.TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::server::broadcast_TYPE type() const;
  inline void set_type(::server::broadcast_TYPE value);

  // @@protoc_insertion_point(class_scope:server.broadcast)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2ebroadcast_2eproto();
  friend void protobuf_AssignDesc_server_2ebroadcast_2eproto();
  friend void protobuf_ShutdownFile_server_2ebroadcast_2eproto();

  void InitAsDefaultInstance();
  static broadcast* default_instance_;
};
// ===================================================================


// ===================================================================

// broadcast

// required .server.broadcast.TYPE type = 1;
inline bool broadcast::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::server::broadcast_TYPE broadcast::type() const {
  return static_cast< ::server::broadcast_TYPE >(type_);
}
inline void broadcast::set_type(::server::broadcast_TYPE value) {
  assert(::server::broadcast_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::broadcast_TYPE>() {
  return ::server::broadcast_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2ebroadcast_2eproto__INCLUDED
