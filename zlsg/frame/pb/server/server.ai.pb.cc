// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.ai.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.ai.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server {

namespace {

const ::google::protobuf::Descriptor* ai_method_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_method_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_move_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_fix_move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_fix_move_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_timer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_timer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_distance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_distance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_attack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_defense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_defense_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_dead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_dead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_hide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_hide_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_master_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_master_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ai_run_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ai_run_reflection_ = NULL;
const ::google::protobuf::Descriptor* appeare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  appeare_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* appeare_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* advance_appeare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  advance_appeare_reflection_ = NULL;
const ::google::protobuf::Descriptor* into_appeare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  into_appeare_reflection_ = NULL;
const ::google::protobuf::Descriptor* after_story_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  after_story_reflection_ = NULL;
const ::google::protobuf::Descriptor* kill_monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kill_monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* touch_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  touch_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_time_week_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_time_week_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_time_day_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_time_day_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* touch_scense_object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  touch_scense_object_reflection_ = NULL;
const ::google::protobuf::Descriptor* find_monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  find_monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* appear_around_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  appear_around_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* suspend_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  suspend_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_npc_rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_npc_rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_npc_rules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_npc_rules_reflection_ = NULL;
const ::google::protobuf::Descriptor* appear_effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  appear_effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_effect_rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_effect_rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_effect_rules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_effect_rules_reflection_ = NULL;
const ::google::protobuf::Descriptor* dead_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dead_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* survive_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  survive_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* scene_timeout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scene_timeout_reflection_ = NULL;
const ::google::protobuf::Descriptor* dead_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dead_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_postion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_postion_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_success_rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_success_rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_failure_rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_failure_rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_over_rules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_over_rules_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AI_COMPARE_RULE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AI_TARGET_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eai_2eproto() {
  protobuf_AddDesc_server_2eai_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.ai.proto");
  GOOGLE_CHECK(file != NULL);
  ai_method_descriptor_ = file->message_type(0);
  static const int ai_method_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, count_),
  };
  ai_method_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_method_descriptor_,
      ai_method::default_instance_,
      ai_method_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_method, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_method));
  ai_move_descriptor_ = file->message_type(1);
  static const int ai_move_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_move, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_move, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_move, rand_),
  };
  ai_move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_move_descriptor_,
      ai_move::default_instance_,
      ai_move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_move));
  ai_fix_move_descriptor_ = file->message_type(2);
  static const int ai_fix_move_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, watch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, rand_),
  };
  ai_fix_move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_fix_move_descriptor_,
      ai_fix_move::default_instance_,
      ai_fix_move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_fix_move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_fix_move));
  ai_timer_descriptor_ = file->message_type(3);
  static const int ai_timer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_timer, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_timer, alarm_),
  };
  ai_timer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_timer_descriptor_,
      ai_timer::default_instance_,
      ai_timer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_timer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_timer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_timer));
  ai_status_descriptor_ = file->message_type(4);
  static const int ai_status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_status, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_status, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_status, each_),
  };
  ai_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_status_descriptor_,
      ai_status::default_instance_,
      ai_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_status));
  ai_attr_descriptor_ = file->message_type(5);
  static const int ai_attr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, less_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, greater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, equal_),
  };
  ai_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_attr_descriptor_,
      ai_attr::default_instance_,
      ai_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_attr));
  ai_distance_descriptor_ = file->message_type(6);
  static const int ai_distance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, less_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, greater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, equal_),
  };
  ai_distance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_distance_descriptor_,
      ai_distance::default_instance_,
      ai_distance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_distance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_distance));
  ai_attack_descriptor_ = file->message_type(7);
  static const int ai_attack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attack, attack_),
  };
  ai_attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_attack_descriptor_,
      ai_attack::default_instance_,
      ai_attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_attack));
  ai_defense_descriptor_ = file->message_type(8);
  static const int ai_defense_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_defense, defense_),
  };
  ai_defense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_defense_descriptor_,
      ai_defense::default_instance_,
      ai_defense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_defense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_defense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_defense));
  ai_dead_descriptor_ = file->message_type(9);
  static const int ai_dead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_dead, dead_),
  };
  ai_dead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_dead_descriptor_,
      ai_dead::default_instance_,
      ai_dead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_dead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_dead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_dead));
  ai_hide_descriptor_ = file->message_type(10);
  static const int ai_hide_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_hide, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_hide, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_hide, pet_),
  };
  ai_hide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_hide_descriptor_,
      ai_hide::default_instance_,
      ai_hide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_hide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_hide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_hide));
  ai_stop_descriptor_ = file->message_type(11);
  static const int ai_stop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_stop, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_stop, rand_),
  };
  ai_stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_stop_descriptor_,
      ai_stop::default_instance_,
      ai_stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_stop));
  ai_master_descriptor_ = file->message_type(12);
  static const int ai_master_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_master, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_master, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_master, rand_),
  };
  ai_master_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_master_descriptor_,
      ai_master::default_instance_,
      ai_master_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_master, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_master, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_master));
  ai_msg_descriptor_ = file->message_type(13);
  static const int ai_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, send_),
  };
  ai_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_msg_descriptor_,
      ai_msg::default_instance_,
      ai_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_msg));
  ai_data_descriptor_ = file->message_type(14);
  static const int ai_data_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, fix_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, force_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, master_),
  };
  ai_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_data_descriptor_,
      ai_data::default_instance_,
      ai_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_data));
  ai_info_descriptor_ = file->message_type(15);
  static const int ai_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_info, ai_),
  };
  ai_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_info_descriptor_,
      ai_info::default_instance_,
      ai_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_info));
  ai_run_descriptor_ = file->message_type(16);
  static const int ai_run_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, fix_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, master_),
  };
  ai_run_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ai_run_descriptor_,
      ai_run::default_instance_,
      ai_run_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ai_run, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ai_run));
  appeare_descriptor_ = file->message_type(17);
  static const int appeare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, t_),
  };
  appeare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      appeare_descriptor_,
      appeare::default_instance_,
      appeare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appeare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(appeare));
  appeare_type_descriptor_ = appeare_descriptor_->enum_type(0);
  advance_appeare_descriptor_ = file->message_type(18);
  static const int advance_appeare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(advance_appeare, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(advance_appeare, y_),
  };
  advance_appeare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      advance_appeare_descriptor_,
      advance_appeare::default_instance_,
      advance_appeare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(advance_appeare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(advance_appeare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(advance_appeare));
  into_appeare_descriptor_ = file->message_type(19);
  static const int into_appeare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, role_),
  };
  into_appeare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      into_appeare_descriptor_,
      into_appeare::default_instance_,
      into_appeare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(into_appeare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(into_appeare));
  after_story_descriptor_ = file->message_type(20);
  static const int after_story_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(after_story, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(after_story, tick_),
  };
  after_story_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      after_story_descriptor_,
      after_story::default_instance_,
      after_story_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(after_story, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(after_story, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(after_story));
  kill_monster_descriptor_ = file->message_type(21);
  static const int kill_monster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kill_monster, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kill_monster, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kill_monster, seconds_),
  };
  kill_monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kill_monster_descriptor_,
      kill_monster::default_instance_,
      kill_monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kill_monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kill_monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kill_monster));
  touch_task_descriptor_ = file->message_type(22);
  static const int touch_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_task, task_id_),
  };
  touch_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      touch_task_descriptor_,
      touch_task::default_instance_,
      touch_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(touch_task));
  start_activity_descriptor_ = file->message_type(23);
  static const int start_activity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_activity, activity_id_),
  };
  start_activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_activity_descriptor_,
      start_activity::default_instance_,
      start_activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_activity));
  start_time_week_descriptor_ = file->message_type(24);
  static const int start_time_week_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_week, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_week, t_),
  };
  start_time_week_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_time_week_descriptor_,
      start_time_week::default_instance_,
      start_time_week_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_week, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_week, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_time_week));
  start_time_day_descriptor_ = file->message_type(25);
  static const int start_time_day_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, c_),
  };
  start_time_day_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_time_day_descriptor_,
      start_time_day::default_instance_,
      start_time_day_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time_day, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_time_day));
  start_time_descriptor_ = file->message_type(26);
  static const int start_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time, time_),
  };
  start_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_time_descriptor_,
      start_time::default_instance_,
      start_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_time));
  get_item_descriptor_ = file->message_type(27);
  static const int get_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_item, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_item, tick_),
  };
  get_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_item_descriptor_,
      get_item::default_instance_,
      get_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_item));
  touch_scense_object_descriptor_ = file->message_type(28);
  static const int touch_scense_object_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_scense_object, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_scense_object, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_scense_object, tick_),
  };
  touch_scense_object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      touch_scense_object_descriptor_,
      touch_scense_object::default_instance_,
      touch_scense_object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_scense_object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(touch_scense_object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(touch_scense_object));
  find_monster_descriptor_ = file->message_type(29);
  static const int find_monster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_monster, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_monster, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_monster, seconds_),
  };
  find_monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      find_monster_descriptor_,
      find_monster::default_instance_,
      find_monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(find_monster));
  group_monster_descriptor_ = file->message_type(30);
  static const int group_monster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_monster, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_monster, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_monster, seconds_),
  };
  group_monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_monster_descriptor_,
      group_monster::default_instance_,
      group_monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_monster));
  appear_around_descriptor_ = file->message_type(31);
  static const int appear_around_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_around, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_around, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_around, tick_),
  };
  appear_around_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      appear_around_descriptor_,
      appear_around::default_instance_,
      appear_around_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_around, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_around, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(appear_around));
  create_msg_descriptor_ = file->message_type(32);
  static const int create_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_msg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_msg, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_msg, show_),
  };
  create_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_msg_descriptor_,
      create_msg::default_instance_,
      create_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_msg));
  suspend_create_descriptor_ = file->message_type(33);
  static const int suspend_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_create, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_create, count_),
  };
  suspend_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      suspend_create_descriptor_,
      suspend_create::default_instance_,
      suspend_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(suspend_create));
  create_npc_rule_descriptor_ = file->message_type(34);
  static const int create_npc_rule_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, into_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, story_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, find_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, around_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, suspend_),
  };
  create_npc_rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_npc_rule_descriptor_,
      create_npc_rule::default_instance_,
      create_npc_rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_npc_rule));
  create_npc_rules_descriptor_ = file->message_type(35);
  static const int create_npc_rules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rules, rules_),
  };
  create_npc_rules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_npc_rules_descriptor_,
      create_npc_rules::default_instance_,
      create_npc_rules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_rules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_npc_rules));
  appear_effect_descriptor_ = file->message_type(36);
  static const int appear_effect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, frequency_),
  };
  appear_effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      appear_effect_descriptor_,
      appear_effect::default_instance_,
      appear_effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(appear_effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(appear_effect));
  create_effect_rule_descriptor_ = file->message_type(37);
  static const int create_effect_rule_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, into_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, story_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, find_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, app_),
  };
  create_effect_rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_effect_rule_descriptor_,
      create_effect_rule::default_instance_,
      create_effect_rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_effect_rule));
  create_effect_rules_descriptor_ = file->message_type(38);
  static const int create_effect_rules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rules, rules_),
  };
  create_effect_rules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_effect_rules_descriptor_,
      create_effect_rules::default_instance_,
      create_effect_rules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_effect_rules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_effect_rules));
  dead_role_descriptor_ = file->message_type(39);
  static const int dead_role_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_role, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_role, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_role, tick_),
  };
  dead_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dead_role_descriptor_,
      dead_role::default_instance_,
      dead_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dead_role));
  survive_role_descriptor_ = file->message_type(40);
  static const int survive_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(survive_role, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(survive_role, tick_),
  };
  survive_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      survive_role_descriptor_,
      survive_role::default_instance_,
      survive_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(survive_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(survive_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(survive_role));
  scene_timeout_descriptor_ = file->message_type(41);
  static const int scene_timeout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_timeout, tenms_),
  };
  scene_timeout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scene_timeout_descriptor_,
      scene_timeout::default_instance_,
      scene_timeout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_timeout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_timeout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scene_timeout));
  dead_count_descriptor_ = file->message_type(42);
  static const int dead_count_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_count, count_),
  };
  dead_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dead_count_descriptor_,
      dead_count::default_instance_,
      dead_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dead_count));
  role_attribute_descriptor_ = file->message_type(43);
  static const int role_attribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attribute, value_),
  };
  role_attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_attribute_descriptor_,
      role_attribute::default_instance_,
      role_attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_attribute));
  role_postion_descriptor_ = file->message_type(44);
  static const int role_postion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, tick_),
  };
  role_postion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_postion_descriptor_,
      role_postion::default_instance_,
      role_postion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_postion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_postion));
  raid_success_rule_descriptor_ = file->message_type(45);
  static const int raid_success_rule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, survive_),
  };
  raid_success_rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_success_rule_descriptor_,
      raid_success_rule::default_instance_,
      raid_success_rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_success_rule));
  raid_failure_rule_descriptor_ = file->message_type(46);
  static const int raid_failure_rule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, pos_),
  };
  raid_failure_rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_failure_rule_descriptor_,
      raid_failure_rule::default_instance_,
      raid_failure_rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_failure_rule));
  raid_over_rules_descriptor_ = file->message_type(47);
  static const int raid_over_rules_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_over_rules, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_over_rules, failure_),
  };
  raid_over_rules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_over_rules_descriptor_,
      raid_over_rules::default_instance_,
      raid_over_rules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_over_rules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_over_rules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_over_rules));
  AI_COMPARE_RULE_descriptor_ = file->enum_type(0);
  AI_TARGET_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eai_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_method_descriptor_, &ai_method::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_move_descriptor_, &ai_move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_fix_move_descriptor_, &ai_fix_move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_timer_descriptor_, &ai_timer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_status_descriptor_, &ai_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_attr_descriptor_, &ai_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_distance_descriptor_, &ai_distance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_attack_descriptor_, &ai_attack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_defense_descriptor_, &ai_defense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_dead_descriptor_, &ai_dead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_hide_descriptor_, &ai_hide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_stop_descriptor_, &ai_stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_master_descriptor_, &ai_master::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_msg_descriptor_, &ai_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_data_descriptor_, &ai_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_info_descriptor_, &ai_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ai_run_descriptor_, &ai_run::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    appeare_descriptor_, &appeare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    advance_appeare_descriptor_, &advance_appeare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    into_appeare_descriptor_, &into_appeare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    after_story_descriptor_, &after_story::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kill_monster_descriptor_, &kill_monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    touch_task_descriptor_, &touch_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_activity_descriptor_, &start_activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_time_week_descriptor_, &start_time_week::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_time_day_descriptor_, &start_time_day::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_time_descriptor_, &start_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_item_descriptor_, &get_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    touch_scense_object_descriptor_, &touch_scense_object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    find_monster_descriptor_, &find_monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_monster_descriptor_, &group_monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    appear_around_descriptor_, &appear_around::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_msg_descriptor_, &create_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    suspend_create_descriptor_, &suspend_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_npc_rule_descriptor_, &create_npc_rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_npc_rules_descriptor_, &create_npc_rules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    appear_effect_descriptor_, &appear_effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_effect_rule_descriptor_, &create_effect_rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_effect_rules_descriptor_, &create_effect_rules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dead_role_descriptor_, &dead_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    survive_role_descriptor_, &survive_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scene_timeout_descriptor_, &scene_timeout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dead_count_descriptor_, &dead_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_attribute_descriptor_, &role_attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_postion_descriptor_, &role_postion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_success_rule_descriptor_, &raid_success_rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_failure_rule_descriptor_, &raid_failure_rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_over_rules_descriptor_, &raid_over_rules::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eai_2eproto() {
  delete ai_method::default_instance_;
  delete ai_method_reflection_;
  delete ai_move::default_instance_;
  delete ai_move_reflection_;
  delete ai_fix_move::default_instance_;
  delete ai_fix_move_reflection_;
  delete ai_timer::default_instance_;
  delete ai_timer_reflection_;
  delete ai_status::default_instance_;
  delete ai_status_reflection_;
  delete ai_attr::default_instance_;
  delete ai_attr_reflection_;
  delete ai_distance::default_instance_;
  delete ai_distance_reflection_;
  delete ai_attack::default_instance_;
  delete ai_attack_reflection_;
  delete ai_defense::default_instance_;
  delete ai_defense_reflection_;
  delete ai_dead::default_instance_;
  delete ai_dead_reflection_;
  delete ai_hide::default_instance_;
  delete ai_hide_reflection_;
  delete ai_stop::default_instance_;
  delete ai_stop_reflection_;
  delete ai_master::default_instance_;
  delete ai_master_reflection_;
  delete ai_msg::default_instance_;
  delete ai_msg_reflection_;
  delete ai_data::default_instance_;
  delete ai_data_reflection_;
  delete ai_info::default_instance_;
  delete ai_info_reflection_;
  delete ai_run::default_instance_;
  delete ai_run_reflection_;
  delete appeare::default_instance_;
  delete appeare_reflection_;
  delete advance_appeare::default_instance_;
  delete advance_appeare_reflection_;
  delete into_appeare::default_instance_;
  delete into_appeare_reflection_;
  delete after_story::default_instance_;
  delete after_story_reflection_;
  delete kill_monster::default_instance_;
  delete kill_monster_reflection_;
  delete touch_task::default_instance_;
  delete touch_task_reflection_;
  delete start_activity::default_instance_;
  delete start_activity_reflection_;
  delete start_time_week::default_instance_;
  delete start_time_week_reflection_;
  delete start_time_day::default_instance_;
  delete start_time_day_reflection_;
  delete start_time::default_instance_;
  delete start_time_reflection_;
  delete get_item::default_instance_;
  delete get_item_reflection_;
  delete touch_scense_object::default_instance_;
  delete touch_scense_object_reflection_;
  delete find_monster::default_instance_;
  delete find_monster_reflection_;
  delete group_monster::default_instance_;
  delete group_monster_reflection_;
  delete appear_around::default_instance_;
  delete appear_around_reflection_;
  delete create_msg::default_instance_;
  delete create_msg_reflection_;
  delete suspend_create::default_instance_;
  delete suspend_create_reflection_;
  delete create_npc_rule::default_instance_;
  delete create_npc_rule_reflection_;
  delete create_npc_rules::default_instance_;
  delete create_npc_rules_reflection_;
  delete appear_effect::default_instance_;
  delete appear_effect_reflection_;
  delete create_effect_rule::default_instance_;
  delete create_effect_rule_reflection_;
  delete create_effect_rules::default_instance_;
  delete create_effect_rules_reflection_;
  delete dead_role::default_instance_;
  delete dead_role_reflection_;
  delete survive_role::default_instance_;
  delete survive_role_reflection_;
  delete scene_timeout::default_instance_;
  delete scene_timeout_reflection_;
  delete dead_count::default_instance_;
  delete dead_count_reflection_;
  delete role_attribute::default_instance_;
  delete role_attribute_reflection_;
  delete role_postion::default_instance_;
  delete role_postion_reflection_;
  delete raid_success_rule::default_instance_;
  delete raid_success_rule_reflection_;
  delete raid_failure_rule::default_instance_;
  delete raid_failure_rule_reflection_;
  delete raid_over_rules::default_instance_;
  delete raid_over_rules_reflection_;
}

void protobuf_AddDesc_server_2eai_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017server.ai.proto\022\006server\"J\n\tai_method\022\014"
    "\n\004rand\030\001 \002(\r\022\020\n\010skill_id\030\002 \002(\r\022\016\n\006target"
    "\030\003 \002(\r\022\r\n\005count\030\004 \002(\r\"-\n\007ai_move\022\t\n\001x\030\001 "
    "\003(\r\022\t\n\001y\030\002 \003(\r\022\014\n\004rand\030\003 \002(\r\"T\n\013ai_fix_m"
    "ove\022\014\n\004grid\030\001 \003(\r\022\013\n\003atk\030\002 \003(\r\022\r\n\005watch\030"
    "\003 \003(\r\022\r\n\005block\030\004 \003(\r\022\014\n\004rand\030\005 \002(\r\"(\n\010ai"
    "_timer\022\r\n\005timer\030\001 \001(\r\022\r\n\005alarm\030\002 \001(\r\"8\n\t"
    "ai_status\022\016\n\006status\030\001 \002(\r\022\r\n\005timer\030\002 \001(\r"
    "\022\014\n\004each\030\003 \001(\r\"E\n\007ai_attr\022\014\n\004attr\030\001 \002(\r\022"
    "\014\n\004less\030\002 \001(\r\022\017\n\007greater\030\003 \001(\r\022\r\n\005equal\030"
    "\004 \001(\r\"\\\n\013ai_distance\022\020\n\010distance\030\001 \002(\r\022\r"
    "\n\005limit\030\002 \002(\r\022\014\n\004less\030\003 \001(\r\022\017\n\007greater\030\004"
    " \001(\r\022\r\n\005equal\030\005 \001(\r\"\033\n\tai_attack\022\016\n\006atta"
    "ck\030\001 \002(\r\"\035\n\nai_defense\022\017\n\007defense\030\001 \002(\r\""
    "\027\n\007ai_dead\022\014\n\004dead\030\001 \002(\010\"2\n\007ai_hide\022\014\n\004t"
    "ime\030\001 \002(\r\022\014\n\004rand\030\002 \002(\r\022\013\n\003pet\030\003 \002(\r\"%\n\007"
    "ai_stop\022\014\n\004time\030\001 \002(\r\022\014\n\004rand\030\002 \002(\r\"5\n\ta"
    "i_master\022\014\n\004type\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\014\n\004"
    "rand\030\003 \002(\r\"A\n\006ai_msg\022\014\n\004text\030\001 \002(\t\022\014\n\004sh"
    "ow\030\002 \002(\r\022\r\n\005delay\030\003 \002(\r\022\014\n\004send\030\004 \001(\010\"\251\004"
    "\n\007ai_data\022\037\n\005timer\030\001 \003(\0132\020.server.ai_tim"
    "er\022!\n\006status\030\002 \003(\0132\021.server.ai_status\022\035\n"
    "\004attr\030\003 \003(\0132\017.server.ai_attr\022%\n\010distance"
    "\030\004 \003(\0132\023.server.ai_distance\022!\n\006attack\030\005 "
    "\003(\0132\021.server.ai_attack\022#\n\007defense\030\006 \003(\0132"
    "\022.server.ai_defense\022\035\n\004dead\030\007 \001(\0132\017.serv"
    "er.ai_dead\022!\n\006method\030\010 \003(\0132\021.server.ai_m"
    "ethod\022\035\n\004move\030\t \003(\0132\017.server.ai_move\022%\n\010"
    "fix_move\030\n \003(\0132\023.server.ai_fix_move\022#\n\nf"
    "orce_move\030\013 \003(\0132\017.server.ai_move\022!\n\006targ"
    "et\030\014 \003(\0132\021.server.ai_attack\022\033\n\003msg\030\r \001(\013"
    "2\016.server.ai_msg\022\035\n\004stop\030\016 \001(\0132\017.server."
    "ai_stop\022\035\n\004hide\030\017 \001(\0132\017.server.ai_hide\022!"
    "\n\006master\030\020 \001(\0132\021.server.ai_master\"&\n\007ai_"
    "info\022\033\n\002ai\030\001 \003(\0132\017.server.ai_data\"\222\002\n\006ai"
    "_run\022!\n\006method\030\001 \001(\0132\021.server.ai_method\022"
    "\035\n\004move\030\002 \001(\0132\017.server.ai_move\022%\n\010fix_mo"
    "ve\030\003 \001(\0132\023.server.ai_fix_move\022!\n\006target\030"
    "\004 \001(\0132\021.server.ai_attack\022\033\n\003msg\030\005 \001(\0132\016."
    "server.ai_msg\022\035\n\004stop\030\006 \001(\0132\017.server.ai_"
    "stop\022\035\n\004hide\030\007 \001(\0132\017.server.ai_hide\022!\n\006m"
    "aster\030\010 \001(\0132\021.server.ai_master\"\235\001\n\007appea"
    "re\022\t\n\001x\030\001 \003(\005\022\t\n\001y\030\002 \003(\005\022\014\n\004roll\030\003 \003(\005\022\016"
    "\n\006effect\030\004 \003(\r\022\037\n\001t\030\005 \002(\0162\024.server.appea"
    "re.type\"=\n\004type\022\n\n\006normal\020\001\022\007\n\003sky\020\002\022\n\n\006"
    "ground\020\003\022\010\n\004view\020\004\022\n\n\006around\020\005\"\'\n\017advanc"
    "e_appeare\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"U\n\014into_"
    "appeare\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\020\n\010distanc"
    "e\030\003 \002(\005\022\017\n\007seconds\030\004 \001(\r\022\014\n\004role\030\005 \001(\r\"\'"
    "\n\013after_story\022\n\n\002id\030\001 \002(\r\022\014\n\004tick\030\002 \002(\r\""
    "C\n\014kill_monster\022\022\n\nmonster_id\030\001 \002(\r\022\016\n\006n"
    "umber\030\002 \002(\r\022\017\n\007seconds\030\003 \001(\r\"\035\n\ntouch_ta"
    "sk\022\017\n\007task_id\030\001 \002(\r\"%\n\016start_activity\022\023\n"
    "\013activity_id\030\001 \002(\r\"\?\n\017start_time_week\022\t\n"
    "\001d\030\001 \002(\r\022!\n\001t\030\002 \002(\0132\026.server.start_time_"
    "day\"<\n\016start_time_day\022\t\n\001h\030\001 \002(\r\022\t\n\001m\030\002 "
    "\002(\r\022\t\n\001s\030\003 \002(\r\022\t\n\001c\030\004 \002(\r\"\032\n\nstart_time\022"
    "\014\n\004time\030\001 \002(\r\"8\n\010get_item\022\017\n\007item_id\030\001 \002"
    "(\r\022\r\n\005count\030\002 \002(\r\022\014\n\004tick\030\003 \002(\r\"B\n\023touch"
    "_scense_object\022\016\n\006object\030\001 \002(\r\022\r\n\005count\030"
    "\002 \002(\r\022\014\n\004tick\030\003 \002(\r\"G\n\014find_monster\022\024\n\014c"
    "haracter_id\030\001 \002(\r\022\020\n\010distance\030\002 \001(\r\022\017\n\007s"
    "econds\030\003 \001(\r\"D\n\rgroup_monster\022\022\n\nmonster"
    "_id\030\001 \002(\r\022\016\n\006number\030\002 \002(\r\022\017\n\007seconds\030\003 \001"
    "(\r\";\n\rappear_around\022\n\n\002id\030\001 \002(\r\022\020\n\010dista"
    "nce\030\002 \002(\r\022\014\n\004tick\030\003 \002(\r\":\n\ncreate_msg\022\017\n"
    "\007content\030\001 \002(\t\022\r\n\005delay\030\002 \002(\r\022\014\n\004show\030\003 "
    "\002(\r\"-\n\016suspend_create\022\014\n\004type\030\001 \002(\r\022\r\n\005c"
    "ount\030\002 \002(\r\"\202\005\n\017create_npc_rule\022(\n\007advanc"
    "e\030\001 \003(\0132\027.server.advance_appeare\022\"\n\004into"
    "\030\002 \003(\0132\024.server.into_appeare\022\"\n\005story\030\003 "
    "\003(\0132\023.server.after_story\022\"\n\004kill\030\004 \003(\0132\024"
    ".server.kill_monster\022%\n\004week\030\005 \003(\0132\027.ser"
    "ver.start_time_week\022 \n\004task\030\006 \003(\0132\022.serv"
    "er.touch_task\022(\n\010activity\030\007 \003(\0132\026.server"
    ".start_activity\022 \n\004time\030\010 \003(\0132\022.server.s"
    "tart_time\022\036\n\004item\030\t \003(\0132\020.server.get_ite"
    "m\022+\n\006object\030\n \003(\0132\033.server.touch_scense_"
    "object\022\"\n\004find\030\013 \003(\0132\024.server.find_monst"
    "er\022&\n\007monster\030\014 \003(\0132\025.server.group_monst"
    "er\022\034\n\003app\030\r \003(\0132\017.server.appeare\022%\n\006arou"
    "nd\030\016 \003(\0132\025.server.appear_around\022\r\n\005clear"
    "\030\017 \001(\010\022\r\n\005index\030\020 \001(\r\022\037\n\003msg\030\021 \003(\0132\022.ser"
    "ver.create_msg\022\'\n\007suspend\030\022 \003(\0132\026.server"
    ".suspend_create\":\n\020create_npc_rules\022&\n\005r"
    "ules\030\001 \003(\0132\027.server.create_npc_rule\"D\n\ra"
    "ppear_effect\022\n\n\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\r\022\t\n\001y"
    "\030\003 \002(\r\022\021\n\tfrequency\030\004 \002(\r\"\374\003\n\022create_eff"
    "ect_rule\022(\n\007advance\030\001 \003(\0132\027.server.advan"
    "ce_appeare\022\"\n\004into\030\002 \003(\0132\024.server.into_a"
    "ppeare\022\"\n\005story\030\003 \003(\0132\023.server.after_sto"
    "ry\022\"\n\004kill\030\004 \003(\0132\024.server.kill_monster\022%"
    "\n\004week\030\005 \003(\0132\027.server.start_time_week\022 \n"
    "\004task\030\006 \003(\0132\022.server.touch_task\022(\n\010activ"
    "ity\030\007 \003(\0132\026.server.start_activity\022 \n\004tim"
    "e\030\010 \003(\0132\022.server.start_time\022\036\n\004item\030\t \003("
    "\0132\020.server.get_item\022+\n\006object\030\n \003(\0132\033.se"
    "rver.touch_scense_object\022\"\n\004find\030\013 \003(\0132\024"
    ".server.find_monster\022&\n\007monster\030\014 \003(\0132\025."
    "server.group_monster\022\"\n\003app\030\r \003(\0132\025.serv"
    "er.appear_effect\"@\n\023create_effect_rules\022"
    ")\n\005rules\030\001 \003(\0132\032.server.create_effect_ru"
    "le\"4\n\tdead_role\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002"
    "(\r\022\014\n\004tick\030\003 \002(\r\"+\n\014survive_role\022\r\n\005coun"
    "t\030\001 \002(\r\022\014\n\004tick\030\002 \002(\r\"\036\n\rscene_timeout\022\r"
    "\n\005tenms\030\001 \002(\r\"\033\n\ndead_count\022\r\n\005count\030\001 \002"
    "(\r\"9\n\016role_attribute\022\n\n\002id\030\001 \002(\r\022\014\n\004type"
    "\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\"`\n\014role_postion\022\n\n"
    "\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\r\022\t\n\001y\030\003 \002(\r\022\020\n\010dista"
    "nce\030\004 \002(\r\022\016\n\006number\030\005 \002(\r\022\014\n\004tick\030\006 \002(\r\""
    "\206\002\n\021raid_success_rule\022\037\n\004role\030\001 \003(\0132\021.se"
    "rver.dead_role\022\036\n\004item\030\002 \003(\0132\020.server.ge"
    "t_item\022 \n\005touch\030\003 \003(\0132\021.server.dead_role"
    "\022\037\n\005timer\030\004 \003(\0132\020.server.ai_timer\022!\n\003pos"
    "\030\005 \003(\0132\024.server.role_postion\022#\n\005block\030\006 "
    "\003(\0132\024.server.role_postion\022%\n\007survive\030\007 \003"
    "(\0132\024.server.survive_role\"\311\001\n\021raid_failur"
    "e_rule\022 \n\004role\030\001 \003(\0132\022.server.dead_count"
    "\022&\n\007timeout\030\002 \003(\0132\025.server.scene_timeout"
    "\022!\n\005count\030\003 \003(\0132\022.server.dead_count\022$\n\004a"
    "ttr\030\004 \003(\0132\026.server.role_attribute\022!\n\003pos"
    "\030\005 \003(\0132\024.server.role_postion\"i\n\017raid_ove"
    "r_rules\022*\n\007success\030\001 \003(\0132\031.server.raid_s"
    "uccess_rule\022*\n\007failure\030\002 \003(\0132\031.server.ra"
    "id_failure_rule*\?\n\017AI_COMPARE_RULE\022\014\n\010AC"
    "R_LESS\020\000\022\017\n\013ACR_GREATER\020\001\022\r\n\tACR_EQUAL\020\002"
    "*,\n\016AI_TARGET_TYPE\022\013\n\007ATT_OWN\020\000\022\r\n\tATT_E"
    "NEMY\020\001", 5086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.ai.proto", &protobuf_RegisterTypes);
  ai_method::default_instance_ = new ai_method();
  ai_move::default_instance_ = new ai_move();
  ai_fix_move::default_instance_ = new ai_fix_move();
  ai_timer::default_instance_ = new ai_timer();
  ai_status::default_instance_ = new ai_status();
  ai_attr::default_instance_ = new ai_attr();
  ai_distance::default_instance_ = new ai_distance();
  ai_attack::default_instance_ = new ai_attack();
  ai_defense::default_instance_ = new ai_defense();
  ai_dead::default_instance_ = new ai_dead();
  ai_hide::default_instance_ = new ai_hide();
  ai_stop::default_instance_ = new ai_stop();
  ai_master::default_instance_ = new ai_master();
  ai_msg::default_instance_ = new ai_msg();
  ai_data::default_instance_ = new ai_data();
  ai_info::default_instance_ = new ai_info();
  ai_run::default_instance_ = new ai_run();
  appeare::default_instance_ = new appeare();
  advance_appeare::default_instance_ = new advance_appeare();
  into_appeare::default_instance_ = new into_appeare();
  after_story::default_instance_ = new after_story();
  kill_monster::default_instance_ = new kill_monster();
  touch_task::default_instance_ = new touch_task();
  start_activity::default_instance_ = new start_activity();
  start_time_week::default_instance_ = new start_time_week();
  start_time_day::default_instance_ = new start_time_day();
  start_time::default_instance_ = new start_time();
  get_item::default_instance_ = new get_item();
  touch_scense_object::default_instance_ = new touch_scense_object();
  find_monster::default_instance_ = new find_monster();
  group_monster::default_instance_ = new group_monster();
  appear_around::default_instance_ = new appear_around();
  create_msg::default_instance_ = new create_msg();
  suspend_create::default_instance_ = new suspend_create();
  create_npc_rule::default_instance_ = new create_npc_rule();
  create_npc_rules::default_instance_ = new create_npc_rules();
  appear_effect::default_instance_ = new appear_effect();
  create_effect_rule::default_instance_ = new create_effect_rule();
  create_effect_rules::default_instance_ = new create_effect_rules();
  dead_role::default_instance_ = new dead_role();
  survive_role::default_instance_ = new survive_role();
  scene_timeout::default_instance_ = new scene_timeout();
  dead_count::default_instance_ = new dead_count();
  role_attribute::default_instance_ = new role_attribute();
  role_postion::default_instance_ = new role_postion();
  raid_success_rule::default_instance_ = new raid_success_rule();
  raid_failure_rule::default_instance_ = new raid_failure_rule();
  raid_over_rules::default_instance_ = new raid_over_rules();
  ai_method::default_instance_->InitAsDefaultInstance();
  ai_move::default_instance_->InitAsDefaultInstance();
  ai_fix_move::default_instance_->InitAsDefaultInstance();
  ai_timer::default_instance_->InitAsDefaultInstance();
  ai_status::default_instance_->InitAsDefaultInstance();
  ai_attr::default_instance_->InitAsDefaultInstance();
  ai_distance::default_instance_->InitAsDefaultInstance();
  ai_attack::default_instance_->InitAsDefaultInstance();
  ai_defense::default_instance_->InitAsDefaultInstance();
  ai_dead::default_instance_->InitAsDefaultInstance();
  ai_hide::default_instance_->InitAsDefaultInstance();
  ai_stop::default_instance_->InitAsDefaultInstance();
  ai_master::default_instance_->InitAsDefaultInstance();
  ai_msg::default_instance_->InitAsDefaultInstance();
  ai_data::default_instance_->InitAsDefaultInstance();
  ai_info::default_instance_->InitAsDefaultInstance();
  ai_run::default_instance_->InitAsDefaultInstance();
  appeare::default_instance_->InitAsDefaultInstance();
  advance_appeare::default_instance_->InitAsDefaultInstance();
  into_appeare::default_instance_->InitAsDefaultInstance();
  after_story::default_instance_->InitAsDefaultInstance();
  kill_monster::default_instance_->InitAsDefaultInstance();
  touch_task::default_instance_->InitAsDefaultInstance();
  start_activity::default_instance_->InitAsDefaultInstance();
  start_time_week::default_instance_->InitAsDefaultInstance();
  start_time_day::default_instance_->InitAsDefaultInstance();
  start_time::default_instance_->InitAsDefaultInstance();
  get_item::default_instance_->InitAsDefaultInstance();
  touch_scense_object::default_instance_->InitAsDefaultInstance();
  find_monster::default_instance_->InitAsDefaultInstance();
  group_monster::default_instance_->InitAsDefaultInstance();
  appear_around::default_instance_->InitAsDefaultInstance();
  create_msg::default_instance_->InitAsDefaultInstance();
  suspend_create::default_instance_->InitAsDefaultInstance();
  create_npc_rule::default_instance_->InitAsDefaultInstance();
  create_npc_rules::default_instance_->InitAsDefaultInstance();
  appear_effect::default_instance_->InitAsDefaultInstance();
  create_effect_rule::default_instance_->InitAsDefaultInstance();
  create_effect_rules::default_instance_->InitAsDefaultInstance();
  dead_role::default_instance_->InitAsDefaultInstance();
  survive_role::default_instance_->InitAsDefaultInstance();
  scene_timeout::default_instance_->InitAsDefaultInstance();
  dead_count::default_instance_->InitAsDefaultInstance();
  role_attribute::default_instance_->InitAsDefaultInstance();
  role_postion::default_instance_->InitAsDefaultInstance();
  raid_success_rule::default_instance_->InitAsDefaultInstance();
  raid_failure_rule::default_instance_->InitAsDefaultInstance();
  raid_over_rules::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eai_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eai_2eproto {
  StaticDescriptorInitializer_server_2eai_2eproto() {
    protobuf_AddDesc_server_2eai_2eproto();
  }
} static_descriptor_initializer_server_2eai_2eproto_;
const ::google::protobuf::EnumDescriptor* AI_COMPARE_RULE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI_COMPARE_RULE_descriptor_;
}
bool AI_COMPARE_RULE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AI_TARGET_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI_TARGET_TYPE_descriptor_;
}
bool AI_TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ai_method::kRandFieldNumber;
const int ai_method::kSkillIdFieldNumber;
const int ai_method::kTargetFieldNumber;
const int ai_method::kCountFieldNumber;
#endif  // !_MSC_VER

ai_method::ai_method()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_method::InitAsDefaultInstance() {
}

ai_method::ai_method(const ai_method& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_method::SharedCtor() {
  _cached_size_ = 0;
  rand_ = 0u;
  skill_id_ = 0u;
  target_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_method::~ai_method() {
  SharedDtor();
}

void ai_method::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_method::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_method::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_method_descriptor_;
}

const ai_method& ai_method::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_method* ai_method::default_instance_ = NULL;

ai_method* ai_method::New() const {
  return new ai_method;
}

void ai_method::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rand_ = 0u;
    skill_id_ = 0u;
    target_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_method::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // required uint32 target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_method::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rand = 1;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rand(), output);
  }

  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // required uint32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_method::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rand = 1;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rand(), target);
  }

  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  // required uint32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_method::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rand = 1;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

    // required uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_method::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_method* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_method*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_method::MergeFrom(const ai_method& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_method::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_method::CopyFrom(const ai_method& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_method::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ai_method::Swap(ai_method* other) {
  if (other != this) {
    std::swap(rand_, other->rand_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(target_, other->target_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_method::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_method_descriptor_;
  metadata.reflection = ai_method_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_move::kXFieldNumber;
const int ai_move::kYFieldNumber;
const int ai_move::kRandFieldNumber;
#endif  // !_MSC_VER

ai_move::ai_move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_move::InitAsDefaultInstance() {
}

ai_move::ai_move(const ai_move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_move::SharedCtor() {
  _cached_size_ = 0;
  rand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_move::~ai_move() {
  SharedDtor();
}

void ai_move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_move_descriptor_;
}

const ai_move& ai_move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_move* ai_move::default_instance_ = NULL;

ai_move* ai_move::New() const {
  return new ai_move;
}

void ai_move::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    rand_ = 0u;
  }
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_x;
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // repeated uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        if (input->ExpectTag(24)) goto parse_rand;
        break;
      }

      // required uint32 rand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->x(i), output);
  }

  // repeated uint32 y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->y(i), output);
  }

  // required uint32 rand = 3;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->x(i), target);
  }

  // repeated uint32 y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->y(i), target);
  }

  // required uint32 rand = 3;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 rand = 3;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

  }
  // repeated uint32 x = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->x(i));
    }
    total_size += 1 * this->x_size() + data_size;
  }

  // repeated uint32 y = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->y(i));
    }
    total_size += 1 * this->y_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_move::MergeFrom(const ai_move& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_move::CopyFrom(const ai_move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ai_move::Swap(ai_move* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    std::swap(rand_, other->rand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_move_descriptor_;
  metadata.reflection = ai_move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_fix_move::kGridFieldNumber;
const int ai_fix_move::kAtkFieldNumber;
const int ai_fix_move::kWatchFieldNumber;
const int ai_fix_move::kBlockFieldNumber;
const int ai_fix_move::kRandFieldNumber;
#endif  // !_MSC_VER

ai_fix_move::ai_fix_move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_fix_move::InitAsDefaultInstance() {
}

ai_fix_move::ai_fix_move(const ai_fix_move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_fix_move::SharedCtor() {
  _cached_size_ = 0;
  rand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_fix_move::~ai_fix_move() {
  SharedDtor();
}

void ai_fix_move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_fix_move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_fix_move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_fix_move_descriptor_;
}

const ai_fix_move& ai_fix_move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_fix_move* ai_fix_move::default_instance_ = NULL;

ai_fix_move* ai_fix_move::New() const {
  return new ai_fix_move;
}

void ai_fix_move::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    rand_ = 0u;
  }
  grid_.Clear();
  atk_.Clear();
  watch_.Clear();
  block_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_fix_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_grid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_grid;
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // repeated uint32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_atk())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atk())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        if (input->ExpectTag(24)) goto parse_watch;
        break;
      }

      // repeated uint32 watch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_watch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_watch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_watch;
        if (input->ExpectTag(32)) goto parse_block;
        break;
      }

      // repeated uint32 block = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_block())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_block())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_block;
        if (input->ExpectTag(40)) goto parse_rand;
        break;
      }

      // required uint32 rand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_fix_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->grid(i), output);
  }

  // repeated uint32 atk = 2;
  for (int i = 0; i < this->atk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->atk(i), output);
  }

  // repeated uint32 watch = 3;
  for (int i = 0; i < this->watch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->watch(i), output);
  }

  // repeated uint32 block = 4;
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->block(i), output);
  }

  // required uint32 rand = 5;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_fix_move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->grid(i), target);
  }

  // repeated uint32 atk = 2;
  for (int i = 0; i < this->atk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->atk(i), target);
  }

  // repeated uint32 watch = 3;
  for (int i = 0; i < this->watch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->watch(i), target);
  }

  // repeated uint32 block = 4;
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->block(i), target);
  }

  // required uint32 rand = 5;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_fix_move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required uint32 rand = 5;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

  }
  // repeated uint32 grid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->grid(i));
    }
    total_size += 1 * this->grid_size() + data_size;
  }

  // repeated uint32 atk = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->atk_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->atk(i));
    }
    total_size += 1 * this->atk_size() + data_size;
  }

  // repeated uint32 watch = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->watch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->watch(i));
    }
    total_size += 1 * this->watch_size() + data_size;
  }

  // repeated uint32 block = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->block(i));
    }
    total_size += 1 * this->block_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_fix_move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_fix_move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_fix_move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_fix_move::MergeFrom(const ai_fix_move& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_.MergeFrom(from.grid_);
  atk_.MergeFrom(from.atk_);
  watch_.MergeFrom(from.watch_);
  block_.MergeFrom(from.block_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_fix_move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_fix_move::CopyFrom(const ai_fix_move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_fix_move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void ai_fix_move::Swap(ai_fix_move* other) {
  if (other != this) {
    grid_.Swap(&other->grid_);
    atk_.Swap(&other->atk_);
    watch_.Swap(&other->watch_);
    block_.Swap(&other->block_);
    std::swap(rand_, other->rand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_fix_move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_fix_move_descriptor_;
  metadata.reflection = ai_fix_move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_timer::kTimerFieldNumber;
const int ai_timer::kAlarmFieldNumber;
#endif  // !_MSC_VER

ai_timer::ai_timer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_timer::InitAsDefaultInstance() {
}

ai_timer::ai_timer(const ai_timer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_timer::SharedCtor() {
  _cached_size_ = 0;
  timer_ = 0u;
  alarm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_timer::~ai_timer() {
  SharedDtor();
}

void ai_timer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_timer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_timer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_timer_descriptor_;
}

const ai_timer& ai_timer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_timer* ai_timer::default_instance_ = NULL;

ai_timer* ai_timer::New() const {
  return new ai_timer;
}

void ai_timer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timer_ = 0u;
    alarm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_timer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alarm;
        break;
      }

      // optional uint32 alarm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarm_)));
          set_has_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_timer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timer = 1;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timer(), output);
  }

  // optional uint32 alarm = 2;
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->alarm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_timer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timer = 1;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timer(), target);
  }

  // optional uint32 alarm = 2;
  if (has_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->alarm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_timer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timer = 1;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timer());
    }

    // optional uint32 alarm = 2;
    if (has_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_timer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_timer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_timer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_timer::MergeFrom(const ai_timer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_alarm()) {
      set_alarm(from.alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_timer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_timer::CopyFrom(const ai_timer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_timer::IsInitialized() const {

  return true;
}

void ai_timer::Swap(ai_timer* other) {
  if (other != this) {
    std::swap(timer_, other->timer_);
    std::swap(alarm_, other->alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_timer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_timer_descriptor_;
  metadata.reflection = ai_timer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_status::kStatusFieldNumber;
const int ai_status::kTimerFieldNumber;
const int ai_status::kEachFieldNumber;
#endif  // !_MSC_VER

ai_status::ai_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_status::InitAsDefaultInstance() {
}

ai_status::ai_status(const ai_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_status::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  timer_ = 0u;
  each_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_status::~ai_status() {
  SharedDtor();
}

void ai_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_status_descriptor_;
}

const ai_status& ai_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_status* ai_status::default_instance_ = NULL;

ai_status* ai_status::New() const {
  return new ai_status;
}

void ai_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    timer_ = 0u;
    each_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timer;
        break;
      }

      // optional uint32 timer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_each;
        break;
      }

      // optional uint32 each = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_each:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &each_)));
          set_has_each();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 timer = 2;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timer(), output);
  }

  // optional uint32 each = 3;
  if (has_each()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->each(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 timer = 2;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timer(), target);
  }

  // optional uint32 each = 3;
  if (has_each()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->each(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 timer = 2;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timer());
    }

    // optional uint32 each = 3;
    if (has_each()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->each());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_status::MergeFrom(const ai_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_each()) {
      set_each(from.each());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_status::CopyFrom(const ai_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ai_status::Swap(ai_status* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(timer_, other->timer_);
    std::swap(each_, other->each_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_status_descriptor_;
  metadata.reflection = ai_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_attr::kAttrFieldNumber;
const int ai_attr::kLessFieldNumber;
const int ai_attr::kGreaterFieldNumber;
const int ai_attr::kEqualFieldNumber;
#endif  // !_MSC_VER

ai_attr::ai_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_attr::InitAsDefaultInstance() {
}

ai_attr::ai_attr(const ai_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_attr::SharedCtor() {
  _cached_size_ = 0;
  attr_ = 0u;
  less_ = 0u;
  greater_ = 0u;
  equal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_attr::~ai_attr() {
  SharedDtor();
}

void ai_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_attr_descriptor_;
}

const ai_attr& ai_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_attr* ai_attr::default_instance_ = NULL;

ai_attr* ai_attr::New() const {
  return new ai_attr;
}

void ai_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_ = 0u;
    less_ = 0u;
    greater_ = 0u;
    equal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_less;
        break;
      }

      // optional uint32 less = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_less:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &less_)));
          set_has_less();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_greater;
        break;
      }

      // optional uint32 greater = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_greater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &greater_)));
          set_has_greater();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equal;
        break;
      }

      // optional uint32 equal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equal_)));
          set_has_equal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attr = 1;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr(), output);
  }

  // optional uint32 less = 2;
  if (has_less()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->less(), output);
  }

  // optional uint32 greater = 3;
  if (has_greater()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->greater(), output);
  }

  // optional uint32 equal = 4;
  if (has_equal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->equal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attr = 1;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr(), target);
  }

  // optional uint32 less = 2;
  if (has_less()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->less(), target);
  }

  // optional uint32 greater = 3;
  if (has_greater()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->greater(), target);
  }

  // optional uint32 equal = 4;
  if (has_equal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->equal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attr = 1;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr());
    }

    // optional uint32 less = 2;
    if (has_less()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->less());
    }

    // optional uint32 greater = 3;
    if (has_greater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->greater());
    }

    // optional uint32 equal = 4;
    if (has_equal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_attr::MergeFrom(const ai_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_less()) {
      set_less(from.less());
    }
    if (from.has_greater()) {
      set_greater(from.greater());
    }
    if (from.has_equal()) {
      set_equal(from.equal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_attr::CopyFrom(const ai_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ai_attr::Swap(ai_attr* other) {
  if (other != this) {
    std::swap(attr_, other->attr_);
    std::swap(less_, other->less_);
    std::swap(greater_, other->greater_);
    std::swap(equal_, other->equal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_attr_descriptor_;
  metadata.reflection = ai_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_distance::kDistanceFieldNumber;
const int ai_distance::kLimitFieldNumber;
const int ai_distance::kLessFieldNumber;
const int ai_distance::kGreaterFieldNumber;
const int ai_distance::kEqualFieldNumber;
#endif  // !_MSC_VER

ai_distance::ai_distance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_distance::InitAsDefaultInstance() {
}

ai_distance::ai_distance(const ai_distance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_distance::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0u;
  limit_ = 0u;
  less_ = 0u;
  greater_ = 0u;
  equal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_distance::~ai_distance() {
  SharedDtor();
}

void ai_distance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_distance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_distance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_distance_descriptor_;
}

const ai_distance& ai_distance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_distance* ai_distance::default_instance_ = NULL;

ai_distance* ai_distance::New() const {
  return new ai_distance;
}

void ai_distance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    distance_ = 0u;
    limit_ = 0u;
    less_ = 0u;
    greater_ = 0u;
    equal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_distance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 distance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_less;
        break;
      }

      // optional uint32 less = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_less:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &less_)));
          set_has_less();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_greater;
        break;
      }

      // optional uint32 greater = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_greater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &greater_)));
          set_has_greater();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equal;
        break;
      }

      // optional uint32 equal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equal_)));
          set_has_equal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_distance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->distance(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // optional uint32 less = 3;
  if (has_less()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->less(), output);
  }

  // optional uint32 greater = 4;
  if (has_greater()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->greater(), output);
  }

  // optional uint32 equal = 5;
  if (has_equal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->equal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_distance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->distance(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // optional uint32 less = 3;
  if (has_less()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->less(), target);
  }

  // optional uint32 greater = 4;
  if (has_greater()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->greater(), target);
  }

  // optional uint32 equal = 5;
  if (has_equal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->equal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_distance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 distance = 1;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional uint32 less = 3;
    if (has_less()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->less());
    }

    // optional uint32 greater = 4;
    if (has_greater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->greater());
    }

    // optional uint32 equal = 5;
    if (has_equal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_distance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_distance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_distance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_distance::MergeFrom(const ai_distance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_less()) {
      set_less(from.less());
    }
    if (from.has_greater()) {
      set_greater(from.greater());
    }
    if (from.has_equal()) {
      set_equal(from.equal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_distance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_distance::CopyFrom(const ai_distance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_distance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ai_distance::Swap(ai_distance* other) {
  if (other != this) {
    std::swap(distance_, other->distance_);
    std::swap(limit_, other->limit_);
    std::swap(less_, other->less_);
    std::swap(greater_, other->greater_);
    std::swap(equal_, other->equal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_distance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_distance_descriptor_;
  metadata.reflection = ai_distance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_attack::kAttackFieldNumber;
#endif  // !_MSC_VER

ai_attack::ai_attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_attack::InitAsDefaultInstance() {
}

ai_attack::ai_attack(const ai_attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_attack::SharedCtor() {
  _cached_size_ = 0;
  attack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_attack::~ai_attack() {
  SharedDtor();
}

void ai_attack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_attack_descriptor_;
}

const ai_attack& ai_attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_attack* ai_attack::default_instance_ = NULL;

ai_attack* ai_attack::New() const {
  return new ai_attack;
}

void ai_attack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_attack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_attack::MergeFrom(const ai_attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_attack::CopyFrom(const ai_attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_attack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ai_attack::Swap(ai_attack* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_attack_descriptor_;
  metadata.reflection = ai_attack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_defense::kDefenseFieldNumber;
#endif  // !_MSC_VER

ai_defense::ai_defense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_defense::InitAsDefaultInstance() {
}

ai_defense::ai_defense(const ai_defense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_defense::SharedCtor() {
  _cached_size_ = 0;
  defense_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_defense::~ai_defense() {
  SharedDtor();
}

void ai_defense::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_defense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_defense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_defense_descriptor_;
}

const ai_defense& ai_defense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_defense* ai_defense::default_instance_ = NULL;

ai_defense* ai_defense::New() const {
  return new ai_defense;
}

void ai_defense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    defense_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_defense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 defense = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_defense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 defense = 1;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->defense(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_defense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 defense = 1;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->defense(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_defense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 defense = 1;
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_defense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_defense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_defense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_defense::MergeFrom(const ai_defense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defense()) {
      set_defense(from.defense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_defense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_defense::CopyFrom(const ai_defense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_defense::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ai_defense::Swap(ai_defense* other) {
  if (other != this) {
    std::swap(defense_, other->defense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_defense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_defense_descriptor_;
  metadata.reflection = ai_defense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_dead::kDeadFieldNumber;
#endif  // !_MSC_VER

ai_dead::ai_dead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_dead::InitAsDefaultInstance() {
}

ai_dead::ai_dead(const ai_dead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_dead::SharedCtor() {
  _cached_size_ = 0;
  dead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_dead::~ai_dead() {
  SharedDtor();
}

void ai_dead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_dead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_dead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_dead_descriptor_;
}

const ai_dead& ai_dead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_dead* ai_dead::default_instance_ = NULL;

ai_dead* ai_dead::New() const {
  return new ai_dead;
}

void ai_dead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dead_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_dead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool dead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_dead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool dead = 1;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_dead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool dead = 1;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_dead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool dead = 1;
    if (has_dead()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_dead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_dead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_dead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_dead::MergeFrom(const ai_dead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dead()) {
      set_dead(from.dead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_dead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_dead::CopyFrom(const ai_dead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_dead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ai_dead::Swap(ai_dead* other) {
  if (other != this) {
    std::swap(dead_, other->dead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_dead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_dead_descriptor_;
  metadata.reflection = ai_dead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_hide::kTimeFieldNumber;
const int ai_hide::kRandFieldNumber;
const int ai_hide::kPetFieldNumber;
#endif  // !_MSC_VER

ai_hide::ai_hide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_hide::InitAsDefaultInstance() {
}

ai_hide::ai_hide(const ai_hide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_hide::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  rand_ = 0u;
  pet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_hide::~ai_hide() {
  SharedDtor();
}

void ai_hide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_hide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_hide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_hide_descriptor_;
}

const ai_hide& ai_hide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_hide* ai_hide::default_instance_ = NULL;

ai_hide* ai_hide::New() const {
  return new ai_hide;
}

void ai_hide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    rand_ = 0u;
    pet_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_hide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand;
        break;
      }

      // required uint32 rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet;
        break;
      }

      // required uint32 pet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_)));
          set_has_pet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_hide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 rand = 2;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rand(), output);
  }

  // required uint32 pet = 3;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_hide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 rand = 2;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rand(), target);
  }

  // required uint32 pet = 3;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_hide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 rand = 2;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

    // required uint32 pet = 3;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_hide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_hide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_hide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_hide::MergeFrom(const ai_hide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_pet()) {
      set_pet(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_hide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_hide::CopyFrom(const ai_hide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_hide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ai_hide::Swap(ai_hide* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(rand_, other->rand_);
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_hide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_hide_descriptor_;
  metadata.reflection = ai_hide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_stop::kTimeFieldNumber;
const int ai_stop::kRandFieldNumber;
#endif  // !_MSC_VER

ai_stop::ai_stop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_stop::InitAsDefaultInstance() {
}

ai_stop::ai_stop(const ai_stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_stop::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  rand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_stop::~ai_stop() {
  SharedDtor();
}

void ai_stop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_stop_descriptor_;
}

const ai_stop& ai_stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_stop* ai_stop::default_instance_ = NULL;

ai_stop* ai_stop::New() const {
  return new ai_stop;
}

void ai_stop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    rand_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand;
        break;
      }

      // required uint32 rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 rand = 2;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 rand = 2;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 rand = 2;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_stop::MergeFrom(const ai_stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_stop::CopyFrom(const ai_stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ai_stop::Swap(ai_stop* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(rand_, other->rand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_stop_descriptor_;
  metadata.reflection = ai_stop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_master::kTypeFieldNumber;
const int ai_master::kTimeFieldNumber;
const int ai_master::kRandFieldNumber;
#endif  // !_MSC_VER

ai_master::ai_master()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_master::InitAsDefaultInstance() {
}

ai_master::ai_master(const ai_master& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_master::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  time_ = 0u;
  rand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_master::~ai_master() {
  SharedDtor();
}

void ai_master::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_master::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_master::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_master_descriptor_;
}

const ai_master& ai_master::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_master* ai_master::default_instance_ = NULL;

ai_master* ai_master::New() const {
  return new ai_master;
}

void ai_master::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    time_ = 0u;
    rand_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_master::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rand;
        break;
      }

      // required uint32 rand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_master::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 rand = 3;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_master::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint32 rand = 3;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_master::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 rand = 3;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_master::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_master* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_master*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_master::MergeFrom(const ai_master& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_master::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_master::CopyFrom(const ai_master& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_master::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ai_master::Swap(ai_master* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(rand_, other->rand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_master::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_master_descriptor_;
  metadata.reflection = ai_master_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_msg::kTextFieldNumber;
const int ai_msg::kShowFieldNumber;
const int ai_msg::kDelayFieldNumber;
const int ai_msg::kSendFieldNumber;
#endif  // !_MSC_VER

ai_msg::ai_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_msg::InitAsDefaultInstance() {
}

ai_msg::ai_msg(const ai_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_msg::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_ = 0u;
  delay_ = 0u;
  send_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_msg::~ai_msg() {
  SharedDtor();
}

void ai_msg::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ai_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_msg_descriptor_;
}

const ai_msg& ai_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_msg* ai_msg::default_instance_ = NULL;

ai_msg* ai_msg::New() const {
  return new ai_msg;
}

void ai_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    show_ = 0u;
    delay_ = 0u;
    send_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // required uint32 show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delay;
        break;
      }

      // required uint32 delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send;
        break;
      }

      // optional bool send = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_)));
          set_has_send();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // required uint32 show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->show(), output);
  }

  // required uint32 delay = 3;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delay(), output);
  }

  // optional bool send = 4;
  if (has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->send(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required uint32 show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->show(), target);
  }

  // required uint32 delay = 3;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delay(), target);
  }

  // optional bool send = 4;
  if (has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->send(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // required uint32 show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }

    // required uint32 delay = 3;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional bool send = 4;
    if (has_send()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_msg::MergeFrom(const ai_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_send()) {
      set_send(from.send());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_msg::CopyFrom(const ai_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ai_msg::Swap(ai_msg* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(show_, other->show_);
    std::swap(delay_, other->delay_);
    std::swap(send_, other->send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_msg_descriptor_;
  metadata.reflection = ai_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_data::kTimerFieldNumber;
const int ai_data::kStatusFieldNumber;
const int ai_data::kAttrFieldNumber;
const int ai_data::kDistanceFieldNumber;
const int ai_data::kAttackFieldNumber;
const int ai_data::kDefenseFieldNumber;
const int ai_data::kDeadFieldNumber;
const int ai_data::kMethodFieldNumber;
const int ai_data::kMoveFieldNumber;
const int ai_data::kFixMoveFieldNumber;
const int ai_data::kForceMoveFieldNumber;
const int ai_data::kTargetFieldNumber;
const int ai_data::kMsgFieldNumber;
const int ai_data::kStopFieldNumber;
const int ai_data::kHideFieldNumber;
const int ai_data::kMasterFieldNumber;
#endif  // !_MSC_VER

ai_data::ai_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_data::InitAsDefaultInstance() {
  dead_ = const_cast< ::server::ai_dead*>(&::server::ai_dead::default_instance());
  msg_ = const_cast< ::server::ai_msg*>(&::server::ai_msg::default_instance());
  stop_ = const_cast< ::server::ai_stop*>(&::server::ai_stop::default_instance());
  hide_ = const_cast< ::server::ai_hide*>(&::server::ai_hide::default_instance());
  master_ = const_cast< ::server::ai_master*>(&::server::ai_master::default_instance());
}

ai_data::ai_data(const ai_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_data::SharedCtor() {
  _cached_size_ = 0;
  dead_ = NULL;
  msg_ = NULL;
  stop_ = NULL;
  hide_ = NULL;
  master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_data::~ai_data() {
  SharedDtor();
}

void ai_data::SharedDtor() {
  if (this != default_instance_) {
    delete dead_;
    delete msg_;
    delete stop_;
    delete hide_;
    delete master_;
  }
}

void ai_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_data_descriptor_;
}

const ai_data& ai_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_data* ai_data::default_instance_ = NULL;

ai_data* ai_data::New() const {
  return new ai_data;
}

void ai_data::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (has_dead()) {
      if (dead_ != NULL) dead_->::server::ai_dead::Clear();
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::server::ai_msg::Clear();
    }
    if (has_stop()) {
      if (stop_ != NULL) stop_->::server::ai_stop::Clear();
    }
    if (has_hide()) {
      if (hide_ != NULL) hide_->::server::ai_hide::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::server::ai_master::Clear();
    }
  }
  timer_.Clear();
  status_.Clear();
  attr_.Clear();
  distance_.Clear();
  attack_.Clear();
  defense_.Clear();
  method_.Clear();
  move_.Clear();
  fix_move_.Clear();
  force_move_.Clear();
  target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.ai_timer timer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_timer;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .server.ai_status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // repeated .server.ai_attr attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        if (input->ExpectTag(34)) goto parse_distance;
        break;
      }

      // repeated .server.ai_distance distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_distance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_distance;
        if (input->ExpectTag(42)) goto parse_attack;
        break;
      }

      // repeated .server.ai_attack attack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attack;
        if (input->ExpectTag(50)) goto parse_defense;
        break;
      }

      // repeated .server.ai_defense defense = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defense:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defense()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defense;
        if (input->ExpectTag(58)) goto parse_dead;
        break;
      }

      // optional .server.ai_dead dead = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_method;
        break;
      }

      // repeated .server.ai_method method = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_method;
        if (input->ExpectTag(74)) goto parse_move;
        break;
      }

      // repeated .server.ai_move move = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_move;
        if (input->ExpectTag(82)) goto parse_fix_move;
        break;
      }

      // repeated .server.ai_fix_move fix_move = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fix_move;
        if (input->ExpectTag(90)) goto parse_force_move;
        break;
      }

      // repeated .server.ai_move force_move = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_force_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_force_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_force_move;
        if (input->ExpectTag(98)) goto parse_target;
        break;
      }

      // repeated .server.ai_attack target = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target;
        if (input->ExpectTag(106)) goto parse_msg;
        break;
      }

      // optional .server.ai_msg msg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stop;
        break;
      }

      // optional .server.ai_stop stop = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hide;
        break;
      }

      // optional .server.ai_hide hide = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_master;
        break;
      }

      // optional .server.ai_master master = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.ai_timer timer = 1;
  for (int i = 0; i < this->timer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timer(i), output);
  }

  // repeated .server.ai_status status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  // repeated .server.ai_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(i), output);
  }

  // repeated .server.ai_distance distance = 4;
  for (int i = 0; i < this->distance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->distance(i), output);
  }

  // repeated .server.ai_attack attack = 5;
  for (int i = 0; i < this->attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attack(i), output);
  }

  // repeated .server.ai_defense defense = 6;
  for (int i = 0; i < this->defense_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defense(i), output);
  }

  // optional .server.ai_dead dead = 7;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dead(), output);
  }

  // repeated .server.ai_method method = 8;
  for (int i = 0; i < this->method_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->method(i), output);
  }

  // repeated .server.ai_move move = 9;
  for (int i = 0; i < this->move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->move(i), output);
  }

  // repeated .server.ai_fix_move fix_move = 10;
  for (int i = 0; i < this->fix_move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fix_move(i), output);
  }

  // repeated .server.ai_move force_move = 11;
  for (int i = 0; i < this->force_move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->force_move(i), output);
  }

  // repeated .server.ai_attack target = 12;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->target(i), output);
  }

  // optional .server.ai_msg msg = 13;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->msg(), output);
  }

  // optional .server.ai_stop stop = 14;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->stop(), output);
  }

  // optional .server.ai_hide hide = 15;
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->hide(), output);
  }

  // optional .server.ai_master master = 16;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.ai_timer timer = 1;
  for (int i = 0; i < this->timer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timer(i), target);
  }

  // repeated .server.ai_status status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(i), target);
  }

  // repeated .server.ai_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(i), target);
  }

  // repeated .server.ai_distance distance = 4;
  for (int i = 0; i < this->distance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->distance(i), target);
  }

  // repeated .server.ai_attack attack = 5;
  for (int i = 0; i < this->attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attack(i), target);
  }

  // repeated .server.ai_defense defense = 6;
  for (int i = 0; i < this->defense_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defense(i), target);
  }

  // optional .server.ai_dead dead = 7;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dead(), target);
  }

  // repeated .server.ai_method method = 8;
  for (int i = 0; i < this->method_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->method(i), target);
  }

  // repeated .server.ai_move move = 9;
  for (int i = 0; i < this->move_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->move(i), target);
  }

  // repeated .server.ai_fix_move fix_move = 10;
  for (int i = 0; i < this->fix_move_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fix_move(i), target);
  }

  // repeated .server.ai_move force_move = 11;
  for (int i = 0; i < this->force_move_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->force_move(i), target);
  }

  // repeated .server.ai_attack target = 12;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->target(i), target);
  }

  // optional .server.ai_msg msg = 13;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->msg(), target);
  }

  // optional .server.ai_stop stop = 14;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->stop(), target);
  }

  // optional .server.ai_hide hide = 15;
  if (has_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->hide(), target);
  }

  // optional .server.ai_master master = 16;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional .server.ai_dead dead = 7;
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .server.ai_msg msg = 13;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional .server.ai_stop stop = 14;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop());
    }

    // optional .server.ai_hide hide = 15;
    if (has_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hide());
    }

    // optional .server.ai_master master = 16;
    if (has_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  // repeated .server.ai_timer timer = 1;
  total_size += 1 * this->timer_size();
  for (int i = 0; i < this->timer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timer(i));
  }

  // repeated .server.ai_status status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  // repeated .server.ai_attr attr = 3;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .server.ai_distance distance = 4;
  total_size += 1 * this->distance_size();
  for (int i = 0; i < this->distance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->distance(i));
  }

  // repeated .server.ai_attack attack = 5;
  total_size += 1 * this->attack_size();
  for (int i = 0; i < this->attack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack(i));
  }

  // repeated .server.ai_defense defense = 6;
  total_size += 1 * this->defense_size();
  for (int i = 0; i < this->defense_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defense(i));
  }

  // repeated .server.ai_method method = 8;
  total_size += 1 * this->method_size();
  for (int i = 0; i < this->method_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->method(i));
  }

  // repeated .server.ai_move move = 9;
  total_size += 1 * this->move_size();
  for (int i = 0; i < this->move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->move(i));
  }

  // repeated .server.ai_fix_move fix_move = 10;
  total_size += 1 * this->fix_move_size();
  for (int i = 0; i < this->fix_move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_move(i));
  }

  // repeated .server.ai_move force_move = 11;
  total_size += 1 * this->force_move_size();
  for (int i = 0; i < this->force_move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->force_move(i));
  }

  // repeated .server.ai_attack target = 12;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_data::MergeFrom(const ai_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  timer_.MergeFrom(from.timer_);
  status_.MergeFrom(from.status_);
  attr_.MergeFrom(from.attr_);
  distance_.MergeFrom(from.distance_);
  attack_.MergeFrom(from.attack_);
  defense_.MergeFrom(from.defense_);
  method_.MergeFrom(from.method_);
  move_.MergeFrom(from.move_);
  fix_move_.MergeFrom(from.fix_move_);
  force_move_.MergeFrom(from.force_move_);
  target_.MergeFrom(from.target_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_dead()) {
      mutable_dead()->::server::ai_dead::MergeFrom(from.dead());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::server::ai_msg::MergeFrom(from.msg());
    }
    if (from.has_stop()) {
      mutable_stop()->::server::ai_stop::MergeFrom(from.stop());
    }
    if (from.has_hide()) {
      mutable_hide()->::server::ai_hide::MergeFrom(from.hide());
    }
    if (from.has_master()) {
      mutable_master()->::server::ai_master::MergeFrom(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_data::CopyFrom(const ai_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_data::IsInitialized() const {

  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < distance_size(); i++) {
    if (!this->distance(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attack_size(); i++) {
    if (!this->attack(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defense_size(); i++) {
    if (!this->defense(i).IsInitialized()) return false;
  }
  if (has_dead()) {
    if (!this->dead().IsInitialized()) return false;
  }
  for (int i = 0; i < method_size(); i++) {
    if (!this->method(i).IsInitialized()) return false;
  }
  for (int i = 0; i < move_size(); i++) {
    if (!this->move(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fix_move_size(); i++) {
    if (!this->fix_move(i).IsInitialized()) return false;
  }
  for (int i = 0; i < force_move_size(); i++) {
    if (!this->force_move(i).IsInitialized()) return false;
  }
  for (int i = 0; i < target_size(); i++) {
    if (!this->target(i).IsInitialized()) return false;
  }
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  if (has_stop()) {
    if (!this->stop().IsInitialized()) return false;
  }
  if (has_hide()) {
    if (!this->hide().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  return true;
}

void ai_data::Swap(ai_data* other) {
  if (other != this) {
    timer_.Swap(&other->timer_);
    status_.Swap(&other->status_);
    attr_.Swap(&other->attr_);
    distance_.Swap(&other->distance_);
    attack_.Swap(&other->attack_);
    defense_.Swap(&other->defense_);
    std::swap(dead_, other->dead_);
    method_.Swap(&other->method_);
    move_.Swap(&other->move_);
    fix_move_.Swap(&other->fix_move_);
    force_move_.Swap(&other->force_move_);
    target_.Swap(&other->target_);
    std::swap(msg_, other->msg_);
    std::swap(stop_, other->stop_);
    std::swap(hide_, other->hide_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_data_descriptor_;
  metadata.reflection = ai_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_info::kAiFieldNumber;
#endif  // !_MSC_VER

ai_info::ai_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_info::InitAsDefaultInstance() {
}

ai_info::ai_info(const ai_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_info::~ai_info() {
  SharedDtor();
}

void ai_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ai_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_info_descriptor_;
}

const ai_info& ai_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_info* ai_info::default_instance_ = NULL;

ai_info* ai_info::New() const {
  return new ai_info;
}

void ai_info::Clear() {
  ai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.ai_data ai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ai;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.ai_data ai = 1;
  for (int i = 0; i < this->ai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ai(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.ai_data ai = 1;
  for (int i = 0; i < this->ai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ai(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_info::ByteSize() const {
  int total_size = 0;

  // repeated .server.ai_data ai = 1;
  total_size += 1 * this->ai_size();
  for (int i = 0; i < this->ai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_info::MergeFrom(const ai_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  ai_.MergeFrom(from.ai_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_info::CopyFrom(const ai_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_info::IsInitialized() const {

  for (int i = 0; i < ai_size(); i++) {
    if (!this->ai(i).IsInitialized()) return false;
  }
  return true;
}

void ai_info::Swap(ai_info* other) {
  if (other != this) {
    ai_.Swap(&other->ai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_info_descriptor_;
  metadata.reflection = ai_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ai_run::kMethodFieldNumber;
const int ai_run::kMoveFieldNumber;
const int ai_run::kFixMoveFieldNumber;
const int ai_run::kTargetFieldNumber;
const int ai_run::kMsgFieldNumber;
const int ai_run::kStopFieldNumber;
const int ai_run::kHideFieldNumber;
const int ai_run::kMasterFieldNumber;
#endif  // !_MSC_VER

ai_run::ai_run()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ai_run::InitAsDefaultInstance() {
  method_ = const_cast< ::server::ai_method*>(&::server::ai_method::default_instance());
  move_ = const_cast< ::server::ai_move*>(&::server::ai_move::default_instance());
  fix_move_ = const_cast< ::server::ai_fix_move*>(&::server::ai_fix_move::default_instance());
  target_ = const_cast< ::server::ai_attack*>(&::server::ai_attack::default_instance());
  msg_ = const_cast< ::server::ai_msg*>(&::server::ai_msg::default_instance());
  stop_ = const_cast< ::server::ai_stop*>(&::server::ai_stop::default_instance());
  hide_ = const_cast< ::server::ai_hide*>(&::server::ai_hide::default_instance());
  master_ = const_cast< ::server::ai_master*>(&::server::ai_master::default_instance());
}

ai_run::ai_run(const ai_run& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ai_run::SharedCtor() {
  _cached_size_ = 0;
  method_ = NULL;
  move_ = NULL;
  fix_move_ = NULL;
  target_ = NULL;
  msg_ = NULL;
  stop_ = NULL;
  hide_ = NULL;
  master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ai_run::~ai_run() {
  SharedDtor();
}

void ai_run::SharedDtor() {
  if (this != default_instance_) {
    delete method_;
    delete move_;
    delete fix_move_;
    delete target_;
    delete msg_;
    delete stop_;
    delete hide_;
    delete master_;
  }
}

void ai_run::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ai_run::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ai_run_descriptor_;
}

const ai_run& ai_run::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

ai_run* ai_run::default_instance_ = NULL;

ai_run* ai_run::New() const {
  return new ai_run;
}

void ai_run::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method()) {
      if (method_ != NULL) method_->::server::ai_method::Clear();
    }
    if (has_move()) {
      if (move_ != NULL) move_->::server::ai_move::Clear();
    }
    if (has_fix_move()) {
      if (fix_move_ != NULL) fix_move_->::server::ai_fix_move::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::server::ai_attack::Clear();
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::server::ai_msg::Clear();
    }
    if (has_stop()) {
      if (stop_ != NULL) stop_->::server::ai_stop::Clear();
    }
    if (has_hide()) {
      if (hide_ != NULL) hide_->::server::ai_hide::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::server::ai_master::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ai_run::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.ai_method method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_move;
        break;
      }

      // optional .server.ai_move move = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fix_move;
        break;
      }

      // optional .server.ai_fix_move fix_move = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fix_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // optional .server.ai_attack target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional .server.ai_msg msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stop;
        break;
      }

      // optional .server.ai_stop stop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hide;
        break;
      }

      // optional .server.ai_hide hide = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_master;
        break;
      }

      // optional .server.ai_master master = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ai_run::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server.ai_method method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->method(), output);
  }

  // optional .server.ai_move move = 2;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->move(), output);
  }

  // optional .server.ai_fix_move fix_move = 3;
  if (has_fix_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fix_move(), output);
  }

  // optional .server.ai_attack target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->target(), output);
  }

  // optional .server.ai_msg msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg(), output);
  }

  // optional .server.ai_stop stop = 6;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stop(), output);
  }

  // optional .server.ai_hide hide = 7;
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hide(), output);
  }

  // optional .server.ai_master master = 8;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ai_run::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server.ai_method method = 1;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->method(), target);
  }

  // optional .server.ai_move move = 2;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->move(), target);
  }

  // optional .server.ai_fix_move fix_move = 3;
  if (has_fix_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fix_move(), target);
  }

  // optional .server.ai_attack target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->target(), target);
  }

  // optional .server.ai_msg msg = 5;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg(), target);
  }

  // optional .server.ai_stop stop = 6;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stop(), target);
  }

  // optional .server.ai_hide hide = 7;
  if (has_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hide(), target);
  }

  // optional .server.ai_master master = 8;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ai_run::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server.ai_method method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->method());
    }

    // optional .server.ai_move move = 2;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->move());
    }

    // optional .server.ai_fix_move fix_move = 3;
    if (has_fix_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fix_move());
    }

    // optional .server.ai_attack target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional .server.ai_msg msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional .server.ai_stop stop = 6;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop());
    }

    // optional .server.ai_hide hide = 7;
    if (has_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hide());
    }

    // optional .server.ai_master master = 8;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ai_run::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ai_run* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ai_run*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ai_run::MergeFrom(const ai_run& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      mutable_method()->::server::ai_method::MergeFrom(from.method());
    }
    if (from.has_move()) {
      mutable_move()->::server::ai_move::MergeFrom(from.move());
    }
    if (from.has_fix_move()) {
      mutable_fix_move()->::server::ai_fix_move::MergeFrom(from.fix_move());
    }
    if (from.has_target()) {
      mutable_target()->::server::ai_attack::MergeFrom(from.target());
    }
    if (from.has_msg()) {
      mutable_msg()->::server::ai_msg::MergeFrom(from.msg());
    }
    if (from.has_stop()) {
      mutable_stop()->::server::ai_stop::MergeFrom(from.stop());
    }
    if (from.has_hide()) {
      mutable_hide()->::server::ai_hide::MergeFrom(from.hide());
    }
    if (from.has_master()) {
      mutable_master()->::server::ai_master::MergeFrom(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ai_run::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_run::CopyFrom(const ai_run& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_run::IsInitialized() const {

  if (has_method()) {
    if (!this->method().IsInitialized()) return false;
  }
  if (has_move()) {
    if (!this->move().IsInitialized()) return false;
  }
  if (has_fix_move()) {
    if (!this->fix_move().IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  if (has_stop()) {
    if (!this->stop().IsInitialized()) return false;
  }
  if (has_hide()) {
    if (!this->hide().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  return true;
}

void ai_run::Swap(ai_run* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(move_, other->move_);
    std::swap(fix_move_, other->fix_move_);
    std::swap(target_, other->target_);
    std::swap(msg_, other->msg_);
    std::swap(stop_, other->stop_);
    std::swap(hide_, other->hide_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ai_run::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ai_run_descriptor_;
  metadata.reflection = ai_run_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* appeare_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return appeare_type_descriptor_;
}
bool appeare_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const appeare_type appeare::normal;
const appeare_type appeare::sky;
const appeare_type appeare::ground;
const appeare_type appeare::view;
const appeare_type appeare::around;
const appeare_type appeare::type_MIN;
const appeare_type appeare::type_MAX;
const int appeare::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int appeare::kXFieldNumber;
const int appeare::kYFieldNumber;
const int appeare::kRollFieldNumber;
const int appeare::kEffectFieldNumber;
const int appeare::kTFieldNumber;
#endif  // !_MSC_VER

appeare::appeare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void appeare::InitAsDefaultInstance() {
}

appeare::appeare(const appeare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void appeare::SharedCtor() {
  _cached_size_ = 0;
  t_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

appeare::~appeare() {
  SharedDtor();
}

void appeare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void appeare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* appeare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return appeare_descriptor_;
}

const appeare& appeare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

appeare* appeare::default_instance_ = NULL;

appeare* appeare::New() const {
  return new appeare;
}

void appeare::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    t_ = 1;
  }
  x_.Clear();
  y_.Clear();
  roll_.Clear();
  effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool appeare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_x;
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // repeated int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        if (input->ExpectTag(24)) goto parse_roll;
        break;
      }

      // repeated int32 roll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_roll())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roll())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roll;
        if (input->ExpectTag(32)) goto parse_effect;
        break;
      }

      // repeated uint32 effect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_effect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_effect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect;
        if (input->ExpectTag(40)) goto parse_t;
        break;
      }

      // required .server.appeare.type t = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server::appeare_type_IsValid(value)) {
            set_t(static_cast< ::server::appeare_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void appeare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->x(i), output);
  }

  // repeated int32 y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->y(i), output);
  }

  // repeated int32 roll = 3;
  for (int i = 0; i < this->roll_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->roll(i), output);
  }

  // repeated uint32 effect = 4;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->effect(i), output);
  }

  // required .server.appeare.type t = 5;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* appeare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->x(i), target);
  }

  // repeated int32 y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->y(i), target);
  }

  // repeated int32 roll = 3;
  for (int i = 0; i < this->roll_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->roll(i), target);
  }

  // repeated uint32 effect = 4;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->effect(i), target);
  }

  // required .server.appeare.type t = 5;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int appeare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required .server.appeare.type t = 5;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->t());
    }

  }
  // repeated int32 x = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->x(i));
    }
    total_size += 1 * this->x_size() + data_size;
  }

  // repeated int32 y = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->y(i));
    }
    total_size += 1 * this->y_size() + data_size;
  }

  // repeated int32 roll = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->roll_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roll(i));
    }
    total_size += 1 * this->roll_size() + data_size;
  }

  // repeated uint32 effect = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->effect(i));
    }
    total_size += 1 * this->effect_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void appeare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const appeare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const appeare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void appeare::MergeFrom(const appeare& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  roll_.MergeFrom(from.roll_);
  effect_.MergeFrom(from.effect_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void appeare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void appeare::CopyFrom(const appeare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool appeare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void appeare::Swap(appeare* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    roll_.Swap(&other->roll_);
    effect_.Swap(&other->effect_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata appeare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = appeare_descriptor_;
  metadata.reflection = appeare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int advance_appeare::kXFieldNumber;
const int advance_appeare::kYFieldNumber;
#endif  // !_MSC_VER

advance_appeare::advance_appeare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void advance_appeare::InitAsDefaultInstance() {
}

advance_appeare::advance_appeare(const advance_appeare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void advance_appeare::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

advance_appeare::~advance_appeare() {
  SharedDtor();
}

void advance_appeare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void advance_appeare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* advance_appeare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return advance_appeare_descriptor_;
}

const advance_appeare& advance_appeare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

advance_appeare* advance_appeare::default_instance_ = NULL;

advance_appeare* advance_appeare::New() const {
  return new advance_appeare;
}

void advance_appeare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool advance_appeare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void advance_appeare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* advance_appeare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int advance_appeare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void advance_appeare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const advance_appeare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const advance_appeare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void advance_appeare::MergeFrom(const advance_appeare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void advance_appeare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void advance_appeare::CopyFrom(const advance_appeare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool advance_appeare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void advance_appeare::Swap(advance_appeare* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata advance_appeare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = advance_appeare_descriptor_;
  metadata.reflection = advance_appeare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int into_appeare::kXFieldNumber;
const int into_appeare::kYFieldNumber;
const int into_appeare::kDistanceFieldNumber;
const int into_appeare::kSecondsFieldNumber;
const int into_appeare::kRoleFieldNumber;
#endif  // !_MSC_VER

into_appeare::into_appeare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void into_appeare::InitAsDefaultInstance() {
}

into_appeare::into_appeare(const into_appeare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void into_appeare::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  distance_ = 0;
  seconds_ = 0u;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

into_appeare::~into_appeare() {
  SharedDtor();
}

void into_appeare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void into_appeare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* into_appeare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return into_appeare_descriptor_;
}

const into_appeare& into_appeare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

into_appeare* into_appeare::default_instance_ = NULL;

into_appeare* into_appeare::New() const {
  return new into_appeare;
}

void into_appeare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    distance_ = 0;
    seconds_ = 0u;
    role_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool into_appeare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // required int32 distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }

      // optional uint32 role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void into_appeare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->distance(), output);
  }

  // optional uint32 seconds = 4;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds(), output);
  }

  // optional uint32 role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* into_appeare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->distance(), target);
  }

  // optional uint32 seconds = 4;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds(), target);
  }

  // optional uint32 role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int into_appeare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional uint32 seconds = 4;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // optional uint32 role = 5;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void into_appeare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const into_appeare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const into_appeare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void into_appeare::MergeFrom(const into_appeare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void into_appeare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void into_appeare::CopyFrom(const into_appeare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool into_appeare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void into_appeare::Swap(into_appeare* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(distance_, other->distance_);
    std::swap(seconds_, other->seconds_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata into_appeare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = into_appeare_descriptor_;
  metadata.reflection = into_appeare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int after_story::kIdFieldNumber;
const int after_story::kTickFieldNumber;
#endif  // !_MSC_VER

after_story::after_story()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void after_story::InitAsDefaultInstance() {
}

after_story::after_story(const after_story& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void after_story::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

after_story::~after_story() {
  SharedDtor();
}

void after_story::SharedDtor() {
  if (this != default_instance_) {
  }
}

void after_story::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* after_story::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return after_story_descriptor_;
}

const after_story& after_story::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

after_story* after_story::default_instance_ = NULL;

after_story* after_story::New() const {
  return new after_story;
}

void after_story::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool after_story::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }

      // required uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void after_story::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* after_story::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int after_story::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void after_story::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const after_story* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const after_story*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void after_story::MergeFrom(const after_story& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void after_story::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void after_story::CopyFrom(const after_story& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool after_story::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void after_story::Swap(after_story* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata after_story::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = after_story_descriptor_;
  metadata.reflection = after_story_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kill_monster::kMonsterIdFieldNumber;
const int kill_monster::kNumberFieldNumber;
const int kill_monster::kSecondsFieldNumber;
#endif  // !_MSC_VER

kill_monster::kill_monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kill_monster::InitAsDefaultInstance() {
}

kill_monster::kill_monster(const kill_monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kill_monster::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  number_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kill_monster::~kill_monster() {
  SharedDtor();
}

void kill_monster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void kill_monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kill_monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kill_monster_descriptor_;
}

const kill_monster& kill_monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

kill_monster* kill_monster::default_instance_ = NULL;

kill_monster* kill_monster::New() const {
  return new kill_monster;
}

void kill_monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0u;
    number_ = 0u;
    seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kill_monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kill_monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // required uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kill_monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // required uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kill_monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // required uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kill_monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kill_monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kill_monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kill_monster::MergeFrom(const kill_monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kill_monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kill_monster::CopyFrom(const kill_monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kill_monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void kill_monster::Swap(kill_monster* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(number_, other->number_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kill_monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kill_monster_descriptor_;
  metadata.reflection = kill_monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int touch_task::kTaskIdFieldNumber;
#endif  // !_MSC_VER

touch_task::touch_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void touch_task::InitAsDefaultInstance() {
}

touch_task::touch_task(const touch_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void touch_task::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

touch_task::~touch_task() {
  SharedDtor();
}

void touch_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void touch_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* touch_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return touch_task_descriptor_;
}

const touch_task& touch_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

touch_task* touch_task::default_instance_ = NULL;

touch_task* touch_task::New() const {
  return new touch_task;
}

void touch_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool touch_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void touch_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* touch_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int touch_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void touch_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const touch_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const touch_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void touch_task::MergeFrom(const touch_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void touch_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void touch_task::CopyFrom(const touch_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool touch_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void touch_task::Swap(touch_task* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata touch_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = touch_task_descriptor_;
  metadata.reflection = touch_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_activity::kActivityIdFieldNumber;
#endif  // !_MSC_VER

start_activity::start_activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_activity::InitAsDefaultInstance() {
}

start_activity::start_activity(const start_activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_activity::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_activity::~start_activity() {
  SharedDtor();
}

void start_activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_activity_descriptor_;
}

const start_activity& start_activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

start_activity* start_activity::default_instance_ = NULL;

start_activity* start_activity::New() const {
  return new start_activity;
}

void start_activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_activity::MergeFrom(const start_activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_activity::CopyFrom(const start_activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void start_activity::Swap(start_activity* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_activity_descriptor_;
  metadata.reflection = start_activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_time_week::kDFieldNumber;
const int start_time_week::kTFieldNumber;
#endif  // !_MSC_VER

start_time_week::start_time_week()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_time_week::InitAsDefaultInstance() {
  t_ = const_cast< ::server::start_time_day*>(&::server::start_time_day::default_instance());
}

start_time_week::start_time_week(const start_time_week& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_time_week::SharedCtor() {
  _cached_size_ = 0;
  d_ = 0u;
  t_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_time_week::~start_time_week() {
  SharedDtor();
}

void start_time_week::SharedDtor() {
  if (this != default_instance_) {
    delete t_;
  }
}

void start_time_week::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_time_week::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_time_week_descriptor_;
}

const start_time_week& start_time_week::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

start_time_week* start_time_week::default_instance_ = NULL;

start_time_week* start_time_week::New() const {
  return new start_time_week;
}

void start_time_week::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    d_ = 0u;
    if (has_t()) {
      if (t_ != NULL) t_->::server::start_time_day::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_time_week::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 d = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_t;
        break;
      }

      // required .server.start_time_day t = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_time_week::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 d = 1;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->d(), output);
  }

  // required .server.start_time_day t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_time_week::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 d = 1;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->d(), target);
  }

  // required .server.start_time_day t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_time_week::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 d = 1;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d());
    }

    // required .server.start_time_day t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_time_week::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_time_week* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_time_week*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_time_week::MergeFrom(const start_time_week& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_t()) {
      mutable_t()->::server::start_time_day::MergeFrom(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_time_week::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_time_week::CopyFrom(const start_time_week& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_time_week::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_t()) {
    if (!this->t().IsInitialized()) return false;
  }
  return true;
}

void start_time_week::Swap(start_time_week* other) {
  if (other != this) {
    std::swap(d_, other->d_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_time_week::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_time_week_descriptor_;
  metadata.reflection = start_time_week_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_time_day::kHFieldNumber;
const int start_time_day::kMFieldNumber;
const int start_time_day::kSFieldNumber;
const int start_time_day::kCFieldNumber;
#endif  // !_MSC_VER

start_time_day::start_time_day()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_time_day::InitAsDefaultInstance() {
}

start_time_day::start_time_day(const start_time_day& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_time_day::SharedCtor() {
  _cached_size_ = 0;
  h_ = 0u;
  m_ = 0u;
  s_ = 0u;
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_time_day::~start_time_day() {
  SharedDtor();
}

void start_time_day::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_time_day::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_time_day::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_time_day_descriptor_;
}

const start_time_day& start_time_day::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

start_time_day* start_time_day::default_instance_ = NULL;

start_time_day* start_time_day::New() const {
  return new start_time_day;
}

void start_time_day::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    h_ = 0u;
    m_ = 0u;
    s_ = 0u;
    c_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_time_day::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 h = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m;
        break;
      }

      // required uint32 m = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_s;
        break;
      }

      // required uint32 s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_c;
        break;
      }

      // required uint32 c = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_time_day::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 h = 1;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->h(), output);
  }

  // required uint32 m = 2;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m(), output);
  }

  // required uint32 s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->s(), output);
  }

  // required uint32 c = 4;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_time_day::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 h = 1;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->h(), target);
  }

  // required uint32 m = 2;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m(), target);
  }

  // required uint32 s = 3;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->s(), target);
  }

  // required uint32 c = 4;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_time_day::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 h = 1;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h());
    }

    // required uint32 m = 2;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m());
    }

    // required uint32 s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s());
    }

    // required uint32 c = 4;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_time_day::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_time_day* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_time_day*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_time_day::MergeFrom(const start_time_day& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_time_day::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_time_day::CopyFrom(const start_time_day& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_time_day::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void start_time_day::Swap(start_time_day* other) {
  if (other != this) {
    std::swap(h_, other->h_);
    std::swap(m_, other->m_);
    std::swap(s_, other->s_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_time_day::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_time_day_descriptor_;
  metadata.reflection = start_time_day_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_time::kTimeFieldNumber;
#endif  // !_MSC_VER

start_time::start_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_time::InitAsDefaultInstance() {
}

start_time::start_time(const start_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_time::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_time::~start_time() {
  SharedDtor();
}

void start_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_time_descriptor_;
}

const start_time& start_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

start_time* start_time::default_instance_ = NULL;

start_time* start_time::New() const {
  return new start_time;
}

void start_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_time::MergeFrom(const start_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_time::CopyFrom(const start_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void start_time::Swap(start_time* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_time_descriptor_;
  metadata.reflection = start_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_item::kItemIdFieldNumber;
const int get_item::kCountFieldNumber;
const int get_item::kTickFieldNumber;
#endif  // !_MSC_VER

get_item::get_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_item::InitAsDefaultInstance() {
}

get_item::get_item(const get_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  count_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_item::~get_item() {
  SharedDtor();
}

void get_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_item_descriptor_;
}

const get_item& get_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

get_item* get_item::default_instance_ = NULL;

get_item* get_item::New() const {
  return new get_item;
}

void get_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    count_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_item::MergeFrom(const get_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_item::CopyFrom(const get_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void get_item::Swap(get_item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_item_descriptor_;
  metadata.reflection = get_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int touch_scense_object::kObjectFieldNumber;
const int touch_scense_object::kCountFieldNumber;
const int touch_scense_object::kTickFieldNumber;
#endif  // !_MSC_VER

touch_scense_object::touch_scense_object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void touch_scense_object::InitAsDefaultInstance() {
}

touch_scense_object::touch_scense_object(const touch_scense_object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void touch_scense_object::SharedCtor() {
  _cached_size_ = 0;
  object_ = 0u;
  count_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

touch_scense_object::~touch_scense_object() {
  SharedDtor();
}

void touch_scense_object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void touch_scense_object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* touch_scense_object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return touch_scense_object_descriptor_;
}

const touch_scense_object& touch_scense_object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

touch_scense_object* touch_scense_object::default_instance_ = NULL;

touch_scense_object* touch_scense_object::New() const {
  return new touch_scense_object;
}

void touch_scense_object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_ = 0u;
    count_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool touch_scense_object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 object = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_)));
          set_has_object();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void touch_scense_object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->object(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* touch_scense_object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 object = 1;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->object(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int touch_scense_object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 object = 1;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->object());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void touch_scense_object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const touch_scense_object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const touch_scense_object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void touch_scense_object::MergeFrom(const touch_scense_object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object()) {
      set_object(from.object());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void touch_scense_object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void touch_scense_object::CopyFrom(const touch_scense_object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool touch_scense_object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void touch_scense_object::Swap(touch_scense_object* other) {
  if (other != this) {
    std::swap(object_, other->object_);
    std::swap(count_, other->count_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata touch_scense_object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = touch_scense_object_descriptor_;
  metadata.reflection = touch_scense_object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int find_monster::kCharacterIdFieldNumber;
const int find_monster::kDistanceFieldNumber;
const int find_monster::kSecondsFieldNumber;
#endif  // !_MSC_VER

find_monster::find_monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void find_monster::InitAsDefaultInstance() {
}

find_monster::find_monster(const find_monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void find_monster::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  distance_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

find_monster::~find_monster() {
  SharedDtor();
}

void find_monster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void find_monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* find_monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return find_monster_descriptor_;
}

const find_monster& find_monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

find_monster* find_monster::default_instance_ = NULL;

find_monster* find_monster::New() const {
  return new find_monster;
}

void find_monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0u;
    distance_ = 0u;
    seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool find_monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_distance;
        break;
      }

      // optional uint32 distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void find_monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // optional uint32 distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->distance(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* find_monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_id(), target);
  }

  // optional uint32 distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->distance(), target);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int find_monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // optional uint32 distance = 2;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void find_monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const find_monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const find_monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void find_monster::MergeFrom(const find_monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void find_monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void find_monster::CopyFrom(const find_monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool find_monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void find_monster::Swap(find_monster* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(distance_, other->distance_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata find_monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = find_monster_descriptor_;
  metadata.reflection = find_monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_monster::kMonsterIdFieldNumber;
const int group_monster::kNumberFieldNumber;
const int group_monster::kSecondsFieldNumber;
#endif  // !_MSC_VER

group_monster::group_monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void group_monster::InitAsDefaultInstance() {
}

group_monster::group_monster(const group_monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void group_monster::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  number_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_monster::~group_monster() {
  SharedDtor();
}

void group_monster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void group_monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_monster_descriptor_;
}

const group_monster& group_monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

group_monster* group_monster::default_instance_ = NULL;

group_monster* group_monster::New() const {
  return new group_monster;
}

void group_monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0u;
    number_ = 0u;
    seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void group_monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // required uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* group_monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // required uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int group_monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // required uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_monster::MergeFrom(const group_monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_monster::CopyFrom(const group_monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void group_monster::Swap(group_monster* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(number_, other->number_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_monster_descriptor_;
  metadata.reflection = group_monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int appear_around::kIdFieldNumber;
const int appear_around::kDistanceFieldNumber;
const int appear_around::kTickFieldNumber;
#endif  // !_MSC_VER

appear_around::appear_around()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void appear_around::InitAsDefaultInstance() {
}

appear_around::appear_around(const appear_around& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void appear_around::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  distance_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

appear_around::~appear_around() {
  SharedDtor();
}

void appear_around::SharedDtor() {
  if (this != default_instance_) {
  }
}

void appear_around::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* appear_around::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return appear_around_descriptor_;
}

const appear_around& appear_around::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

appear_around* appear_around::default_instance_ = NULL;

appear_around* appear_around::New() const {
  return new appear_around;
}

void appear_around::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    distance_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool appear_around::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_distance;
        break;
      }

      // required uint32 distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void appear_around::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->distance(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* appear_around::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->distance(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int appear_around::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 distance = 2;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void appear_around::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const appear_around* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const appear_around*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void appear_around::MergeFrom(const appear_around& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void appear_around::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void appear_around::CopyFrom(const appear_around& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool appear_around::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void appear_around::Swap(appear_around* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(distance_, other->distance_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata appear_around::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = appear_around_descriptor_;
  metadata.reflection = appear_around_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_msg::kContentFieldNumber;
const int create_msg::kDelayFieldNumber;
const int create_msg::kShowFieldNumber;
#endif  // !_MSC_VER

create_msg::create_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_msg::InitAsDefaultInstance() {
}

create_msg::create_msg(const create_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_msg::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_ = 0u;
  show_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_msg::~create_msg() {
  SharedDtor();
}

void create_msg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void create_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_msg_descriptor_;
}

const create_msg& create_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

create_msg* create_msg::default_instance_ = NULL;

create_msg* create_msg::New() const {
  return new create_msg;
}

void create_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    delay_ = 0u;
    show_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // required uint32 delay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show;
        break;
      }

      // required uint32 show = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay(), output);
  }

  // required uint32 show = 3;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay(), target);
  }

  // required uint32 show = 3;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // required uint32 show = 3;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_msg::MergeFrom(const create_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_msg::CopyFrom(const create_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void create_msg::Swap(create_msg* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(delay_, other->delay_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_msg_descriptor_;
  metadata.reflection = create_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int suspend_create::kTypeFieldNumber;
const int suspend_create::kCountFieldNumber;
#endif  // !_MSC_VER

suspend_create::suspend_create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void suspend_create::InitAsDefaultInstance() {
}

suspend_create::suspend_create(const suspend_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void suspend_create::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

suspend_create::~suspend_create() {
  SharedDtor();
}

void suspend_create::SharedDtor() {
  if (this != default_instance_) {
  }
}

void suspend_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* suspend_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return suspend_create_descriptor_;
}

const suspend_create& suspend_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

suspend_create* suspend_create::default_instance_ = NULL;

suspend_create* suspend_create::New() const {
  return new suspend_create;
}

void suspend_create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool suspend_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void suspend_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* suspend_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int suspend_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void suspend_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const suspend_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const suspend_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void suspend_create::MergeFrom(const suspend_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void suspend_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void suspend_create::CopyFrom(const suspend_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool suspend_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void suspend_create::Swap(suspend_create* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata suspend_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = suspend_create_descriptor_;
  metadata.reflection = suspend_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_npc_rule::kAdvanceFieldNumber;
const int create_npc_rule::kIntoFieldNumber;
const int create_npc_rule::kStoryFieldNumber;
const int create_npc_rule::kKillFieldNumber;
const int create_npc_rule::kWeekFieldNumber;
const int create_npc_rule::kTaskFieldNumber;
const int create_npc_rule::kActivityFieldNumber;
const int create_npc_rule::kTimeFieldNumber;
const int create_npc_rule::kItemFieldNumber;
const int create_npc_rule::kObjectFieldNumber;
const int create_npc_rule::kFindFieldNumber;
const int create_npc_rule::kMonsterFieldNumber;
const int create_npc_rule::kAppFieldNumber;
const int create_npc_rule::kAroundFieldNumber;
const int create_npc_rule::kClearFieldNumber;
const int create_npc_rule::kIndexFieldNumber;
const int create_npc_rule::kMsgFieldNumber;
const int create_npc_rule::kSuspendFieldNumber;
#endif  // !_MSC_VER

create_npc_rule::create_npc_rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_npc_rule::InitAsDefaultInstance() {
}

create_npc_rule::create_npc_rule(const create_npc_rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_npc_rule::SharedCtor() {
  _cached_size_ = 0;
  clear_ = false;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_npc_rule::~create_npc_rule() {
  SharedDtor();
}

void create_npc_rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_npc_rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_npc_rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_npc_rule_descriptor_;
}

const create_npc_rule& create_npc_rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

create_npc_rule* create_npc_rule::default_instance_ = NULL;

create_npc_rule* create_npc_rule::New() const {
  return new create_npc_rule;
}

void create_npc_rule::Clear() {
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    clear_ = false;
    index_ = 0u;
  }
  advance_.Clear();
  into_.Clear();
  story_.Clear();
  kill_.Clear();
  week_.Clear();
  task_.Clear();
  activity_.Clear();
  time_.Clear();
  item_.Clear();
  object_.Clear();
  find_.Clear();
  monster_.Clear();
  app_.Clear();
  around_.Clear();
  msg_.Clear();
  suspend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_npc_rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.advance_appeare advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_advance;
        if (input->ExpectTag(18)) goto parse_into;
        break;
      }

      // repeated .server.into_appeare into = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_into:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_into()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_into;
        if (input->ExpectTag(26)) goto parse_story;
        break;
      }

      // repeated .server.after_story story = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_story:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_story()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_story;
        if (input->ExpectTag(34)) goto parse_kill;
        break;
      }

      // repeated .server.kill_monster kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kill;
        if (input->ExpectTag(42)) goto parse_week;
        break;
      }

      // repeated .server.start_time_week week = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_week;
        if (input->ExpectTag(50)) goto parse_task;
        break;
      }

      // repeated .server.touch_task task = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_task;
        if (input->ExpectTag(58)) goto parse_activity;
        break;
      }

      // repeated .server.start_activity activity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_activity;
        if (input->ExpectTag(66)) goto parse_time;
        break;
      }

      // repeated .server.start_time time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_time;
        if (input->ExpectTag(74)) goto parse_item;
        break;
      }

      // repeated .server.get_item item = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item;
        if (input->ExpectTag(82)) goto parse_object;
        break;
      }

      // repeated .server.touch_scense_object object = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_object;
        if (input->ExpectTag(90)) goto parse_find;
        break;
      }

      // repeated .server.find_monster find = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_find()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_find;
        if (input->ExpectTag(98)) goto parse_monster;
        break;
      }

      // repeated .server.group_monster monster = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_monster;
        if (input->ExpectTag(106)) goto parse_app;
        break;
      }

      // repeated .server.appeare app = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_app;
        if (input->ExpectTag(114)) goto parse_around;
        break;
      }

      // repeated .server.appear_around around = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_around:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_around()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_around;
        if (input->ExpectTag(120)) goto parse_clear;
        break;
      }

      // optional bool clear = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
          set_has_clear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_index;
        break;
      }

      // optional uint32 index = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_msg;
        break;
      }

      // repeated .server.create_msg msg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_msg;
        if (input->ExpectTag(146)) goto parse_suspend;
        break;
      }

      // repeated .server.suspend_create suspend = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suspend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suspend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_suspend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_npc_rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.advance_appeare advance = 1;
  for (int i = 0; i < this->advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->advance(i), output);
  }

  // repeated .server.into_appeare into = 2;
  for (int i = 0; i < this->into_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->into(i), output);
  }

  // repeated .server.after_story story = 3;
  for (int i = 0; i < this->story_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->story(i), output);
  }

  // repeated .server.kill_monster kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kill(i), output);
  }

  // repeated .server.start_time_week week = 5;
  for (int i = 0; i < this->week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->week(i), output);
  }

  // repeated .server.touch_task task = 6;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->task(i), output);
  }

  // repeated .server.start_activity activity = 7;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->activity(i), output);
  }

  // repeated .server.start_time time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time(i), output);
  }

  // repeated .server.get_item item = 9;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->item(i), output);
  }

  // repeated .server.touch_scense_object object = 10;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->object(i), output);
  }

  // repeated .server.find_monster find = 11;
  for (int i = 0; i < this->find_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->find(i), output);
  }

  // repeated .server.group_monster monster = 12;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->monster(i), output);
  }

  // repeated .server.appeare app = 13;
  for (int i = 0; i < this->app_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->app(i), output);
  }

  // repeated .server.appear_around around = 14;
  for (int i = 0; i < this->around_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->around(i), output);
  }

  // optional bool clear = 15;
  if (has_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->clear(), output);
  }

  // optional uint32 index = 16;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->index(), output);
  }

  // repeated .server.create_msg msg = 17;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->msg(i), output);
  }

  // repeated .server.suspend_create suspend = 18;
  for (int i = 0; i < this->suspend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->suspend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_npc_rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.advance_appeare advance = 1;
  for (int i = 0; i < this->advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->advance(i), target);
  }

  // repeated .server.into_appeare into = 2;
  for (int i = 0; i < this->into_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->into(i), target);
  }

  // repeated .server.after_story story = 3;
  for (int i = 0; i < this->story_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->story(i), target);
  }

  // repeated .server.kill_monster kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kill(i), target);
  }

  // repeated .server.start_time_week week = 5;
  for (int i = 0; i < this->week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->week(i), target);
  }

  // repeated .server.touch_task task = 6;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->task(i), target);
  }

  // repeated .server.start_activity activity = 7;
  for (int i = 0; i < this->activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->activity(i), target);
  }

  // repeated .server.start_time time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->time(i), target);
  }

  // repeated .server.get_item item = 9;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->item(i), target);
  }

  // repeated .server.touch_scense_object object = 10;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->object(i), target);
  }

  // repeated .server.find_monster find = 11;
  for (int i = 0; i < this->find_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->find(i), target);
  }

  // repeated .server.group_monster monster = 12;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->monster(i), target);
  }

  // repeated .server.appeare app = 13;
  for (int i = 0; i < this->app_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->app(i), target);
  }

  // repeated .server.appear_around around = 14;
  for (int i = 0; i < this->around_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->around(i), target);
  }

  // optional bool clear = 15;
  if (has_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->clear(), target);
  }

  // optional uint32 index = 16;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->index(), target);
  }

  // repeated .server.create_msg msg = 17;
  for (int i = 0; i < this->msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->msg(i), target);
  }

  // repeated .server.suspend_create suspend = 18;
  for (int i = 0; i < this->suspend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->suspend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_npc_rule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool clear = 15;
    if (has_clear()) {
      total_size += 1 + 1;
    }

    // optional uint32 index = 16;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .server.advance_appeare advance = 1;
  total_size += 1 * this->advance_size();
  for (int i = 0; i < this->advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advance(i));
  }

  // repeated .server.into_appeare into = 2;
  total_size += 1 * this->into_size();
  for (int i = 0; i < this->into_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->into(i));
  }

  // repeated .server.after_story story = 3;
  total_size += 1 * this->story_size();
  for (int i = 0; i < this->story_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->story(i));
  }

  // repeated .server.kill_monster kill = 4;
  total_size += 1 * this->kill_size();
  for (int i = 0; i < this->kill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill(i));
  }

  // repeated .server.start_time_week week = 5;
  total_size += 1 * this->week_size();
  for (int i = 0; i < this->week_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week(i));
  }

  // repeated .server.touch_task task = 6;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated .server.start_activity activity = 7;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity(i));
  }

  // repeated .server.start_time time = 8;
  total_size += 1 * this->time_size();
  for (int i = 0; i < this->time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time(i));
  }

  // repeated .server.get_item item = 9;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .server.touch_scense_object object = 10;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  // repeated .server.find_monster find = 11;
  total_size += 1 * this->find_size();
  for (int i = 0; i < this->find_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->find(i));
  }

  // repeated .server.group_monster monster = 12;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  // repeated .server.appeare app = 13;
  total_size += 1 * this->app_size();
  for (int i = 0; i < this->app_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app(i));
  }

  // repeated .server.appear_around around = 14;
  total_size += 1 * this->around_size();
  for (int i = 0; i < this->around_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->around(i));
  }

  // repeated .server.create_msg msg = 17;
  total_size += 2 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg(i));
  }

  // repeated .server.suspend_create suspend = 18;
  total_size += 2 * this->suspend_size();
  for (int i = 0; i < this->suspend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suspend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_npc_rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_npc_rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_npc_rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_npc_rule::MergeFrom(const create_npc_rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  advance_.MergeFrom(from.advance_);
  into_.MergeFrom(from.into_);
  story_.MergeFrom(from.story_);
  kill_.MergeFrom(from.kill_);
  week_.MergeFrom(from.week_);
  task_.MergeFrom(from.task_);
  activity_.MergeFrom(from.activity_);
  time_.MergeFrom(from.time_);
  item_.MergeFrom(from.item_);
  object_.MergeFrom(from.object_);
  find_.MergeFrom(from.find_);
  monster_.MergeFrom(from.monster_);
  app_.MergeFrom(from.app_);
  around_.MergeFrom(from.around_);
  msg_.MergeFrom(from.msg_);
  suspend_.MergeFrom(from.suspend_);
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_clear()) {
      set_clear(from.clear());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_npc_rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_npc_rule::CopyFrom(const create_npc_rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_npc_rule::IsInitialized() const {

  for (int i = 0; i < advance_size(); i++) {
    if (!this->advance(i).IsInitialized()) return false;
  }
  for (int i = 0; i < into_size(); i++) {
    if (!this->into(i).IsInitialized()) return false;
  }
  for (int i = 0; i < story_size(); i++) {
    if (!this->story(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kill_size(); i++) {
    if (!this->kill(i).IsInitialized()) return false;
  }
  for (int i = 0; i < week_size(); i++) {
    if (!this->week(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  for (int i = 0; i < activity_size(); i++) {
    if (!this->activity(i).IsInitialized()) return false;
  }
  for (int i = 0; i < time_size(); i++) {
    if (!this->time(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < object_size(); i++) {
    if (!this->object(i).IsInitialized()) return false;
  }
  for (int i = 0; i < find_size(); i++) {
    if (!this->find(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_size(); i++) {
    if (!this->monster(i).IsInitialized()) return false;
  }
  for (int i = 0; i < app_size(); i++) {
    if (!this->app(i).IsInitialized()) return false;
  }
  for (int i = 0; i < around_size(); i++) {
    if (!this->around(i).IsInitialized()) return false;
  }
  for (int i = 0; i < msg_size(); i++) {
    if (!this->msg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < suspend_size(); i++) {
    if (!this->suspend(i).IsInitialized()) return false;
  }
  return true;
}

void create_npc_rule::Swap(create_npc_rule* other) {
  if (other != this) {
    advance_.Swap(&other->advance_);
    into_.Swap(&other->into_);
    story_.Swap(&other->story_);
    kill_.Swap(&other->kill_);
    week_.Swap(&other->week_);
    task_.Swap(&other->task_);
    activity_.Swap(&other->activity_);
    time_.Swap(&other->time_);
    item_.Swap(&other->item_);
    object_.Swap(&other->object_);
    find_.Swap(&other->find_);
    monster_.Swap(&other->monster_);
    app_.Swap(&other->app_);
    around_.Swap(&other->around_);
    std::swap(clear_, other->clear_);
    std::swap(index_, other->index_);
    msg_.Swap(&other->msg_);
    suspend_.Swap(&other->suspend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_npc_rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_npc_rule_descriptor_;
  metadata.reflection = create_npc_rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_npc_rules::kRulesFieldNumber;
#endif  // !_MSC_VER

create_npc_rules::create_npc_rules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_npc_rules::InitAsDefaultInstance() {
}

create_npc_rules::create_npc_rules(const create_npc_rules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_npc_rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_npc_rules::~create_npc_rules() {
  SharedDtor();
}

void create_npc_rules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_npc_rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_npc_rules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_npc_rules_descriptor_;
}

const create_npc_rules& create_npc_rules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

create_npc_rules* create_npc_rules::default_instance_ = NULL;

create_npc_rules* create_npc_rules::New() const {
  return new create_npc_rules;
}

void create_npc_rules::Clear() {
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_npc_rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.create_npc_rule rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_npc_rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.create_npc_rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_npc_rules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.create_npc_rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_npc_rules::ByteSize() const {
  int total_size = 0;

  // repeated .server.create_npc_rule rules = 1;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_npc_rules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_npc_rules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_npc_rules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_npc_rules::MergeFrom(const create_npc_rules& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_npc_rules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_npc_rules::CopyFrom(const create_npc_rules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_npc_rules::IsInitialized() const {

  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  return true;
}

void create_npc_rules::Swap(create_npc_rules* other) {
  if (other != this) {
    rules_.Swap(&other->rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_npc_rules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_npc_rules_descriptor_;
  metadata.reflection = create_npc_rules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int appear_effect::kIdFieldNumber;
const int appear_effect::kXFieldNumber;
const int appear_effect::kYFieldNumber;
const int appear_effect::kFrequencyFieldNumber;
#endif  // !_MSC_VER

appear_effect::appear_effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void appear_effect::InitAsDefaultInstance() {
}

appear_effect::appear_effect(const appear_effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void appear_effect::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  frequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

appear_effect::~appear_effect() {
  SharedDtor();
}

void appear_effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void appear_effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* appear_effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return appear_effect_descriptor_;
}

const appear_effect& appear_effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

appear_effect* appear_effect::default_instance_ = NULL;

appear_effect* appear_effect::New() const {
  return new appear_effect;
}

void appear_effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    frequency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool appear_effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frequency;
        break;
      }

      // required uint32 frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void appear_effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 frequency = 4;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* appear_effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // required uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // required uint32 frequency = 4;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int appear_effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 frequency = 4;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void appear_effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const appear_effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const appear_effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void appear_effect::MergeFrom(const appear_effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void appear_effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void appear_effect::CopyFrom(const appear_effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool appear_effect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void appear_effect::Swap(appear_effect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(frequency_, other->frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata appear_effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = appear_effect_descriptor_;
  metadata.reflection = appear_effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_effect_rule::kAdvanceFieldNumber;
const int create_effect_rule::kIntoFieldNumber;
const int create_effect_rule::kStoryFieldNumber;
const int create_effect_rule::kKillFieldNumber;
const int create_effect_rule::kWeekFieldNumber;
const int create_effect_rule::kTaskFieldNumber;
const int create_effect_rule::kActivityFieldNumber;
const int create_effect_rule::kTimeFieldNumber;
const int create_effect_rule::kItemFieldNumber;
const int create_effect_rule::kObjectFieldNumber;
const int create_effect_rule::kFindFieldNumber;
const int create_effect_rule::kMonsterFieldNumber;
const int create_effect_rule::kAppFieldNumber;
#endif  // !_MSC_VER

create_effect_rule::create_effect_rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_effect_rule::InitAsDefaultInstance() {
}

create_effect_rule::create_effect_rule(const create_effect_rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_effect_rule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_effect_rule::~create_effect_rule() {
  SharedDtor();
}

void create_effect_rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_effect_rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_effect_rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_effect_rule_descriptor_;
}

const create_effect_rule& create_effect_rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

create_effect_rule* create_effect_rule::default_instance_ = NULL;

create_effect_rule* create_effect_rule::New() const {
  return new create_effect_rule;
}

void create_effect_rule::Clear() {
  advance_.Clear();
  into_.Clear();
  story_.Clear();
  kill_.Clear();
  week_.Clear();
  task_.Clear();
  activity_.Clear();
  time_.Clear();
  item_.Clear();
  object_.Clear();
  find_.Clear();
  monster_.Clear();
  app_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_effect_rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.advance_appeare advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_advance;
        if (input->ExpectTag(18)) goto parse_into;
        break;
      }

      // repeated .server.into_appeare into = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_into:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_into()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_into;
        if (input->ExpectTag(26)) goto parse_story;
        break;
      }

      // repeated .server.after_story story = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_story:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_story()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_story;
        if (input->ExpectTag(34)) goto parse_kill;
        break;
      }

      // repeated .server.kill_monster kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kill;
        if (input->ExpectTag(42)) goto parse_week;
        break;
      }

      // repeated .server.start_time_week week = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_week;
        if (input->ExpectTag(50)) goto parse_task;
        break;
      }

      // repeated .server.touch_task task = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_task;
        if (input->ExpectTag(58)) goto parse_activity;
        break;
      }

      // repeated .server.start_activity activity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_activity;
        if (input->ExpectTag(66)) goto parse_time;
        break;
      }

      // repeated .server.start_time time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_time;
        if (input->ExpectTag(74)) goto parse_item;
        break;
      }

      // repeated .server.get_item item = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item;
        if (input->ExpectTag(82)) goto parse_object;
        break;
      }

      // repeated .server.touch_scense_object object = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_object;
        if (input->ExpectTag(90)) goto parse_find;
        break;
      }

      // repeated .server.find_monster find = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_find()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_find;
        if (input->ExpectTag(98)) goto parse_monster;
        break;
      }

      // repeated .server.group_monster monster = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_monster;
        if (input->ExpectTag(106)) goto parse_app;
        break;
      }

      // repeated .server.appear_effect app = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_app;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_effect_rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.advance_appeare advance = 1;
  for (int i = 0; i < this->advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->advance(i), output);
  }

  // repeated .server.into_appeare into = 2;
  for (int i = 0; i < this->into_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->into(i), output);
  }

  // repeated .server.after_story story = 3;
  for (int i = 0; i < this->story_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->story(i), output);
  }

  // repeated .server.kill_monster kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kill(i), output);
  }

  // repeated .server.start_time_week week = 5;
  for (int i = 0; i < this->week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->week(i), output);
  }

  // repeated .server.touch_task task = 6;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->task(i), output);
  }

  // repeated .server.start_activity activity = 7;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->activity(i), output);
  }

  // repeated .server.start_time time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time(i), output);
  }

  // repeated .server.get_item item = 9;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->item(i), output);
  }

  // repeated .server.touch_scense_object object = 10;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->object(i), output);
  }

  // repeated .server.find_monster find = 11;
  for (int i = 0; i < this->find_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->find(i), output);
  }

  // repeated .server.group_monster monster = 12;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->monster(i), output);
  }

  // repeated .server.appear_effect app = 13;
  for (int i = 0; i < this->app_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->app(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_effect_rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.advance_appeare advance = 1;
  for (int i = 0; i < this->advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->advance(i), target);
  }

  // repeated .server.into_appeare into = 2;
  for (int i = 0; i < this->into_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->into(i), target);
  }

  // repeated .server.after_story story = 3;
  for (int i = 0; i < this->story_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->story(i), target);
  }

  // repeated .server.kill_monster kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kill(i), target);
  }

  // repeated .server.start_time_week week = 5;
  for (int i = 0; i < this->week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->week(i), target);
  }

  // repeated .server.touch_task task = 6;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->task(i), target);
  }

  // repeated .server.start_activity activity = 7;
  for (int i = 0; i < this->activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->activity(i), target);
  }

  // repeated .server.start_time time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->time(i), target);
  }

  // repeated .server.get_item item = 9;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->item(i), target);
  }

  // repeated .server.touch_scense_object object = 10;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->object(i), target);
  }

  // repeated .server.find_monster find = 11;
  for (int i = 0; i < this->find_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->find(i), target);
  }

  // repeated .server.group_monster monster = 12;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->monster(i), target);
  }

  // repeated .server.appear_effect app = 13;
  for (int i = 0; i < this->app_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->app(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_effect_rule::ByteSize() const {
  int total_size = 0;

  // repeated .server.advance_appeare advance = 1;
  total_size += 1 * this->advance_size();
  for (int i = 0; i < this->advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advance(i));
  }

  // repeated .server.into_appeare into = 2;
  total_size += 1 * this->into_size();
  for (int i = 0; i < this->into_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->into(i));
  }

  // repeated .server.after_story story = 3;
  total_size += 1 * this->story_size();
  for (int i = 0; i < this->story_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->story(i));
  }

  // repeated .server.kill_monster kill = 4;
  total_size += 1 * this->kill_size();
  for (int i = 0; i < this->kill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill(i));
  }

  // repeated .server.start_time_week week = 5;
  total_size += 1 * this->week_size();
  for (int i = 0; i < this->week_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week(i));
  }

  // repeated .server.touch_task task = 6;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated .server.start_activity activity = 7;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity(i));
  }

  // repeated .server.start_time time = 8;
  total_size += 1 * this->time_size();
  for (int i = 0; i < this->time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time(i));
  }

  // repeated .server.get_item item = 9;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .server.touch_scense_object object = 10;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  // repeated .server.find_monster find = 11;
  total_size += 1 * this->find_size();
  for (int i = 0; i < this->find_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->find(i));
  }

  // repeated .server.group_monster monster = 12;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  // repeated .server.appear_effect app = 13;
  total_size += 1 * this->app_size();
  for (int i = 0; i < this->app_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_effect_rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_effect_rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_effect_rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_effect_rule::MergeFrom(const create_effect_rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  advance_.MergeFrom(from.advance_);
  into_.MergeFrom(from.into_);
  story_.MergeFrom(from.story_);
  kill_.MergeFrom(from.kill_);
  week_.MergeFrom(from.week_);
  task_.MergeFrom(from.task_);
  activity_.MergeFrom(from.activity_);
  time_.MergeFrom(from.time_);
  item_.MergeFrom(from.item_);
  object_.MergeFrom(from.object_);
  find_.MergeFrom(from.find_);
  monster_.MergeFrom(from.monster_);
  app_.MergeFrom(from.app_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_effect_rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_effect_rule::CopyFrom(const create_effect_rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_effect_rule::IsInitialized() const {

  for (int i = 0; i < advance_size(); i++) {
    if (!this->advance(i).IsInitialized()) return false;
  }
  for (int i = 0; i < into_size(); i++) {
    if (!this->into(i).IsInitialized()) return false;
  }
  for (int i = 0; i < story_size(); i++) {
    if (!this->story(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kill_size(); i++) {
    if (!this->kill(i).IsInitialized()) return false;
  }
  for (int i = 0; i < week_size(); i++) {
    if (!this->week(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  for (int i = 0; i < activity_size(); i++) {
    if (!this->activity(i).IsInitialized()) return false;
  }
  for (int i = 0; i < time_size(); i++) {
    if (!this->time(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < object_size(); i++) {
    if (!this->object(i).IsInitialized()) return false;
  }
  for (int i = 0; i < find_size(); i++) {
    if (!this->find(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_size(); i++) {
    if (!this->monster(i).IsInitialized()) return false;
  }
  for (int i = 0; i < app_size(); i++) {
    if (!this->app(i).IsInitialized()) return false;
  }
  return true;
}

void create_effect_rule::Swap(create_effect_rule* other) {
  if (other != this) {
    advance_.Swap(&other->advance_);
    into_.Swap(&other->into_);
    story_.Swap(&other->story_);
    kill_.Swap(&other->kill_);
    week_.Swap(&other->week_);
    task_.Swap(&other->task_);
    activity_.Swap(&other->activity_);
    time_.Swap(&other->time_);
    item_.Swap(&other->item_);
    object_.Swap(&other->object_);
    find_.Swap(&other->find_);
    monster_.Swap(&other->monster_);
    app_.Swap(&other->app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_effect_rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_effect_rule_descriptor_;
  metadata.reflection = create_effect_rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_effect_rules::kRulesFieldNumber;
#endif  // !_MSC_VER

create_effect_rules::create_effect_rules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_effect_rules::InitAsDefaultInstance() {
}

create_effect_rules::create_effect_rules(const create_effect_rules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_effect_rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_effect_rules::~create_effect_rules() {
  SharedDtor();
}

void create_effect_rules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_effect_rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_effect_rules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_effect_rules_descriptor_;
}

const create_effect_rules& create_effect_rules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

create_effect_rules* create_effect_rules::default_instance_ = NULL;

create_effect_rules* create_effect_rules::New() const {
  return new create_effect_rules;
}

void create_effect_rules::Clear() {
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_effect_rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.create_effect_rule rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_effect_rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.create_effect_rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_effect_rules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.create_effect_rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_effect_rules::ByteSize() const {
  int total_size = 0;

  // repeated .server.create_effect_rule rules = 1;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_effect_rules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_effect_rules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_effect_rules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_effect_rules::MergeFrom(const create_effect_rules& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_effect_rules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_effect_rules::CopyFrom(const create_effect_rules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_effect_rules::IsInitialized() const {

  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  return true;
}

void create_effect_rules::Swap(create_effect_rules* other) {
  if (other != this) {
    rules_.Swap(&other->rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_effect_rules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_effect_rules_descriptor_;
  metadata.reflection = create_effect_rules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dead_role::kIdFieldNumber;
const int dead_role::kCountFieldNumber;
const int dead_role::kTickFieldNumber;
#endif  // !_MSC_VER

dead_role::dead_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dead_role::InitAsDefaultInstance() {
}

dead_role::dead_role(const dead_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dead_role::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dead_role::~dead_role() {
  SharedDtor();
}

void dead_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dead_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dead_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dead_role_descriptor_;
}

const dead_role& dead_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

dead_role* dead_role::default_instance_ = NULL;

dead_role* dead_role::New() const {
  return new dead_role;
}

void dead_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dead_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dead_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dead_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dead_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dead_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dead_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dead_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dead_role::MergeFrom(const dead_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dead_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dead_role::CopyFrom(const dead_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dead_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void dead_role::Swap(dead_role* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dead_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dead_role_descriptor_;
  metadata.reflection = dead_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int survive_role::kCountFieldNumber;
const int survive_role::kTickFieldNumber;
#endif  // !_MSC_VER

survive_role::survive_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void survive_role::InitAsDefaultInstance() {
}

survive_role::survive_role(const survive_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void survive_role::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

survive_role::~survive_role() {
  SharedDtor();
}

void survive_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void survive_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* survive_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return survive_role_descriptor_;
}

const survive_role& survive_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

survive_role* survive_role::default_instance_ = NULL;

survive_role* survive_role::New() const {
  return new survive_role;
}

void survive_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool survive_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }

      // required uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void survive_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* survive_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int survive_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void survive_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const survive_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const survive_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void survive_role::MergeFrom(const survive_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void survive_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void survive_role::CopyFrom(const survive_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool survive_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void survive_role::Swap(survive_role* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata survive_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = survive_role_descriptor_;
  metadata.reflection = survive_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scene_timeout::kTenmsFieldNumber;
#endif  // !_MSC_VER

scene_timeout::scene_timeout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scene_timeout::InitAsDefaultInstance() {
}

scene_timeout::scene_timeout(const scene_timeout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scene_timeout::SharedCtor() {
  _cached_size_ = 0;
  tenms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scene_timeout::~scene_timeout() {
  SharedDtor();
}

void scene_timeout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scene_timeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scene_timeout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_timeout_descriptor_;
}

const scene_timeout& scene_timeout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

scene_timeout* scene_timeout::default_instance_ = NULL;

scene_timeout* scene_timeout::New() const {
  return new scene_timeout;
}

void scene_timeout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tenms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scene_timeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tenms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenms_)));
          set_has_tenms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scene_timeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tenms = 1;
  if (has_tenms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tenms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scene_timeout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tenms = 1;
  if (has_tenms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tenms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scene_timeout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tenms = 1;
    if (has_tenms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scene_timeout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scene_timeout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scene_timeout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scene_timeout::MergeFrom(const scene_timeout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tenms()) {
      set_tenms(from.tenms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scene_timeout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scene_timeout::CopyFrom(const scene_timeout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scene_timeout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scene_timeout::Swap(scene_timeout* other) {
  if (other != this) {
    std::swap(tenms_, other->tenms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scene_timeout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scene_timeout_descriptor_;
  metadata.reflection = scene_timeout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dead_count::kCountFieldNumber;
#endif  // !_MSC_VER

dead_count::dead_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dead_count::InitAsDefaultInstance() {
}

dead_count::dead_count(const dead_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dead_count::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dead_count::~dead_count() {
  SharedDtor();
}

void dead_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dead_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dead_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dead_count_descriptor_;
}

const dead_count& dead_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

dead_count* dead_count::default_instance_ = NULL;

dead_count* dead_count::New() const {
  return new dead_count;
}

void dead_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dead_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dead_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dead_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dead_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dead_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dead_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dead_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dead_count::MergeFrom(const dead_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dead_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dead_count::CopyFrom(const dead_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dead_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dead_count::Swap(dead_count* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dead_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dead_count_descriptor_;
  metadata.reflection = dead_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_attribute::kIdFieldNumber;
const int role_attribute::kTypeFieldNumber;
const int role_attribute::kValueFieldNumber;
#endif  // !_MSC_VER

role_attribute::role_attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_attribute::InitAsDefaultInstance() {
}

role_attribute::role_attribute(const role_attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_attribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_attribute::~role_attribute() {
  SharedDtor();
}

void role_attribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_attribute_descriptor_;
}

const role_attribute& role_attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

role_attribute* role_attribute::default_instance_ = NULL;

role_attribute* role_attribute::New() const {
  return new role_attribute;
}

void role_attribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_attribute::MergeFrom(const role_attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_attribute::CopyFrom(const role_attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_attribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void role_attribute::Swap(role_attribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_attribute_descriptor_;
  metadata.reflection = role_attribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_postion::kIdFieldNumber;
const int role_postion::kXFieldNumber;
const int role_postion::kYFieldNumber;
const int role_postion::kDistanceFieldNumber;
const int role_postion::kNumberFieldNumber;
const int role_postion::kTickFieldNumber;
#endif  // !_MSC_VER

role_postion::role_postion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_postion::InitAsDefaultInstance() {
}

role_postion::role_postion(const role_postion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_postion::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  distance_ = 0u;
  number_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_postion::~role_postion() {
  SharedDtor();
}

void role_postion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_postion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_postion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_postion_descriptor_;
}

const role_postion& role_postion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

role_postion* role_postion::default_instance_ = NULL;

role_postion* role_postion::New() const {
  return new role_postion;
}

void role_postion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    distance_ = 0u;
    number_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_postion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distance;
        break;
      }

      // required uint32 distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // required uint32 number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tick;
        break;
      }

      // required uint32 tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_postion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->distance(), output);
  }

  // required uint32 number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number(), output);
  }

  // required uint32 tick = 6;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_postion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // required uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // required uint32 distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->distance(), target);
  }

  // required uint32 number = 5;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->number(), target);
  }

  // required uint32 tick = 6;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_postion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

    // required uint32 number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // required uint32 tick = 6;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_postion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_postion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_postion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_postion::MergeFrom(const role_postion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_postion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_postion::CopyFrom(const role_postion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_postion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void role_postion::Swap(role_postion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(distance_, other->distance_);
    std::swap(number_, other->number_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_postion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_postion_descriptor_;
  metadata.reflection = role_postion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_success_rule::kRoleFieldNumber;
const int raid_success_rule::kItemFieldNumber;
const int raid_success_rule::kTouchFieldNumber;
const int raid_success_rule::kTimerFieldNumber;
const int raid_success_rule::kPosFieldNumber;
const int raid_success_rule::kBlockFieldNumber;
const int raid_success_rule::kSurviveFieldNumber;
#endif  // !_MSC_VER

raid_success_rule::raid_success_rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_success_rule::InitAsDefaultInstance() {
}

raid_success_rule::raid_success_rule(const raid_success_rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_success_rule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_success_rule::~raid_success_rule() {
  SharedDtor();
}

void raid_success_rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_success_rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_success_rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_success_rule_descriptor_;
}

const raid_success_rule& raid_success_rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

raid_success_rule* raid_success_rule::default_instance_ = NULL;

raid_success_rule* raid_success_rule::New() const {
  return new raid_success_rule;
}

void raid_success_rule::Clear() {
  role_.Clear();
  item_.Clear();
  touch_.Clear();
  timer_.Clear();
  pos_.Clear();
  block_.Clear();
  survive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_success_rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.dead_role role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .server.get_item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_touch;
        break;
      }

      // repeated .server.dead_role touch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_touch;
        if (input->ExpectTag(34)) goto parse_timer;
        break;
      }

      // repeated .server.ai_timer timer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timer;
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // repeated .server.role_postion pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        if (input->ExpectTag(50)) goto parse_block;
        break;
      }

      // repeated .server.role_postion block = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_block;
        if (input->ExpectTag(58)) goto parse_survive;
        break;
      }

      // repeated .server.survive_role survive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_survive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_survive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_survive;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_success_rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.dead_role role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(i), output);
  }

  // repeated .server.get_item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated .server.dead_role touch = 3;
  for (int i = 0; i < this->touch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->touch(i), output);
  }

  // repeated .server.ai_timer timer = 4;
  for (int i = 0; i < this->timer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timer(i), output);
  }

  // repeated .server.role_postion pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(i), output);
  }

  // repeated .server.role_postion block = 6;
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->block(i), output);
  }

  // repeated .server.survive_role survive = 7;
  for (int i = 0; i < this->survive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->survive(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_success_rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.dead_role role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(i), target);
  }

  // repeated .server.get_item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated .server.dead_role touch = 3;
  for (int i = 0; i < this->touch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->touch(i), target);
  }

  // repeated .server.ai_timer timer = 4;
  for (int i = 0; i < this->timer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timer(i), target);
  }

  // repeated .server.role_postion pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(i), target);
  }

  // repeated .server.role_postion block = 6;
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->block(i), target);
  }

  // repeated .server.survive_role survive = 7;
  for (int i = 0; i < this->survive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->survive(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_success_rule::ByteSize() const {
  int total_size = 0;

  // repeated .server.dead_role role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  // repeated .server.get_item item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .server.dead_role touch = 3;
  total_size += 1 * this->touch_size();
  for (int i = 0; i < this->touch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch(i));
  }

  // repeated .server.ai_timer timer = 4;
  total_size += 1 * this->timer_size();
  for (int i = 0; i < this->timer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timer(i));
  }

  // repeated .server.role_postion pos = 5;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  // repeated .server.role_postion block = 6;
  total_size += 1 * this->block_size();
  for (int i = 0; i < this->block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block(i));
  }

  // repeated .server.survive_role survive = 7;
  total_size += 1 * this->survive_size();
  for (int i = 0; i < this->survive_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->survive(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_success_rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_success_rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_success_rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_success_rule::MergeFrom(const raid_success_rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  item_.MergeFrom(from.item_);
  touch_.MergeFrom(from.touch_);
  timer_.MergeFrom(from.timer_);
  pos_.MergeFrom(from.pos_);
  block_.MergeFrom(from.block_);
  survive_.MergeFrom(from.survive_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_success_rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_success_rule::CopyFrom(const raid_success_rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_success_rule::IsInitialized() const {

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < touch_size(); i++) {
    if (!this->touch(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < block_size(); i++) {
    if (!this->block(i).IsInitialized()) return false;
  }
  for (int i = 0; i < survive_size(); i++) {
    if (!this->survive(i).IsInitialized()) return false;
  }
  return true;
}

void raid_success_rule::Swap(raid_success_rule* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    item_.Swap(&other->item_);
    touch_.Swap(&other->touch_);
    timer_.Swap(&other->timer_);
    pos_.Swap(&other->pos_);
    block_.Swap(&other->block_);
    survive_.Swap(&other->survive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_success_rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_success_rule_descriptor_;
  metadata.reflection = raid_success_rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_failure_rule::kRoleFieldNumber;
const int raid_failure_rule::kTimeoutFieldNumber;
const int raid_failure_rule::kCountFieldNumber;
const int raid_failure_rule::kAttrFieldNumber;
const int raid_failure_rule::kPosFieldNumber;
#endif  // !_MSC_VER

raid_failure_rule::raid_failure_rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_failure_rule::InitAsDefaultInstance() {
}

raid_failure_rule::raid_failure_rule(const raid_failure_rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_failure_rule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_failure_rule::~raid_failure_rule() {
  SharedDtor();
}

void raid_failure_rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_failure_rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_failure_rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_failure_rule_descriptor_;
}

const raid_failure_rule& raid_failure_rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

raid_failure_rule* raid_failure_rule::default_instance_ = NULL;

raid_failure_rule* raid_failure_rule::New() const {
  return new raid_failure_rule;
}

void raid_failure_rule::Clear() {
  role_.Clear();
  timeout_.Clear();
  count_.Clear();
  attr_.Clear();
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_failure_rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.dead_count role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role;
        if (input->ExpectTag(18)) goto parse_timeout;
        break;
      }

      // repeated .server.scene_timeout timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timeout;
        if (input->ExpectTag(26)) goto parse_count;
        break;
      }

      // repeated .server.dead_count count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_count;
        if (input->ExpectTag(34)) goto parse_attr;
        break;
      }

      // repeated .server.role_attribute attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attr;
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // repeated .server.role_postion pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_failure_rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.dead_count role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(i), output);
  }

  // repeated .server.scene_timeout timeout = 2;
  for (int i = 0; i < this->timeout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timeout(i), output);
  }

  // repeated .server.dead_count count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->count(i), output);
  }

  // repeated .server.role_attribute attr = 4;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attr(i), output);
  }

  // repeated .server.role_postion pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_failure_rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.dead_count role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(i), target);
  }

  // repeated .server.scene_timeout timeout = 2;
  for (int i = 0; i < this->timeout_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timeout(i), target);
  }

  // repeated .server.dead_count count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->count(i), target);
  }

  // repeated .server.role_attribute attr = 4;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attr(i), target);
  }

  // repeated .server.role_postion pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_failure_rule::ByteSize() const {
  int total_size = 0;

  // repeated .server.dead_count role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  // repeated .server.scene_timeout timeout = 2;
  total_size += 1 * this->timeout_size();
  for (int i = 0; i < this->timeout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timeout(i));
  }

  // repeated .server.dead_count count = 3;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  // repeated .server.role_attribute attr = 4;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .server.role_postion pos = 5;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_failure_rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_failure_rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_failure_rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_failure_rule::MergeFrom(const raid_failure_rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  timeout_.MergeFrom(from.timeout_);
  count_.MergeFrom(from.count_);
  attr_.MergeFrom(from.attr_);
  pos_.MergeFrom(from.pos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_failure_rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_failure_rule::CopyFrom(const raid_failure_rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_failure_rule::IsInitialized() const {

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  for (int i = 0; i < timeout_size(); i++) {
    if (!this->timeout(i).IsInitialized()) return false;
  }
  for (int i = 0; i < count_size(); i++) {
    if (!this->count(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void raid_failure_rule::Swap(raid_failure_rule* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    timeout_.Swap(&other->timeout_);
    count_.Swap(&other->count_);
    attr_.Swap(&other->attr_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_failure_rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_failure_rule_descriptor_;
  metadata.reflection = raid_failure_rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_over_rules::kSuccessFieldNumber;
const int raid_over_rules::kFailureFieldNumber;
#endif  // !_MSC_VER

raid_over_rules::raid_over_rules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_over_rules::InitAsDefaultInstance() {
}

raid_over_rules::raid_over_rules(const raid_over_rules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_over_rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_over_rules::~raid_over_rules() {
  SharedDtor();
}

void raid_over_rules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_over_rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_over_rules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_over_rules_descriptor_;
}

const raid_over_rules& raid_over_rules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eai_2eproto();
  return *default_instance_;
}

raid_over_rules* raid_over_rules::default_instance_ = NULL;

raid_over_rules* raid_over_rules::New() const {
  return new raid_over_rules;
}

void raid_over_rules::Clear() {
  success_.Clear();
  failure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_over_rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.raid_success_rule success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_success;
        if (input->ExpectTag(18)) goto parse_failure;
        break;
      }

      // repeated .server.raid_failure_rule failure = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_failure;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_over_rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.raid_success_rule success = 1;
  for (int i = 0; i < this->success_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(i), output);
  }

  // repeated .server.raid_failure_rule failure = 2;
  for (int i = 0; i < this->failure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->failure(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_over_rules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.raid_success_rule success = 1;
  for (int i = 0; i < this->success_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(i), target);
  }

  // repeated .server.raid_failure_rule failure = 2;
  for (int i = 0; i < this->failure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->failure(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_over_rules::ByteSize() const {
  int total_size = 0;

  // repeated .server.raid_success_rule success = 1;
  total_size += 1 * this->success_size();
  for (int i = 0; i < this->success_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->success(i));
  }

  // repeated .server.raid_failure_rule failure = 2;
  total_size += 1 * this->failure_size();
  for (int i = 0; i < this->failure_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->failure(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_over_rules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_over_rules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_over_rules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_over_rules::MergeFrom(const raid_over_rules& from) {
  GOOGLE_CHECK_NE(&from, this);
  success_.MergeFrom(from.success_);
  failure_.MergeFrom(from.failure_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_over_rules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_over_rules::CopyFrom(const raid_over_rules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_over_rules::IsInitialized() const {

  for (int i = 0; i < success_size(); i++) {
    if (!this->success(i).IsInitialized()) return false;
  }
  for (int i = 0; i < failure_size(); i++) {
    if (!this->failure(i).IsInitialized()) return false;
  }
  return true;
}

void raid_over_rules::Swap(raid_over_rules* other) {
  if (other != this) {
    success_.Swap(&other->success_);
    failure_.Swap(&other->failure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_over_rules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_over_rules_descriptor_;
  metadata.reflection = raid_over_rules_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
