// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server {

namespace {

const ::google::protobuf::Descriptor* operate_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operate_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* operate_money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operate_money_reflection_ = NULL;
const ::google::protobuf::Descriptor* operate_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operate_log_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2elog_2eproto() {
  protobuf_AddDesc_server_2elog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.log.proto");
  GOOGLE_CHECK(file != NULL);
  operate_task_descriptor_ = file->message_type(0);
  static const int operate_task_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, create_date_),
  };
  operate_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operate_task_descriptor_,
      operate_task::default_instance_,
      operate_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operate_task));
  operate_money_descriptor_ = file->message_type(1);
  static const int operate_money_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, root_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, new_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, create_date_),
  };
  operate_money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operate_money_descriptor_,
      operate_money::default_instance_,
      operate_money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operate_money));
  operate_log_descriptor_ = file->message_type(2);
  static const int operate_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_log, ot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_log, om_),
  };
  operate_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operate_log_descriptor_,
      operate_log::default_instance_,
      operate_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operate_log));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2elog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operate_task_descriptor_, &operate_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operate_money_descriptor_, &operate_money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operate_log_descriptor_, &operate_log::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2elog_2eproto() {
  delete operate_task::default_instance_;
  delete operate_task_reflection_;
  delete operate_money::default_instance_;
  delete operate_money_reflection_;
  delete operate_log::default_instance_;
  delete operate_log_reflection_;
}

void protobuf_AddDesc_server_2elog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020server.log.proto\022\006server\"s\n\014operate_ta"
    "sk\022\013\n\003sid\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\017\n\007task"
    "_id\030\003 \002(\r\022\016\n\006status\030\004 \002(\r\022\017\n\007quality\030\005 \002"
    "(\r\022\023\n\013create_date\030\006 \002(\r\"\251\001\n\roperate_mone"
    "y\022\013\n\003sid\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\017\n\007root_"
    "id\030\003 \002(\r\022\017\n\007type_id\030\004 \002(\r\022\021\n\told_value\030\005"
    " \002(\r\022\021\n\tnew_value\030\006 \002(\r\022\020\n\010goods_id\030\007 \002("
    "\r\022\013\n\003num\030\010 \002(\r\022\023\n\013create_date\030\t \002(\r\"R\n\013o"
    "perate_log\022 \n\002ot\030\001 \001(\0132\024.server.operate_"
    "task\022!\n\002om\030\002 \001(\0132\025.server.operate_money", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.log.proto", &protobuf_RegisterTypes);
  operate_task::default_instance_ = new operate_task();
  operate_money::default_instance_ = new operate_money();
  operate_log::default_instance_ = new operate_log();
  operate_task::default_instance_->InitAsDefaultInstance();
  operate_money::default_instance_->InitAsDefaultInstance();
  operate_log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2elog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2elog_2eproto {
  StaticDescriptorInitializer_server_2elog_2eproto() {
    protobuf_AddDesc_server_2elog_2eproto();
  }
} static_descriptor_initializer_server_2elog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int operate_task::kSidFieldNumber;
const int operate_task::kRoleIdFieldNumber;
const int operate_task::kTaskIdFieldNumber;
const int operate_task::kStatusFieldNumber;
const int operate_task::kQualityFieldNumber;
const int operate_task::kCreateDateFieldNumber;
#endif  // !_MSC_VER

operate_task::operate_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operate_task::InitAsDefaultInstance() {
}

operate_task::operate_task(const operate_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operate_task::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0u;
  role_id_ = 0u;
  task_id_ = 0u;
  status_ = 0u;
  quality_ = 0u;
  create_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operate_task::~operate_task() {
  SharedDtor();
}

void operate_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operate_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operate_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_task_descriptor_;
}

const operate_task& operate_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2elog_2eproto();
  return *default_instance_;
}

operate_task* operate_task::default_instance_ = NULL;

operate_task* operate_task::New() const {
  return new operate_task;
}

void operate_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0u;
    role_id_ = 0u;
    task_id_ = 0u;
    status_ = 0u;
    quality_ = 0u;
    create_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operate_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required uint32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_create_date;
        break;
      }

      // required uint32 create_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_date_)));
          set_has_create_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operate_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sid(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quality(), output);
  }

  // required uint32 create_date = 6;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operate_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sid(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quality(), target);
  }

  // required uint32 create_date = 6;
  if (has_create_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operate_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 create_date = 6;
    if (has_create_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operate_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operate_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operate_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operate_task::MergeFrom(const operate_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_create_date()) {
      set_create_date(from.create_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operate_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operate_task::CopyFrom(const operate_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operate_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void operate_task::Swap(operate_task* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(role_id_, other->role_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(status_, other->status_);
    std::swap(quality_, other->quality_);
    std::swap(create_date_, other->create_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operate_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operate_task_descriptor_;
  metadata.reflection = operate_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operate_money::kSidFieldNumber;
const int operate_money::kRoleIdFieldNumber;
const int operate_money::kRootIdFieldNumber;
const int operate_money::kTypeIdFieldNumber;
const int operate_money::kOldValueFieldNumber;
const int operate_money::kNewValueFieldNumber;
const int operate_money::kGoodsIdFieldNumber;
const int operate_money::kNumFieldNumber;
const int operate_money::kCreateDateFieldNumber;
#endif  // !_MSC_VER

operate_money::operate_money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operate_money::InitAsDefaultInstance() {
}

operate_money::operate_money(const operate_money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operate_money::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0u;
  role_id_ = 0u;
  root_id_ = 0u;
  type_id_ = 0u;
  old_value_ = 0u;
  new_value_ = 0u;
  goods_id_ = 0u;
  num_ = 0u;
  create_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operate_money::~operate_money() {
  SharedDtor();
}

void operate_money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operate_money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operate_money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_money_descriptor_;
}

const operate_money& operate_money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2elog_2eproto();
  return *default_instance_;
}

operate_money* operate_money::default_instance_ = NULL;

operate_money* operate_money::New() const {
  return new operate_money;
}

void operate_money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0u;
    role_id_ = 0u;
    root_id_ = 0u;
    type_id_ = 0u;
    old_value_ = 0u;
    new_value_ = 0u;
    goods_id_ = 0u;
    num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    create_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operate_money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_root_id;
        break;
      }

      // required uint32 root_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_root_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &root_id_)));
          set_has_root_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type_id;
        break;
      }

      // required uint32 type_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_value;
        break;
      }

      // required uint32 old_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_value_)));
          set_has_old_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_value;
        break;
      }

      // required uint32 new_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_value_)));
          set_has_new_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_goods_id;
        break;
      }

      // required uint32 goods_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // required uint32 num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_create_date;
        break;
      }

      // required uint32 create_date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_date_)));
          set_has_create_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operate_money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sid(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 root_id = 3;
  if (has_root_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->root_id(), output);
  }

  // required uint32 type_id = 4;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type_id(), output);
  }

  // required uint32 old_value = 5;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_value(), output);
  }

  // required uint32 new_value = 6;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_value(), output);
  }

  // required uint32 goods_id = 7;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->goods_id(), output);
  }

  // required uint32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // required uint32 create_date = 9;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->create_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operate_money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sid(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 root_id = 3;
  if (has_root_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->root_id(), target);
  }

  // required uint32 type_id = 4;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type_id(), target);
  }

  // required uint32 old_value = 5;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_value(), target);
  }

  // required uint32 new_value = 6;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_value(), target);
  }

  // required uint32 goods_id = 7;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->goods_id(), target);
  }

  // required uint32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num(), target);
  }

  // required uint32 create_date = 9;
  if (has_create_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->create_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operate_money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 root_id = 3;
    if (has_root_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->root_id());
    }

    // required uint32 type_id = 4;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // required uint32 old_value = 5;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_value());
    }

    // required uint32 new_value = 6;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_value());
    }

    // required uint32 goods_id = 7;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 create_date = 9;
    if (has_create_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operate_money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operate_money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operate_money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operate_money::MergeFrom(const operate_money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_root_id()) {
      set_root_id(from.root_id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
    if (from.has_new_value()) {
      set_new_value(from.new_value());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_date()) {
      set_create_date(from.create_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operate_money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operate_money::CopyFrom(const operate_money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operate_money::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void operate_money::Swap(operate_money* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(role_id_, other->role_id_);
    std::swap(root_id_, other->root_id_);
    std::swap(type_id_, other->type_id_);
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(num_, other->num_);
    std::swap(create_date_, other->create_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operate_money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operate_money_descriptor_;
  metadata.reflection = operate_money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operate_log::kOtFieldNumber;
const int operate_log::kOmFieldNumber;
#endif  // !_MSC_VER

operate_log::operate_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operate_log::InitAsDefaultInstance() {
  ot_ = const_cast< ::server::operate_task*>(&::server::operate_task::default_instance());
  om_ = const_cast< ::server::operate_money*>(&::server::operate_money::default_instance());
}

operate_log::operate_log(const operate_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operate_log::SharedCtor() {
  _cached_size_ = 0;
  ot_ = NULL;
  om_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operate_log::~operate_log() {
  SharedDtor();
}

void operate_log::SharedDtor() {
  if (this != default_instance_) {
    delete ot_;
    delete om_;
  }
}

void operate_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operate_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_log_descriptor_;
}

const operate_log& operate_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2elog_2eproto();
  return *default_instance_;
}

operate_log* operate_log::default_instance_ = NULL;

operate_log* operate_log::New() const {
  return new operate_log;
}

void operate_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ot()) {
      if (ot_ != NULL) ot_->::server::operate_task::Clear();
    }
    if (has_om()) {
      if (om_ != NULL) om_->::server::operate_money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operate_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.operate_task ot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_om;
        break;
      }

      // optional .server.operate_money om = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_om:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_om()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operate_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server.operate_task ot = 1;
  if (has_ot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ot(), output);
  }

  // optional .server.operate_money om = 2;
  if (has_om()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->om(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operate_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server.operate_task ot = 1;
  if (has_ot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ot(), target);
  }

  // optional .server.operate_money om = 2;
  if (has_om()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->om(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operate_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server.operate_task ot = 1;
    if (has_ot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ot());
    }

    // optional .server.operate_money om = 2;
    if (has_om()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->om());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operate_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operate_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operate_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operate_log::MergeFrom(const operate_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ot()) {
      mutable_ot()->::server::operate_task::MergeFrom(from.ot());
    }
    if (from.has_om()) {
      mutable_om()->::server::operate_money::MergeFrom(from.om());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operate_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operate_log::CopyFrom(const operate_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operate_log::IsInitialized() const {

  if (has_ot()) {
    if (!this->ot().IsInitialized()) return false;
  }
  if (has_om()) {
    if (!this->om().IsInitialized()) return false;
  }
  return true;
}

void operate_log::Swap(operate_log* other) {
  if (other != this) {
    std::swap(ot_, other->ot_);
    std::swap(om_, other->om_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operate_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operate_log_descriptor_;
  metadata.reflection = operate_log_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
