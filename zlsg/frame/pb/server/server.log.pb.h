// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.log.proto

#ifndef PROTOBUF_server_2elog_2eproto__INCLUDED
#define PROTOBUF_server_2elog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2elog_2eproto();
void protobuf_AssignDesc_server_2elog_2eproto();
void protobuf_ShutdownFile_server_2elog_2eproto();

class operate_task;
class operate_money;
class operate_log;

// ===================================================================

class operate_task : public ::google::protobuf::Message {
 public:
  operate_task();
  virtual ~operate_task();

  operate_task(const operate_task& from);

  inline operate_task& operator=(const operate_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operate_task& default_instance();

  void Swap(operate_task* other);

  // implements Message ----------------------------------------------

  operate_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operate_task& from);
  void MergeFrom(const operate_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // required uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 create_date = 6;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 6;
  inline ::google::protobuf::uint32 create_date() const;
  inline void set_create_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.operate_task)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_create_date();
  inline void clear_has_create_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 create_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2elog_2eproto();
  friend void protobuf_AssignDesc_server_2elog_2eproto();
  friend void protobuf_ShutdownFile_server_2elog_2eproto();

  void InitAsDefaultInstance();
  static operate_task* default_instance_;
};
// -------------------------------------------------------------------

class operate_money : public ::google::protobuf::Message {
 public:
  operate_money();
  virtual ~operate_money();

  operate_money(const operate_money& from);

  inline operate_money& operator=(const operate_money& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operate_money& default_instance();

  void Swap(operate_money* other);

  // implements Message ----------------------------------------------

  operate_money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operate_money& from);
  void MergeFrom(const operate_money& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 root_id = 3;
  inline bool has_root_id() const;
  inline void clear_root_id();
  static const int kRootIdFieldNumber = 3;
  inline ::google::protobuf::uint32 root_id() const;
  inline void set_root_id(::google::protobuf::uint32 value);

  // required uint32 type_id = 4;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);

  // required uint32 old_value = 5;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 5;
  inline ::google::protobuf::uint32 old_value() const;
  inline void set_old_value(::google::protobuf::uint32 value);

  // required uint32 new_value = 6;
  inline bool has_new_value() const;
  inline void clear_new_value();
  static const int kNewValueFieldNumber = 6;
  inline ::google::protobuf::uint32 new_value() const;
  inline void set_new_value(::google::protobuf::uint32 value);

  // required uint32 goods_id = 7;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 7;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // required uint32 num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 create_date = 9;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 9;
  inline ::google::protobuf::uint32 create_date() const;
  inline void set_create_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.operate_money)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_root_id();
  inline void clear_has_root_id();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_old_value();
  inline void clear_has_old_value();
  inline void set_has_new_value();
  inline void clear_has_new_value();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_create_date();
  inline void clear_has_create_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 root_id_;
  ::google::protobuf::uint32 type_id_;
  ::google::protobuf::uint32 old_value_;
  ::google::protobuf::uint32 new_value_;
  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 create_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_server_2elog_2eproto();
  friend void protobuf_AssignDesc_server_2elog_2eproto();
  friend void protobuf_ShutdownFile_server_2elog_2eproto();

  void InitAsDefaultInstance();
  static operate_money* default_instance_;
};
// -------------------------------------------------------------------

class operate_log : public ::google::protobuf::Message {
 public:
  operate_log();
  virtual ~operate_log();

  operate_log(const operate_log& from);

  inline operate_log& operator=(const operate_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operate_log& default_instance();

  void Swap(operate_log* other);

  // implements Message ----------------------------------------------

  operate_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operate_log& from);
  void MergeFrom(const operate_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.operate_task ot = 1;
  inline bool has_ot() const;
  inline void clear_ot();
  static const int kOtFieldNumber = 1;
  inline const ::server::operate_task& ot() const;
  inline ::server::operate_task* mutable_ot();
  inline ::server::operate_task* release_ot();
  inline void set_allocated_ot(::server::operate_task* ot);

  // optional .server.operate_money om = 2;
  inline bool has_om() const;
  inline void clear_om();
  static const int kOmFieldNumber = 2;
  inline const ::server::operate_money& om() const;
  inline ::server::operate_money* mutable_om();
  inline ::server::operate_money* release_om();
  inline void set_allocated_om(::server::operate_money* om);

  // @@protoc_insertion_point(class_scope:server.operate_log)
 private:
  inline void set_has_ot();
  inline void clear_has_ot();
  inline void set_has_om();
  inline void clear_has_om();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::server::operate_task* ot_;
  ::server::operate_money* om_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2elog_2eproto();
  friend void protobuf_AssignDesc_server_2elog_2eproto();
  friend void protobuf_ShutdownFile_server_2elog_2eproto();

  void InitAsDefaultInstance();
  static operate_log* default_instance_;
};
// ===================================================================


// ===================================================================

// operate_task

// required uint32 sid = 1;
inline bool operate_task::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operate_task::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operate_task::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operate_task::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 operate_task::sid() const {
  return sid_;
}
inline void operate_task::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
}

// required uint32 role_id = 2;
inline bool operate_task::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operate_task::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operate_task::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operate_task::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 operate_task::role_id() const {
  return role_id_;
}
inline void operate_task::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 task_id = 3;
inline bool operate_task::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operate_task::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operate_task::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operate_task::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 operate_task::task_id() const {
  return task_id_;
}
inline void operate_task::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required uint32 status = 4;
inline bool operate_task::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operate_task::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operate_task::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operate_task::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 operate_task::status() const {
  return status_;
}
inline void operate_task::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 quality = 5;
inline bool operate_task::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operate_task::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operate_task::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operate_task::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 operate_task::quality() const {
  return quality_;
}
inline void operate_task::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 create_date = 6;
inline bool operate_task::has_create_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operate_task::set_has_create_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operate_task::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operate_task::clear_create_date() {
  create_date_ = 0u;
  clear_has_create_date();
}
inline ::google::protobuf::uint32 operate_task::create_date() const {
  return create_date_;
}
inline void operate_task::set_create_date(::google::protobuf::uint32 value) {
  set_has_create_date();
  create_date_ = value;
}

// -------------------------------------------------------------------

// operate_money

// required uint32 sid = 1;
inline bool operate_money::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operate_money::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operate_money::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operate_money::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 operate_money::sid() const {
  return sid_;
}
inline void operate_money::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
}

// required uint32 role_id = 2;
inline bool operate_money::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operate_money::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operate_money::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operate_money::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 operate_money::role_id() const {
  return role_id_;
}
inline void operate_money::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 root_id = 3;
inline bool operate_money::has_root_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operate_money::set_has_root_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operate_money::clear_has_root_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operate_money::clear_root_id() {
  root_id_ = 0u;
  clear_has_root_id();
}
inline ::google::protobuf::uint32 operate_money::root_id() const {
  return root_id_;
}
inline void operate_money::set_root_id(::google::protobuf::uint32 value) {
  set_has_root_id();
  root_id_ = value;
}

// required uint32 type_id = 4;
inline bool operate_money::has_type_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operate_money::set_has_type_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operate_money::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operate_money::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 operate_money::type_id() const {
  return type_id_;
}
inline void operate_money::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
}

// required uint32 old_value = 5;
inline bool operate_money::has_old_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operate_money::set_has_old_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operate_money::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operate_money::clear_old_value() {
  old_value_ = 0u;
  clear_has_old_value();
}
inline ::google::protobuf::uint32 operate_money::old_value() const {
  return old_value_;
}
inline void operate_money::set_old_value(::google::protobuf::uint32 value) {
  set_has_old_value();
  old_value_ = value;
}

// required uint32 new_value = 6;
inline bool operate_money::has_new_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operate_money::set_has_new_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operate_money::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operate_money::clear_new_value() {
  new_value_ = 0u;
  clear_has_new_value();
}
inline ::google::protobuf::uint32 operate_money::new_value() const {
  return new_value_;
}
inline void operate_money::set_new_value(::google::protobuf::uint32 value) {
  set_has_new_value();
  new_value_ = value;
}

// required uint32 goods_id = 7;
inline bool operate_money::has_goods_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operate_money::set_has_goods_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operate_money::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operate_money::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 operate_money::goods_id() const {
  return goods_id_;
}
inline void operate_money::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required uint32 num = 8;
inline bool operate_money::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operate_money::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operate_money::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operate_money::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 operate_money::num() const {
  return num_;
}
inline void operate_money::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 create_date = 9;
inline bool operate_money::has_create_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operate_money::set_has_create_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operate_money::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operate_money::clear_create_date() {
  create_date_ = 0u;
  clear_has_create_date();
}
inline ::google::protobuf::uint32 operate_money::create_date() const {
  return create_date_;
}
inline void operate_money::set_create_date(::google::protobuf::uint32 value) {
  set_has_create_date();
  create_date_ = value;
}

// -------------------------------------------------------------------

// operate_log

// optional .server.operate_task ot = 1;
inline bool operate_log::has_ot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operate_log::set_has_ot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operate_log::clear_has_ot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operate_log::clear_ot() {
  if (ot_ != NULL) ot_->::server::operate_task::Clear();
  clear_has_ot();
}
inline const ::server::operate_task& operate_log::ot() const {
  return ot_ != NULL ? *ot_ : *default_instance_->ot_;
}
inline ::server::operate_task* operate_log::mutable_ot() {
  set_has_ot();
  if (ot_ == NULL) ot_ = new ::server::operate_task;
  return ot_;
}
inline ::server::operate_task* operate_log::release_ot() {
  clear_has_ot();
  ::server::operate_task* temp = ot_;
  ot_ = NULL;
  return temp;
}
inline void operate_log::set_allocated_ot(::server::operate_task* ot) {
  delete ot_;
  ot_ = ot;
  if (ot) {
    set_has_ot();
  } else {
    clear_has_ot();
  }
}

// optional .server.operate_money om = 2;
inline bool operate_log::has_om() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operate_log::set_has_om() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operate_log::clear_has_om() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operate_log::clear_om() {
  if (om_ != NULL) om_->::server::operate_money::Clear();
  clear_has_om();
}
inline const ::server::operate_money& operate_log::om() const {
  return om_ != NULL ? *om_ : *default_instance_->om_;
}
inline ::server::operate_money* operate_log::mutable_om() {
  set_has_om();
  if (om_ == NULL) om_ = new ::server::operate_money;
  return om_;
}
inline ::server::operate_money* operate_log::release_om() {
  clear_has_om();
  ::server::operate_money* temp = om_;
  om_ = NULL;
  return temp;
}
inline void operate_log::set_allocated_om(::server::operate_money* om) {
  delete om_;
  om_ = om;
  if (om) {
    set_has_om();
  } else {
    clear_has_om();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2elog_2eproto__INCLUDED
