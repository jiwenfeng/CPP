// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.node.proto

#ifndef PROTOBUF_server_2enode_2eproto__INCLUDED
#define PROTOBUF_server_2enode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2enode_2eproto();
void protobuf_AssignDesc_server_2enode_2eproto();
void protobuf_ShutdownFile_server_2enode_2eproto();

class register_node_req;
class register_node_rsp;
class node_agent_req;
class node_agent_rsp;
class node_role_req;
class node_role_rsp;
class forward_msg;
class user_data;

enum forward_msg_target {
  forward_msg_target_client = 1,
  forward_msg_target_server = 2
};
bool forward_msg_target_IsValid(int value);
const forward_msg_target forward_msg_target_target_MIN = forward_msg_target_client;
const forward_msg_target forward_msg_target_target_MAX = forward_msg_target_server;
const int forward_msg_target_target_ARRAYSIZE = forward_msg_target_target_MAX + 1;

const ::google::protobuf::EnumDescriptor* forward_msg_target_descriptor();
inline const ::std::string& forward_msg_target_Name(forward_msg_target value) {
  return ::google::protobuf::internal::NameOfEnum(
    forward_msg_target_descriptor(), value);
}
inline bool forward_msg_target_Parse(
    const ::std::string& name, forward_msg_target* value) {
  return ::google::protobuf::internal::ParseNamedEnum<forward_msg_target>(
    forward_msg_target_descriptor(), name, value);
}
// ===================================================================

class register_node_req : public ::google::protobuf::Message {
 public:
  register_node_req();
  virtual ~register_node_req();

  register_node_req(const register_node_req& from);

  inline register_node_req& operator=(const register_node_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_node_req& default_instance();

  void Swap(register_node_req* other);

  // implements Message ----------------------------------------------

  register_node_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const register_node_req& from);
  void MergeFrom(const register_node_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:server.register_node_req)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static register_node_req* default_instance_;
};
// -------------------------------------------------------------------

class register_node_rsp : public ::google::protobuf::Message {
 public:
  register_node_rsp();
  virtual ~register_node_rsp();

  register_node_rsp(const register_node_rsp& from);

  inline register_node_rsp& operator=(const register_node_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_node_rsp& default_instance();

  void Swap(register_node_rsp* other);

  // implements Message ----------------------------------------------

  register_node_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const register_node_rsp& from);
  void MergeFrom(const register_node_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.register_node_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static register_node_rsp* default_instance_;
};
// -------------------------------------------------------------------

class node_agent_req : public ::google::protobuf::Message {
 public:
  node_agent_req();
  virtual ~node_agent_req();

  node_agent_req(const node_agent_req& from);

  inline node_agent_req& operator=(const node_agent_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_agent_req& default_instance();

  void Swap(node_agent_req* other);

  // implements Message ----------------------------------------------

  node_agent_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_agent_req& from);
  void MergeFrom(const node_agent_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 scene_server_id = 2;
  inline bool has_scene_server_id() const;
  inline void clear_scene_server_id();
  static const int kSceneServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_server_id() const;
  inline void set_scene_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.node_agent_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_scene_server_id();
  inline void clear_has_scene_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 scene_server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static node_agent_req* default_instance_;
};
// -------------------------------------------------------------------

class node_agent_rsp : public ::google::protobuf::Message {
 public:
  node_agent_rsp();
  virtual ~node_agent_rsp();

  node_agent_rsp(const node_agent_rsp& from);

  inline node_agent_rsp& operator=(const node_agent_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_agent_rsp& default_instance();

  void Swap(node_agent_rsp* other);

  // implements Message ----------------------------------------------

  node_agent_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_agent_rsp& from);
  void MergeFrom(const node_agent_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.node_agent_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 agent_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static node_agent_rsp* default_instance_;
};
// -------------------------------------------------------------------

class node_role_req : public ::google::protobuf::Message {
 public:
  node_role_req();
  virtual ~node_role_req();

  node_role_req(const node_role_req& from);

  inline node_role_req& operator=(const node_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_role_req& default_instance();

  void Swap(node_role_req* other);

  // implements Message ----------------------------------------------

  node_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_role_req& from);
  void MergeFrom(const node_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint32 value);

  // required uint32 client_id = 3;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.node_role_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 agent_id_;
  ::google::protobuf::uint32 client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static node_role_req* default_instance_;
};
// -------------------------------------------------------------------

class node_role_rsp : public ::google::protobuf::Message {
 public:
  node_role_rsp();
  virtual ~node_role_rsp();

  node_role_rsp(const node_role_rsp& from);

  inline node_role_rsp& operator=(const node_role_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_role_rsp& default_instance();

  void Swap(node_role_rsp* other);

  // implements Message ----------------------------------------------

  node_role_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_role_rsp& from);
  void MergeFrom(const node_role_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.node_role_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static node_role_rsp* default_instance_;
};
// -------------------------------------------------------------------

class forward_msg : public ::google::protobuf::Message {
 public:
  forward_msg();
  virtual ~forward_msg();

  forward_msg(const forward_msg& from);

  inline forward_msg& operator=(const forward_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const forward_msg& default_instance();

  void Swap(forward_msg* other);

  // implements Message ----------------------------------------------

  forward_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const forward_msg& from);
  void MergeFrom(const forward_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef forward_msg_target target;
  static const target client = forward_msg_target_client;
  static const target server = forward_msg_target_server;
  static inline bool target_IsValid(int value) {
    return forward_msg_target_IsValid(value);
  }
  static const target target_MIN =
    forward_msg_target_target_MIN;
  static const target target_MAX =
    forward_msg_target_target_MAX;
  static const int target_ARRAYSIZE =
    forward_msg_target_target_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  target_descriptor() {
    return forward_msg_target_descriptor();
  }
  static inline const ::std::string& target_Name(target value) {
    return forward_msg_target_Name(value);
  }
  static inline bool target_Parse(const ::std::string& name,
      target* value) {
    return forward_msg_target_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .server.forward_msg.target type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::server::forward_msg_target type() const;
  inline void set_type(::server::forward_msg_target value);

  // required string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:server.forward_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  int type_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static forward_msg* default_instance_;
};
// -------------------------------------------------------------------

class user_data : public ::google::protobuf::Message {
 public:
  user_data();
  virtual ~user_data();

  user_data(const user_data& from);

  inline user_data& operator=(const user_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_data& default_instance();

  void Swap(user_data* other);

  // implements Message ----------------------------------------------

  user_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_data& from);
  void MergeFrom(const user_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes db = 1;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 1;
  inline const ::std::string& db() const;
  inline void set_db(const ::std::string& value);
  inline void set_db(const char* value);
  inline void set_db(const void* value, size_t size);
  inline ::std::string* mutable_db();
  inline ::std::string* release_db();
  inline void set_allocated_db(::std::string* db);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 scene_id = 3;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 agent_id = 4;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 4;
  inline ::google::protobuf::uint32 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint32 value);

  // optional uint32 client_id = 5;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.user_data)
 private:
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* db_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 agent_id_;
  ::google::protobuf::uint32 client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2enode_2eproto();
  friend void protobuf_AssignDesc_server_2enode_2eproto();
  friend void protobuf_ShutdownFile_server_2enode_2eproto();

  void InitAsDefaultInstance();
  static user_data* default_instance_;
};
// ===================================================================


// ===================================================================

// register_node_req

// required uint32 server_id = 1;
inline bool register_node_req::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_node_req::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_node_req::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_node_req::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 register_node_req::server_id() const {
  return server_id_;
}
inline void register_node_req::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required string key = 2;
inline bool register_node_req::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void register_node_req::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void register_node_req::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void register_node_req::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& register_node_req::key() const {
  return *key_;
}
inline void register_node_req::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void register_node_req::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void register_node_req::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* register_node_req::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* register_node_req::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void register_node_req::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// register_node_rsp

// required uint32 ret = 1;
inline bool register_node_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_node_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_node_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_node_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 register_node_rsp::ret() const {
  return ret_;
}
inline void register_node_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// node_agent_req

// required uint32 role_id = 1;
inline bool node_agent_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node_agent_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node_agent_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node_agent_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 node_agent_req::role_id() const {
  return role_id_;
}
inline void node_agent_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 scene_server_id = 2;
inline bool node_agent_req::has_scene_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void node_agent_req::set_has_scene_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void node_agent_req::clear_has_scene_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void node_agent_req::clear_scene_server_id() {
  scene_server_id_ = 0u;
  clear_has_scene_server_id();
}
inline ::google::protobuf::uint32 node_agent_req::scene_server_id() const {
  return scene_server_id_;
}
inline void node_agent_req::set_scene_server_id(::google::protobuf::uint32 value) {
  set_has_scene_server_id();
  scene_server_id_ = value;
}

// -------------------------------------------------------------------

// node_agent_rsp

// required uint32 role_id = 1;
inline bool node_agent_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node_agent_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node_agent_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node_agent_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 node_agent_rsp::role_id() const {
  return role_id_;
}
inline void node_agent_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 agent_id = 2;
inline bool node_agent_rsp::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void node_agent_rsp::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void node_agent_rsp::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void node_agent_rsp::clear_agent_id() {
  agent_id_ = 0u;
  clear_has_agent_id();
}
inline ::google::protobuf::uint32 node_agent_rsp::agent_id() const {
  return agent_id_;
}
inline void node_agent_rsp::set_agent_id(::google::protobuf::uint32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// -------------------------------------------------------------------

// node_role_req

// required uint32 role_id = 1;
inline bool node_role_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node_role_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node_role_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node_role_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 node_role_req::role_id() const {
  return role_id_;
}
inline void node_role_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 agent_id = 2;
inline bool node_role_req::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void node_role_req::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void node_role_req::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void node_role_req::clear_agent_id() {
  agent_id_ = 0u;
  clear_has_agent_id();
}
inline ::google::protobuf::uint32 node_role_req::agent_id() const {
  return agent_id_;
}
inline void node_role_req::set_agent_id(::google::protobuf::uint32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// required uint32 client_id = 3;
inline bool node_role_req::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void node_role_req::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void node_role_req::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void node_role_req::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 node_role_req::client_id() const {
  return client_id_;
}
inline void node_role_req::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// -------------------------------------------------------------------

// node_role_rsp

// required uint32 role_id = 1;
inline bool node_role_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node_role_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node_role_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node_role_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 node_role_rsp::role_id() const {
  return role_id_;
}
inline void node_role_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// forward_msg

// required uint32 id = 1;
inline bool forward_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void forward_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void forward_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void forward_msg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 forward_msg::id() const {
  return id_;
}
inline void forward_msg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .server.forward_msg.target type = 2;
inline bool forward_msg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void forward_msg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void forward_msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void forward_msg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::server::forward_msg_target forward_msg::type() const {
  return static_cast< ::server::forward_msg_target >(type_);
}
inline void forward_msg::set_type(::server::forward_msg_target value) {
  assert(::server::forward_msg_target_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string data = 3;
inline bool forward_msg::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void forward_msg::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void forward_msg::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void forward_msg::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& forward_msg::data() const {
  return *data_;
}
inline void forward_msg::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void forward_msg::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void forward_msg::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* forward_msg::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* forward_msg::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void forward_msg::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// user_data

// required bytes db = 1;
inline bool user_data::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_data::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_data::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_data::clear_db() {
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& user_data::db() const {
  return *db_;
}
inline void user_data::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void user_data::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void user_data::set_db(const void* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_data::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  return db_;
}
inline ::std::string* user_data::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_data::set_allocated_db(::std::string* db) {
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    delete db_;
  }
  if (db) {
    set_has_db();
    db_ = db;
  } else {
    clear_has_db();
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 role_id = 2;
inline bool user_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_data::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 user_data::role_id() const {
  return role_id_;
}
inline void user_data::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 scene_id = 3;
inline bool user_data::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_data::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_data::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_data::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 user_data::scene_id() const {
  return scene_id_;
}
inline void user_data::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 agent_id = 4;
inline bool user_data::has_agent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_data::set_has_agent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_data::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_data::clear_agent_id() {
  agent_id_ = 0u;
  clear_has_agent_id();
}
inline ::google::protobuf::uint32 user_data::agent_id() const {
  return agent_id_;
}
inline void user_data::set_agent_id(::google::protobuf::uint32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional uint32 client_id = 5;
inline bool user_data::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_data::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_data::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_data::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 user_data::client_id() const {
  return client_id_;
}
inline void user_data::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::forward_msg_target>() {
  return ::server::forward_msg_target_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2enode_2eproto__INCLUDED
