// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.service_notify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.service_notify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server {

namespace {

const ::google::protobuf::Descriptor* scene_service_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scene_service_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* scene_service_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scene_service_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eservice_5fnotify_2eproto() {
  protobuf_AddDesc_server_2eservice_5fnotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.service_notify.proto");
  GOOGLE_CHECK(file != NULL);
  scene_service_info_descriptor_ = file->message_type(0);
  static const int scene_service_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_info, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_info, service_id_),
  };
  scene_service_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scene_service_info_descriptor_,
      scene_service_info::default_instance_,
      scene_service_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scene_service_info));
  scene_service_msg_descriptor_ = file->message_type(1);
  static const int scene_service_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_msg, ssi_),
  };
  scene_service_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scene_service_msg_descriptor_,
      scene_service_msg::default_instance_,
      scene_service_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_service_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scene_service_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eservice_5fnotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scene_service_info_descriptor_, &scene_service_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scene_service_msg_descriptor_, &scene_service_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eservice_5fnotify_2eproto() {
  delete scene_service_info::default_instance_;
  delete scene_service_info_reflection_;
  delete scene_service_msg::default_instance_;
  delete scene_service_msg_reflection_;
}

void protobuf_AddDesc_server_2eservice_5fnotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033server.service_notify.proto\022\006server\":\n"
    "\022scene_service_info\022\020\n\010scene_id\030\001 \002(\r\022\022\n"
    "\nservice_id\030\002 \002(\r\"<\n\021scene_service_msg\022\'"
    "\n\003ssi\030\001 \003(\0132\032.server.scene_service_info", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.service_notify.proto", &protobuf_RegisterTypes);
  scene_service_info::default_instance_ = new scene_service_info();
  scene_service_msg::default_instance_ = new scene_service_msg();
  scene_service_info::default_instance_->InitAsDefaultInstance();
  scene_service_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eservice_5fnotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eservice_5fnotify_2eproto {
  StaticDescriptorInitializer_server_2eservice_5fnotify_2eproto() {
    protobuf_AddDesc_server_2eservice_5fnotify_2eproto();
  }
} static_descriptor_initializer_server_2eservice_5fnotify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int scene_service_info::kSceneIdFieldNumber;
const int scene_service_info::kServiceIdFieldNumber;
#endif  // !_MSC_VER

scene_service_info::scene_service_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scene_service_info::InitAsDefaultInstance() {
}

scene_service_info::scene_service_info(const scene_service_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scene_service_info::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  service_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scene_service_info::~scene_service_info() {
  SharedDtor();
}

void scene_service_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scene_service_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scene_service_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_service_info_descriptor_;
}

const scene_service_info& scene_service_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eservice_5fnotify_2eproto();
  return *default_instance_;
}

scene_service_info* scene_service_info::default_instance_ = NULL;

scene_service_info* scene_service_info::New() const {
  return new scene_service_info;
}

void scene_service_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
    service_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scene_service_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service_id;
        break;
      }

      // required uint32 service_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scene_service_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // required uint32 service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scene_service_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // required uint32 service_id = 2;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scene_service_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required uint32 service_id = 2;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scene_service_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scene_service_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scene_service_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scene_service_info::MergeFrom(const scene_service_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scene_service_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scene_service_info::CopyFrom(const scene_service_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scene_service_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void scene_service_info::Swap(scene_service_info* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scene_service_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scene_service_info_descriptor_;
  metadata.reflection = scene_service_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scene_service_msg::kSsiFieldNumber;
#endif  // !_MSC_VER

scene_service_msg::scene_service_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scene_service_msg::InitAsDefaultInstance() {
}

scene_service_msg::scene_service_msg(const scene_service_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scene_service_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scene_service_msg::~scene_service_msg() {
  SharedDtor();
}

void scene_service_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scene_service_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scene_service_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_service_msg_descriptor_;
}

const scene_service_msg& scene_service_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eservice_5fnotify_2eproto();
  return *default_instance_;
}

scene_service_msg* scene_service_msg::default_instance_ = NULL;

scene_service_msg* scene_service_msg::New() const {
  return new scene_service_msg;
}

void scene_service_msg::Clear() {
  ssi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scene_service_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.scene_service_info ssi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ssi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ssi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scene_service_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server.scene_service_info ssi = 1;
  for (int i = 0; i < this->ssi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ssi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scene_service_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server.scene_service_info ssi = 1;
  for (int i = 0; i < this->ssi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ssi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scene_service_msg::ByteSize() const {
  int total_size = 0;

  // repeated .server.scene_service_info ssi = 1;
  total_size += 1 * this->ssi_size();
  for (int i = 0; i < this->ssi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ssi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scene_service_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scene_service_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scene_service_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scene_service_msg::MergeFrom(const scene_service_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ssi_.MergeFrom(from.ssi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scene_service_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scene_service_msg::CopyFrom(const scene_service_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scene_service_msg::IsInitialized() const {

  for (int i = 0; i < ssi_size(); i++) {
    if (!this->ssi(i).IsInitialized()) return false;
  }
  return true;
}

void scene_service_msg::Swap(scene_service_msg* other) {
  if (other != this) {
    ssi_.Swap(&other->ssi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scene_service_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scene_service_msg_descriptor_;
  metadata.reflection = scene_service_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
