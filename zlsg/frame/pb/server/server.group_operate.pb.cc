// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.group_operate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.group_operate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server {

namespace {

const ::google::protobuf::Descriptor* group_operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_operate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* group_operate_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scene_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scene_ready_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2egroup_5foperate_2eproto() {
  protobuf_AddDesc_server_2egroup_5foperate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.group_operate.proto");
  GOOGLE_CHECK(file != NULL);
  group_operate_descriptor_ = file->message_type(0);
  static const int group_operate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_operate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_operate, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_operate, opt_type_),
  };
  group_operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_operate_descriptor_,
      group_operate::default_instance_,
      group_operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_operate));
  group_operate_TYPE_descriptor_ = group_operate_descriptor_->enum_type(0);
  scene_ready_descriptor_ = file->message_type(1);
  static const int scene_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, time_now_),
  };
  scene_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scene_ready_descriptor_,
      scene_ready::default_instance_,
      scene_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scene_ready));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2egroup_5foperate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_operate_descriptor_, &group_operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scene_ready_descriptor_, &scene_ready::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2egroup_5foperate_2eproto() {
  delete group_operate::default_instance_;
  delete group_operate_reflection_;
  delete scene_ready::default_instance_;
  delete scene_ready_reflection_;
}

void protobuf_AddDesc_server_2egroup_5foperate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032server.group_operate.proto\022\006server\"\241\001\n"
    "\rgroup_operate\022\n\n\002id\030\001 \002(\005\022\022\n\nservice_id"
    "\030\002 \002(\r\022,\n\010opt_type\030\003 \002(\0162\032.server.group_"
    "operate.TYPE\"B\n\004TYPE\022\n\n\006create\020\000\022\t\n\005ente"
    "r\020\001\022\t\n\005leave\020\002\022\t\n\005clear\020\003\022\r\n\tbroadcast\020\004"
    "\"\037\n\013scene_ready\022\020\n\010time_now\030\001 \002(\r", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.group_operate.proto", &protobuf_RegisterTypes);
  group_operate::default_instance_ = new group_operate();
  scene_ready::default_instance_ = new scene_ready();
  group_operate::default_instance_->InitAsDefaultInstance();
  scene_ready::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2egroup_5foperate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2egroup_5foperate_2eproto {
  StaticDescriptorInitializer_server_2egroup_5foperate_2eproto() {
    protobuf_AddDesc_server_2egroup_5foperate_2eproto();
  }
} static_descriptor_initializer_server_2egroup_5foperate_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* group_operate_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_operate_TYPE_descriptor_;
}
bool group_operate_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const group_operate_TYPE group_operate::create;
const group_operate_TYPE group_operate::enter;
const group_operate_TYPE group_operate::leave;
const group_operate_TYPE group_operate::clear;
const group_operate_TYPE group_operate::broadcast;
const group_operate_TYPE group_operate::TYPE_MIN;
const group_operate_TYPE group_operate::TYPE_MAX;
const int group_operate::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int group_operate::kIdFieldNumber;
const int group_operate::kServiceIdFieldNumber;
const int group_operate::kOptTypeFieldNumber;
#endif  // !_MSC_VER

group_operate::group_operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void group_operate::InitAsDefaultInstance() {
}

group_operate::group_operate(const group_operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void group_operate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  service_id_ = 0u;
  opt_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_operate::~group_operate() {
  SharedDtor();
}

void group_operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void group_operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_operate_descriptor_;
}

const group_operate& group_operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2egroup_5foperate_2eproto();
  return *default_instance_;
}

group_operate* group_operate::default_instance_ = NULL;

group_operate* group_operate::New() const {
  return new group_operate;
}

void group_operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    service_id_ = 0u;
    opt_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service_id;
        break;
      }

      // required uint32 service_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt_type;
        break;
      }

      // required .server.group_operate.TYPE opt_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server::group_operate_TYPE_IsValid(value)) {
            set_opt_type(static_cast< ::server::group_operate_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void group_operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint32 service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  // required .server.group_operate.TYPE opt_type = 3;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* group_operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required uint32 service_id = 2;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  // required .server.group_operate.TYPE opt_type = 3;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int group_operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required uint32 service_id = 2;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // required .server.group_operate.TYPE opt_type = 3;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_operate::MergeFrom(const group_operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_operate::CopyFrom(const group_operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void group_operate::Swap(group_operate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(service_id_, other->service_id_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_operate_descriptor_;
  metadata.reflection = group_operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scene_ready::kTimeNowFieldNumber;
#endif  // !_MSC_VER

scene_ready::scene_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scene_ready::InitAsDefaultInstance() {
}

scene_ready::scene_ready(const scene_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scene_ready::SharedCtor() {
  _cached_size_ = 0;
  time_now_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scene_ready::~scene_ready() {
  SharedDtor();
}

void scene_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scene_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scene_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_ready_descriptor_;
}

const scene_ready& scene_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2egroup_5foperate_2eproto();
  return *default_instance_;
}

scene_ready* scene_ready::default_instance_ = NULL;

scene_ready* scene_ready::New() const {
  return new scene_ready;
}

void scene_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_now_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scene_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_now_)));
          set_has_time_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scene_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time_now = 1;
  if (has_time_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scene_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time_now = 1;
  if (has_time_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scene_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_now = 1;
    if (has_time_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scene_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scene_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scene_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scene_ready::MergeFrom(const scene_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_now()) {
      set_time_now(from.time_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scene_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scene_ready::CopyFrom(const scene_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scene_ready::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scene_ready::Swap(scene_ready* other) {
  if (other != this) {
    std::swap(time_now_, other->time_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scene_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scene_ready_descriptor_;
  metadata.reflection = scene_ready_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
