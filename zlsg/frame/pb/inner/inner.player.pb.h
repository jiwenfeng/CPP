// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.player.proto

#ifndef PROTOBUF_inner_2eplayer_2eproto__INCLUDED
#define PROTOBUF_inner_2eplayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2eplayer_2eproto();
void protobuf_AssignDesc_inner_2eplayer_2eproto();
void protobuf_ShutdownFile_inner_2eplayer_2eproto();

class getPlayerList_req;
class getPlayerList_rsp;
class t_online_req;
class t_online_rsp;
class realtime_roles;
class set_attr_req;
class set_attr_rsp;
class set_vip_req;
class set_vip_rsp;

// ===================================================================

class getPlayerList_req : public ::google::protobuf::Message {
 public:
  getPlayerList_req();
  virtual ~getPlayerList_req();

  getPlayerList_req(const getPlayerList_req& from);

  inline getPlayerList_req& operator=(const getPlayerList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPlayerList_req& default_instance();

  void Swap(getPlayerList_req* other);

  // implements Message ----------------------------------------------

  getPlayerList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPlayerList_req& from);
  void MergeFrom(const getPlayerList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 userType = 2;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 2;
  inline ::google::protobuf::int32 usertype() const;
  inline void set_usertype(::google::protobuf::int32 value);

  // optional int32 regBeginTime = 3;
  inline bool has_regbegintime() const;
  inline void clear_regbegintime();
  static const int kRegBeginTimeFieldNumber = 3;
  inline ::google::protobuf::int32 regbegintime() const;
  inline void set_regbegintime(::google::protobuf::int32 value);

  // optional int32 regEndTime = 4;
  inline bool has_regendtime() const;
  inline void clear_regendtime();
  static const int kRegEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 regendtime() const;
  inline void set_regendtime(::google::protobuf::int32 value);

  // optional int32 loginBeginTime = 5;
  inline bool has_loginbegintime() const;
  inline void clear_loginbegintime();
  static const int kLoginBeginTimeFieldNumber = 5;
  inline ::google::protobuf::int32 loginbegintime() const;
  inline void set_loginbegintime(::google::protobuf::int32 value);

  // optional int32 loginEndTime = 6;
  inline bool has_loginendtime() const;
  inline void clear_loginendtime();
  static const int kLoginEndTimeFieldNumber = 6;
  inline ::google::protobuf::int32 loginendtime() const;
  inline void set_loginendtime(::google::protobuf::int32 value);

  // optional int32 page = 7;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 7;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 pageSize = 8;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 8;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.getPlayerList_req)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_regbegintime();
  inline void clear_has_regbegintime();
  inline void set_has_regendtime();
  inline void clear_has_regendtime();
  inline void set_has_loginbegintime();
  inline void clear_has_loginbegintime();
  inline void set_has_loginendtime();
  inline void clear_has_loginendtime();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 usertype_;
  ::google::protobuf::int32 regbegintime_;
  ::google::protobuf::int32 regendtime_;
  ::google::protobuf::int32 loginbegintime_;
  ::google::protobuf::int32 loginendtime_;
  ::google::protobuf::int32 page_;
  ::inner::inner_head* head_;
  ::google::protobuf::int32 pagesize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static getPlayerList_req* default_instance_;
};
// -------------------------------------------------------------------

class getPlayerList_rsp : public ::google::protobuf::Message {
 public:
  getPlayerList_rsp();
  virtual ~getPlayerList_rsp();

  getPlayerList_rsp(const getPlayerList_rsp& from);

  inline getPlayerList_rsp& operator=(const getPlayerList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPlayerList_rsp& default_instance();

  void Swap(getPlayerList_rsp* other);

  // implements Message ----------------------------------------------

  getPlayerList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPlayerList_rsp& from);
  void MergeFrom(const getPlayerList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getPlayerList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static getPlayerList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class t_online_req : public ::google::protobuf::Message {
 public:
  t_online_req();
  virtual ~t_online_req();

  t_online_req(const t_online_req& from);

  inline t_online_req& operator=(const t_online_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_online_req& default_instance();

  void Swap(t_online_req* other);

  // implements Message ----------------------------------------------

  t_online_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_online_req& from);
  void MergeFrom(const t_online_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.t_online_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_head* head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static t_online_req* default_instance_;
};
// -------------------------------------------------------------------

class t_online_rsp : public ::google::protobuf::Message {
 public:
  t_online_rsp();
  virtual ~t_online_rsp();

  t_online_rsp(const t_online_rsp& from);

  inline t_online_rsp& operator=(const t_online_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_online_rsp& default_instance();

  void Swap(t_online_rsp* other);

  // implements Message ----------------------------------------------

  t_online_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_online_rsp& from);
  void MergeFrom(const t_online_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // required uint32 allcount = 3;
  inline bool has_allcount() const;
  inline void clear_allcount();
  static const int kAllcountFieldNumber = 3;
  inline ::google::protobuf::uint32 allcount() const;
  inline void set_allcount(::google::protobuf::uint32 value);

  // required uint32 cashcount = 4;
  inline bool has_cashcount() const;
  inline void clear_cashcount();
  static const int kCashcountFieldNumber = 4;
  inline ::google::protobuf::uint32 cashcount() const;
  inline void set_cashcount(::google::protobuf::uint32 value);

  // required uint32 createdate = 5;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreatedateFieldNumber = 5;
  inline ::google::protobuf::uint32 createdate() const;
  inline void set_createdate(::google::protobuf::uint32 value);

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.t_online_rsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_allcount();
  inline void clear_has_allcount();
  inline void set_has_cashcount();
  inline void clear_has_cashcount();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::uint32 allcount_;
  ::google::protobuf::uint32 cashcount_;
  ::inner::inner_tail* tail_;
  ::google::protobuf::uint32 createdate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static t_online_rsp* default_instance_;
};
// -------------------------------------------------------------------

class realtime_roles : public ::google::protobuf::Message {
 public:
  realtime_roles();
  virtual ~realtime_roles();

  realtime_roles(const realtime_roles& from);

  inline realtime_roles& operator=(const realtime_roles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const realtime_roles& default_instance();

  void Swap(realtime_roles* other);

  // implements Message ----------------------------------------------

  realtime_roles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const realtime_roles& from);
  void MergeFrom(const realtime_roles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:inner.realtime_roles)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static realtime_roles* default_instance_;
};
// -------------------------------------------------------------------

class set_attr_req : public ::google::protobuf::Message {
 public:
  set_attr_req();
  virtual ~set_attr_req();

  set_attr_req(const set_attr_req& from);

  inline set_attr_req& operator=(const set_attr_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_attr_req& default_instance();

  void Swap(set_attr_req* other);

  // implements Message ----------------------------------------------

  set_attr_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_attr_req& from);
  void MergeFrom(const set_attr_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 3;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.set_attr_req)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static set_attr_req* default_instance_;
};
// -------------------------------------------------------------------

class set_attr_rsp : public ::google::protobuf::Message {
 public:
  set_attr_rsp();
  virtual ~set_attr_rsp();

  set_attr_rsp(const set_attr_rsp& from);

  inline set_attr_rsp& operator=(const set_attr_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_attr_rsp& default_instance();

  void Swap(set_attr_rsp* other);

  // implements Message ----------------------------------------------

  set_attr_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_attr_rsp& from);
  void MergeFrom(const set_attr_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 3;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // optional .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.set_attr_rsp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static set_attr_rsp* default_instance_;
};
// -------------------------------------------------------------------

class set_vip_req : public ::google::protobuf::Message {
 public:
  set_vip_req();
  virtual ~set_vip_req();

  set_vip_req(const set_vip_req& from);

  inline set_vip_req& operator=(const set_vip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_vip_req& default_instance();

  void Swap(set_vip_req* other);

  // implements Message ----------------------------------------------

  set_vip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_vip_req& from);
  void MergeFrom(const set_vip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 3;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.set_vip_req)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static set_vip_req* default_instance_;
};
// -------------------------------------------------------------------

class set_vip_rsp : public ::google::protobuf::Message {
 public:
  set_vip_rsp();
  virtual ~set_vip_rsp();

  set_vip_rsp(const set_vip_rsp& from);

  inline set_vip_rsp& operator=(const set_vip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_vip_rsp& default_instance();

  void Swap(set_vip_rsp* other);

  // implements Message ----------------------------------------------

  set_vip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_vip_rsp& from);
  void MergeFrom(const set_vip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 3;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // optional .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.set_vip_rsp)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2eplayer_2eproto();
  friend void protobuf_AssignDesc_inner_2eplayer_2eproto();
  friend void protobuf_ShutdownFile_inner_2eplayer_2eproto();

  void InitAsDefaultInstance();
  static set_vip_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// getPlayerList_req

// optional string user = 1;
inline bool getPlayerList_req::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getPlayerList_req::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getPlayerList_req::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getPlayerList_req::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& getPlayerList_req::user() const {
  return *user_;
}
inline void getPlayerList_req::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void getPlayerList_req::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void getPlayerList_req::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getPlayerList_req::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* getPlayerList_req::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getPlayerList_req::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userType = 2;
inline bool getPlayerList_req::has_usertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getPlayerList_req::set_has_usertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getPlayerList_req::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getPlayerList_req::clear_usertype() {
  usertype_ = 0;
  clear_has_usertype();
}
inline ::google::protobuf::int32 getPlayerList_req::usertype() const {
  return usertype_;
}
inline void getPlayerList_req::set_usertype(::google::protobuf::int32 value) {
  set_has_usertype();
  usertype_ = value;
}

// optional int32 regBeginTime = 3;
inline bool getPlayerList_req::has_regbegintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getPlayerList_req::set_has_regbegintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getPlayerList_req::clear_has_regbegintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getPlayerList_req::clear_regbegintime() {
  regbegintime_ = 0;
  clear_has_regbegintime();
}
inline ::google::protobuf::int32 getPlayerList_req::regbegintime() const {
  return regbegintime_;
}
inline void getPlayerList_req::set_regbegintime(::google::protobuf::int32 value) {
  set_has_regbegintime();
  regbegintime_ = value;
}

// optional int32 regEndTime = 4;
inline bool getPlayerList_req::has_regendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getPlayerList_req::set_has_regendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getPlayerList_req::clear_has_regendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getPlayerList_req::clear_regendtime() {
  regendtime_ = 0;
  clear_has_regendtime();
}
inline ::google::protobuf::int32 getPlayerList_req::regendtime() const {
  return regendtime_;
}
inline void getPlayerList_req::set_regendtime(::google::protobuf::int32 value) {
  set_has_regendtime();
  regendtime_ = value;
}

// optional int32 loginBeginTime = 5;
inline bool getPlayerList_req::has_loginbegintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void getPlayerList_req::set_has_loginbegintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void getPlayerList_req::clear_has_loginbegintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void getPlayerList_req::clear_loginbegintime() {
  loginbegintime_ = 0;
  clear_has_loginbegintime();
}
inline ::google::protobuf::int32 getPlayerList_req::loginbegintime() const {
  return loginbegintime_;
}
inline void getPlayerList_req::set_loginbegintime(::google::protobuf::int32 value) {
  set_has_loginbegintime();
  loginbegintime_ = value;
}

// optional int32 loginEndTime = 6;
inline bool getPlayerList_req::has_loginendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void getPlayerList_req::set_has_loginendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void getPlayerList_req::clear_has_loginendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void getPlayerList_req::clear_loginendtime() {
  loginendtime_ = 0;
  clear_has_loginendtime();
}
inline ::google::protobuf::int32 getPlayerList_req::loginendtime() const {
  return loginendtime_;
}
inline void getPlayerList_req::set_loginendtime(::google::protobuf::int32 value) {
  set_has_loginendtime();
  loginendtime_ = value;
}

// optional int32 page = 7;
inline bool getPlayerList_req::has_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void getPlayerList_req::set_has_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void getPlayerList_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void getPlayerList_req::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 getPlayerList_req::page() const {
  return page_;
}
inline void getPlayerList_req::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 pageSize = 8;
inline bool getPlayerList_req::has_pagesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void getPlayerList_req::set_has_pagesize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void getPlayerList_req::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void getPlayerList_req::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 getPlayerList_req::pagesize() const {
  return pagesize_;
}
inline void getPlayerList_req::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool getPlayerList_req::has_head() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void getPlayerList_req::set_has_head() {
  _has_bits_[0] |= 0x00000100u;
}
inline void getPlayerList_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void getPlayerList_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& getPlayerList_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* getPlayerList_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* getPlayerList_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void getPlayerList_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// getPlayerList_rsp

// required .inner.inner_tail tail = 1000;
inline bool getPlayerList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getPlayerList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getPlayerList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getPlayerList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getPlayerList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getPlayerList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getPlayerList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getPlayerList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// t_online_req

// required uint32 unixtime = 1;
inline bool t_online_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_online_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_online_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_online_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 t_online_req::unixtime() const {
  return unixtime_;
}
inline void t_online_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool t_online_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_online_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_online_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_online_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& t_online_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* t_online_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* t_online_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void t_online_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// t_online_rsp

// required uint32 id = 1;
inline bool t_online_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_online_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_online_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_online_rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 t_online_rsp::id() const {
  return id_;
}
inline void t_online_rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 sid = 2;
inline bool t_online_rsp::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_online_rsp::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_online_rsp::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_online_rsp::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 t_online_rsp::sid() const {
  return sid_;
}
inline void t_online_rsp::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
}

// required uint32 allcount = 3;
inline bool t_online_rsp::has_allcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_online_rsp::set_has_allcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_online_rsp::clear_has_allcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_online_rsp::clear_allcount() {
  allcount_ = 0u;
  clear_has_allcount();
}
inline ::google::protobuf::uint32 t_online_rsp::allcount() const {
  return allcount_;
}
inline void t_online_rsp::set_allcount(::google::protobuf::uint32 value) {
  set_has_allcount();
  allcount_ = value;
}

// required uint32 cashcount = 4;
inline bool t_online_rsp::has_cashcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_online_rsp::set_has_cashcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_online_rsp::clear_has_cashcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_online_rsp::clear_cashcount() {
  cashcount_ = 0u;
  clear_has_cashcount();
}
inline ::google::protobuf::uint32 t_online_rsp::cashcount() const {
  return cashcount_;
}
inline void t_online_rsp::set_cashcount(::google::protobuf::uint32 value) {
  set_has_cashcount();
  cashcount_ = value;
}

// required uint32 createdate = 5;
inline bool t_online_rsp::has_createdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_online_rsp::set_has_createdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_online_rsp::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_online_rsp::clear_createdate() {
  createdate_ = 0u;
  clear_has_createdate();
}
inline ::google::protobuf::uint32 t_online_rsp::createdate() const {
  return createdate_;
}
inline void t_online_rsp::set_createdate(::google::protobuf::uint32 value) {
  set_has_createdate();
  createdate_ = value;
}

// required .inner.inner_tail tail = 1000;
inline bool t_online_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_online_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_online_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_online_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& t_online_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* t_online_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* t_online_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void t_online_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// realtime_roles

// repeated uint32 id = 1;
inline int realtime_roles::id_size() const {
  return id_.size();
}
inline void realtime_roles::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 realtime_roles::id(int index) const {
  return id_.Get(index);
}
inline void realtime_roles::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void realtime_roles::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
realtime_roles::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
realtime_roles::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// set_attr_req

// required uint32 index = 1;
inline bool set_attr_req::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_attr_req::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_attr_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_attr_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 set_attr_req::index() const {
  return index_;
}
inline void set_attr_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 value = 2;
inline bool set_attr_req::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_attr_req::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_attr_req::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_attr_req::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 set_attr_req::value() const {
  return value_;
}
inline void set_attr_req::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// repeated .inner.inner_user user = 3;
inline int set_attr_req::user_size() const {
  return user_.size();
}
inline void set_attr_req::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& set_attr_req::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* set_attr_req::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* set_attr_req::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
set_attr_req::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
set_attr_req::mutable_user() {
  return &user_;
}

// optional .inner.inner_head head = 1000;
inline bool set_attr_req::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_attr_req::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_attr_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_attr_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& set_attr_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* set_attr_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* set_attr_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void set_attr_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// set_attr_rsp

// required uint32 index = 1;
inline bool set_attr_rsp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_attr_rsp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_attr_rsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_attr_rsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 set_attr_rsp::index() const {
  return index_;
}
inline void set_attr_rsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 value = 2;
inline bool set_attr_rsp::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_attr_rsp::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_attr_rsp::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_attr_rsp::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 set_attr_rsp::value() const {
  return value_;
}
inline void set_attr_rsp::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// repeated .inner.inner_user user = 3;
inline int set_attr_rsp::user_size() const {
  return user_.size();
}
inline void set_attr_rsp::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& set_attr_rsp::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* set_attr_rsp::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* set_attr_rsp::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
set_attr_rsp::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
set_attr_rsp::mutable_user() {
  return &user_;
}

// optional .inner.inner_tail tail = 1000;
inline bool set_attr_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_attr_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_attr_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_attr_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& set_attr_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* set_attr_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* set_attr_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void set_attr_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// set_vip_req

// required uint32 lv = 1;
inline bool set_vip_req::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_vip_req::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_vip_req::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_vip_req::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 set_vip_req::lv() const {
  return lv_;
}
inline void set_vip_req::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 month = 2;
inline bool set_vip_req::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_vip_req::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_vip_req::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_vip_req::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 set_vip_req::month() const {
  return month_;
}
inline void set_vip_req::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// repeated .inner.inner_user user = 3;
inline int set_vip_req::user_size() const {
  return user_.size();
}
inline void set_vip_req::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& set_vip_req::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* set_vip_req::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* set_vip_req::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
set_vip_req::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
set_vip_req::mutable_user() {
  return &user_;
}

// optional .inner.inner_head head = 1000;
inline bool set_vip_req::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_vip_req::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_vip_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_vip_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& set_vip_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* set_vip_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* set_vip_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void set_vip_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// set_vip_rsp

// required uint32 lv = 1;
inline bool set_vip_rsp::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_vip_rsp::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_vip_rsp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_vip_rsp::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 set_vip_rsp::lv() const {
  return lv_;
}
inline void set_vip_rsp::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 month = 2;
inline bool set_vip_rsp::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_vip_rsp::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_vip_rsp::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_vip_rsp::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 set_vip_rsp::month() const {
  return month_;
}
inline void set_vip_rsp::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// repeated .inner.inner_user user = 3;
inline int set_vip_rsp::user_size() const {
  return user_.size();
}
inline void set_vip_rsp::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& set_vip_rsp::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* set_vip_rsp::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* set_vip_rsp::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
set_vip_rsp::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
set_vip_rsp::mutable_user() {
  return &user_;
}

// optional .inner.inner_tail tail = 1000;
inline bool set_vip_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_vip_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_vip_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_vip_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& set_vip_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* set_vip_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* set_vip_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void set_vip_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2eplayer_2eproto__INCLUDED
