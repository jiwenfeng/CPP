// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.function_on.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.function_on.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* activity_control_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_control_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_control_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_control_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2efunction_5fon_2eproto() {
  protobuf_AddDesc_inner_2efunction_5fon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.function_on.proto");
  GOOGLE_CHECK(file != NULL);
  activity_control_req_descriptor_ = file->message_type(0);
  static const int activity_control_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_req, open_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_req, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_req, head_),
  };
  activity_control_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_control_req_descriptor_,
      activity_control_req::default_instance_,
      activity_control_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_control_req));
  activity_control_rsp_descriptor_ = file->message_type(1);
  static const int activity_control_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_rsp, open_type_),
  };
  activity_control_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_control_rsp_descriptor_,
      activity_control_rsp::default_instance_,
      activity_control_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_control_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_control_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2efunction_5fon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_control_req_descriptor_, &activity_control_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_control_rsp_descriptor_, &activity_control_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2efunction_5fon_2eproto() {
  delete activity_control_req::default_instance_;
  delete activity_control_req_reflection_;
  delete activity_control_rsp::default_instance_;
  delete activity_control_rsp_reflection_;
}

void protobuf_AddDesc_inner_2efunction_5fon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027inner.function_on.proto\022\005inner\032\020inner."
    "comm.proto\"`\n\024activity_control_req\022\021\n\top"
    "en_type\030\001 \002(\r\022\023\n\013activity_id\030\002 \002(\r\022 \n\004he"
    "ad\030\350\007 \001(\0132\021.inner.inner_head\">\n\024activity"
    "_control_rsp\022\023\n\013result_type\030\001 \002(\r\022\021\n\tope"
    "n_type\030\002 \002(\r", 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.function_on.proto", &protobuf_RegisterTypes);
  activity_control_req::default_instance_ = new activity_control_req();
  activity_control_rsp::default_instance_ = new activity_control_rsp();
  activity_control_req::default_instance_->InitAsDefaultInstance();
  activity_control_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2efunction_5fon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2efunction_5fon_2eproto {
  StaticDescriptorInitializer_inner_2efunction_5fon_2eproto() {
    protobuf_AddDesc_inner_2efunction_5fon_2eproto();
  }
} static_descriptor_initializer_inner_2efunction_5fon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int activity_control_req::kOpenTypeFieldNumber;
const int activity_control_req::kActivityIdFieldNumber;
const int activity_control_req::kHeadFieldNumber;
#endif  // !_MSC_VER

activity_control_req::activity_control_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_control_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

activity_control_req::activity_control_req(const activity_control_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_control_req::SharedCtor() {
  _cached_size_ = 0;
  open_type_ = 0u;
  activity_id_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_control_req::~activity_control_req() {
  SharedDtor();
}

void activity_control_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void activity_control_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_control_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_control_req_descriptor_;
}

const activity_control_req& activity_control_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efunction_5fon_2eproto();
  return *default_instance_;
}

activity_control_req* activity_control_req::default_instance_ = NULL;

activity_control_req* activity_control_req::New() const {
  return new activity_control_req;
}

void activity_control_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_type_ = 0u;
    activity_id_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_control_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_type_)));
          set_has_open_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // required uint32 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_control_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 open_type = 1;
  if (has_open_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_type(), output);
  }

  // required uint32 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_id(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_control_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 open_type = 1;
  if (has_open_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_type(), target);
  }

  // required uint32 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_id(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_control_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_type = 1;
    if (has_open_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_type());
    }

    // required uint32 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_control_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_control_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_control_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_control_req::MergeFrom(const activity_control_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_type()) {
      set_open_type(from.open_type());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_control_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_control_req::CopyFrom(const activity_control_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_control_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_control_req::Swap(activity_control_req* other) {
  if (other != this) {
    std::swap(open_type_, other->open_type_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_control_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_control_req_descriptor_;
  metadata.reflection = activity_control_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_control_rsp::kResultTypeFieldNumber;
const int activity_control_rsp::kOpenTypeFieldNumber;
#endif  // !_MSC_VER

activity_control_rsp::activity_control_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_control_rsp::InitAsDefaultInstance() {
}

activity_control_rsp::activity_control_rsp(const activity_control_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_control_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  open_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_control_rsp::~activity_control_rsp() {
  SharedDtor();
}

void activity_control_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_control_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_control_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_control_rsp_descriptor_;
}

const activity_control_rsp& activity_control_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efunction_5fon_2eproto();
  return *default_instance_;
}

activity_control_rsp* activity_control_rsp::default_instance_ = NULL;

activity_control_rsp* activity_control_rsp::New() const {
  return new activity_control_rsp;
}

void activity_control_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    open_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_control_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_type;
        break;
      }

      // required uint32 open_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_type_)));
          set_has_open_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_control_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 open_type = 2;
  if (has_open_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_control_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 open_type = 2;
  if (has_open_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_control_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 open_type = 2;
    if (has_open_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_control_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_control_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_control_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_control_rsp::MergeFrom(const activity_control_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_open_type()) {
      set_open_type(from.open_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_control_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_control_rsp::CopyFrom(const activity_control_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_control_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_control_rsp::Swap(activity_control_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(open_type_, other->open_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_control_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_control_rsp_descriptor_;
  metadata.reflection = activity_control_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
