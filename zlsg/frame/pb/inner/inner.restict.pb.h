// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.restict.proto

#ifndef PROTOBUF_inner_2erestict_2eproto__INCLUDED
#define PROTOBUF_inner_2erestict_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2erestict_2eproto();
void protobuf_AssignDesc_inner_2erestict_2eproto();
void protobuf_ShutdownFile_inner_2erestict_2eproto();

class getPlayerRestictList_req;
class ban_info;
class getPlayerRestictList_rsp;
class addPlayerRestict_req;
class addPlayerRestict_rsp;
class delPlayerRestict_req;
class delPlayerRestict_rsp;

// ===================================================================

class getPlayerRestictList_req : public ::google::protobuf::Message {
 public:
  getPlayerRestictList_req();
  virtual ~getPlayerRestictList_req();

  getPlayerRestictList_req(const getPlayerRestictList_req& from);

  inline getPlayerRestictList_req& operator=(const getPlayerRestictList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPlayerRestictList_req& default_instance();

  void Swap(getPlayerRestictList_req* other);

  // implements Message ----------------------------------------------

  getPlayerRestictList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPlayerRestictList_req& from);
  void MergeFrom(const getPlayerRestictList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 pageSize = 3;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 3;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.getPlayerRestictList_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 page_;
  ::inner::inner_head* head_;
  ::google::protobuf::int32 pagesize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static getPlayerRestictList_req* default_instance_;
};
// -------------------------------------------------------------------

class ban_info : public ::google::protobuf::Message {
 public:
  ban_info();
  virtual ~ban_info();

  ban_info(const ban_info& from);

  inline ban_info& operator=(const ban_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ban_info& default_instance();

  void Swap(ban_info* other);

  // implements Message ----------------------------------------------

  ban_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ban_info& from);
  void MergeFrom(const ban_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_user user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::inner::inner_user& user() const;
  inline ::inner::inner_user* mutable_user();
  inline ::inner::inner_user* release_user();
  inline void set_allocated_user(::inner::inner_user* user);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:inner.ban_info)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_user* user_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static ban_info* default_instance_;
};
// -------------------------------------------------------------------

class getPlayerRestictList_rsp : public ::google::protobuf::Message {
 public:
  getPlayerRestictList_rsp();
  virtual ~getPlayerRestictList_rsp();

  getPlayerRestictList_rsp(const getPlayerRestictList_rsp& from);

  inline getPlayerRestictList_rsp& operator=(const getPlayerRestictList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPlayerRestictList_rsp& default_instance();

  void Swap(getPlayerRestictList_rsp* other);

  // implements Message ----------------------------------------------

  getPlayerRestictList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPlayerRestictList_rsp& from);
  void MergeFrom(const getPlayerRestictList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.ban_info bi = 1;
  inline int bi_size() const;
  inline void clear_bi();
  static const int kBiFieldNumber = 1;
  inline const ::inner::ban_info& bi(int index) const;
  inline ::inner::ban_info* mutable_bi(int index);
  inline ::inner::ban_info* add_bi();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
      bi() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
      mutable_bi();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getPlayerRestictList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::ban_info > bi_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static getPlayerRestictList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class addPlayerRestict_req : public ::google::protobuf::Message {
 public:
  addPlayerRestict_req();
  virtual ~addPlayerRestict_req();

  addPlayerRestict_req(const addPlayerRestict_req& from);

  inline addPlayerRestict_req& operator=(const addPlayerRestict_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addPlayerRestict_req& default_instance();

  void Swap(addPlayerRestict_req* other);

  // implements Message ----------------------------------------------

  addPlayerRestict_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const addPlayerRestict_req& from);
  void MergeFrom(const addPlayerRestict_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.ban_info bi = 1;
  inline int bi_size() const;
  inline void clear_bi();
  static const int kBiFieldNumber = 1;
  inline const ::inner::ban_info& bi(int index) const;
  inline ::inner::ban_info* mutable_bi(int index);
  inline ::inner::ban_info* add_bi();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
      bi() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
      mutable_bi();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.addPlayerRestict_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::ban_info > bi_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static addPlayerRestict_req* default_instance_;
};
// -------------------------------------------------------------------

class addPlayerRestict_rsp : public ::google::protobuf::Message {
 public:
  addPlayerRestict_rsp();
  virtual ~addPlayerRestict_rsp();

  addPlayerRestict_rsp(const addPlayerRestict_rsp& from);

  inline addPlayerRestict_rsp& operator=(const addPlayerRestict_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addPlayerRestict_rsp& default_instance();

  void Swap(addPlayerRestict_rsp* other);

  // implements Message ----------------------------------------------

  addPlayerRestict_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const addPlayerRestict_rsp& from);
  void MergeFrom(const addPlayerRestict_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.addPlayerRestict_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static addPlayerRestict_rsp* default_instance_;
};
// -------------------------------------------------------------------

class delPlayerRestict_req : public ::google::protobuf::Message {
 public:
  delPlayerRestict_req();
  virtual ~delPlayerRestict_req();

  delPlayerRestict_req(const delPlayerRestict_req& from);

  inline delPlayerRestict_req& operator=(const delPlayerRestict_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delPlayerRestict_req& default_instance();

  void Swap(delPlayerRestict_req* other);

  // implements Message ----------------------------------------------

  delPlayerRestict_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const delPlayerRestict_req& from);
  void MergeFrom(const delPlayerRestict_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.ban_info bi = 1;
  inline int bi_size() const;
  inline void clear_bi();
  static const int kBiFieldNumber = 1;
  inline const ::inner::ban_info& bi(int index) const;
  inline ::inner::ban_info* mutable_bi(int index);
  inline ::inner::ban_info* add_bi();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
      bi() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
      mutable_bi();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.delPlayerRestict_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::ban_info > bi_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static delPlayerRestict_req* default_instance_;
};
// -------------------------------------------------------------------

class delPlayerRestict_rsp : public ::google::protobuf::Message {
 public:
  delPlayerRestict_rsp();
  virtual ~delPlayerRestict_rsp();

  delPlayerRestict_rsp(const delPlayerRestict_rsp& from);

  inline delPlayerRestict_rsp& operator=(const delPlayerRestict_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delPlayerRestict_rsp& default_instance();

  void Swap(delPlayerRestict_rsp* other);

  // implements Message ----------------------------------------------

  delPlayerRestict_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const delPlayerRestict_rsp& from);
  void MergeFrom(const delPlayerRestict_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.delPlayerRestict_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2erestict_2eproto();
  friend void protobuf_AssignDesc_inner_2erestict_2eproto();
  friend void protobuf_ShutdownFile_inner_2erestict_2eproto();

  void InitAsDefaultInstance();
  static delPlayerRestict_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// getPlayerRestictList_req

// optional int32 type = 1;
inline bool getPlayerRestictList_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getPlayerRestictList_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getPlayerRestictList_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getPlayerRestictList_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 getPlayerRestictList_req::type() const {
  return type_;
}
inline void getPlayerRestictList_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 page = 2;
inline bool getPlayerRestictList_req::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getPlayerRestictList_req::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getPlayerRestictList_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getPlayerRestictList_req::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 getPlayerRestictList_req::page() const {
  return page_;
}
inline void getPlayerRestictList_req::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 pageSize = 3;
inline bool getPlayerRestictList_req::has_pagesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getPlayerRestictList_req::set_has_pagesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getPlayerRestictList_req::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getPlayerRestictList_req::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 getPlayerRestictList_req::pagesize() const {
  return pagesize_;
}
inline void getPlayerRestictList_req::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool getPlayerRestictList_req::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getPlayerRestictList_req::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getPlayerRestictList_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getPlayerRestictList_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& getPlayerRestictList_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* getPlayerRestictList_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* getPlayerRestictList_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void getPlayerRestictList_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// ban_info

// required .inner.inner_user user = 1;
inline bool ban_info::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ban_info::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ban_info::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ban_info::clear_user() {
  if (user_ != NULL) user_->::inner::inner_user::Clear();
  clear_has_user();
}
inline const ::inner::inner_user& ban_info::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::inner::inner_user* ban_info::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::inner::inner_user;
  return user_;
}
inline ::inner::inner_user* ban_info::release_user() {
  clear_has_user();
  ::inner::inner_user* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ban_info::set_allocated_user(::inner::inner_user* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// required uint32 type = 2;
inline bool ban_info::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ban_info::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ban_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ban_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ban_info::type() const {
  return type_;
}
inline void ban_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 time = 3;
inline bool ban_info::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ban_info::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ban_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ban_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ban_info::time() const {
  return time_;
}
inline void ban_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// getPlayerRestictList_rsp

// repeated .inner.ban_info bi = 1;
inline int getPlayerRestictList_rsp::bi_size() const {
  return bi_.size();
}
inline void getPlayerRestictList_rsp::clear_bi() {
  bi_.Clear();
}
inline const ::inner::ban_info& getPlayerRestictList_rsp::bi(int index) const {
  return bi_.Get(index);
}
inline ::inner::ban_info* getPlayerRestictList_rsp::mutable_bi(int index) {
  return bi_.Mutable(index);
}
inline ::inner::ban_info* getPlayerRestictList_rsp::add_bi() {
  return bi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
getPlayerRestictList_rsp::bi() const {
  return bi_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
getPlayerRestictList_rsp::mutable_bi() {
  return &bi_;
}

// required .inner.inner_tail tail = 1000;
inline bool getPlayerRestictList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getPlayerRestictList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getPlayerRestictList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getPlayerRestictList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getPlayerRestictList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getPlayerRestictList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getPlayerRestictList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getPlayerRestictList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// addPlayerRestict_req

// repeated .inner.ban_info bi = 1;
inline int addPlayerRestict_req::bi_size() const {
  return bi_.size();
}
inline void addPlayerRestict_req::clear_bi() {
  bi_.Clear();
}
inline const ::inner::ban_info& addPlayerRestict_req::bi(int index) const {
  return bi_.Get(index);
}
inline ::inner::ban_info* addPlayerRestict_req::mutable_bi(int index) {
  return bi_.Mutable(index);
}
inline ::inner::ban_info* addPlayerRestict_req::add_bi() {
  return bi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
addPlayerRestict_req::bi() const {
  return bi_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
addPlayerRestict_req::mutable_bi() {
  return &bi_;
}

// optional .inner.inner_head head = 1000;
inline bool addPlayerRestict_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void addPlayerRestict_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void addPlayerRestict_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void addPlayerRestict_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& addPlayerRestict_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* addPlayerRestict_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* addPlayerRestict_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void addPlayerRestict_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// addPlayerRestict_rsp

// required .inner.inner_tail tail = 1000;
inline bool addPlayerRestict_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addPlayerRestict_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addPlayerRestict_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addPlayerRestict_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& addPlayerRestict_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* addPlayerRestict_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* addPlayerRestict_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void addPlayerRestict_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// delPlayerRestict_req

// repeated .inner.ban_info bi = 1;
inline int delPlayerRestict_req::bi_size() const {
  return bi_.size();
}
inline void delPlayerRestict_req::clear_bi() {
  bi_.Clear();
}
inline const ::inner::ban_info& delPlayerRestict_req::bi(int index) const {
  return bi_.Get(index);
}
inline ::inner::ban_info* delPlayerRestict_req::mutable_bi(int index) {
  return bi_.Mutable(index);
}
inline ::inner::ban_info* delPlayerRestict_req::add_bi() {
  return bi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::ban_info >&
delPlayerRestict_req::bi() const {
  return bi_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::ban_info >*
delPlayerRestict_req::mutable_bi() {
  return &bi_;
}

// optional .inner.inner_head head = 1000;
inline bool delPlayerRestict_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delPlayerRestict_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delPlayerRestict_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delPlayerRestict_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& delPlayerRestict_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* delPlayerRestict_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* delPlayerRestict_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void delPlayerRestict_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// delPlayerRestict_rsp

// required .inner.inner_tail tail = 1000;
inline bool delPlayerRestict_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delPlayerRestict_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delPlayerRestict_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delPlayerRestict_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& delPlayerRestict_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* delPlayerRestict_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* delPlayerRestict_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void delPlayerRestict_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2erestict_2eproto__INCLUDED
