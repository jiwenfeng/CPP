// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.backpack.proto

#ifndef PROTOBUF_inner_2ebackpack_2eproto__INCLUDED
#define PROTOBUF_inner_2ebackpack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2ebackpack_2eproto();
void protobuf_AssignDesc_inner_2ebackpack_2eproto();
void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

class getBackpackGoodsList_req;
class backpackGoods;
class getBackpackGoodsList_rsp;
class updateBackpackGoods_req;
class updateBackpackGoods_rsp;

// ===================================================================

class getBackpackGoodsList_req : public ::google::protobuf::Message {
 public:
  getBackpackGoodsList_req();
  virtual ~getBackpackGoodsList_req();

  getBackpackGoodsList_req(const getBackpackGoodsList_req& from);

  inline getBackpackGoodsList_req& operator=(const getBackpackGoodsList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getBackpackGoodsList_req& default_instance();

  void Swap(getBackpackGoodsList_req* other);

  // implements Message ----------------------------------------------

  getBackpackGoodsList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getBackpackGoodsList_req& from);
  void MergeFrom(const getBackpackGoodsList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 2;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.getBackpackGoodsList_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::inner::inner_head* head_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebackpack_2eproto();
  friend void protobuf_AssignDesc_inner_2ebackpack_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

  void InitAsDefaultInstance();
  static getBackpackGoodsList_req* default_instance_;
};
// -------------------------------------------------------------------

class backpackGoods : public ::google::protobuf::Message {
 public:
  backpackGoods();
  virtual ~backpackGoods();

  backpackGoods(const backpackGoods& from);

  inline backpackGoods& operator=(const backpackGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const backpackGoods& default_instance();

  void Swap(backpackGoods* other);

  // implements Message ----------------------------------------------

  backpackGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const backpackGoods& from);
  void MergeFrom(const backpackGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.inner_goods goods = 1;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 1;
  inline const ::inner::inner_goods& goods(int index) const;
  inline ::inner::inner_goods* mutable_goods(int index);
  inline ::inner::inner_goods* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_goods >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_goods >*
      mutable_goods();

  // required .inner.inner_user user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::inner::inner_user& user() const;
  inline ::inner::inner_user* mutable_user();
  inline ::inner::inner_user* release_user();
  inline void set_allocated_user(::inner::inner_user* user);

  // @@protoc_insertion_point(class_scope:inner.backpackGoods)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::inner_goods > goods_;
  ::inner::inner_user* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebackpack_2eproto();
  friend void protobuf_AssignDesc_inner_2ebackpack_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

  void InitAsDefaultInstance();
  static backpackGoods* default_instance_;
};
// -------------------------------------------------------------------

class getBackpackGoodsList_rsp : public ::google::protobuf::Message {
 public:
  getBackpackGoodsList_rsp();
  virtual ~getBackpackGoodsList_rsp();

  getBackpackGoodsList_rsp(const getBackpackGoodsList_rsp& from);

  inline getBackpackGoodsList_rsp& operator=(const getBackpackGoodsList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getBackpackGoodsList_rsp& default_instance();

  void Swap(getBackpackGoodsList_rsp* other);

  // implements Message ----------------------------------------------

  getBackpackGoodsList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getBackpackGoodsList_rsp& from);
  void MergeFrom(const getBackpackGoodsList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.backpackGoods data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::inner::backpackGoods& data(int index) const;
  inline ::inner::backpackGoods* mutable_data(int index);
  inline ::inner::backpackGoods* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >*
      mutable_data();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getBackpackGoodsList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods > data_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebackpack_2eproto();
  friend void protobuf_AssignDesc_inner_2ebackpack_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

  void InitAsDefaultInstance();
  static getBackpackGoodsList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class updateBackpackGoods_req : public ::google::protobuf::Message {
 public:
  updateBackpackGoods_req();
  virtual ~updateBackpackGoods_req();

  updateBackpackGoods_req(const updateBackpackGoods_req& from);

  inline updateBackpackGoods_req& operator=(const updateBackpackGoods_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateBackpackGoods_req& default_instance();

  void Swap(updateBackpackGoods_req* other);

  // implements Message ----------------------------------------------

  updateBackpackGoods_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateBackpackGoods_req& from);
  void MergeFrom(const updateBackpackGoods_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.backpackGoods update = 1;
  inline int update_size() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 1;
  inline const ::inner::backpackGoods& update(int index) const;
  inline ::inner::backpackGoods* mutable_update(int index);
  inline ::inner::backpackGoods* add_update();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >&
      update() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >*
      mutable_update();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.updateBackpackGoods_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods > update_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebackpack_2eproto();
  friend void protobuf_AssignDesc_inner_2ebackpack_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

  void InitAsDefaultInstance();
  static updateBackpackGoods_req* default_instance_;
};
// -------------------------------------------------------------------

class updateBackpackGoods_rsp : public ::google::protobuf::Message {
 public:
  updateBackpackGoods_rsp();
  virtual ~updateBackpackGoods_rsp();

  updateBackpackGoods_rsp(const updateBackpackGoods_rsp& from);

  inline updateBackpackGoods_rsp& operator=(const updateBackpackGoods_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateBackpackGoods_rsp& default_instance();

  void Swap(updateBackpackGoods_rsp* other);

  // implements Message ----------------------------------------------

  updateBackpackGoods_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateBackpackGoods_rsp& from);
  void MergeFrom(const updateBackpackGoods_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.updateBackpackGoods_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebackpack_2eproto();
  friend void protobuf_AssignDesc_inner_2ebackpack_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebackpack_2eproto();

  void InitAsDefaultInstance();
  static updateBackpackGoods_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// getBackpackGoodsList_req

// required uint32 type = 1;
inline bool getBackpackGoodsList_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getBackpackGoodsList_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getBackpackGoodsList_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getBackpackGoodsList_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 getBackpackGoodsList_req::type() const {
  return type_;
}
inline void getBackpackGoodsList_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .inner.inner_user user = 2;
inline int getBackpackGoodsList_req::user_size() const {
  return user_.size();
}
inline void getBackpackGoodsList_req::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& getBackpackGoodsList_req::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* getBackpackGoodsList_req::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* getBackpackGoodsList_req::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
getBackpackGoodsList_req::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
getBackpackGoodsList_req::mutable_user() {
  return &user_;
}

// optional .inner.inner_head head = 1000;
inline bool getBackpackGoodsList_req::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getBackpackGoodsList_req::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getBackpackGoodsList_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getBackpackGoodsList_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& getBackpackGoodsList_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* getBackpackGoodsList_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* getBackpackGoodsList_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void getBackpackGoodsList_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// backpackGoods

// repeated .inner.inner_goods goods = 1;
inline int backpackGoods::goods_size() const {
  return goods_.size();
}
inline void backpackGoods::clear_goods() {
  goods_.Clear();
}
inline const ::inner::inner_goods& backpackGoods::goods(int index) const {
  return goods_.Get(index);
}
inline ::inner::inner_goods* backpackGoods::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::inner::inner_goods* backpackGoods::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_goods >&
backpackGoods::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_goods >*
backpackGoods::mutable_goods() {
  return &goods_;
}

// required .inner.inner_user user = 2;
inline bool backpackGoods::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void backpackGoods::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void backpackGoods::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void backpackGoods::clear_user() {
  if (user_ != NULL) user_->::inner::inner_user::Clear();
  clear_has_user();
}
inline const ::inner::inner_user& backpackGoods::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::inner::inner_user* backpackGoods::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::inner::inner_user;
  return user_;
}
inline ::inner::inner_user* backpackGoods::release_user() {
  clear_has_user();
  ::inner::inner_user* temp = user_;
  user_ = NULL;
  return temp;
}
inline void backpackGoods::set_allocated_user(::inner::inner_user* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// getBackpackGoodsList_rsp

// repeated .inner.backpackGoods data = 1;
inline int getBackpackGoodsList_rsp::data_size() const {
  return data_.size();
}
inline void getBackpackGoodsList_rsp::clear_data() {
  data_.Clear();
}
inline const ::inner::backpackGoods& getBackpackGoodsList_rsp::data(int index) const {
  return data_.Get(index);
}
inline ::inner::backpackGoods* getBackpackGoodsList_rsp::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::inner::backpackGoods* getBackpackGoodsList_rsp::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >&
getBackpackGoodsList_rsp::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >*
getBackpackGoodsList_rsp::mutable_data() {
  return &data_;
}

// required .inner.inner_tail tail = 1000;
inline bool getBackpackGoodsList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getBackpackGoodsList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getBackpackGoodsList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getBackpackGoodsList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getBackpackGoodsList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getBackpackGoodsList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getBackpackGoodsList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getBackpackGoodsList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// updateBackpackGoods_req

// repeated .inner.backpackGoods update = 1;
inline int updateBackpackGoods_req::update_size() const {
  return update_.size();
}
inline void updateBackpackGoods_req::clear_update() {
  update_.Clear();
}
inline const ::inner::backpackGoods& updateBackpackGoods_req::update(int index) const {
  return update_.Get(index);
}
inline ::inner::backpackGoods* updateBackpackGoods_req::mutable_update(int index) {
  return update_.Mutable(index);
}
inline ::inner::backpackGoods* updateBackpackGoods_req::add_update() {
  return update_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >&
updateBackpackGoods_req::update() const {
  return update_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::backpackGoods >*
updateBackpackGoods_req::mutable_update() {
  return &update_;
}

// optional .inner.inner_head head = 1000;
inline bool updateBackpackGoods_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void updateBackpackGoods_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void updateBackpackGoods_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void updateBackpackGoods_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& updateBackpackGoods_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* updateBackpackGoods_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* updateBackpackGoods_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void updateBackpackGoods_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// updateBackpackGoods_rsp

// required .inner.inner_tail tail = 1000;
inline bool updateBackpackGoods_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateBackpackGoods_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateBackpackGoods_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateBackpackGoods_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& updateBackpackGoods_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* updateBackpackGoods_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* updateBackpackGoods_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void updateBackpackGoods_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2ebackpack_2eproto__INCLUDED
