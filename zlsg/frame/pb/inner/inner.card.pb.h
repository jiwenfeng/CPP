// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.card.proto

#ifndef PROTOBUF_inner_2ecard_2eproto__INCLUDED
#define PROTOBUF_inner_2ecard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2ecard_2eproto();
void protobuf_AssignDesc_inner_2ecard_2eproto();
void protobuf_ShutdownFile_inner_2ecard_2eproto();

class getCardList_req;
class getCardList_rsp;
class getGoodsList_rsp;
class goods_info;
class sendGoods_req;
class sendGoods_rsp;

// ===================================================================

class getCardList_req : public ::google::protobuf::Message {
 public:
  getCardList_req();
  virtual ~getCardList_req();

  getCardList_req(const getCardList_req& from);

  inline getCardList_req& operator=(const getCardList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getCardList_req& default_instance();

  void Swap(getCardList_req* other);

  // implements Message ----------------------------------------------

  getCardList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getCardList_req& from);
  void MergeFrom(const getCardList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cardId = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 1;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  inline void set_allocated_cardid(::std::string* cardid);

  // optional string cardName = 2;
  inline bool has_cardname() const;
  inline void clear_cardname();
  static const int kCardNameFieldNumber = 2;
  inline const ::std::string& cardname() const;
  inline void set_cardname(const ::std::string& value);
  inline void set_cardname(const char* value);
  inline void set_cardname(const char* value, size_t size);
  inline ::std::string* mutable_cardname();
  inline ::std::string* release_cardname();
  inline void set_allocated_cardname(::std::string* cardname);

  // optional int32 page = 3;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 pageSize = 4;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 4;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.getCardList_req)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardname();
  inline void clear_has_cardname();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cardid_;
  ::std::string* cardname_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 pagesize_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static getCardList_req* default_instance_;
};
// -------------------------------------------------------------------

class getCardList_rsp : public ::google::protobuf::Message {
 public:
  getCardList_rsp();
  virtual ~getCardList_rsp();

  getCardList_rsp(const getCardList_rsp& from);

  inline getCardList_rsp& operator=(const getCardList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getCardList_rsp& default_instance();

  void Swap(getCardList_rsp* other);

  // implements Message ----------------------------------------------

  getCardList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getCardList_rsp& from);
  void MergeFrom(const getCardList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getCardList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static getCardList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class getGoodsList_rsp : public ::google::protobuf::Message {
 public:
  getGoodsList_rsp();
  virtual ~getGoodsList_rsp();

  getGoodsList_rsp(const getGoodsList_rsp& from);

  inline getGoodsList_rsp& operator=(const getGoodsList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getGoodsList_rsp& default_instance();

  void Swap(getGoodsList_rsp* other);

  // implements Message ----------------------------------------------

  getGoodsList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getGoodsList_rsp& from);
  void MergeFrom(const getGoodsList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getGoodsList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static getGoodsList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class goods_info : public ::google::protobuf::Message {
 public:
  goods_info();
  virtual ~goods_info();

  goods_info(const goods_info& from);

  inline goods_info& operator=(const goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const goods_info& default_instance();

  void Swap(goods_info* other);

  // implements Message ----------------------------------------------

  goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const goods_info& from);
  void MergeFrom(const goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 goods_type = 1;
  inline bool has_goods_type() const;
  inline void clear_goods_type();
  static const int kGoodsTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_type() const;
  inline void set_goods_type(::google::protobuf::uint32 value);

  // required uint32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // required uint32 goods_num = 3;
  inline bool has_goods_num() const;
  inline void clear_goods_num();
  static const int kGoodsNumFieldNumber = 3;
  inline ::google::protobuf::uint32 goods_num() const;
  inline void set_goods_num(::google::protobuf::uint32 value);

  // optional bool bind = 4;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 4;
  inline bool bind() const;
  inline void set_bind(bool value);

  // @@protoc_insertion_point(class_scope:inner.goods_info)
 private:
  inline void set_has_goods_type();
  inline void clear_has_goods_type();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_num();
  inline void clear_has_goods_num();
  inline void set_has_bind();
  inline void clear_has_bind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_type_;
  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 goods_num_;
  bool bind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static goods_info* default_instance_;
};
// -------------------------------------------------------------------

class sendGoods_req : public ::google::protobuf::Message {
 public:
  sendGoods_req();
  virtual ~sendGoods_req();

  sendGoods_req(const sendGoods_req& from);

  inline sendGoods_req& operator=(const sendGoods_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sendGoods_req& default_instance();

  void Swap(sendGoods_req* other);

  // implements Message ----------------------------------------------

  sendGoods_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sendGoods_req& from);
  void MergeFrom(const sendGoods_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .inner.inner_user user = 2;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::inner::inner_user& user(int index) const;
  inline ::inner::inner_user* mutable_user(int index);
  inline ::inner::inner_user* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
      mutable_user();

  // required string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated .inner.goods_info gi = 6;
  inline int gi_size() const;
  inline void clear_gi();
  static const int kGiFieldNumber = 6;
  inline const ::inner::goods_info& gi(int index) const;
  inline ::inner::goods_info* mutable_gi(int index);
  inline ::inner::goods_info* add_gi();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::goods_info >&
      gi() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::goods_info >*
      mutable_gi();

  // required uint32 invalidTime = 7;
  inline bool has_invalidtime() const;
  inline void clear_invalidtime();
  static const int kInvalidTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 invalidtime() const;
  inline void set_invalidtime(::google::protobuf::uint32 value);

  // required uint32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.sendGoods_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_invalidtime();
  inline void clear_has_invalidtime();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::inner_user > user_;
  ::std::string* title_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 invalidtime_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::inner::goods_info > gi_;
  ::inner::inner_head* head_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static sendGoods_req* default_instance_;
};
// -------------------------------------------------------------------

class sendGoods_rsp : public ::google::protobuf::Message {
 public:
  sendGoods_rsp();
  virtual ~sendGoods_rsp();

  sendGoods_rsp(const sendGoods_rsp& from);

  inline sendGoods_rsp& operator=(const sendGoods_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sendGoods_rsp& default_instance();

  void Swap(sendGoods_rsp* other);

  // implements Message ----------------------------------------------

  sendGoods_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sendGoods_rsp& from);
  void MergeFrom(const sendGoods_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.sendGoods_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecard_2eproto();
  friend void protobuf_AssignDesc_inner_2ecard_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecard_2eproto();

  void InitAsDefaultInstance();
  static sendGoods_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// getCardList_req

// optional string cardId = 1;
inline bool getCardList_req::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getCardList_req::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getCardList_req::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getCardList_req::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& getCardList_req::cardid() const {
  return *cardid_;
}
inline void getCardList_req::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void getCardList_req::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void getCardList_req::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getCardList_req::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* getCardList_req::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getCardList_req::set_allocated_cardid(::std::string* cardid) {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardid) {
    set_has_cardid();
    cardid_ = cardid;
  } else {
    clear_has_cardid();
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cardName = 2;
inline bool getCardList_req::has_cardname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getCardList_req::set_has_cardname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getCardList_req::clear_has_cardname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getCardList_req::clear_cardname() {
  if (cardname_ != &::google::protobuf::internal::kEmptyString) {
    cardname_->clear();
  }
  clear_has_cardname();
}
inline const ::std::string& getCardList_req::cardname() const {
  return *cardname_;
}
inline void getCardList_req::set_cardname(const ::std::string& value) {
  set_has_cardname();
  if (cardname_ == &::google::protobuf::internal::kEmptyString) {
    cardname_ = new ::std::string;
  }
  cardname_->assign(value);
}
inline void getCardList_req::set_cardname(const char* value) {
  set_has_cardname();
  if (cardname_ == &::google::protobuf::internal::kEmptyString) {
    cardname_ = new ::std::string;
  }
  cardname_->assign(value);
}
inline void getCardList_req::set_cardname(const char* value, size_t size) {
  set_has_cardname();
  if (cardname_ == &::google::protobuf::internal::kEmptyString) {
    cardname_ = new ::std::string;
  }
  cardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getCardList_req::mutable_cardname() {
  set_has_cardname();
  if (cardname_ == &::google::protobuf::internal::kEmptyString) {
    cardname_ = new ::std::string;
  }
  return cardname_;
}
inline ::std::string* getCardList_req::release_cardname() {
  clear_has_cardname();
  if (cardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardname_;
    cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getCardList_req::set_allocated_cardname(::std::string* cardname) {
  if (cardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cardname_;
  }
  if (cardname) {
    set_has_cardname();
    cardname_ = cardname;
  } else {
    clear_has_cardname();
    cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 page = 3;
inline bool getCardList_req::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getCardList_req::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getCardList_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getCardList_req::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 getCardList_req::page() const {
  return page_;
}
inline void getCardList_req::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 pageSize = 4;
inline bool getCardList_req::has_pagesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getCardList_req::set_has_pagesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getCardList_req::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getCardList_req::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 getCardList_req::pagesize() const {
  return pagesize_;
}
inline void getCardList_req::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool getCardList_req::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void getCardList_req::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void getCardList_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void getCardList_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& getCardList_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* getCardList_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* getCardList_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void getCardList_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// getCardList_rsp

// required .inner.inner_tail tail = 1000;
inline bool getCardList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getCardList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getCardList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getCardList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getCardList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getCardList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getCardList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getCardList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// getGoodsList_rsp

// required .inner.inner_tail tail = 1000;
inline bool getGoodsList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getGoodsList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getGoodsList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getGoodsList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getGoodsList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getGoodsList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getGoodsList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getGoodsList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// goods_info

// required uint32 goods_type = 1;
inline bool goods_info::has_goods_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void goods_info::set_has_goods_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void goods_info::clear_has_goods_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void goods_info::clear_goods_type() {
  goods_type_ = 0u;
  clear_has_goods_type();
}
inline ::google::protobuf::uint32 goods_info::goods_type() const {
  return goods_type_;
}
inline void goods_info::set_goods_type(::google::protobuf::uint32 value) {
  set_has_goods_type();
  goods_type_ = value;
}

// required uint32 goods_id = 2;
inline bool goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void goods_info::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 goods_info::goods_id() const {
  return goods_id_;
}
inline void goods_info::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required uint32 goods_num = 3;
inline bool goods_info::has_goods_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void goods_info::set_has_goods_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void goods_info::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void goods_info::clear_goods_num() {
  goods_num_ = 0u;
  clear_has_goods_num();
}
inline ::google::protobuf::uint32 goods_info::goods_num() const {
  return goods_num_;
}
inline void goods_info::set_goods_num(::google::protobuf::uint32 value) {
  set_has_goods_num();
  goods_num_ = value;
}

// optional bool bind = 4;
inline bool goods_info::has_bind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void goods_info::set_has_bind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void goods_info::clear_has_bind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void goods_info::clear_bind() {
  bind_ = false;
  clear_has_bind();
}
inline bool goods_info::bind() const {
  return bind_;
}
inline void goods_info::set_bind(bool value) {
  set_has_bind();
  bind_ = value;
}

// -------------------------------------------------------------------

// sendGoods_req

// required uint32 type = 1;
inline bool sendGoods_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sendGoods_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sendGoods_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sendGoods_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sendGoods_req::type() const {
  return type_;
}
inline void sendGoods_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .inner.inner_user user = 2;
inline int sendGoods_req::user_size() const {
  return user_.size();
}
inline void sendGoods_req::clear_user() {
  user_.Clear();
}
inline const ::inner::inner_user& sendGoods_req::user(int index) const {
  return user_.Get(index);
}
inline ::inner::inner_user* sendGoods_req::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::inner::inner_user* sendGoods_req::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::inner_user >&
sendGoods_req::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::inner_user >*
sendGoods_req::mutable_user() {
  return &user_;
}

// required string title = 4;
inline bool sendGoods_req::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sendGoods_req::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sendGoods_req::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sendGoods_req::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& sendGoods_req::title() const {
  return *title_;
}
inline void sendGoods_req::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void sendGoods_req::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void sendGoods_req::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sendGoods_req::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* sendGoods_req::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sendGoods_req::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 5;
inline bool sendGoods_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sendGoods_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sendGoods_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sendGoods_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& sendGoods_req::content() const {
  return *content_;
}
inline void sendGoods_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void sendGoods_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void sendGoods_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sendGoods_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* sendGoods_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sendGoods_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .inner.goods_info gi = 6;
inline int sendGoods_req::gi_size() const {
  return gi_.size();
}
inline void sendGoods_req::clear_gi() {
  gi_.Clear();
}
inline const ::inner::goods_info& sendGoods_req::gi(int index) const {
  return gi_.Get(index);
}
inline ::inner::goods_info* sendGoods_req::mutable_gi(int index) {
  return gi_.Mutable(index);
}
inline ::inner::goods_info* sendGoods_req::add_gi() {
  return gi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::goods_info >&
sendGoods_req::gi() const {
  return gi_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::goods_info >*
sendGoods_req::mutable_gi() {
  return &gi_;
}

// required uint32 invalidTime = 7;
inline bool sendGoods_req::has_invalidtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sendGoods_req::set_has_invalidtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sendGoods_req::clear_has_invalidtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sendGoods_req::clear_invalidtime() {
  invalidtime_ = 0u;
  clear_has_invalidtime();
}
inline ::google::protobuf::uint32 sendGoods_req::invalidtime() const {
  return invalidtime_;
}
inline void sendGoods_req::set_invalidtime(::google::protobuf::uint32 value) {
  set_has_invalidtime();
  invalidtime_ = value;
}

// required uint32 count = 8;
inline bool sendGoods_req::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sendGoods_req::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sendGoods_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sendGoods_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 sendGoods_req::count() const {
  return count_;
}
inline void sendGoods_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool sendGoods_req::has_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sendGoods_req::set_has_head() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sendGoods_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sendGoods_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& sendGoods_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* sendGoods_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* sendGoods_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void sendGoods_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// sendGoods_rsp

// required .inner.inner_tail tail = 1000;
inline bool sendGoods_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sendGoods_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sendGoods_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sendGoods_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& sendGoods_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* sendGoods_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* sendGoods_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void sendGoods_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2ecard_2eproto__INCLUDED
