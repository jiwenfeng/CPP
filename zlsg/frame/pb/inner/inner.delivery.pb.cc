// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.delivery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.delivery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* delivery_ingot_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  delivery_ingot_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* delivery_ingot_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  delivery_ingot_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2edelivery_2eproto() {
  protobuf_AddDesc_inner_2edelivery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.delivery.proto");
  GOOGLE_CHECK(file != NULL);
  delivery_ingot_req_descriptor_ = file->message_type(0);
  static const int delivery_ingot_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_req, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_req, head_),
  };
  delivery_ingot_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      delivery_ingot_req_descriptor_,
      delivery_ingot_req::default_instance_,
      delivery_ingot_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(delivery_ingot_req));
  delivery_ingot_rsp_descriptor_ = file->message_type(1);
  static const int delivery_ingot_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, tail_),
  };
  delivery_ingot_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      delivery_ingot_rsp_descriptor_,
      delivery_ingot_rsp::default_instance_,
      delivery_ingot_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_ingot_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(delivery_ingot_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2edelivery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    delivery_ingot_req_descriptor_, &delivery_ingot_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    delivery_ingot_rsp_descriptor_, &delivery_ingot_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2edelivery_2eproto() {
  delete delivery_ingot_req::default_instance_;
  delete delivery_ingot_req_reflection_;
  delete delivery_ingot_rsp::default_instance_;
  delete delivery_ingot_rsp_reflection_;
}

void protobuf_AddDesc_inner_2edelivery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024inner.delivery.proto\022\005inner\032\020inner.com"
    "m.proto\"V\n\022delivery_ingot_req\022\017\n\007role_id"
    "\030\001 \002(\005\022\r\n\005ingot\030\002 \002(\005\022 \n\004head\030\350\007 \001(\0132\021.i"
    "nner.inner_head\"c\n\022delivery_ingot_rsp\022\017\n"
    "\007role_id\030\001 \002(\r\022\r\n\005ingot\030\002 \002(\r\022\013\n\003ret\030\003 \002"
    "(\r\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_tail", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.delivery.proto", &protobuf_RegisterTypes);
  delivery_ingot_req::default_instance_ = new delivery_ingot_req();
  delivery_ingot_rsp::default_instance_ = new delivery_ingot_rsp();
  delivery_ingot_req::default_instance_->InitAsDefaultInstance();
  delivery_ingot_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2edelivery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2edelivery_2eproto {
  StaticDescriptorInitializer_inner_2edelivery_2eproto() {
    protobuf_AddDesc_inner_2edelivery_2eproto();
  }
} static_descriptor_initializer_inner_2edelivery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int delivery_ingot_req::kRoleIdFieldNumber;
const int delivery_ingot_req::kIngotFieldNumber;
const int delivery_ingot_req::kHeadFieldNumber;
#endif  // !_MSC_VER

delivery_ingot_req::delivery_ingot_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void delivery_ingot_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

delivery_ingot_req::delivery_ingot_req(const delivery_ingot_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void delivery_ingot_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  ingot_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

delivery_ingot_req::~delivery_ingot_req() {
  SharedDtor();
}

void delivery_ingot_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void delivery_ingot_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delivery_ingot_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return delivery_ingot_req_descriptor_;
}

const delivery_ingot_req& delivery_ingot_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2edelivery_2eproto();
  return *default_instance_;
}

delivery_ingot_req* delivery_ingot_req::default_instance_ = NULL;

delivery_ingot_req* delivery_ingot_req::New() const {
  return new delivery_ingot_req;
}

void delivery_ingot_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    ingot_ = 0;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool delivery_ingot_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ingot;
        break;
      }

      // required int32 ingot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void delivery_ingot_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // required int32 ingot = 2;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ingot(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* delivery_ingot_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // required int32 ingot = 2;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ingot(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int delivery_ingot_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // required int32 ingot = 2;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ingot());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delivery_ingot_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const delivery_ingot_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const delivery_ingot_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void delivery_ingot_req::MergeFrom(const delivery_ingot_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void delivery_ingot_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivery_ingot_req::CopyFrom(const delivery_ingot_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivery_ingot_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void delivery_ingot_req::Swap(delivery_ingot_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(ingot_, other->ingot_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata delivery_ingot_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = delivery_ingot_req_descriptor_;
  metadata.reflection = delivery_ingot_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int delivery_ingot_rsp::kRoleIdFieldNumber;
const int delivery_ingot_rsp::kIngotFieldNumber;
const int delivery_ingot_rsp::kRetFieldNumber;
const int delivery_ingot_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

delivery_ingot_rsp::delivery_ingot_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void delivery_ingot_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

delivery_ingot_rsp::delivery_ingot_rsp(const delivery_ingot_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void delivery_ingot_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ingot_ = 0u;
  ret_ = 0u;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

delivery_ingot_rsp::~delivery_ingot_rsp() {
  SharedDtor();
}

void delivery_ingot_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void delivery_ingot_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delivery_ingot_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return delivery_ingot_rsp_descriptor_;
}

const delivery_ingot_rsp& delivery_ingot_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2edelivery_2eproto();
  return *default_instance_;
}

delivery_ingot_rsp* delivery_ingot_rsp::default_instance_ = NULL;

delivery_ingot_rsp* delivery_ingot_rsp::New() const {
  return new delivery_ingot_rsp;
}

void delivery_ingot_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    ingot_ = 0u;
    ret_ = 0u;
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool delivery_ingot_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ingot;
        break;
      }

      // required uint32 ingot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void delivery_ingot_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 ingot = 2;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ingot(), output);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* delivery_ingot_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 ingot = 2;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ingot(), target);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int delivery_ingot_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 ingot = 2;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ingot());
    }

    // required uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delivery_ingot_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const delivery_ingot_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const delivery_ingot_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void delivery_ingot_rsp::MergeFrom(const delivery_ingot_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void delivery_ingot_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivery_ingot_rsp::CopyFrom(const delivery_ingot_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivery_ingot_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void delivery_ingot_rsp::Swap(delivery_ingot_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(ingot_, other->ingot_);
    std::swap(ret_, other->ret_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata delivery_ingot_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = delivery_ingot_rsp_descriptor_;
  metadata.reflection = delivery_ingot_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
