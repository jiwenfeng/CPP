// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.online.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.online.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* online_player_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  online_player_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* online_player_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  online_player_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* kick_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kick_req_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2eonline_2eproto() {
  protobuf_AddDesc_inner_2eonline_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.online.proto");
  GOOGLE_CHECK(file != NULL);
  online_player_req_descriptor_ = file->message_type(0);
  static const int online_player_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_req, head_),
  };
  online_player_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      online_player_req_descriptor_,
      online_player_req::default_instance_,
      online_player_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(online_player_req));
  online_player_rsp_descriptor_ = file->message_type(1);
  static const int online_player_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_rsp, tail_),
  };
  online_player_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      online_player_rsp_descriptor_,
      online_player_rsp::default_instance_,
      online_player_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_player_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(online_player_rsp));
  kick_req_descriptor_ = file->message_type(2);
  static const int kick_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_req, role_id_),
  };
  kick_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kick_req_descriptor_,
      kick_req::default_instance_,
      kick_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kick_req));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2eonline_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    online_player_req_descriptor_, &online_player_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    online_player_rsp_descriptor_, &online_player_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kick_req_descriptor_, &kick_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2eonline_2eproto() {
  delete online_player_req::default_instance_;
  delete online_player_req_reflection_;
  delete online_player_rsp::default_instance_;
  delete online_player_rsp_reflection_;
  delete kick_req::default_instance_;
  delete kick_req_reflection_;
}

void protobuf_AddDesc_inner_2eonline_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022inner.online.proto\022\005inner\032\020inner.comm."
    "proto\"G\n\021online_player_req\022\020\n\010unixtime\030\001"
    " \002(\r\022 \n\004head\030\350\007 \001(\0132\021.inner.inner_head\"F"
    "\n\021online_player_rsp\022\017\n\007role_id\030\001 \003(\r\022 \n\004"
    "tail\030\350\007 \002(\0132\021.inner.inner_tail\"\033\n\010kick_r"
    "eq\022\017\n\007role_id\030\001 \003(\r", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.online.proto", &protobuf_RegisterTypes);
  online_player_req::default_instance_ = new online_player_req();
  online_player_rsp::default_instance_ = new online_player_rsp();
  kick_req::default_instance_ = new kick_req();
  online_player_req::default_instance_->InitAsDefaultInstance();
  online_player_rsp::default_instance_->InitAsDefaultInstance();
  kick_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2eonline_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2eonline_2eproto {
  StaticDescriptorInitializer_inner_2eonline_2eproto() {
    protobuf_AddDesc_inner_2eonline_2eproto();
  }
} static_descriptor_initializer_inner_2eonline_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int online_player_req::kUnixtimeFieldNumber;
const int online_player_req::kHeadFieldNumber;
#endif  // !_MSC_VER

online_player_req::online_player_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void online_player_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

online_player_req::online_player_req(const online_player_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void online_player_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

online_player_req::~online_player_req() {
  SharedDtor();
}

void online_player_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void online_player_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* online_player_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return online_player_req_descriptor_;
}

const online_player_req& online_player_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2eonline_2eproto();
  return *default_instance_;
}

online_player_req* online_player_req::default_instance_ = NULL;

online_player_req* online_player_req::New() const {
  return new online_player_req;
}

void online_player_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool online_player_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void online_player_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* online_player_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int online_player_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void online_player_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const online_player_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const online_player_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void online_player_req::MergeFrom(const online_player_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void online_player_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_player_req::CopyFrom(const online_player_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_player_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void online_player_req::Swap(online_player_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata online_player_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = online_player_req_descriptor_;
  metadata.reflection = online_player_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int online_player_rsp::kRoleIdFieldNumber;
const int online_player_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

online_player_rsp::online_player_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void online_player_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

online_player_rsp::online_player_rsp(const online_player_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void online_player_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

online_player_rsp::~online_player_rsp() {
  SharedDtor();
}

void online_player_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void online_player_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* online_player_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return online_player_rsp_descriptor_;
}

const online_player_rsp& online_player_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2eonline_2eproto();
  return *default_instance_;
}

online_player_rsp* online_player_rsp::default_instance_ = NULL;

online_player_rsp* online_player_rsp::New() const {
  return new online_player_rsp;
}

void online_player_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool online_player_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void online_player_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* online_player_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int online_player_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void online_player_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const online_player_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const online_player_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void online_player_rsp::MergeFrom(const online_player_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void online_player_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_player_rsp::CopyFrom(const online_player_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_player_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void online_player_rsp::Swap(online_player_rsp* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata online_player_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = online_player_rsp_descriptor_;
  metadata.reflection = online_player_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kick_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

kick_req::kick_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kick_req::InitAsDefaultInstance() {
}

kick_req::kick_req(const kick_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kick_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kick_req::~kick_req() {
  SharedDtor();
}

void kick_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void kick_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kick_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kick_req_descriptor_;
}

const kick_req& kick_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2eonline_2eproto();
  return *default_instance_;
}

kick_req* kick_req::default_instance_ = NULL;

kick_req* kick_req::New() const {
  return new kick_req;
}

void kick_req::Clear() {
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kick_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kick_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kick_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kick_req::ByteSize() const {
  int total_size = 0;

  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kick_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kick_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kick_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kick_req::MergeFrom(const kick_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kick_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kick_req::CopyFrom(const kick_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kick_req::IsInitialized() const {

  return true;
}

void kick_req::Swap(kick_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kick_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kick_req_descriptor_;
  metadata.reflection = kick_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
