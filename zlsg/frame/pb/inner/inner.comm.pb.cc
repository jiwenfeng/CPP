// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* inner_head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inner_head_reflection_ = NULL;
const ::google::protobuf::Descriptor* inner_tail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inner_tail_reflection_ = NULL;
const ::google::protobuf::Descriptor* inner_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inner_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* inner_goods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inner_goods_reflection_ = NULL;
const ::google::protobuf::Descriptor* close_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  close_server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2ecomm_2eproto() {
  protobuf_AddDesc_inner_2ecomm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.comm.proto");
  GOOGLE_CHECK(file != NULL);
  inner_head_descriptor_ = file->message_type(0);
  static const int inner_head_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, client_ip_),
  };
  inner_head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inner_head_descriptor_,
      inner_head::default_instance_,
      inner_head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inner_head));
  inner_tail_descriptor_ = file->message_type(1);
  static const int inner_tail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_tail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_tail, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_tail, data_),
  };
  inner_tail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inner_tail_descriptor_,
      inner_tail::default_instance_,
      inner_tail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_tail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_tail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inner_tail));
  inner_user_descriptor_ = file->message_type(2);
  static const int inner_user_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_user, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_user, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_user, nickname_),
  };
  inner_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inner_user_descriptor_,
      inner_user::default_instance_,
      inner_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inner_user));
  inner_goods_descriptor_ = file->message_type(3);
  static const int inner_goods_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, goods_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, goods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, goods_type_),
  };
  inner_goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inner_goods_descriptor_,
      inner_goods::default_instance_,
      inner_goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inner_goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inner_goods));
  close_server_descriptor_ = file->message_type(4);
  static const int close_server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(close_server, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(close_server, head_),
  };
  close_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      close_server_descriptor_,
      close_server::default_instance_,
      close_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(close_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(close_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(close_server));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2ecomm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inner_head_descriptor_, &inner_head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inner_tail_descriptor_, &inner_tail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inner_user_descriptor_, &inner_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inner_goods_descriptor_, &inner_goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    close_server_descriptor_, &close_server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2ecomm_2eproto() {
  delete inner_head::default_instance_;
  delete inner_head_reflection_;
  delete inner_tail::default_instance_;
  delete inner_tail_reflection_;
  delete inner_user::default_instance_;
  delete inner_user_reflection_;
  delete inner_goods::default_instance_;
  delete inner_goods_reflection_;
  delete close_server::default_instance_;
  delete close_server_reflection_;
}

void protobuf_AddDesc_inner_2ecomm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020inner.comm.proto\022\005inner\"]\n\ninner_head\022"
    "\021\n\006svr_id\030\001 \001(\r:\0010\022\023\n\010agent_id\030\002 \001(\r:\0010\022"
    "\024\n\tclient_id\030\003 \001(\r:\0010\022\021\n\tclient_ip\030\004 \001(\t"
    "\"8\n\ninner_tail\022\016\n\006status\030\001 \001(\r\022\014\n\004info\030\002"
    " \001(\t\022\014\n\004data\030\003 \001(\t\"@\n\ninner_user\022\n\n\002id\030\001"
    " \001(\r\022\024\n\014account_name\030\002 \001(\t\022\020\n\010nickname\030\003"
    " \001(\t\"i\n\013inner_goods\022\r\n\005index\030\001 \001(\r\022\020\n\010go"
    "ods_id\030\002 \001(\r\022\022\n\ngoods_name\030\003 \001(\t\022\021\n\tgood"
    "s_num\030\004 \001(\r\022\022\n\ngoods_type\030\005 \001(\r\"B\n\014close"
    "_server\022\020\n\010unixtime\030\001 \002(\r\022 \n\004head\030\350\007 \001(\013"
    "2\021.inner.inner_head", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.comm.proto", &protobuf_RegisterTypes);
  inner_head::default_instance_ = new inner_head();
  inner_tail::default_instance_ = new inner_tail();
  inner_user::default_instance_ = new inner_user();
  inner_goods::default_instance_ = new inner_goods();
  close_server::default_instance_ = new close_server();
  inner_head::default_instance_->InitAsDefaultInstance();
  inner_tail::default_instance_->InitAsDefaultInstance();
  inner_user::default_instance_->InitAsDefaultInstance();
  inner_goods::default_instance_->InitAsDefaultInstance();
  close_server::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2ecomm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2ecomm_2eproto {
  StaticDescriptorInitializer_inner_2ecomm_2eproto() {
    protobuf_AddDesc_inner_2ecomm_2eproto();
  }
} static_descriptor_initializer_inner_2ecomm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int inner_head::kSvrIdFieldNumber;
const int inner_head::kAgentIdFieldNumber;
const int inner_head::kClientIdFieldNumber;
const int inner_head::kClientIpFieldNumber;
#endif  // !_MSC_VER

inner_head::inner_head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void inner_head::InitAsDefaultInstance() {
}

inner_head::inner_head(const inner_head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void inner_head::SharedCtor() {
  _cached_size_ = 0;
  svr_id_ = 0u;
  agent_id_ = 0u;
  client_id_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inner_head::~inner_head() {
  SharedDtor();
}

void inner_head::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
  }
}

void inner_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inner_head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inner_head_descriptor_;
}

const inner_head& inner_head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ecomm_2eproto();
  return *default_instance_;
}

inner_head* inner_head::default_instance_ = NULL;

inner_head* inner_head::New() const {
  return new inner_head;
}

void inner_head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_id_ = 0u;
    agent_id_ = 0u;
    client_id_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inner_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svr_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional uint32 agent_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_id;
        break;
      }

      // optional uint32 client_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void inner_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svr_id = 1 [default = 0];
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_id(), output);
  }

  // optional uint32 agent_id = 2 [default = 0];
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agent_id(), output);
  }

  // optional uint32 client_id = 3 [default = 0];
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_id(), output);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* inner_head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svr_id = 1 [default = 0];
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_id(), target);
  }

  // optional uint32 agent_id = 2 [default = 0];
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agent_id(), target);
  }

  // optional uint32 client_id = 3 [default = 0];
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_id(), target);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int inner_head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svr_id = 1 [default = 0];
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

    // optional uint32 agent_id = 2 [default = 0];
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agent_id());
    }

    // optional uint32 client_id = 3 [default = 0];
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }

    // optional string client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inner_head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inner_head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inner_head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inner_head::MergeFrom(const inner_head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inner_head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inner_head::CopyFrom(const inner_head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inner_head::IsInitialized() const {

  return true;
}

void inner_head::Swap(inner_head* other) {
  if (other != this) {
    std::swap(svr_id_, other->svr_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(client_id_, other->client_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inner_head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inner_head_descriptor_;
  metadata.reflection = inner_head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int inner_tail::kStatusFieldNumber;
const int inner_tail::kInfoFieldNumber;
const int inner_tail::kDataFieldNumber;
#endif  // !_MSC_VER

inner_tail::inner_tail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void inner_tail::InitAsDefaultInstance() {
}

inner_tail::inner_tail(const inner_tail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void inner_tail::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inner_tail::~inner_tail() {
  SharedDtor();
}

void inner_tail::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void inner_tail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inner_tail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inner_tail_descriptor_;
}

const inner_tail& inner_tail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ecomm_2eproto();
  return *default_instance_;
}

inner_tail* inner_tail::default_instance_ = NULL;

inner_tail* inner_tail::New() const {
  return new inner_tail;
}

void inner_tail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inner_tail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void inner_tail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* inner_tail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int inner_tail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inner_tail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inner_tail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inner_tail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inner_tail::MergeFrom(const inner_tail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inner_tail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inner_tail::CopyFrom(const inner_tail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inner_tail::IsInitialized() const {

  return true;
}

void inner_tail::Swap(inner_tail* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(info_, other->info_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inner_tail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inner_tail_descriptor_;
  metadata.reflection = inner_tail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int inner_user::kIdFieldNumber;
const int inner_user::kAccountNameFieldNumber;
const int inner_user::kNicknameFieldNumber;
#endif  // !_MSC_VER

inner_user::inner_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void inner_user::InitAsDefaultInstance() {
}

inner_user::inner_user(const inner_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void inner_user::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inner_user::~inner_user() {
  SharedDtor();
}

void inner_user::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void inner_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inner_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inner_user_descriptor_;
}

const inner_user& inner_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ecomm_2eproto();
  return *default_instance_;
}

inner_user* inner_user::default_instance_ = NULL;

inner_user* inner_user::New() const {
  return new inner_user;
}

void inner_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inner_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void inner_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_name(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* inner_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int inner_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inner_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inner_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inner_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inner_user::MergeFrom(const inner_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inner_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inner_user::CopyFrom(const inner_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inner_user::IsInitialized() const {

  return true;
}

void inner_user::Swap(inner_user* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_name_, other->account_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inner_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inner_user_descriptor_;
  metadata.reflection = inner_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int inner_goods::kIndexFieldNumber;
const int inner_goods::kGoodsIdFieldNumber;
const int inner_goods::kGoodsNameFieldNumber;
const int inner_goods::kGoodsNumFieldNumber;
const int inner_goods::kGoodsTypeFieldNumber;
#endif  // !_MSC_VER

inner_goods::inner_goods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void inner_goods::InitAsDefaultInstance() {
}

inner_goods::inner_goods(const inner_goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void inner_goods::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  goods_id_ = 0u;
  goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goods_num_ = 0u;
  goods_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inner_goods::~inner_goods() {
  SharedDtor();
}

void inner_goods::SharedDtor() {
  if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_name_;
  }
  if (this != default_instance_) {
  }
}

void inner_goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inner_goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inner_goods_descriptor_;
}

const inner_goods& inner_goods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ecomm_2eproto();
  return *default_instance_;
}

inner_goods* inner_goods::default_instance_ = NULL;

inner_goods* inner_goods::New() const {
  return new inner_goods;
}

void inner_goods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    goods_id_ = 0u;
    if (has_goods_name()) {
      if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
        goods_name_->clear();
      }
    }
    goods_num_ = 0u;
    goods_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inner_goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // optional uint32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods_name;
        break;
      }

      // optional string goods_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goods_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goods_name().data(), this->goods_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_num;
        break;
      }

      // optional uint32 goods_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goods_type;
        break;
      }

      // optional uint32 goods_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_type_)));
          set_has_goods_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void inner_goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_id(), output);
  }

  // optional string goods_name = 3;
  if (has_goods_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goods_name().data(), this->goods_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->goods_name(), output);
  }

  // optional uint32 goods_num = 4;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goods_num(), output);
  }

  // optional uint32 goods_type = 5;
  if (has_goods_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goods_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* inner_goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_id(), target);
  }

  // optional string goods_name = 3;
  if (has_goods_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goods_name().data(), this->goods_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->goods_name(), target);
  }

  // optional uint32 goods_num = 4;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goods_num(), target);
  }

  // optional uint32 goods_type = 5;
  if (has_goods_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goods_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int inner_goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // optional string goods_name = 3;
    if (has_goods_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goods_name());
    }

    // optional uint32 goods_num = 4;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

    // optional uint32 goods_type = 5;
    if (has_goods_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inner_goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inner_goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inner_goods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inner_goods::MergeFrom(const inner_goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_name()) {
      set_goods_name(from.goods_name());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
    if (from.has_goods_type()) {
      set_goods_type(from.goods_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inner_goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inner_goods::CopyFrom(const inner_goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inner_goods::IsInitialized() const {

  return true;
}

void inner_goods::Swap(inner_goods* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_name_, other->goods_name_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(goods_type_, other->goods_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inner_goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inner_goods_descriptor_;
  metadata.reflection = inner_goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int close_server::kUnixtimeFieldNumber;
const int close_server::kHeadFieldNumber;
#endif  // !_MSC_VER

close_server::close_server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void close_server::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

close_server::close_server(const close_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void close_server::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

close_server::~close_server() {
  SharedDtor();
}

void close_server::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void close_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* close_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return close_server_descriptor_;
}

const close_server& close_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ecomm_2eproto();
  return *default_instance_;
}

close_server* close_server::default_instance_ = NULL;

close_server* close_server::New() const {
  return new close_server;
}

void close_server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool close_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void close_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* close_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int close_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void close_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const close_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const close_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void close_server::MergeFrom(const close_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void close_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void close_server::CopyFrom(const close_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool close_server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void close_server::Swap(close_server* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata close_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = close_server_descriptor_;
  metadata.reflection = close_server_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
