// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.bulletin.proto

#ifndef PROTOBUF_inner_2ebulletin_2eproto__INCLUDED
#define PROTOBUF_inner_2ebulletin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2ebulletin_2eproto();
void protobuf_AssignDesc_inner_2ebulletin_2eproto();
void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

class bulletin_req;
class bulletin_rsp;
class revolving_req;
class revolving_rsp;
class revolving;
class get_revolving_req;
class get_revolving_rsp;
class del_revolving_req;
class del_revolving_rsp;
class stop_revolving_req;
class stop_revolving_rsp;
class chat;

// ===================================================================

class bulletin_req : public ::google::protobuf::Message {
 public:
  bulletin_req();
  virtual ~bulletin_req();

  bulletin_req(const bulletin_req& from);

  inline bulletin_req& operator=(const bulletin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bulletin_req& default_instance();

  void Swap(bulletin_req* other);

  // implements Message ----------------------------------------------

  bulletin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bulletin_req& from);
  void MergeFrom(const bulletin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.bulletin_req)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static bulletin_req* default_instance_;
};
// -------------------------------------------------------------------

class bulletin_rsp : public ::google::protobuf::Message {
 public:
  bulletin_rsp();
  virtual ~bulletin_rsp();

  bulletin_rsp(const bulletin_rsp& from);

  inline bulletin_rsp& operator=(const bulletin_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bulletin_rsp& default_instance();

  void Swap(bulletin_rsp* other);

  // implements Message ----------------------------------------------

  bulletin_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bulletin_rsp& from);
  void MergeFrom(const bulletin_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.bulletin_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static bulletin_rsp* default_instance_;
};
// -------------------------------------------------------------------

class revolving_req : public ::google::protobuf::Message {
 public:
  revolving_req();
  virtual ~revolving_req();

  revolving_req(const revolving_req& from);

  inline revolving_req& operator=(const revolving_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const revolving_req& default_instance();

  void Swap(revolving_req* other);

  // implements Message ----------------------------------------------

  revolving_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const revolving_req& from);
  void MergeFrom(const revolving_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // required uint32 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // required uint32 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required uint32 repeat_time = 4;
  inline bool has_repeat_time() const;
  inline void clear_repeat_time();
  static const int kRepeatTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 repeat_time() const;
  inline void set_repeat_time(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.revolving_req)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_repeat_time();
  inline void clear_has_repeat_time();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::inner::inner_head* head_;
  ::google::protobuf::uint32 repeat_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static revolving_req* default_instance_;
};
// -------------------------------------------------------------------

class revolving_rsp : public ::google::protobuf::Message {
 public:
  revolving_rsp();
  virtual ~revolving_rsp();

  revolving_rsp(const revolving_rsp& from);

  inline revolving_rsp& operator=(const revolving_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const revolving_rsp& default_instance();

  void Swap(revolving_rsp* other);

  // implements Message ----------------------------------------------

  revolving_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const revolving_rsp& from);
  void MergeFrom(const revolving_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.revolving_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static revolving_rsp* default_instance_;
};
// -------------------------------------------------------------------

class revolving : public ::google::protobuf::Message {
 public:
  revolving();
  virtual ~revolving();

  revolving(const revolving& from);

  inline revolving& operator=(const revolving& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const revolving& default_instance();

  void Swap(revolving* other);

  // implements Message ----------------------------------------------

  revolving* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const revolving& from);
  void MergeFrom(const revolving& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // required string contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // required uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // required uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required uint32 repeat_time = 5;
  inline bool has_repeat_time() const;
  inline void clear_repeat_time();
  static const int kRepeatTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 repeat_time() const;
  inline void set_repeat_time(::google::protobuf::uint32 value);

  // required uint32 is_over = 6;
  inline bool has_is_over() const;
  inline void clear_is_over();
  static const int kIsOverFieldNumber = 6;
  inline ::google::protobuf::uint32 is_over() const;
  inline void set_is_over(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:inner.revolving)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_repeat_time();
  inline void clear_has_repeat_time();
  inline void set_has_is_over();
  inline void clear_has_is_over();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 repeat_time_;
  ::google::protobuf::uint32 is_over_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static revolving* default_instance_;
};
// -------------------------------------------------------------------

class get_revolving_req : public ::google::protobuf::Message {
 public:
  get_revolving_req();
  virtual ~get_revolving_req();

  get_revolving_req(const get_revolving_req& from);

  inline get_revolving_req& operator=(const get_revolving_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_revolving_req& default_instance();

  void Swap(get_revolving_req* other);

  // implements Message ----------------------------------------------

  get_revolving_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_revolving_req& from);
  void MergeFrom(const get_revolving_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.get_revolving_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_head* head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static get_revolving_req* default_instance_;
};
// -------------------------------------------------------------------

class get_revolving_rsp : public ::google::protobuf::Message {
 public:
  get_revolving_rsp();
  virtual ~get_revolving_rsp();

  get_revolving_rsp(const get_revolving_rsp& from);

  inline get_revolving_rsp& operator=(const get_revolving_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_revolving_rsp& default_instance();

  void Swap(get_revolving_rsp* other);

  // implements Message ----------------------------------------------

  get_revolving_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_revolving_rsp& from);
  void MergeFrom(const get_revolving_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.revolving rs = 1;
  inline int rs_size() const;
  inline void clear_rs();
  static const int kRsFieldNumber = 1;
  inline const ::inner::revolving& rs(int index) const;
  inline ::inner::revolving* mutable_rs(int index);
  inline ::inner::revolving* add_rs();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::revolving >&
      rs() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::revolving >*
      mutable_rs();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.get_revolving_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::revolving > rs_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static get_revolving_rsp* default_instance_;
};
// -------------------------------------------------------------------

class del_revolving_req : public ::google::protobuf::Message {
 public:
  del_revolving_req();
  virtual ~del_revolving_req();

  del_revolving_req(const del_revolving_req& from);

  inline del_revolving_req& operator=(const del_revolving_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const del_revolving_req& default_instance();

  void Swap(del_revolving_req* other);

  // implements Message ----------------------------------------------

  del_revolving_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const del_revolving_req& from);
  void MergeFrom(const del_revolving_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.del_revolving_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static del_revolving_req* default_instance_;
};
// -------------------------------------------------------------------

class del_revolving_rsp : public ::google::protobuf::Message {
 public:
  del_revolving_rsp();
  virtual ~del_revolving_rsp();

  del_revolving_rsp(const del_revolving_rsp& from);

  inline del_revolving_rsp& operator=(const del_revolving_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const del_revolving_rsp& default_instance();

  void Swap(del_revolving_rsp* other);

  // implements Message ----------------------------------------------

  del_revolving_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const del_revolving_rsp& from);
  void MergeFrom(const del_revolving_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.del_revolving_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static del_revolving_rsp* default_instance_;
};
// -------------------------------------------------------------------

class stop_revolving_req : public ::google::protobuf::Message {
 public:
  stop_revolving_req();
  virtual ~stop_revolving_req();

  stop_revolving_req(const stop_revolving_req& from);

  inline stop_revolving_req& operator=(const stop_revolving_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stop_revolving_req& default_instance();

  void Swap(stop_revolving_req* other);

  // implements Message ----------------------------------------------

  stop_revolving_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stop_revolving_req& from);
  void MergeFrom(const stop_revolving_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.stop_revolving_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static stop_revolving_req* default_instance_;
};
// -------------------------------------------------------------------

class stop_revolving_rsp : public ::google::protobuf::Message {
 public:
  stop_revolving_rsp();
  virtual ~stop_revolving_rsp();

  stop_revolving_rsp(const stop_revolving_rsp& from);

  inline stop_revolving_rsp& operator=(const stop_revolving_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stop_revolving_rsp& default_instance();

  void Swap(stop_revolving_rsp* other);

  // implements Message ----------------------------------------------

  stop_revolving_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stop_revolving_rsp& from);
  void MergeFrom(const stop_revolving_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.stop_revolving_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static stop_revolving_rsp* default_instance_;
};
// -------------------------------------------------------------------

class chat : public ::google::protobuf::Message {
 public:
  chat();
  virtual ~chat();

  chat(const chat& from);

  inline chat& operator=(const chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat& default_instance();

  void Swap(chat* other);

  // implements Message ----------------------------------------------

  chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat& from);
  void MergeFrom(const chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:inner.chat)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ebulletin_2eproto();
  friend void protobuf_AssignDesc_inner_2ebulletin_2eproto();
  friend void protobuf_ShutdownFile_inner_2ebulletin_2eproto();

  void InitAsDefaultInstance();
  static chat* default_instance_;
};
// ===================================================================


// ===================================================================

// bulletin_req

// required string contents = 1;
inline bool bulletin_req::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bulletin_req::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bulletin_req::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bulletin_req::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& bulletin_req::contents() const {
  return *contents_;
}
inline void bulletin_req::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void bulletin_req::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void bulletin_req::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bulletin_req::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* bulletin_req::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bulletin_req::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .inner.inner_head head = 1000;
inline bool bulletin_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bulletin_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bulletin_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bulletin_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& bulletin_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* bulletin_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* bulletin_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void bulletin_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// bulletin_rsp

// required .inner.inner_tail tail = 1000;
inline bool bulletin_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bulletin_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bulletin_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bulletin_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& bulletin_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* bulletin_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* bulletin_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void bulletin_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// revolving_req

// required string contents = 1;
inline bool revolving_req::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void revolving_req::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void revolving_req::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void revolving_req::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& revolving_req::contents() const {
  return *contents_;
}
inline void revolving_req::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void revolving_req::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void revolving_req::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* revolving_req::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* revolving_req::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void revolving_req::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 start_time = 2;
inline bool revolving_req::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void revolving_req::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void revolving_req::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void revolving_req::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 revolving_req::start_time() const {
  return start_time_;
}
inline void revolving_req::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required uint32 end_time = 3;
inline bool revolving_req::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void revolving_req::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void revolving_req::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void revolving_req::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 revolving_req::end_time() const {
  return end_time_;
}
inline void revolving_req::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required uint32 repeat_time = 4;
inline bool revolving_req::has_repeat_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void revolving_req::set_has_repeat_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void revolving_req::clear_has_repeat_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void revolving_req::clear_repeat_time() {
  repeat_time_ = 0u;
  clear_has_repeat_time();
}
inline ::google::protobuf::uint32 revolving_req::repeat_time() const {
  return repeat_time_;
}
inline void revolving_req::set_repeat_time(::google::protobuf::uint32 value) {
  set_has_repeat_time();
  repeat_time_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool revolving_req::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void revolving_req::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void revolving_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void revolving_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& revolving_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* revolving_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* revolving_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void revolving_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// revolving_rsp

// required .inner.inner_tail tail = 1000;
inline bool revolving_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void revolving_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void revolving_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void revolving_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& revolving_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* revolving_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* revolving_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void revolving_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// revolving

// required uint32 msg_id = 1;
inline bool revolving::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void revolving::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void revolving::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void revolving::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 revolving::msg_id() const {
  return msg_id_;
}
inline void revolving::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required string contents = 2;
inline bool revolving::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void revolving::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void revolving::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void revolving::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& revolving::contents() const {
  return *contents_;
}
inline void revolving::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void revolving::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void revolving::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* revolving::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* revolving::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void revolving::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 start_time = 3;
inline bool revolving::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void revolving::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void revolving::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void revolving::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 revolving::start_time() const {
  return start_time_;
}
inline void revolving::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required uint32 end_time = 4;
inline bool revolving::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void revolving::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void revolving::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void revolving::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 revolving::end_time() const {
  return end_time_;
}
inline void revolving::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required uint32 repeat_time = 5;
inline bool revolving::has_repeat_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void revolving::set_has_repeat_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void revolving::clear_has_repeat_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void revolving::clear_repeat_time() {
  repeat_time_ = 0u;
  clear_has_repeat_time();
}
inline ::google::protobuf::uint32 revolving::repeat_time() const {
  return repeat_time_;
}
inline void revolving::set_repeat_time(::google::protobuf::uint32 value) {
  set_has_repeat_time();
  repeat_time_ = value;
}

// required uint32 is_over = 6;
inline bool revolving::has_is_over() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void revolving::set_has_is_over() {
  _has_bits_[0] |= 0x00000020u;
}
inline void revolving::clear_has_is_over() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void revolving::clear_is_over() {
  is_over_ = 0u;
  clear_has_is_over();
}
inline ::google::protobuf::uint32 revolving::is_over() const {
  return is_over_;
}
inline void revolving::set_is_over(::google::protobuf::uint32 value) {
  set_has_is_over();
  is_over_ = value;
}

// -------------------------------------------------------------------

// get_revolving_req

// required uint32 unixtime = 1;
inline bool get_revolving_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_revolving_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_revolving_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_revolving_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 get_revolving_req::unixtime() const {
  return unixtime_;
}
inline void get_revolving_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool get_revolving_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_revolving_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_revolving_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_revolving_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& get_revolving_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* get_revolving_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* get_revolving_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void get_revolving_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// get_revolving_rsp

// repeated .inner.revolving rs = 1;
inline int get_revolving_rsp::rs_size() const {
  return rs_.size();
}
inline void get_revolving_rsp::clear_rs() {
  rs_.Clear();
}
inline const ::inner::revolving& get_revolving_rsp::rs(int index) const {
  return rs_.Get(index);
}
inline ::inner::revolving* get_revolving_rsp::mutable_rs(int index) {
  return rs_.Mutable(index);
}
inline ::inner::revolving* get_revolving_rsp::add_rs() {
  return rs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::revolving >&
get_revolving_rsp::rs() const {
  return rs_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::revolving >*
get_revolving_rsp::mutable_rs() {
  return &rs_;
}

// required .inner.inner_tail tail = 1000;
inline bool get_revolving_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_revolving_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_revolving_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_revolving_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& get_revolving_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* get_revolving_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* get_revolving_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void get_revolving_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// del_revolving_req

// repeated uint32 ids = 1;
inline int del_revolving_req::ids_size() const {
  return ids_.size();
}
inline void del_revolving_req::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 del_revolving_req::ids(int index) const {
  return ids_.Get(index);
}
inline void del_revolving_req::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
}
inline void del_revolving_req::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
del_revolving_req::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
del_revolving_req::mutable_ids() {
  return &ids_;
}

// optional .inner.inner_head head = 1000;
inline bool del_revolving_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void del_revolving_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void del_revolving_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void del_revolving_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& del_revolving_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* del_revolving_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* del_revolving_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void del_revolving_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// del_revolving_rsp

// repeated uint32 ids = 1;
inline int del_revolving_rsp::ids_size() const {
  return ids_.size();
}
inline void del_revolving_rsp::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 del_revolving_rsp::ids(int index) const {
  return ids_.Get(index);
}
inline void del_revolving_rsp::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
}
inline void del_revolving_rsp::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
del_revolving_rsp::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
del_revolving_rsp::mutable_ids() {
  return &ids_;
}

// required .inner.inner_tail tail = 1000;
inline bool del_revolving_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void del_revolving_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void del_revolving_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void del_revolving_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& del_revolving_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* del_revolving_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* del_revolving_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void del_revolving_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// stop_revolving_req

// repeated uint32 ids = 1;
inline int stop_revolving_req::ids_size() const {
  return ids_.size();
}
inline void stop_revolving_req::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 stop_revolving_req::ids(int index) const {
  return ids_.Get(index);
}
inline void stop_revolving_req::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
}
inline void stop_revolving_req::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stop_revolving_req::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stop_revolving_req::mutable_ids() {
  return &ids_;
}

// optional .inner.inner_head head = 1000;
inline bool stop_revolving_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stop_revolving_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stop_revolving_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stop_revolving_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& stop_revolving_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* stop_revolving_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* stop_revolving_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void stop_revolving_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// stop_revolving_rsp

// repeated uint32 ids = 1;
inline int stop_revolving_rsp::ids_size() const {
  return ids_.size();
}
inline void stop_revolving_rsp::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 stop_revolving_rsp::ids(int index) const {
  return ids_.Get(index);
}
inline void stop_revolving_rsp::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
}
inline void stop_revolving_rsp::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stop_revolving_rsp::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stop_revolving_rsp::mutable_ids() {
  return &ids_;
}

// required .inner.inner_tail tail = 1000;
inline bool stop_revolving_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stop_revolving_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stop_revolving_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stop_revolving_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& stop_revolving_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* stop_revolving_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* stop_revolving_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void stop_revolving_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// chat

// required string contents = 1;
inline bool chat::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& chat::contents() const {
  return *contents_;
}
inline void chat::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void chat::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void chat::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* chat::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2ebulletin_2eproto__INCLUDED
