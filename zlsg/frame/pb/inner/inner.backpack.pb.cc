// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.backpack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.backpack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* getBackpackGoodsList_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getBackpackGoodsList_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* backpackGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  backpackGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* getBackpackGoodsList_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getBackpackGoodsList_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* updateBackpackGoods_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  updateBackpackGoods_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* updateBackpackGoods_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  updateBackpackGoods_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2ebackpack_2eproto() {
  protobuf_AddDesc_inner_2ebackpack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.backpack.proto");
  GOOGLE_CHECK(file != NULL);
  getBackpackGoodsList_req_descriptor_ = file->message_type(0);
  static const int getBackpackGoodsList_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_req, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_req, head_),
  };
  getBackpackGoodsList_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getBackpackGoodsList_req_descriptor_,
      getBackpackGoodsList_req::default_instance_,
      getBackpackGoodsList_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getBackpackGoodsList_req));
  backpackGoods_descriptor_ = file->message_type(1);
  static const int backpackGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backpackGoods, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backpackGoods, user_),
  };
  backpackGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      backpackGoods_descriptor_,
      backpackGoods::default_instance_,
      backpackGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backpackGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backpackGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(backpackGoods));
  getBackpackGoodsList_rsp_descriptor_ = file->message_type(2);
  static const int getBackpackGoodsList_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_rsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_rsp, tail_),
  };
  getBackpackGoodsList_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getBackpackGoodsList_rsp_descriptor_,
      getBackpackGoodsList_rsp::default_instance_,
      getBackpackGoodsList_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getBackpackGoodsList_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getBackpackGoodsList_rsp));
  updateBackpackGoods_req_descriptor_ = file->message_type(3);
  static const int updateBackpackGoods_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_req, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_req, head_),
  };
  updateBackpackGoods_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      updateBackpackGoods_req_descriptor_,
      updateBackpackGoods_req::default_instance_,
      updateBackpackGoods_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(updateBackpackGoods_req));
  updateBackpackGoods_rsp_descriptor_ = file->message_type(4);
  static const int updateBackpackGoods_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_rsp, tail_),
  };
  updateBackpackGoods_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      updateBackpackGoods_rsp_descriptor_,
      updateBackpackGoods_rsp::default_instance_,
      updateBackpackGoods_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(updateBackpackGoods_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(updateBackpackGoods_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2ebackpack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getBackpackGoodsList_req_descriptor_, &getBackpackGoodsList_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    backpackGoods_descriptor_, &backpackGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getBackpackGoodsList_rsp_descriptor_, &getBackpackGoodsList_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    updateBackpackGoods_req_descriptor_, &updateBackpackGoods_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    updateBackpackGoods_rsp_descriptor_, &updateBackpackGoods_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2ebackpack_2eproto() {
  delete getBackpackGoodsList_req::default_instance_;
  delete getBackpackGoodsList_req_reflection_;
  delete backpackGoods::default_instance_;
  delete backpackGoods_reflection_;
  delete getBackpackGoodsList_rsp::default_instance_;
  delete getBackpackGoodsList_rsp_reflection_;
  delete updateBackpackGoods_req::default_instance_;
  delete updateBackpackGoods_req_reflection_;
  delete updateBackpackGoods_rsp::default_instance_;
  delete updateBackpackGoods_rsp_reflection_;
}

void protobuf_AddDesc_inner_2ebackpack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024inner.backpack.proto\022\005inner\032\020inner.com"
    "m.proto\"k\n\030getBackpackGoodsList_req\022\014\n\004t"
    "ype\030\001 \002(\r\022\037\n\004user\030\002 \003(\0132\021.inner.inner_us"
    "er\022 \n\004head\030\350\007 \001(\0132\021.inner.inner_head\"S\n\r"
    "backpackGoods\022!\n\005goods\030\001 \003(\0132\022.inner.inn"
    "er_goods\022\037\n\004user\030\002 \002(\0132\021.inner.inner_use"
    "r\"`\n\030getBackpackGoodsList_rsp\022\"\n\004data\030\001 "
    "\003(\0132\024.inner.backpackGoods\022 \n\004tail\030\350\007 \002(\013"
    "2\021.inner.inner_tail\"a\n\027updateBackpackGoo"
    "ds_req\022$\n\006update\030\001 \003(\0132\024.inner.backpackG"
    "oods\022 \n\004head\030\350\007 \001(\0132\021.inner.inner_head\";"
    "\n\027updateBackpackGoods_rsp\022 \n\004tail\030\350\007 \002(\013"
    "2\021.inner.inner_tail", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.backpack.proto", &protobuf_RegisterTypes);
  getBackpackGoodsList_req::default_instance_ = new getBackpackGoodsList_req();
  backpackGoods::default_instance_ = new backpackGoods();
  getBackpackGoodsList_rsp::default_instance_ = new getBackpackGoodsList_rsp();
  updateBackpackGoods_req::default_instance_ = new updateBackpackGoods_req();
  updateBackpackGoods_rsp::default_instance_ = new updateBackpackGoods_rsp();
  getBackpackGoodsList_req::default_instance_->InitAsDefaultInstance();
  backpackGoods::default_instance_->InitAsDefaultInstance();
  getBackpackGoodsList_rsp::default_instance_->InitAsDefaultInstance();
  updateBackpackGoods_req::default_instance_->InitAsDefaultInstance();
  updateBackpackGoods_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2ebackpack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2ebackpack_2eproto {
  StaticDescriptorInitializer_inner_2ebackpack_2eproto() {
    protobuf_AddDesc_inner_2ebackpack_2eproto();
  }
} static_descriptor_initializer_inner_2ebackpack_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int getBackpackGoodsList_req::kTypeFieldNumber;
const int getBackpackGoodsList_req::kUserFieldNumber;
const int getBackpackGoodsList_req::kHeadFieldNumber;
#endif  // !_MSC_VER

getBackpackGoodsList_req::getBackpackGoodsList_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getBackpackGoodsList_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

getBackpackGoodsList_req::getBackpackGoodsList_req(const getBackpackGoodsList_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getBackpackGoodsList_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getBackpackGoodsList_req::~getBackpackGoodsList_req() {
  SharedDtor();
}

void getBackpackGoodsList_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void getBackpackGoodsList_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getBackpackGoodsList_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getBackpackGoodsList_req_descriptor_;
}

const getBackpackGoodsList_req& getBackpackGoodsList_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ebackpack_2eproto();
  return *default_instance_;
}

getBackpackGoodsList_req* getBackpackGoodsList_req::default_instance_ = NULL;

getBackpackGoodsList_req* getBackpackGoodsList_req::New() const {
  return new getBackpackGoodsList_req;
}

void getBackpackGoodsList_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getBackpackGoodsList_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // repeated .inner.inner_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getBackpackGoodsList_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .inner.inner_user user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getBackpackGoodsList_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .inner.inner_user user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getBackpackGoodsList_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .inner.inner_user user = 2;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getBackpackGoodsList_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getBackpackGoodsList_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getBackpackGoodsList_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getBackpackGoodsList_req::MergeFrom(const getBackpackGoodsList_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getBackpackGoodsList_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getBackpackGoodsList_req::CopyFrom(const getBackpackGoodsList_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getBackpackGoodsList_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void getBackpackGoodsList_req::Swap(getBackpackGoodsList_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    user_.Swap(&other->user_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getBackpackGoodsList_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getBackpackGoodsList_req_descriptor_;
  metadata.reflection = getBackpackGoodsList_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int backpackGoods::kGoodsFieldNumber;
const int backpackGoods::kUserFieldNumber;
#endif  // !_MSC_VER

backpackGoods::backpackGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void backpackGoods::InitAsDefaultInstance() {
  user_ = const_cast< ::inner::inner_user*>(&::inner::inner_user::default_instance());
}

backpackGoods::backpackGoods(const backpackGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void backpackGoods::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

backpackGoods::~backpackGoods() {
  SharedDtor();
}

void backpackGoods::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void backpackGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* backpackGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return backpackGoods_descriptor_;
}

const backpackGoods& backpackGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ebackpack_2eproto();
  return *default_instance_;
}

backpackGoods* backpackGoods::default_instance_ = NULL;

backpackGoods* backpackGoods::New() const {
  return new backpackGoods;
}

void backpackGoods::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::inner::inner_user::Clear();
    }
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool backpackGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.inner_goods goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods;
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required .inner.inner_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void backpackGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.inner_goods goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(i), output);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* backpackGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.inner_goods goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(i), target);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int backpackGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_user user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .inner.inner_goods goods = 1;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void backpackGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const backpackGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const backpackGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void backpackGoods::MergeFrom(const backpackGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user()) {
      mutable_user()->::inner::inner_user::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void backpackGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void backpackGoods::CopyFrom(const backpackGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool backpackGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void backpackGoods::Swap(backpackGoods* other) {
  if (other != this) {
    goods_.Swap(&other->goods_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata backpackGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = backpackGoods_descriptor_;
  metadata.reflection = backpackGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getBackpackGoodsList_rsp::kDataFieldNumber;
const int getBackpackGoodsList_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

getBackpackGoodsList_rsp::getBackpackGoodsList_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getBackpackGoodsList_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

getBackpackGoodsList_rsp::getBackpackGoodsList_rsp(const getBackpackGoodsList_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getBackpackGoodsList_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getBackpackGoodsList_rsp::~getBackpackGoodsList_rsp() {
  SharedDtor();
}

void getBackpackGoodsList_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void getBackpackGoodsList_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getBackpackGoodsList_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getBackpackGoodsList_rsp_descriptor_;
}

const getBackpackGoodsList_rsp& getBackpackGoodsList_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ebackpack_2eproto();
  return *default_instance_;
}

getBackpackGoodsList_rsp* getBackpackGoodsList_rsp::default_instance_ = NULL;

getBackpackGoodsList_rsp* getBackpackGoodsList_rsp::New() const {
  return new getBackpackGoodsList_rsp;
}

void getBackpackGoodsList_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getBackpackGoodsList_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.backpackGoods data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getBackpackGoodsList_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.backpackGoods data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getBackpackGoodsList_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.backpackGoods data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getBackpackGoodsList_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated .inner.backpackGoods data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getBackpackGoodsList_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getBackpackGoodsList_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getBackpackGoodsList_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getBackpackGoodsList_rsp::MergeFrom(const getBackpackGoodsList_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getBackpackGoodsList_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getBackpackGoodsList_rsp::CopyFrom(const getBackpackGoodsList_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getBackpackGoodsList_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void getBackpackGoodsList_rsp::Swap(getBackpackGoodsList_rsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getBackpackGoodsList_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getBackpackGoodsList_rsp_descriptor_;
  metadata.reflection = getBackpackGoodsList_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int updateBackpackGoods_req::kUpdateFieldNumber;
const int updateBackpackGoods_req::kHeadFieldNumber;
#endif  // !_MSC_VER

updateBackpackGoods_req::updateBackpackGoods_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void updateBackpackGoods_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

updateBackpackGoods_req::updateBackpackGoods_req(const updateBackpackGoods_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void updateBackpackGoods_req::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

updateBackpackGoods_req::~updateBackpackGoods_req() {
  SharedDtor();
}

void updateBackpackGoods_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void updateBackpackGoods_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* updateBackpackGoods_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return updateBackpackGoods_req_descriptor_;
}

const updateBackpackGoods_req& updateBackpackGoods_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ebackpack_2eproto();
  return *default_instance_;
}

updateBackpackGoods_req* updateBackpackGoods_req::default_instance_ = NULL;

updateBackpackGoods_req* updateBackpackGoods_req::New() const {
  return new updateBackpackGoods_req;
}

void updateBackpackGoods_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool updateBackpackGoods_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.backpackGoods update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_update;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void updateBackpackGoods_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.backpackGoods update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* updateBackpackGoods_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.backpackGoods update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int updateBackpackGoods_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .inner.backpackGoods update = 1;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void updateBackpackGoods_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const updateBackpackGoods_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const updateBackpackGoods_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void updateBackpackGoods_req::MergeFrom(const updateBackpackGoods_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_.MergeFrom(from.update_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void updateBackpackGoods_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updateBackpackGoods_req::CopyFrom(const updateBackpackGoods_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateBackpackGoods_req::IsInitialized() const {

  for (int i = 0; i < update_size(); i++) {
    if (!this->update(i).IsInitialized()) return false;
  }
  return true;
}

void updateBackpackGoods_req::Swap(updateBackpackGoods_req* other) {
  if (other != this) {
    update_.Swap(&other->update_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata updateBackpackGoods_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = updateBackpackGoods_req_descriptor_;
  metadata.reflection = updateBackpackGoods_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int updateBackpackGoods_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

updateBackpackGoods_rsp::updateBackpackGoods_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void updateBackpackGoods_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

updateBackpackGoods_rsp::updateBackpackGoods_rsp(const updateBackpackGoods_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void updateBackpackGoods_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

updateBackpackGoods_rsp::~updateBackpackGoods_rsp() {
  SharedDtor();
}

void updateBackpackGoods_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void updateBackpackGoods_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* updateBackpackGoods_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return updateBackpackGoods_rsp_descriptor_;
}

const updateBackpackGoods_rsp& updateBackpackGoods_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2ebackpack_2eproto();
  return *default_instance_;
}

updateBackpackGoods_rsp* updateBackpackGoods_rsp::default_instance_ = NULL;

updateBackpackGoods_rsp* updateBackpackGoods_rsp::New() const {
  return new updateBackpackGoods_rsp;
}

void updateBackpackGoods_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool updateBackpackGoods_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void updateBackpackGoods_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* updateBackpackGoods_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int updateBackpackGoods_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void updateBackpackGoods_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const updateBackpackGoods_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const updateBackpackGoods_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void updateBackpackGoods_rsp::MergeFrom(const updateBackpackGoods_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void updateBackpackGoods_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updateBackpackGoods_rsp::CopyFrom(const updateBackpackGoods_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateBackpackGoods_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void updateBackpackGoods_rsp::Swap(updateBackpackGoods_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata updateBackpackGoods_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = updateBackpackGoods_rsp_descriptor_;
  metadata.reflection = updateBackpackGoods_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
