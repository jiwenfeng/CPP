// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.pay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.pay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* pay_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pay_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pay_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pay_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2epay_2eproto() {
  protobuf_AddDesc_inner_2epay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.pay.proto");
  GOOGLE_CHECK(file != NULL);
  pay_req_descriptor_ = file->message_type(0);
  static const int pay_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, pay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, inpour_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, addcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, ex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, depay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, g_depay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, head_),
  };
  pay_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pay_req_descriptor_,
      pay_req::default_instance_,
      pay_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pay_req));
  pay_rsp_descriptor_ = file->message_type(1);
  static const int pay_rsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, pay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, inpour_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, addcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, ex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, depay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, g_depay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, tail_),
  };
  pay_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pay_rsp_descriptor_,
      pay_rsp::default_instance_,
      pay_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pay_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pay_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2epay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pay_req_descriptor_, &pay_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pay_rsp_descriptor_, &pay_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2epay_2eproto() {
  delete pay_req::default_instance_;
  delete pay_req_reflection_;
  delete pay_rsp::default_instance_;
  delete pay_rsp_reflection_;
}

void protobuf_AddDesc_inner_2epay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017inner.pay.proto\022\005inner\032\020inner.comm.pro"
    "to\"\322\001\n\007pay_req\022\013\n\003amt\030\001 \002(\r\022\037\n\004user\030\002 \002("
    "\0132\021.inner.inner_user\022\016\n\006pay_id\030\003 \001(\t\022\020\n\010"
    "currency\030\004 \001(\t\022\023\n\013inpour_type\030\005 \001(\t\022\017\n\007a"
    "ddcoin\030\006 \001(\r\022\017\n\007ex_type\030\007 \001(\r\022\r\n\005depay\030\010"
    " \001(\001\022\017\n\007g_depay\030\t \001(\001\022 \n\004head\030\350\007 \001(\0132\021.i"
    "nner.inner_head\"\322\001\n\007pay_rsp\022\013\n\003amt\030\001 \002(\r"
    "\022\037\n\004user\030\002 \002(\0132\021.inner.inner_user\022\016\n\006pay"
    "_id\030\003 \001(\t\022\020\n\010currency\030\004 \001(\t\022\023\n\013inpour_ty"
    "pe\030\005 \001(\t\022\017\n\007addcoin\030\006 \001(\r\022\017\n\007ex_type\030\007 \001"
    "(\r\022\r\n\005depay\030\010 \001(\001\022\017\n\007g_depay\030\t \001(\001\022 \n\004ta"
    "il\030\350\007 \002(\0132\021.inner.inner_tail", 468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.pay.proto", &protobuf_RegisterTypes);
  pay_req::default_instance_ = new pay_req();
  pay_rsp::default_instance_ = new pay_rsp();
  pay_req::default_instance_->InitAsDefaultInstance();
  pay_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2epay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2epay_2eproto {
  StaticDescriptorInitializer_inner_2epay_2eproto() {
    protobuf_AddDesc_inner_2epay_2eproto();
  }
} static_descriptor_initializer_inner_2epay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pay_req::kAmtFieldNumber;
const int pay_req::kUserFieldNumber;
const int pay_req::kPayIdFieldNumber;
const int pay_req::kCurrencyFieldNumber;
const int pay_req::kInpourTypeFieldNumber;
const int pay_req::kAddcoinFieldNumber;
const int pay_req::kExTypeFieldNumber;
const int pay_req::kDepayFieldNumber;
const int pay_req::kGDepayFieldNumber;
const int pay_req::kHeadFieldNumber;
#endif  // !_MSC_VER

pay_req::pay_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pay_req::InitAsDefaultInstance() {
  user_ = const_cast< ::inner::inner_user*>(&::inner::inner_user::default_instance());
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

pay_req::pay_req(const pay_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pay_req::SharedCtor() {
  _cached_size_ = 0;
  amt_ = 0u;
  user_ = NULL;
  pay_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inpour_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addcoin_ = 0u;
  ex_type_ = 0u;
  depay_ = 0;
  g_depay_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pay_req::~pay_req() {
  SharedDtor();
}

void pay_req::SharedDtor() {
  if (pay_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pay_id_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (inpour_type_ != &::google::protobuf::internal::kEmptyString) {
    delete inpour_type_;
  }
  if (this != default_instance_) {
    delete user_;
    delete head_;
  }
}

void pay_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pay_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pay_req_descriptor_;
}

const pay_req& pay_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epay_2eproto();
  return *default_instance_;
}

pay_req* pay_req::default_instance_ = NULL;

pay_req* pay_req::New() const {
  return new pay_req;
}

void pay_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amt_ = 0u;
    if (has_user()) {
      if (user_ != NULL) user_->::inner::inner_user::Clear();
    }
    if (has_pay_id()) {
      if (pay_id_ != &::google::protobuf::internal::kEmptyString) {
        pay_id_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_inpour_type()) {
      if (inpour_type_ != &::google::protobuf::internal::kEmptyString) {
        inpour_type_->clear();
      }
    }
    addcoin_ = 0u;
    ex_type_ = 0u;
    depay_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    g_depay_ = 0;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pay_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 amt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required .inner.inner_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pay_id;
        break;
      }

      // optional string pay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pay_id().data(), this->pay_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency;
        break;
      }

      // optional string currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inpour_type;
        break;
      }

      // optional string inpour_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inpour_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inpour_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inpour_type().data(), this->inpour_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addcoin;
        break;
      }

      // optional uint32 addcoin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcoin_)));
          set_has_addcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ex_type;
        break;
      }

      // optional uint32 ex_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ex_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ex_type_)));
          set_has_ex_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_depay;
        break;
      }

      // optional double depay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_depay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &depay_)));
          set_has_depay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_g_depay;
        break;
      }

      // optional double g_depay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_g_depay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &g_depay_)));
          set_has_g_depay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pay_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 amt = 1;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->amt(), output);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // optional string pay_id = 3;
  if (has_pay_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_id().data(), this->pay_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pay_id(), output);
  }

  // optional string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency(), output);
  }

  // optional string inpour_type = 5;
  if (has_inpour_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpour_type().data(), this->inpour_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inpour_type(), output);
  }

  // optional uint32 addcoin = 6;
  if (has_addcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addcoin(), output);
  }

  // optional uint32 ex_type = 7;
  if (has_ex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ex_type(), output);
  }

  // optional double depay = 8;
  if (has_depay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->depay(), output);
  }

  // optional double g_depay = 9;
  if (has_g_depay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->g_depay(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pay_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 amt = 1;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->amt(), target);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // optional string pay_id = 3;
  if (has_pay_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_id().data(), this->pay_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pay_id(), target);
  }

  // optional string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }

  // optional string inpour_type = 5;
  if (has_inpour_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpour_type().data(), this->inpour_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inpour_type(), target);
  }

  // optional uint32 addcoin = 6;
  if (has_addcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addcoin(), target);
  }

  // optional uint32 ex_type = 7;
  if (has_ex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ex_type(), target);
  }

  // optional double depay = 8;
  if (has_depay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->depay(), target);
  }

  // optional double g_depay = 9;
  if (has_g_depay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->g_depay(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pay_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 amt = 1;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amt());
    }

    // required .inner.inner_user user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional string pay_id = 3;
    if (has_pay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pay_id());
    }

    // optional string currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string inpour_type = 5;
    if (has_inpour_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inpour_type());
    }

    // optional uint32 addcoin = 6;
    if (has_addcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcoin());
    }

    // optional uint32 ex_type = 7;
    if (has_ex_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ex_type());
    }

    // optional double depay = 8;
    if (has_depay()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double g_depay = 9;
    if (has_g_depay()) {
      total_size += 1 + 8;
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pay_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pay_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pay_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pay_req::MergeFrom(const pay_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amt()) {
      set_amt(from.amt());
    }
    if (from.has_user()) {
      mutable_user()->::inner::inner_user::MergeFrom(from.user());
    }
    if (from.has_pay_id()) {
      set_pay_id(from.pay_id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_inpour_type()) {
      set_inpour_type(from.inpour_type());
    }
    if (from.has_addcoin()) {
      set_addcoin(from.addcoin());
    }
    if (from.has_ex_type()) {
      set_ex_type(from.ex_type());
    }
    if (from.has_depay()) {
      set_depay(from.depay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_g_depay()) {
      set_g_depay(from.g_depay());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pay_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_req::CopyFrom(const pay_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pay_req::Swap(pay_req* other) {
  if (other != this) {
    std::swap(amt_, other->amt_);
    std::swap(user_, other->user_);
    std::swap(pay_id_, other->pay_id_);
    std::swap(currency_, other->currency_);
    std::swap(inpour_type_, other->inpour_type_);
    std::swap(addcoin_, other->addcoin_);
    std::swap(ex_type_, other->ex_type_);
    std::swap(depay_, other->depay_);
    std::swap(g_depay_, other->g_depay_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pay_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pay_req_descriptor_;
  metadata.reflection = pay_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pay_rsp::kAmtFieldNumber;
const int pay_rsp::kUserFieldNumber;
const int pay_rsp::kPayIdFieldNumber;
const int pay_rsp::kCurrencyFieldNumber;
const int pay_rsp::kInpourTypeFieldNumber;
const int pay_rsp::kAddcoinFieldNumber;
const int pay_rsp::kExTypeFieldNumber;
const int pay_rsp::kDepayFieldNumber;
const int pay_rsp::kGDepayFieldNumber;
const int pay_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

pay_rsp::pay_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pay_rsp::InitAsDefaultInstance() {
  user_ = const_cast< ::inner::inner_user*>(&::inner::inner_user::default_instance());
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

pay_rsp::pay_rsp(const pay_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pay_rsp::SharedCtor() {
  _cached_size_ = 0;
  amt_ = 0u;
  user_ = NULL;
  pay_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inpour_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addcoin_ = 0u;
  ex_type_ = 0u;
  depay_ = 0;
  g_depay_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pay_rsp::~pay_rsp() {
  SharedDtor();
}

void pay_rsp::SharedDtor() {
  if (pay_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pay_id_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (inpour_type_ != &::google::protobuf::internal::kEmptyString) {
    delete inpour_type_;
  }
  if (this != default_instance_) {
    delete user_;
    delete tail_;
  }
}

void pay_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pay_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pay_rsp_descriptor_;
}

const pay_rsp& pay_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epay_2eproto();
  return *default_instance_;
}

pay_rsp* pay_rsp::default_instance_ = NULL;

pay_rsp* pay_rsp::New() const {
  return new pay_rsp;
}

void pay_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amt_ = 0u;
    if (has_user()) {
      if (user_ != NULL) user_->::inner::inner_user::Clear();
    }
    if (has_pay_id()) {
      if (pay_id_ != &::google::protobuf::internal::kEmptyString) {
        pay_id_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_inpour_type()) {
      if (inpour_type_ != &::google::protobuf::internal::kEmptyString) {
        inpour_type_->clear();
      }
    }
    addcoin_ = 0u;
    ex_type_ = 0u;
    depay_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    g_depay_ = 0;
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pay_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 amt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required .inner.inner_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pay_id;
        break;
      }

      // optional string pay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pay_id().data(), this->pay_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency;
        break;
      }

      // optional string currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inpour_type;
        break;
      }

      // optional string inpour_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inpour_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inpour_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inpour_type().data(), this->inpour_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addcoin;
        break;
      }

      // optional uint32 addcoin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcoin_)));
          set_has_addcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ex_type;
        break;
      }

      // optional uint32 ex_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ex_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ex_type_)));
          set_has_ex_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_depay;
        break;
      }

      // optional double depay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_depay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &depay_)));
          set_has_depay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_g_depay;
        break;
      }

      // optional double g_depay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_g_depay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &g_depay_)));
          set_has_g_depay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pay_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 amt = 1;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->amt(), output);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // optional string pay_id = 3;
  if (has_pay_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_id().data(), this->pay_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pay_id(), output);
  }

  // optional string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency(), output);
  }

  // optional string inpour_type = 5;
  if (has_inpour_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpour_type().data(), this->inpour_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inpour_type(), output);
  }

  // optional uint32 addcoin = 6;
  if (has_addcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addcoin(), output);
  }

  // optional uint32 ex_type = 7;
  if (has_ex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ex_type(), output);
  }

  // optional double depay = 8;
  if (has_depay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->depay(), output);
  }

  // optional double g_depay = 9;
  if (has_g_depay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->g_depay(), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pay_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 amt = 1;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->amt(), target);
  }

  // required .inner.inner_user user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // optional string pay_id = 3;
  if (has_pay_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_id().data(), this->pay_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pay_id(), target);
  }

  // optional string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }

  // optional string inpour_type = 5;
  if (has_inpour_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpour_type().data(), this->inpour_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inpour_type(), target);
  }

  // optional uint32 addcoin = 6;
  if (has_addcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addcoin(), target);
  }

  // optional uint32 ex_type = 7;
  if (has_ex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ex_type(), target);
  }

  // optional double depay = 8;
  if (has_depay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->depay(), target);
  }

  // optional double g_depay = 9;
  if (has_g_depay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->g_depay(), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pay_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 amt = 1;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amt());
    }

    // required .inner.inner_user user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional string pay_id = 3;
    if (has_pay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pay_id());
    }

    // optional string currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string inpour_type = 5;
    if (has_inpour_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inpour_type());
    }

    // optional uint32 addcoin = 6;
    if (has_addcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcoin());
    }

    // optional uint32 ex_type = 7;
    if (has_ex_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ex_type());
    }

    // optional double depay = 8;
    if (has_depay()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double g_depay = 9;
    if (has_g_depay()) {
      total_size += 1 + 8;
    }

    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pay_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pay_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pay_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pay_rsp::MergeFrom(const pay_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amt()) {
      set_amt(from.amt());
    }
    if (from.has_user()) {
      mutable_user()->::inner::inner_user::MergeFrom(from.user());
    }
    if (from.has_pay_id()) {
      set_pay_id(from.pay_id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_inpour_type()) {
      set_inpour_type(from.inpour_type());
    }
    if (from.has_addcoin()) {
      set_addcoin(from.addcoin());
    }
    if (from.has_ex_type()) {
      set_ex_type(from.ex_type());
    }
    if (from.has_depay()) {
      set_depay(from.depay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_g_depay()) {
      set_g_depay(from.g_depay());
    }
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pay_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_rsp::CopyFrom(const pay_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000203) != 0x00000203) return false;

  return true;
}

void pay_rsp::Swap(pay_rsp* other) {
  if (other != this) {
    std::swap(amt_, other->amt_);
    std::swap(user_, other->user_);
    std::swap(pay_id_, other->pay_id_);
    std::swap(currency_, other->currency_);
    std::swap(inpour_type_, other->inpour_type_);
    std::swap(addcoin_, other->addcoin_);
    std::swap(ex_type_, other->ex_type_);
    std::swap(depay_, other->depay_);
    std::swap(g_depay_, other->g_depay_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pay_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pay_rsp_descriptor_;
  metadata.reflection = pay_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
