// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.faq.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.faq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* faqType_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqType_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqType_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqType_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqList_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqList_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqList_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqList_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqDetail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqDetail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqDetail_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqDetail_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqEvaluate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqEvaluate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqEvaluate_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqEvaluate_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqHot_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqHot_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqHot_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqHot_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqSearch_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqSearch_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* faqSearch_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  faqSearch_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2efaq_2eproto() {
  protobuf_AddDesc_inner_2efaq_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.faq.proto");
  GOOGLE_CHECK(file != NULL);
  faqType_req_descriptor_ = file->message_type(0);
  static const int faqType_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_req, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_req, game_id_),
  };
  faqType_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqType_req_descriptor_,
      faqType_req::default_instance_,
      faqType_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqType_req));
  faqType_rsp_descriptor_ = file->message_type(1);
  static const int faqType_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_rsp, tail_),
  };
  faqType_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqType_rsp_descriptor_,
      faqType_rsp::default_instance_,
      faqType_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqType_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqType_rsp));
  faqList_req_descriptor_ = file->message_type(2);
  static const int faqList_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_req, kind_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_req, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_req, ps_),
  };
  faqList_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqList_req_descriptor_,
      faqList_req::default_instance_,
      faqList_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqList_req));
  faqList_rsp_descriptor_ = file->message_type(3);
  static const int faqList_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_rsp, tail_),
  };
  faqList_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqList_rsp_descriptor_,
      faqList_rsp::default_instance_,
      faqList_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqList_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqList_rsp));
  faqDetail_req_descriptor_ = file->message_type(4);
  static const int faqDetail_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_req, id_),
  };
  faqDetail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqDetail_req_descriptor_,
      faqDetail_req::default_instance_,
      faqDetail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqDetail_req));
  faqDetail_rsp_descriptor_ = file->message_type(5);
  static const int faqDetail_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_rsp, tail_),
  };
  faqDetail_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqDetail_rsp_descriptor_,
      faqDetail_rsp::default_instance_,
      faqDetail_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqDetail_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqDetail_rsp));
  faqEvaluate_req_descriptor_ = file->message_type(6);
  static const int faqEvaluate_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, faq_whether_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, faq_opinion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, content_),
  };
  faqEvaluate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqEvaluate_req_descriptor_,
      faqEvaluate_req::default_instance_,
      faqEvaluate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqEvaluate_req));
  faqEvaluate_rsp_descriptor_ = file->message_type(7);
  static const int faqEvaluate_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_rsp, tail_),
  };
  faqEvaluate_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqEvaluate_rsp_descriptor_,
      faqEvaluate_rsp::default_instance_,
      faqEvaluate_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqEvaluate_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqEvaluate_rsp));
  faqHot_req_descriptor_ = file->message_type(8);
  static const int faqHot_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_req, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_req, ps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_req, game_id_),
  };
  faqHot_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqHot_req_descriptor_,
      faqHot_req::default_instance_,
      faqHot_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqHot_req));
  faqHot_rsp_descriptor_ = file->message_type(9);
  static const int faqHot_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_rsp, tail_),
  };
  faqHot_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqHot_rsp_descriptor_,
      faqHot_rsp::default_instance_,
      faqHot_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqHot_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqHot_rsp));
  faqSearch_req_descriptor_ = file->message_type(10);
  static const int faqSearch_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, key_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, ps_),
  };
  faqSearch_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqSearch_req_descriptor_,
      faqSearch_req::default_instance_,
      faqSearch_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqSearch_req));
  faqSearch_rsp_descriptor_ = file->message_type(11);
  static const int faqSearch_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_rsp, tail_),
  };
  faqSearch_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      faqSearch_rsp_descriptor_,
      faqSearch_rsp::default_instance_,
      faqSearch_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(faqSearch_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(faqSearch_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2efaq_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqType_req_descriptor_, &faqType_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqType_rsp_descriptor_, &faqType_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqList_req_descriptor_, &faqList_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqList_rsp_descriptor_, &faqList_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqDetail_req_descriptor_, &faqDetail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqDetail_rsp_descriptor_, &faqDetail_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqEvaluate_req_descriptor_, &faqEvaluate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqEvaluate_rsp_descriptor_, &faqEvaluate_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqHot_req_descriptor_, &faqHot_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqHot_rsp_descriptor_, &faqHot_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqSearch_req_descriptor_, &faqSearch_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    faqSearch_rsp_descriptor_, &faqSearch_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2efaq_2eproto() {
  delete faqType_req::default_instance_;
  delete faqType_req_reflection_;
  delete faqType_rsp::default_instance_;
  delete faqType_rsp_reflection_;
  delete faqList_req::default_instance_;
  delete faqList_req_reflection_;
  delete faqList_rsp::default_instance_;
  delete faqList_rsp_reflection_;
  delete faqDetail_req::default_instance_;
  delete faqDetail_req_reflection_;
  delete faqDetail_rsp::default_instance_;
  delete faqDetail_rsp_reflection_;
  delete faqEvaluate_req::default_instance_;
  delete faqEvaluate_req_reflection_;
  delete faqEvaluate_rsp::default_instance_;
  delete faqEvaluate_rsp_reflection_;
  delete faqHot_req::default_instance_;
  delete faqHot_req_reflection_;
  delete faqHot_rsp::default_instance_;
  delete faqHot_rsp_reflection_;
  delete faqSearch_req::default_instance_;
  delete faqSearch_req_reflection_;
  delete faqSearch_rsp::default_instance_;
  delete faqSearch_rsp_reflection_;
}

void protobuf_AddDesc_inner_2efaq_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017inner.faq.proto\022\005inner\032\020inner.comm.pro"
    "to\",\n\013faqType_req\022\014\n\004lang\030\001 \002(\005\022\017\n\007game_"
    "id\030\002 \002(\005\"/\n\013faqType_rsp\022 \n\004tail\030\350\007 \002(\0132\021"
    ".inner.inner_tail\"8\n\013faqList_req\022\017\n\007kind"
    "_id\030\001 \002(\005\022\014\n\004page\030\002 \001(\005\022\n\n\002ps\030\003 \001(\005\"/\n\013f"
    "aqList_rsp\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_"
    "tail\"\033\n\rfaqDetail_req\022\n\n\002id\030\001 \002(\005\"1\n\rfaq"
    "Detail_rsp\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_"
    "tail\"X\n\017faqEvaluate_req\022\n\n\002id\030\001 \002(\005\022\023\n\013f"
    "aq_whether\030\002 \002(\005\022\023\n\013faq_opinion\030\003 \002(\005\022\017\n"
    "\007content\030\004 \002(\t\"3\n\017faqEvaluate_rsp\022 \n\004tai"
    "l\030\350\007 \002(\0132\021.inner.inner_tail\"7\n\nfaqHot_re"
    "q\022\014\n\004lang\030\001 \002(\005\022\n\n\002ps\030\002 \002(\005\022\017\n\007game_id\030\003"
    " \002(\005\".\n\nfaqHot_rsp\022 \n\004tail\030\350\007 \002(\0132\021.inne"
    "r.inner_tail\"Z\n\rfaqSearch_req\022\014\n\004lang\030\001 "
    "\002(\005\022\020\n\010key_word\030\002 \002(\t\022\017\n\007game_id\030\003 \002(\005\022\014"
    "\n\004page\030\004 \001(\005\022\n\n\002ps\030\005 \001(\005\"1\n\rfaqSearch_rs"
    "p\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_tail", 715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.faq.proto", &protobuf_RegisterTypes);
  faqType_req::default_instance_ = new faqType_req();
  faqType_rsp::default_instance_ = new faqType_rsp();
  faqList_req::default_instance_ = new faqList_req();
  faqList_rsp::default_instance_ = new faqList_rsp();
  faqDetail_req::default_instance_ = new faqDetail_req();
  faqDetail_rsp::default_instance_ = new faqDetail_rsp();
  faqEvaluate_req::default_instance_ = new faqEvaluate_req();
  faqEvaluate_rsp::default_instance_ = new faqEvaluate_rsp();
  faqHot_req::default_instance_ = new faqHot_req();
  faqHot_rsp::default_instance_ = new faqHot_rsp();
  faqSearch_req::default_instance_ = new faqSearch_req();
  faqSearch_rsp::default_instance_ = new faqSearch_rsp();
  faqType_req::default_instance_->InitAsDefaultInstance();
  faqType_rsp::default_instance_->InitAsDefaultInstance();
  faqList_req::default_instance_->InitAsDefaultInstance();
  faqList_rsp::default_instance_->InitAsDefaultInstance();
  faqDetail_req::default_instance_->InitAsDefaultInstance();
  faqDetail_rsp::default_instance_->InitAsDefaultInstance();
  faqEvaluate_req::default_instance_->InitAsDefaultInstance();
  faqEvaluate_rsp::default_instance_->InitAsDefaultInstance();
  faqHot_req::default_instance_->InitAsDefaultInstance();
  faqHot_rsp::default_instance_->InitAsDefaultInstance();
  faqSearch_req::default_instance_->InitAsDefaultInstance();
  faqSearch_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2efaq_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2efaq_2eproto {
  StaticDescriptorInitializer_inner_2efaq_2eproto() {
    protobuf_AddDesc_inner_2efaq_2eproto();
  }
} static_descriptor_initializer_inner_2efaq_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int faqType_req::kLangFieldNumber;
const int faqType_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

faqType_req::faqType_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqType_req::InitAsDefaultInstance() {
}

faqType_req::faqType_req(const faqType_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqType_req::SharedCtor() {
  _cached_size_ = 0;
  lang_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqType_req::~faqType_req() {
  SharedDtor();
}

void faqType_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void faqType_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqType_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqType_req_descriptor_;
}

const faqType_req& faqType_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqType_req* faqType_req::default_instance_ = NULL;

faqType_req* faqType_req::New() const {
  return new faqType_req;
}

void faqType_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lang_ = 0;
    game_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqType_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lang_)));
          set_has_lang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqType_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lang(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqType_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lang = 1;
  if (has_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lang(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqType_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lang());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqType_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqType_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqType_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqType_req::MergeFrom(const faqType_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqType_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqType_req::CopyFrom(const faqType_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqType_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void faqType_req::Swap(faqType_req* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqType_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqType_req_descriptor_;
  metadata.reflection = faqType_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqType_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqType_rsp::faqType_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqType_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqType_rsp::faqType_rsp(const faqType_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqType_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqType_rsp::~faqType_rsp() {
  SharedDtor();
}

void faqType_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqType_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqType_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqType_rsp_descriptor_;
}

const faqType_rsp& faqType_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqType_rsp* faqType_rsp::default_instance_ = NULL;

faqType_rsp* faqType_rsp::New() const {
  return new faqType_rsp;
}

void faqType_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqType_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqType_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqType_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqType_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqType_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqType_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqType_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqType_rsp::MergeFrom(const faqType_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqType_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqType_rsp::CopyFrom(const faqType_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqType_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqType_rsp::Swap(faqType_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqType_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqType_rsp_descriptor_;
  metadata.reflection = faqType_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqList_req::kKindIdFieldNumber;
const int faqList_req::kPageFieldNumber;
const int faqList_req::kPsFieldNumber;
#endif  // !_MSC_VER

faqList_req::faqList_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqList_req::InitAsDefaultInstance() {
}

faqList_req::faqList_req(const faqList_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqList_req::SharedCtor() {
  _cached_size_ = 0;
  kind_id_ = 0;
  page_ = 0;
  ps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqList_req::~faqList_req() {
  SharedDtor();
}

void faqList_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void faqList_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqList_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqList_req_descriptor_;
}

const faqList_req& faqList_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqList_req* faqList_req::default_instance_ = NULL;

faqList_req* faqList_req::New() const {
  return new faqList_req;
}

void faqList_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_id_ = 0;
    page_ = 0;
    ps_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqList_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_id_)));
          set_has_kind_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ps;
        break;
      }

      // optional int32 ps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ps_)));
          set_has_ps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqList_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind_id = 1;
  if (has_kind_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind_id(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // optional int32 ps = 3;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqList_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind_id = 1;
  if (has_kind_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind_id(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // optional int32 ps = 3;
  if (has_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqList_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind_id = 1;
    if (has_kind_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind_id());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 ps = 3;
    if (has_ps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqList_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqList_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqList_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqList_req::MergeFrom(const faqList_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind_id()) {
      set_kind_id(from.kind_id());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_ps()) {
      set_ps(from.ps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqList_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqList_req::CopyFrom(const faqList_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqList_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqList_req::Swap(faqList_req* other) {
  if (other != this) {
    std::swap(kind_id_, other->kind_id_);
    std::swap(page_, other->page_);
    std::swap(ps_, other->ps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqList_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqList_req_descriptor_;
  metadata.reflection = faqList_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqList_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqList_rsp::faqList_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqList_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqList_rsp::faqList_rsp(const faqList_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqList_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqList_rsp::~faqList_rsp() {
  SharedDtor();
}

void faqList_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqList_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqList_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqList_rsp_descriptor_;
}

const faqList_rsp& faqList_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqList_rsp* faqList_rsp::default_instance_ = NULL;

faqList_rsp* faqList_rsp::New() const {
  return new faqList_rsp;
}

void faqList_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqList_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqList_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqList_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqList_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqList_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqList_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqList_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqList_rsp::MergeFrom(const faqList_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqList_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqList_rsp::CopyFrom(const faqList_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqList_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqList_rsp::Swap(faqList_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqList_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqList_rsp_descriptor_;
  metadata.reflection = faqList_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqDetail_req::kIdFieldNumber;
#endif  // !_MSC_VER

faqDetail_req::faqDetail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqDetail_req::InitAsDefaultInstance() {
}

faqDetail_req::faqDetail_req(const faqDetail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqDetail_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqDetail_req::~faqDetail_req() {
  SharedDtor();
}

void faqDetail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void faqDetail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqDetail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqDetail_req_descriptor_;
}

const faqDetail_req& faqDetail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqDetail_req* faqDetail_req::default_instance_ = NULL;

faqDetail_req* faqDetail_req::New() const {
  return new faqDetail_req;
}

void faqDetail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqDetail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqDetail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqDetail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqDetail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqDetail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqDetail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqDetail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqDetail_req::MergeFrom(const faqDetail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqDetail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqDetail_req::CopyFrom(const faqDetail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqDetail_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqDetail_req::Swap(faqDetail_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqDetail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqDetail_req_descriptor_;
  metadata.reflection = faqDetail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqDetail_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqDetail_rsp::faqDetail_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqDetail_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqDetail_rsp::faqDetail_rsp(const faqDetail_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqDetail_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqDetail_rsp::~faqDetail_rsp() {
  SharedDtor();
}

void faqDetail_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqDetail_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqDetail_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqDetail_rsp_descriptor_;
}

const faqDetail_rsp& faqDetail_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqDetail_rsp* faqDetail_rsp::default_instance_ = NULL;

faqDetail_rsp* faqDetail_rsp::New() const {
  return new faqDetail_rsp;
}

void faqDetail_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqDetail_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqDetail_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqDetail_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqDetail_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqDetail_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqDetail_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqDetail_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqDetail_rsp::MergeFrom(const faqDetail_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqDetail_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqDetail_rsp::CopyFrom(const faqDetail_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqDetail_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqDetail_rsp::Swap(faqDetail_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqDetail_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqDetail_rsp_descriptor_;
  metadata.reflection = faqDetail_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqEvaluate_req::kIdFieldNumber;
const int faqEvaluate_req::kFaqWhetherFieldNumber;
const int faqEvaluate_req::kFaqOpinionFieldNumber;
const int faqEvaluate_req::kContentFieldNumber;
#endif  // !_MSC_VER

faqEvaluate_req::faqEvaluate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqEvaluate_req::InitAsDefaultInstance() {
}

faqEvaluate_req::faqEvaluate_req(const faqEvaluate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqEvaluate_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  faq_whether_ = 0;
  faq_opinion_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqEvaluate_req::~faqEvaluate_req() {
  SharedDtor();
}

void faqEvaluate_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void faqEvaluate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqEvaluate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqEvaluate_req_descriptor_;
}

const faqEvaluate_req& faqEvaluate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqEvaluate_req* faqEvaluate_req::default_instance_ = NULL;

faqEvaluate_req* faqEvaluate_req::New() const {
  return new faqEvaluate_req;
}

void faqEvaluate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    faq_whether_ = 0;
    faq_opinion_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqEvaluate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faq_whether;
        break;
      }

      // required int32 faq_whether = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faq_whether:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faq_whether_)));
          set_has_faq_whether();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faq_opinion;
        break;
      }

      // required int32 faq_opinion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faq_opinion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faq_opinion_)));
          set_has_faq_opinion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqEvaluate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 faq_whether = 2;
  if (has_faq_whether()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->faq_whether(), output);
  }

  // required int32 faq_opinion = 3;
  if (has_faq_opinion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->faq_opinion(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqEvaluate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 faq_whether = 2;
  if (has_faq_whether()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->faq_whether(), target);
  }

  // required int32 faq_opinion = 3;
  if (has_faq_opinion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->faq_opinion(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqEvaluate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 faq_whether = 2;
    if (has_faq_whether()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faq_whether());
    }

    // required int32 faq_opinion = 3;
    if (has_faq_opinion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faq_opinion());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqEvaluate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqEvaluate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqEvaluate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqEvaluate_req::MergeFrom(const faqEvaluate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_faq_whether()) {
      set_faq_whether(from.faq_whether());
    }
    if (from.has_faq_opinion()) {
      set_faq_opinion(from.faq_opinion());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqEvaluate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqEvaluate_req::CopyFrom(const faqEvaluate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqEvaluate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void faqEvaluate_req::Swap(faqEvaluate_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(faq_whether_, other->faq_whether_);
    std::swap(faq_opinion_, other->faq_opinion_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqEvaluate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqEvaluate_req_descriptor_;
  metadata.reflection = faqEvaluate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqEvaluate_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqEvaluate_rsp::faqEvaluate_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqEvaluate_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqEvaluate_rsp::faqEvaluate_rsp(const faqEvaluate_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqEvaluate_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqEvaluate_rsp::~faqEvaluate_rsp() {
  SharedDtor();
}

void faqEvaluate_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqEvaluate_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqEvaluate_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqEvaluate_rsp_descriptor_;
}

const faqEvaluate_rsp& faqEvaluate_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqEvaluate_rsp* faqEvaluate_rsp::default_instance_ = NULL;

faqEvaluate_rsp* faqEvaluate_rsp::New() const {
  return new faqEvaluate_rsp;
}

void faqEvaluate_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqEvaluate_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqEvaluate_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqEvaluate_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqEvaluate_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqEvaluate_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqEvaluate_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqEvaluate_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqEvaluate_rsp::MergeFrom(const faqEvaluate_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqEvaluate_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqEvaluate_rsp::CopyFrom(const faqEvaluate_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqEvaluate_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqEvaluate_rsp::Swap(faqEvaluate_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqEvaluate_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqEvaluate_rsp_descriptor_;
  metadata.reflection = faqEvaluate_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqHot_req::kLangFieldNumber;
const int faqHot_req::kPsFieldNumber;
const int faqHot_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

faqHot_req::faqHot_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqHot_req::InitAsDefaultInstance() {
}

faqHot_req::faqHot_req(const faqHot_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqHot_req::SharedCtor() {
  _cached_size_ = 0;
  lang_ = 0;
  ps_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqHot_req::~faqHot_req() {
  SharedDtor();
}

void faqHot_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void faqHot_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqHot_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqHot_req_descriptor_;
}

const faqHot_req& faqHot_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqHot_req* faqHot_req::default_instance_ = NULL;

faqHot_req* faqHot_req::New() const {
  return new faqHot_req;
}

void faqHot_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lang_ = 0;
    ps_ = 0;
    game_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqHot_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lang_)));
          set_has_lang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ps;
        break;
      }

      // required int32 ps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ps_)));
          set_has_ps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqHot_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lang(), output);
  }

  // required int32 ps = 2;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ps(), output);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqHot_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lang = 1;
  if (has_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lang(), target);
  }

  // required int32 ps = 2;
  if (has_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ps(), target);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqHot_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lang());
    }

    // required int32 ps = 2;
    if (has_ps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ps());
    }

    // required int32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqHot_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqHot_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqHot_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqHot_req::MergeFrom(const faqHot_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_ps()) {
      set_ps(from.ps());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqHot_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqHot_req::CopyFrom(const faqHot_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqHot_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void faqHot_req::Swap(faqHot_req* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(ps_, other->ps_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqHot_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqHot_req_descriptor_;
  metadata.reflection = faqHot_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqHot_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqHot_rsp::faqHot_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqHot_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqHot_rsp::faqHot_rsp(const faqHot_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqHot_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqHot_rsp::~faqHot_rsp() {
  SharedDtor();
}

void faqHot_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqHot_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqHot_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqHot_rsp_descriptor_;
}

const faqHot_rsp& faqHot_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqHot_rsp* faqHot_rsp::default_instance_ = NULL;

faqHot_rsp* faqHot_rsp::New() const {
  return new faqHot_rsp;
}

void faqHot_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqHot_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqHot_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqHot_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqHot_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqHot_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqHot_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqHot_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqHot_rsp::MergeFrom(const faqHot_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqHot_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqHot_rsp::CopyFrom(const faqHot_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqHot_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqHot_rsp::Swap(faqHot_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqHot_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqHot_rsp_descriptor_;
  metadata.reflection = faqHot_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqSearch_req::kLangFieldNumber;
const int faqSearch_req::kKeyWordFieldNumber;
const int faqSearch_req::kGameIdFieldNumber;
const int faqSearch_req::kPageFieldNumber;
const int faqSearch_req::kPsFieldNumber;
#endif  // !_MSC_VER

faqSearch_req::faqSearch_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqSearch_req::InitAsDefaultInstance() {
}

faqSearch_req::faqSearch_req(const faqSearch_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqSearch_req::SharedCtor() {
  _cached_size_ = 0;
  lang_ = 0;
  key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0;
  page_ = 0;
  ps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqSearch_req::~faqSearch_req() {
  SharedDtor();
}

void faqSearch_req::SharedDtor() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    delete key_word_;
  }
  if (this != default_instance_) {
  }
}

void faqSearch_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqSearch_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqSearch_req_descriptor_;
}

const faqSearch_req& faqSearch_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqSearch_req* faqSearch_req::default_instance_ = NULL;

faqSearch_req* faqSearch_req::New() const {
  return new faqSearch_req;
}

void faqSearch_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lang_ = 0;
    if (has_key_word()) {
      if (key_word_ != &::google::protobuf::internal::kEmptyString) {
        key_word_->clear();
      }
    }
    game_id_ = 0;
    page_ = 0;
    ps_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqSearch_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lang_)));
          set_has_lang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_word;
        break;
      }

      // required string key_word = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_word().data(), this->key_word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ps;
        break;
      }

      // optional int32 ps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ps_)));
          set_has_ps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqSearch_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lang(), output);
  }

  // required string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key_word(), output);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // optional int32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page(), output);
  }

  // optional int32 ps = 5;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqSearch_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lang = 1;
  if (has_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lang(), target);
  }

  // required string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key_word(), target);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // optional int32 page = 4;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page(), target);
  }

  // optional int32 ps = 5;
  if (has_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqSearch_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lang());
    }

    // required string key_word = 2;
    if (has_key_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_word());
    }

    // required int32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 ps = 5;
    if (has_ps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqSearch_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqSearch_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqSearch_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqSearch_req::MergeFrom(const faqSearch_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_key_word()) {
      set_key_word(from.key_word());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_ps()) {
      set_ps(from.ps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqSearch_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqSearch_req::CopyFrom(const faqSearch_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqSearch_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void faqSearch_req::Swap(faqSearch_req* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(key_word_, other->key_word_);
    std::swap(game_id_, other->game_id_);
    std::swap(page_, other->page_);
    std::swap(ps_, other->ps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqSearch_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqSearch_req_descriptor_;
  metadata.reflection = faqSearch_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int faqSearch_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

faqSearch_rsp::faqSearch_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void faqSearch_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

faqSearch_rsp::faqSearch_rsp(const faqSearch_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void faqSearch_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

faqSearch_rsp::~faqSearch_rsp() {
  SharedDtor();
}

void faqSearch_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void faqSearch_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* faqSearch_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return faqSearch_rsp_descriptor_;
}

const faqSearch_rsp& faqSearch_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2efaq_2eproto();
  return *default_instance_;
}

faqSearch_rsp* faqSearch_rsp::default_instance_ = NULL;

faqSearch_rsp* faqSearch_rsp::New() const {
  return new faqSearch_rsp;
}

void faqSearch_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool faqSearch_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void faqSearch_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* faqSearch_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int faqSearch_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void faqSearch_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const faqSearch_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const faqSearch_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void faqSearch_rsp::MergeFrom(const faqSearch_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void faqSearch_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void faqSearch_rsp::CopyFrom(const faqSearch_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool faqSearch_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void faqSearch_rsp::Swap(faqSearch_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata faqSearch_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = faqSearch_rsp_descriptor_;
  metadata.reflection = faqSearch_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
