// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.comm.proto

#ifndef PROTOBUF_inner_2ecomm_2eproto__INCLUDED
#define PROTOBUF_inner_2ecomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2ecomm_2eproto();
void protobuf_AssignDesc_inner_2ecomm_2eproto();
void protobuf_ShutdownFile_inner_2ecomm_2eproto();

class inner_head;
class inner_tail;
class inner_user;
class inner_goods;
class close_server;

// ===================================================================

class inner_head : public ::google::protobuf::Message {
 public:
  inner_head();
  virtual ~inner_head();

  inner_head(const inner_head& from);

  inline inner_head& operator=(const inner_head& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inner_head& default_instance();

  void Swap(inner_head* other);

  // implements Message ----------------------------------------------

  inner_head* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inner_head& from);
  void MergeFrom(const inner_head& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svr_id = 1 [default = 0];
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_id() const;
  inline void set_svr_id(::google::protobuf::uint32 value);

  // optional uint32 agent_id = 2 [default = 0];
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint32 value);

  // optional uint32 client_id = 3 [default = 0];
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // optional string client_ip = 4;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 4;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const char* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  inline void set_allocated_client_ip(::std::string* client_ip);

  // @@protoc_insertion_point(class_scope:inner.inner_head)
 private:
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svr_id_;
  ::google::protobuf::uint32 agent_id_;
  ::std::string* client_ip_;
  ::google::protobuf::uint32 client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecomm_2eproto();
  friend void protobuf_AssignDesc_inner_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static inner_head* default_instance_;
};
// -------------------------------------------------------------------

class inner_tail : public ::google::protobuf::Message {
 public:
  inner_tail();
  virtual ~inner_tail();

  inner_tail(const inner_tail& from);

  inline inner_tail& operator=(const inner_tail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inner_tail& default_instance();

  void Swap(inner_tail* other);

  // implements Message ----------------------------------------------

  inner_tail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inner_tail& from);
  void MergeFrom(const inner_tail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:inner.inner_tail)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;
  ::std::string* data_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecomm_2eproto();
  friend void protobuf_AssignDesc_inner_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static inner_tail* default_instance_;
};
// -------------------------------------------------------------------

class inner_user : public ::google::protobuf::Message {
 public:
  inner_user();
  virtual ~inner_user();

  inner_user(const inner_user& from);

  inline inner_user& operator=(const inner_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inner_user& default_instance();

  void Swap(inner_user* other);

  // implements Message ----------------------------------------------

  inner_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inner_user& from);
  void MergeFrom(const inner_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string account_name = 2;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:inner.inner_user)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_account_name();
  inline void clear_has_account_name();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecomm_2eproto();
  friend void protobuf_AssignDesc_inner_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static inner_user* default_instance_;
};
// -------------------------------------------------------------------

class inner_goods : public ::google::protobuf::Message {
 public:
  inner_goods();
  virtual ~inner_goods();

  inner_goods(const inner_goods& from);

  inline inner_goods& operator=(const inner_goods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inner_goods& default_instance();

  void Swap(inner_goods* other);

  // implements Message ----------------------------------------------

  inner_goods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inner_goods& from);
  void MergeFrom(const inner_goods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 goods_id = 2;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 2;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // optional string goods_name = 3;
  inline bool has_goods_name() const;
  inline void clear_goods_name();
  static const int kGoodsNameFieldNumber = 3;
  inline const ::std::string& goods_name() const;
  inline void set_goods_name(const ::std::string& value);
  inline void set_goods_name(const char* value);
  inline void set_goods_name(const char* value, size_t size);
  inline ::std::string* mutable_goods_name();
  inline ::std::string* release_goods_name();
  inline void set_allocated_goods_name(::std::string* goods_name);

  // optional uint32 goods_num = 4;
  inline bool has_goods_num() const;
  inline void clear_goods_num();
  static const int kGoodsNumFieldNumber = 4;
  inline ::google::protobuf::uint32 goods_num() const;
  inline void set_goods_num(::google::protobuf::uint32 value);

  // optional uint32 goods_type = 5;
  inline bool has_goods_type() const;
  inline void clear_goods_type();
  static const int kGoodsTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 goods_type() const;
  inline void set_goods_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:inner.inner_goods)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_name();
  inline void clear_has_goods_name();
  inline void set_has_goods_num();
  inline void clear_has_goods_num();
  inline void set_has_goods_type();
  inline void clear_has_goods_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 goods_id_;
  ::std::string* goods_name_;
  ::google::protobuf::uint32 goods_num_;
  ::google::protobuf::uint32 goods_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecomm_2eproto();
  friend void protobuf_AssignDesc_inner_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static inner_goods* default_instance_;
};
// -------------------------------------------------------------------

class close_server : public ::google::protobuf::Message {
 public:
  close_server();
  virtual ~close_server();

  close_server(const close_server& from);

  inline close_server& operator=(const close_server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const close_server& default_instance();

  void Swap(close_server* other);

  // implements Message ----------------------------------------------

  close_server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const close_server& from);
  void MergeFrom(const close_server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.close_server)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_head* head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2ecomm_2eproto();
  friend void protobuf_AssignDesc_inner_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_inner_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static close_server* default_instance_;
};
// ===================================================================


// ===================================================================

// inner_head

// optional uint32 svr_id = 1 [default = 0];
inline bool inner_head::has_svr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inner_head::set_has_svr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inner_head::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inner_head::clear_svr_id() {
  svr_id_ = 0u;
  clear_has_svr_id();
}
inline ::google::protobuf::uint32 inner_head::svr_id() const {
  return svr_id_;
}
inline void inner_head::set_svr_id(::google::protobuf::uint32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// optional uint32 agent_id = 2 [default = 0];
inline bool inner_head::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inner_head::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inner_head::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inner_head::clear_agent_id() {
  agent_id_ = 0u;
  clear_has_agent_id();
}
inline ::google::protobuf::uint32 inner_head::agent_id() const {
  return agent_id_;
}
inline void inner_head::set_agent_id(::google::protobuf::uint32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional uint32 client_id = 3 [default = 0];
inline bool inner_head::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inner_head::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inner_head::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inner_head::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 inner_head::client_id() const {
  return client_id_;
}
inline void inner_head::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional string client_ip = 4;
inline bool inner_head::has_client_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void inner_head::set_has_client_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void inner_head::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void inner_head::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& inner_head::client_ip() const {
  return *client_ip_;
}
inline void inner_head::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void inner_head::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void inner_head::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_head::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  return client_ip_;
}
inline ::std::string* inner_head::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_head::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (client_ip) {
    set_has_client_ip();
    client_ip_ = client_ip;
  } else {
    clear_has_client_ip();
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// inner_tail

// optional uint32 status = 1;
inline bool inner_tail::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inner_tail::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inner_tail::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inner_tail::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 inner_tail::status() const {
  return status_;
}
inline void inner_tail::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional string info = 2;
inline bool inner_tail::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inner_tail::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inner_tail::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inner_tail::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& inner_tail::info() const {
  return *info_;
}
inline void inner_tail::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void inner_tail::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void inner_tail::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_tail::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* inner_tail::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_tail::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data = 3;
inline bool inner_tail::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inner_tail::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inner_tail::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inner_tail::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& inner_tail::data() const {
  return *data_;
}
inline void inner_tail::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void inner_tail::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void inner_tail::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_tail::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* inner_tail::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_tail::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// inner_user

// optional uint32 id = 1;
inline bool inner_user::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inner_user::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inner_user::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inner_user::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 inner_user::id() const {
  return id_;
}
inline void inner_user::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string account_name = 2;
inline bool inner_user::has_account_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inner_user::set_has_account_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inner_user::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inner_user::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& inner_user::account_name() const {
  return *account_name_;
}
inline void inner_user::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void inner_user::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void inner_user::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_user::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* inner_user::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_user::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 3;
inline bool inner_user::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inner_user::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inner_user::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inner_user::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& inner_user::nickname() const {
  return *nickname_;
}
inline void inner_user::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void inner_user::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void inner_user::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_user::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* inner_user::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_user::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// inner_goods

// optional uint32 index = 1;
inline bool inner_goods::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inner_goods::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inner_goods::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inner_goods::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 inner_goods::index() const {
  return index_;
}
inline void inner_goods::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 goods_id = 2;
inline bool inner_goods::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inner_goods::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inner_goods::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inner_goods::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 inner_goods::goods_id() const {
  return goods_id_;
}
inline void inner_goods::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// optional string goods_name = 3;
inline bool inner_goods::has_goods_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inner_goods::set_has_goods_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inner_goods::clear_has_goods_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inner_goods::clear_goods_name() {
  if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
    goods_name_->clear();
  }
  clear_has_goods_name();
}
inline const ::std::string& inner_goods::goods_name() const {
  return *goods_name_;
}
inline void inner_goods::set_goods_name(const ::std::string& value) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(value);
}
inline void inner_goods::set_goods_name(const char* value) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(value);
}
inline void inner_goods::set_goods_name(const char* value, size_t size) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* inner_goods::mutable_goods_name() {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  return goods_name_;
}
inline ::std::string* inner_goods::release_goods_name() {
  clear_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goods_name_;
    goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void inner_goods::set_allocated_goods_name(::std::string* goods_name) {
  if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_name_;
  }
  if (goods_name) {
    set_has_goods_name();
    goods_name_ = goods_name;
  } else {
    clear_has_goods_name();
    goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 goods_num = 4;
inline bool inner_goods::has_goods_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void inner_goods::set_has_goods_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void inner_goods::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void inner_goods::clear_goods_num() {
  goods_num_ = 0u;
  clear_has_goods_num();
}
inline ::google::protobuf::uint32 inner_goods::goods_num() const {
  return goods_num_;
}
inline void inner_goods::set_goods_num(::google::protobuf::uint32 value) {
  set_has_goods_num();
  goods_num_ = value;
}

// optional uint32 goods_type = 5;
inline bool inner_goods::has_goods_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void inner_goods::set_has_goods_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void inner_goods::clear_has_goods_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void inner_goods::clear_goods_type() {
  goods_type_ = 0u;
  clear_has_goods_type();
}
inline ::google::protobuf::uint32 inner_goods::goods_type() const {
  return goods_type_;
}
inline void inner_goods::set_goods_type(::google::protobuf::uint32 value) {
  set_has_goods_type();
  goods_type_ = value;
}

// -------------------------------------------------------------------

// close_server

// required uint32 unixtime = 1;
inline bool close_server::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void close_server::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void close_server::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void close_server::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 close_server::unixtime() const {
  return unixtime_;
}
inline void close_server::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool close_server::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void close_server::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void close_server::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void close_server::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& close_server::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* close_server::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* close_server::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void close_server::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2ecomm_2eproto__INCLUDED
