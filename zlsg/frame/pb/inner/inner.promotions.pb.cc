// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.promotions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.promotions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* promotions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  promotions_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_promotions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_promotions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_promotions_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_promotions_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_promotions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_promotions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_promotions_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_promotions_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_promotions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_promotions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_promotions_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_promotions_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2epromotions_2eproto() {
  protobuf_AddDesc_inner_2epromotions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.promotions.proto");
  GOOGLE_CHECK(file != NULL);
  promotions_descriptor_ = file->message_type(0);
  static const int promotions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, duration_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, loop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, state_),
  };
  promotions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      promotions_descriptor_,
      promotions::default_instance_,
      promotions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promotions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(promotions));
  get_promotions_req_descriptor_ = file->message_type(1);
  static const int get_promotions_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_req, head_),
  };
  get_promotions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_promotions_req_descriptor_,
      get_promotions_req::default_instance_,
      get_promotions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_promotions_req));
  get_promotions_rsp_descriptor_ = file->message_type(2);
  static const int get_promotions_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_rsp, ps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_rsp, tail_),
  };
  get_promotions_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_promotions_rsp_descriptor_,
      get_promotions_rsp::default_instance_,
      get_promotions_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_promotions_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_promotions_rsp));
  set_promotions_req_descriptor_ = file->message_type(3);
  static const int set_promotions_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_req, ps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_req, head_),
  };
  set_promotions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_promotions_req_descriptor_,
      set_promotions_req::default_instance_,
      set_promotions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_promotions_req));
  set_promotions_rsp_descriptor_ = file->message_type(4);
  static const int set_promotions_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_rsp, ps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_rsp, tail_),
  };
  set_promotions_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_promotions_rsp_descriptor_,
      set_promotions_rsp::default_instance_,
      set_promotions_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_promotions_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_promotions_rsp));
  del_promotions_req_descriptor_ = file->message_type(5);
  static const int del_promotions_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_req, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_req, head_),
  };
  del_promotions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_promotions_req_descriptor_,
      del_promotions_req::default_instance_,
      del_promotions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_promotions_req));
  del_promotions_rsp_descriptor_ = file->message_type(6);
  static const int del_promotions_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_rsp, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_rsp, tail_),
  };
  del_promotions_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_promotions_rsp_descriptor_,
      del_promotions_rsp::default_instance_,
      del_promotions_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_promotions_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_promotions_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2epromotions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    promotions_descriptor_, &promotions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_promotions_req_descriptor_, &get_promotions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_promotions_rsp_descriptor_, &get_promotions_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_promotions_req_descriptor_, &set_promotions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_promotions_rsp_descriptor_, &set_promotions_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_promotions_req_descriptor_, &del_promotions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_promotions_rsp_descriptor_, &del_promotions_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2epromotions_2eproto() {
  delete promotions::default_instance_;
  delete promotions_reflection_;
  delete get_promotions_req::default_instance_;
  delete get_promotions_req_reflection_;
  delete get_promotions_rsp::default_instance_;
  delete get_promotions_rsp_reflection_;
  delete set_promotions_req::default_instance_;
  delete set_promotions_req_reflection_;
  delete set_promotions_rsp::default_instance_;
  delete set_promotions_rsp_reflection_;
  delete del_promotions_req::default_instance_;
  delete del_promotions_req_reflection_;
  delete del_promotions_rsp::default_instance_;
  delete del_promotions_rsp_reflection_;
}

void protobuf_AddDesc_inner_2epromotions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026inner.promotions.proto\022\005inner\032\020inner.c"
    "omm.proto\"\223\001\n\npromotions\022\n\n\002id\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\t\022\014\n\004type\030\003 \002(\r\022\022\n\nstart_time\030\004"
    " \002(\r\022\025\n\rduration_time\030\005 \002(\r\022\020\n\010end_time\030"
    "\006 \002(\r\022\021\n\tloop_time\030\007 \002(\r\022\r\n\005state\030\010 \002(\r\""
    "H\n\022get_promotions_req\022\020\n\010unixtime\030\001 \002(\r\022"
    " \n\004head\030\350\007 \001(\0132\021.inner.inner_head\"U\n\022get"
    "_promotions_rsp\022\035\n\002ps\030\001 \003(\0132\021.inner.prom"
    "otions\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_tail"
    "\"U\n\022set_promotions_req\022\035\n\002ps\030\001 \003(\0132\021.inn"
    "er.promotions\022 \n\004head\030\350\007 \001(\0132\021.inner.inn"
    "er_head\"U\n\022set_promotions_rsp\022\035\n\002ps\030\001 \003("
    "\0132\021.inner.promotions\022 \n\004tail\030\350\007 \002(\0132\021.in"
    "ner.inner_tail\"C\n\022del_promotions_req\022\013\n\003"
    "ids\030\001 \003(\r\022 \n\004head\030\350\007 \001(\0132\021.inner.inner_h"
    "ead\"C\n\022del_promotions_rsp\022\013\n\003ids\030\001 \003(\r\022 "
    "\n\004tail\030\350\007 \001(\0132\021.inner.inner_tail", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.promotions.proto", &protobuf_RegisterTypes);
  promotions::default_instance_ = new promotions();
  get_promotions_req::default_instance_ = new get_promotions_req();
  get_promotions_rsp::default_instance_ = new get_promotions_rsp();
  set_promotions_req::default_instance_ = new set_promotions_req();
  set_promotions_rsp::default_instance_ = new set_promotions_rsp();
  del_promotions_req::default_instance_ = new del_promotions_req();
  del_promotions_rsp::default_instance_ = new del_promotions_rsp();
  promotions::default_instance_->InitAsDefaultInstance();
  get_promotions_req::default_instance_->InitAsDefaultInstance();
  get_promotions_rsp::default_instance_->InitAsDefaultInstance();
  set_promotions_req::default_instance_->InitAsDefaultInstance();
  set_promotions_rsp::default_instance_->InitAsDefaultInstance();
  del_promotions_req::default_instance_->InitAsDefaultInstance();
  del_promotions_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2epromotions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2epromotions_2eproto {
  StaticDescriptorInitializer_inner_2epromotions_2eproto() {
    protobuf_AddDesc_inner_2epromotions_2eproto();
  }
} static_descriptor_initializer_inner_2epromotions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int promotions::kIdFieldNumber;
const int promotions::kNameFieldNumber;
const int promotions::kTypeFieldNumber;
const int promotions::kStartTimeFieldNumber;
const int promotions::kDurationTimeFieldNumber;
const int promotions::kEndTimeFieldNumber;
const int promotions::kLoopTimeFieldNumber;
const int promotions::kStateFieldNumber;
#endif  // !_MSC_VER

promotions::promotions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void promotions::InitAsDefaultInstance() {
}

promotions::promotions(const promotions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void promotions::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  start_time_ = 0u;
  duration_time_ = 0u;
  end_time_ = 0u;
  loop_time_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

promotions::~promotions() {
  SharedDtor();
}

void promotions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void promotions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* promotions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return promotions_descriptor_;
}

const promotions& promotions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

promotions* promotions::default_instance_ = NULL;

promotions* promotions::New() const {
  return new promotions;
}

void promotions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    start_time_ = 0u;
    duration_time_ = 0u;
    end_time_ = 0u;
    loop_time_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool promotions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required uint32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration_time;
        break;
      }

      // required uint32 duration_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_time_)));
          set_has_duration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loop_time;
        break;
      }

      // required uint32 loop_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loop_time_)));
          set_has_loop_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // required uint32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void promotions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // required uint32 duration_time = 5;
  if (has_duration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->duration_time(), output);
  }

  // required uint32 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_time(), output);
  }

  // required uint32 loop_time = 7;
  if (has_loop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->loop_time(), output);
  }

  // required uint32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* promotions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // required uint32 duration_time = 5;
  if (has_duration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->duration_time(), target);
  }

  // required uint32 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_time(), target);
  }

  // required uint32 loop_time = 7;
  if (has_loop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->loop_time(), target);
  }

  // required uint32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int promotions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // required uint32 duration_time = 5;
    if (has_duration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_time());
    }

    // required uint32 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required uint32 loop_time = 7;
    if (has_loop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loop_time());
    }

    // required uint32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void promotions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const promotions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const promotions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void promotions::MergeFrom(const promotions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_duration_time()) {
      set_duration_time(from.duration_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_loop_time()) {
      set_loop_time(from.loop_time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void promotions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void promotions::CopyFrom(const promotions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool promotions::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void promotions::Swap(promotions* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(duration_time_, other->duration_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(loop_time_, other->loop_time_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata promotions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = promotions_descriptor_;
  metadata.reflection = promotions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_promotions_req::kUnixtimeFieldNumber;
const int get_promotions_req::kHeadFieldNumber;
#endif  // !_MSC_VER

get_promotions_req::get_promotions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_promotions_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

get_promotions_req::get_promotions_req(const get_promotions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_promotions_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_promotions_req::~get_promotions_req() {
  SharedDtor();
}

void get_promotions_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void get_promotions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_promotions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_promotions_req_descriptor_;
}

const get_promotions_req& get_promotions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

get_promotions_req* get_promotions_req::default_instance_ = NULL;

get_promotions_req* get_promotions_req::New() const {
  return new get_promotions_req;
}

void get_promotions_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_promotions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_promotions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_promotions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_promotions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_promotions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_promotions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_promotions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_promotions_req::MergeFrom(const get_promotions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_promotions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_promotions_req::CopyFrom(const get_promotions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_promotions_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_promotions_req::Swap(get_promotions_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_promotions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_promotions_req_descriptor_;
  metadata.reflection = get_promotions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_promotions_rsp::kPsFieldNumber;
const int get_promotions_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

get_promotions_rsp::get_promotions_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_promotions_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

get_promotions_rsp::get_promotions_rsp(const get_promotions_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_promotions_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_promotions_rsp::~get_promotions_rsp() {
  SharedDtor();
}

void get_promotions_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void get_promotions_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_promotions_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_promotions_rsp_descriptor_;
}

const get_promotions_rsp& get_promotions_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

get_promotions_rsp* get_promotions_rsp::default_instance_ = NULL;

get_promotions_rsp* get_promotions_rsp::New() const {
  return new get_promotions_rsp;
}

void get_promotions_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_promotions_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.promotions ps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ps;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_promotions_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ps(i), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_promotions_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ps(i), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_promotions_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated .inner.promotions ps = 1;
  total_size += 1 * this->ps_size();
  for (int i = 0; i < this->ps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_promotions_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_promotions_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_promotions_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_promotions_rsp::MergeFrom(const get_promotions_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ps_.MergeFrom(from.ps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_promotions_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_promotions_rsp::CopyFrom(const get_promotions_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_promotions_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < ps_size(); i++) {
    if (!this->ps(i).IsInitialized()) return false;
  }
  return true;
}

void get_promotions_rsp::Swap(get_promotions_rsp* other) {
  if (other != this) {
    ps_.Swap(&other->ps_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_promotions_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_promotions_rsp_descriptor_;
  metadata.reflection = get_promotions_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_promotions_req::kPsFieldNumber;
const int set_promotions_req::kHeadFieldNumber;
#endif  // !_MSC_VER

set_promotions_req::set_promotions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_promotions_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

set_promotions_req::set_promotions_req(const set_promotions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_promotions_req::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_promotions_req::~set_promotions_req() {
  SharedDtor();
}

void set_promotions_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void set_promotions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_promotions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_promotions_req_descriptor_;
}

const set_promotions_req& set_promotions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

set_promotions_req* set_promotions_req::default_instance_ = NULL;

set_promotions_req* set_promotions_req::New() const {
  return new set_promotions_req;
}

void set_promotions_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_promotions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.promotions ps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ps;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_promotions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ps(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_promotions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ps(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_promotions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .inner.promotions ps = 1;
  total_size += 1 * this->ps_size();
  for (int i = 0; i < this->ps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_promotions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_promotions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_promotions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_promotions_req::MergeFrom(const set_promotions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  ps_.MergeFrom(from.ps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_promotions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_promotions_req::CopyFrom(const set_promotions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_promotions_req::IsInitialized() const {

  for (int i = 0; i < ps_size(); i++) {
    if (!this->ps(i).IsInitialized()) return false;
  }
  return true;
}

void set_promotions_req::Swap(set_promotions_req* other) {
  if (other != this) {
    ps_.Swap(&other->ps_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_promotions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_promotions_req_descriptor_;
  metadata.reflection = set_promotions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_promotions_rsp::kPsFieldNumber;
const int set_promotions_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

set_promotions_rsp::set_promotions_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_promotions_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

set_promotions_rsp::set_promotions_rsp(const set_promotions_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_promotions_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_promotions_rsp::~set_promotions_rsp() {
  SharedDtor();
}

void set_promotions_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void set_promotions_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_promotions_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_promotions_rsp_descriptor_;
}

const set_promotions_rsp& set_promotions_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

set_promotions_rsp* set_promotions_rsp::default_instance_ = NULL;

set_promotions_rsp* set_promotions_rsp::New() const {
  return new set_promotions_rsp;
}

void set_promotions_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_promotions_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.promotions ps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ps;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_promotions_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ps(i), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_promotions_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.promotions ps = 1;
  for (int i = 0; i < this->ps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ps(i), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_promotions_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated .inner.promotions ps = 1;
  total_size += 1 * this->ps_size();
  for (int i = 0; i < this->ps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_promotions_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_promotions_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_promotions_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_promotions_rsp::MergeFrom(const set_promotions_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ps_.MergeFrom(from.ps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_promotions_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_promotions_rsp::CopyFrom(const set_promotions_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_promotions_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < ps_size(); i++) {
    if (!this->ps(i).IsInitialized()) return false;
  }
  return true;
}

void set_promotions_rsp::Swap(set_promotions_rsp* other) {
  if (other != this) {
    ps_.Swap(&other->ps_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_promotions_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_promotions_rsp_descriptor_;
  metadata.reflection = set_promotions_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_promotions_req::kIdsFieldNumber;
const int del_promotions_req::kHeadFieldNumber;
#endif  // !_MSC_VER

del_promotions_req::del_promotions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_promotions_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

del_promotions_req::del_promotions_req(const del_promotions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_promotions_req::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_promotions_req::~del_promotions_req() {
  SharedDtor();
}

void del_promotions_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void del_promotions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_promotions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_promotions_req_descriptor_;
}

const del_promotions_req& del_promotions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

del_promotions_req* del_promotions_req::default_instance_ = NULL;

del_promotions_req* del_promotions_req::New() const {
  return new del_promotions_req;
}

void del_promotions_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_promotions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_promotions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_promotions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ids(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_promotions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated uint32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_promotions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_promotions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_promotions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_promotions_req::MergeFrom(const del_promotions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_promotions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_promotions_req::CopyFrom(const del_promotions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_promotions_req::IsInitialized() const {

  return true;
}

void del_promotions_req::Swap(del_promotions_req* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_promotions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_promotions_req_descriptor_;
  metadata.reflection = del_promotions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_promotions_rsp::kIdsFieldNumber;
const int del_promotions_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

del_promotions_rsp::del_promotions_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_promotions_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

del_promotions_rsp::del_promotions_rsp(const del_promotions_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_promotions_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_promotions_rsp::~del_promotions_rsp() {
  SharedDtor();
}

void del_promotions_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void del_promotions_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_promotions_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_promotions_rsp_descriptor_;
}

const del_promotions_rsp& del_promotions_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2epromotions_2eproto();
  return *default_instance_;
}

del_promotions_rsp* del_promotions_rsp::default_instance_ = NULL;

del_promotions_rsp* del_promotions_rsp::New() const {
  return new del_promotions_rsp;
}

void del_promotions_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_promotions_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // optional .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_promotions_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  // optional .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_promotions_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ids(i), target);
  }

  // optional .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_promotions_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated uint32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_promotions_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_promotions_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_promotions_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_promotions_rsp::MergeFrom(const del_promotions_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_promotions_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_promotions_rsp::CopyFrom(const del_promotions_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_promotions_rsp::IsInitialized() const {

  return true;
}

void del_promotions_rsp::Swap(del_promotions_rsp* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_promotions_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_promotions_rsp_descriptor_;
  metadata.reflection = del_promotions_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
