// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.restict.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner.restict.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner {

namespace {

const ::google::protobuf::Descriptor* getPlayerRestictList_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getPlayerRestictList_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ban_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ban_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* getPlayerRestictList_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getPlayerRestictList_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* addPlayerRestict_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  addPlayerRestict_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* addPlayerRestict_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  addPlayerRestict_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* delPlayerRestict_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  delPlayerRestict_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* delPlayerRestict_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  delPlayerRestict_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_2erestict_2eproto() {
  protobuf_AddDesc_inner_2erestict_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner.restict.proto");
  GOOGLE_CHECK(file != NULL);
  getPlayerRestictList_req_descriptor_ = file->message_type(0);
  static const int getPlayerRestictList_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, head_),
  };
  getPlayerRestictList_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getPlayerRestictList_req_descriptor_,
      getPlayerRestictList_req::default_instance_,
      getPlayerRestictList_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getPlayerRestictList_req));
  ban_info_descriptor_ = file->message_type(1);
  static const int ban_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_info, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_info, time_),
  };
  ban_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ban_info_descriptor_,
      ban_info::default_instance_,
      ban_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ban_info));
  getPlayerRestictList_rsp_descriptor_ = file->message_type(2);
  static const int getPlayerRestictList_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_rsp, bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_rsp, tail_),
  };
  getPlayerRestictList_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getPlayerRestictList_rsp_descriptor_,
      getPlayerRestictList_rsp::default_instance_,
      getPlayerRestictList_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPlayerRestictList_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getPlayerRestictList_rsp));
  addPlayerRestict_req_descriptor_ = file->message_type(3);
  static const int addPlayerRestict_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_req, bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_req, head_),
  };
  addPlayerRestict_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      addPlayerRestict_req_descriptor_,
      addPlayerRestict_req::default_instance_,
      addPlayerRestict_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(addPlayerRestict_req));
  addPlayerRestict_rsp_descriptor_ = file->message_type(4);
  static const int addPlayerRestict_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_rsp, tail_),
  };
  addPlayerRestict_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      addPlayerRestict_rsp_descriptor_,
      addPlayerRestict_rsp::default_instance_,
      addPlayerRestict_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(addPlayerRestict_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(addPlayerRestict_rsp));
  delPlayerRestict_req_descriptor_ = file->message_type(5);
  static const int delPlayerRestict_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_req, bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_req, head_),
  };
  delPlayerRestict_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      delPlayerRestict_req_descriptor_,
      delPlayerRestict_req::default_instance_,
      delPlayerRestict_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(delPlayerRestict_req));
  delPlayerRestict_rsp_descriptor_ = file->message_type(6);
  static const int delPlayerRestict_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_rsp, tail_),
  };
  delPlayerRestict_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      delPlayerRestict_rsp_descriptor_,
      delPlayerRestict_rsp::default_instance_,
      delPlayerRestict_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delPlayerRestict_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(delPlayerRestict_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_2erestict_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getPlayerRestictList_req_descriptor_, &getPlayerRestictList_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ban_info_descriptor_, &ban_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getPlayerRestictList_rsp_descriptor_, &getPlayerRestictList_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    addPlayerRestict_req_descriptor_, &addPlayerRestict_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    addPlayerRestict_rsp_descriptor_, &addPlayerRestict_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    delPlayerRestict_req_descriptor_, &delPlayerRestict_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    delPlayerRestict_rsp_descriptor_, &delPlayerRestict_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_2erestict_2eproto() {
  delete getPlayerRestictList_req::default_instance_;
  delete getPlayerRestictList_req_reflection_;
  delete ban_info::default_instance_;
  delete ban_info_reflection_;
  delete getPlayerRestictList_rsp::default_instance_;
  delete getPlayerRestictList_rsp_reflection_;
  delete addPlayerRestict_req::default_instance_;
  delete addPlayerRestict_req_reflection_;
  delete addPlayerRestict_rsp::default_instance_;
  delete addPlayerRestict_rsp_reflection_;
  delete delPlayerRestict_req::default_instance_;
  delete delPlayerRestict_req_reflection_;
  delete delPlayerRestict_rsp::default_instance_;
  delete delPlayerRestict_rsp_reflection_;
}

void protobuf_AddDesc_inner_2erestict_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::inner::protobuf_AddDesc_inner_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023inner.restict.proto\022\005inner\032\020inner.comm"
    ".proto\"j\n\030getPlayerRestictList_req\022\014\n\004ty"
    "pe\030\001 \001(\005\022\014\n\004page\030\002 \001(\005\022\020\n\010pageSize\030\003 \001(\005"
    "\022 \n\004head\030\350\007 \001(\0132\021.inner.inner_head\"G\n\010ba"
    "n_info\022\037\n\004user\030\001 \002(\0132\021.inner.inner_user\022"
    "\014\n\004type\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\"Y\n\030getPlayer"
    "RestictList_rsp\022\033\n\002bi\030\001 \003(\0132\017.inner.ban_"
    "info\022 \n\004tail\030\350\007 \002(\0132\021.inner.inner_tail\"U"
    "\n\024addPlayerRestict_req\022\033\n\002bi\030\001 \003(\0132\017.inn"
    "er.ban_info\022 \n\004head\030\350\007 \001(\0132\021.inner.inner"
    "_head\"8\n\024addPlayerRestict_rsp\022 \n\004tail\030\350\007"
    " \002(\0132\021.inner.inner_tail\"U\n\024delPlayerRest"
    "ict_req\022\033\n\002bi\030\001 \003(\0132\017.inner.ban_info\022 \n\004"
    "head\030\350\007 \001(\0132\021.inner.inner_head\"8\n\024delPla"
    "yerRestict_rsp\022 \n\004tail\030\350\007 \002(\0132\021.inner.in"
    "ner_tail", 608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner.restict.proto", &protobuf_RegisterTypes);
  getPlayerRestictList_req::default_instance_ = new getPlayerRestictList_req();
  ban_info::default_instance_ = new ban_info();
  getPlayerRestictList_rsp::default_instance_ = new getPlayerRestictList_rsp();
  addPlayerRestict_req::default_instance_ = new addPlayerRestict_req();
  addPlayerRestict_rsp::default_instance_ = new addPlayerRestict_rsp();
  delPlayerRestict_req::default_instance_ = new delPlayerRestict_req();
  delPlayerRestict_rsp::default_instance_ = new delPlayerRestict_rsp();
  getPlayerRestictList_req::default_instance_->InitAsDefaultInstance();
  ban_info::default_instance_->InitAsDefaultInstance();
  getPlayerRestictList_rsp::default_instance_->InitAsDefaultInstance();
  addPlayerRestict_req::default_instance_->InitAsDefaultInstance();
  addPlayerRestict_rsp::default_instance_->InitAsDefaultInstance();
  delPlayerRestict_req::default_instance_->InitAsDefaultInstance();
  delPlayerRestict_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_2erestict_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_2erestict_2eproto {
  StaticDescriptorInitializer_inner_2erestict_2eproto() {
    protobuf_AddDesc_inner_2erestict_2eproto();
  }
} static_descriptor_initializer_inner_2erestict_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int getPlayerRestictList_req::kTypeFieldNumber;
const int getPlayerRestictList_req::kPageFieldNumber;
const int getPlayerRestictList_req::kPageSizeFieldNumber;
const int getPlayerRestictList_req::kHeadFieldNumber;
#endif  // !_MSC_VER

getPlayerRestictList_req::getPlayerRestictList_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getPlayerRestictList_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

getPlayerRestictList_req::getPlayerRestictList_req(const getPlayerRestictList_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getPlayerRestictList_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  page_ = 0;
  pagesize_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getPlayerRestictList_req::~getPlayerRestictList_req() {
  SharedDtor();
}

void getPlayerRestictList_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void getPlayerRestictList_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getPlayerRestictList_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getPlayerRestictList_req_descriptor_;
}

const getPlayerRestictList_req& getPlayerRestictList_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

getPlayerRestictList_req* getPlayerRestictList_req::default_instance_ = NULL;

getPlayerRestictList_req* getPlayerRestictList_req::New() const {
  return new getPlayerRestictList_req;
}

void getPlayerRestictList_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    page_ = 0;
    pagesize_ = 0;
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getPlayerRestictList_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageSize;
        break;
      }

      // optional int32 pageSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getPlayerRestictList_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // optional int32 pageSize = 3;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagesize(), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getPlayerRestictList_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // optional int32 pageSize = 3;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagesize(), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getPlayerRestictList_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 pageSize = 3;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }

    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getPlayerRestictList_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getPlayerRestictList_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getPlayerRestictList_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getPlayerRestictList_req::MergeFrom(const getPlayerRestictList_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getPlayerRestictList_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getPlayerRestictList_req::CopyFrom(const getPlayerRestictList_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getPlayerRestictList_req::IsInitialized() const {

  return true;
}

void getPlayerRestictList_req::Swap(getPlayerRestictList_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(page_, other->page_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getPlayerRestictList_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getPlayerRestictList_req_descriptor_;
  metadata.reflection = getPlayerRestictList_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ban_info::kUserFieldNumber;
const int ban_info::kTypeFieldNumber;
const int ban_info::kTimeFieldNumber;
#endif  // !_MSC_VER

ban_info::ban_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ban_info::InitAsDefaultInstance() {
  user_ = const_cast< ::inner::inner_user*>(&::inner::inner_user::default_instance());
}

ban_info::ban_info(const ban_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ban_info::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  type_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ban_info::~ban_info() {
  SharedDtor();
}

void ban_info::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void ban_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ban_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ban_info_descriptor_;
}

const ban_info& ban_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

ban_info* ban_info::default_instance_ = NULL;

ban_info* ban_info::New() const {
  return new ban_info;
}

void ban_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::inner::inner_user::Clear();
    }
    type_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ban_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_user user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ban_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_user user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ban_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_user user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ban_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_user user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ban_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ban_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ban_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ban_info::MergeFrom(const ban_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::inner::inner_user::MergeFrom(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ban_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ban_info::CopyFrom(const ban_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ban_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ban_info::Swap(ban_info* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ban_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ban_info_descriptor_;
  metadata.reflection = ban_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getPlayerRestictList_rsp::kBiFieldNumber;
const int getPlayerRestictList_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

getPlayerRestictList_rsp::getPlayerRestictList_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getPlayerRestictList_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

getPlayerRestictList_rsp::getPlayerRestictList_rsp(const getPlayerRestictList_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getPlayerRestictList_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getPlayerRestictList_rsp::~getPlayerRestictList_rsp() {
  SharedDtor();
}

void getPlayerRestictList_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void getPlayerRestictList_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getPlayerRestictList_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getPlayerRestictList_rsp_descriptor_;
}

const getPlayerRestictList_rsp& getPlayerRestictList_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

getPlayerRestictList_rsp* getPlayerRestictList_rsp::default_instance_ = NULL;

getPlayerRestictList_rsp* getPlayerRestictList_rsp::New() const {
  return new getPlayerRestictList_rsp;
}

void getPlayerRestictList_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  bi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getPlayerRestictList_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.ban_info bi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bi;
        if (input->ExpectTag(8002)) goto parse_tail;
        break;
      }

      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getPlayerRestictList_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bi(i), output);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getPlayerRestictList_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bi(i), target);
  }

  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getPlayerRestictList_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  // repeated .inner.ban_info bi = 1;
  total_size += 1 * this->bi_size();
  for (int i = 0; i < this->bi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getPlayerRestictList_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getPlayerRestictList_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getPlayerRestictList_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getPlayerRestictList_rsp::MergeFrom(const getPlayerRestictList_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bi_.MergeFrom(from.bi_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getPlayerRestictList_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getPlayerRestictList_rsp::CopyFrom(const getPlayerRestictList_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getPlayerRestictList_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < bi_size(); i++) {
    if (!this->bi(i).IsInitialized()) return false;
  }
  return true;
}

void getPlayerRestictList_rsp::Swap(getPlayerRestictList_rsp* other) {
  if (other != this) {
    bi_.Swap(&other->bi_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getPlayerRestictList_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getPlayerRestictList_rsp_descriptor_;
  metadata.reflection = getPlayerRestictList_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int addPlayerRestict_req::kBiFieldNumber;
const int addPlayerRestict_req::kHeadFieldNumber;
#endif  // !_MSC_VER

addPlayerRestict_req::addPlayerRestict_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void addPlayerRestict_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

addPlayerRestict_req::addPlayerRestict_req(const addPlayerRestict_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void addPlayerRestict_req::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

addPlayerRestict_req::~addPlayerRestict_req() {
  SharedDtor();
}

void addPlayerRestict_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void addPlayerRestict_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* addPlayerRestict_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return addPlayerRestict_req_descriptor_;
}

const addPlayerRestict_req& addPlayerRestict_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

addPlayerRestict_req* addPlayerRestict_req::default_instance_ = NULL;

addPlayerRestict_req* addPlayerRestict_req::New() const {
  return new addPlayerRestict_req;
}

void addPlayerRestict_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  bi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool addPlayerRestict_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.ban_info bi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bi;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void addPlayerRestict_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bi(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* addPlayerRestict_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bi(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int addPlayerRestict_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .inner.ban_info bi = 1;
  total_size += 1 * this->bi_size();
  for (int i = 0; i < this->bi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void addPlayerRestict_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const addPlayerRestict_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const addPlayerRestict_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void addPlayerRestict_req::MergeFrom(const addPlayerRestict_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  bi_.MergeFrom(from.bi_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void addPlayerRestict_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addPlayerRestict_req::CopyFrom(const addPlayerRestict_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addPlayerRestict_req::IsInitialized() const {

  for (int i = 0; i < bi_size(); i++) {
    if (!this->bi(i).IsInitialized()) return false;
  }
  return true;
}

void addPlayerRestict_req::Swap(addPlayerRestict_req* other) {
  if (other != this) {
    bi_.Swap(&other->bi_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata addPlayerRestict_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = addPlayerRestict_req_descriptor_;
  metadata.reflection = addPlayerRestict_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int addPlayerRestict_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

addPlayerRestict_rsp::addPlayerRestict_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void addPlayerRestict_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

addPlayerRestict_rsp::addPlayerRestict_rsp(const addPlayerRestict_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void addPlayerRestict_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

addPlayerRestict_rsp::~addPlayerRestict_rsp() {
  SharedDtor();
}

void addPlayerRestict_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void addPlayerRestict_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* addPlayerRestict_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return addPlayerRestict_rsp_descriptor_;
}

const addPlayerRestict_rsp& addPlayerRestict_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

addPlayerRestict_rsp* addPlayerRestict_rsp::default_instance_ = NULL;

addPlayerRestict_rsp* addPlayerRestict_rsp::New() const {
  return new addPlayerRestict_rsp;
}

void addPlayerRestict_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool addPlayerRestict_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void addPlayerRestict_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* addPlayerRestict_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int addPlayerRestict_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void addPlayerRestict_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const addPlayerRestict_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const addPlayerRestict_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void addPlayerRestict_rsp::MergeFrom(const addPlayerRestict_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void addPlayerRestict_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addPlayerRestict_rsp::CopyFrom(const addPlayerRestict_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addPlayerRestict_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void addPlayerRestict_rsp::Swap(addPlayerRestict_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata addPlayerRestict_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = addPlayerRestict_rsp_descriptor_;
  metadata.reflection = addPlayerRestict_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int delPlayerRestict_req::kBiFieldNumber;
const int delPlayerRestict_req::kHeadFieldNumber;
#endif  // !_MSC_VER

delPlayerRestict_req::delPlayerRestict_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void delPlayerRestict_req::InitAsDefaultInstance() {
  head_ = const_cast< ::inner::inner_head*>(&::inner::inner_head::default_instance());
}

delPlayerRestict_req::delPlayerRestict_req(const delPlayerRestict_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void delPlayerRestict_req::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

delPlayerRestict_req::~delPlayerRestict_req() {
  SharedDtor();
}

void delPlayerRestict_req::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void delPlayerRestict_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delPlayerRestict_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return delPlayerRestict_req_descriptor_;
}

const delPlayerRestict_req& delPlayerRestict_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

delPlayerRestict_req* delPlayerRestict_req::default_instance_ = NULL;

delPlayerRestict_req* delPlayerRestict_req::New() const {
  return new delPlayerRestict_req;
}

void delPlayerRestict_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::inner::inner_head::Clear();
    }
  }
  bi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool delPlayerRestict_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inner.ban_info bi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bi;
        if (input->ExpectTag(8002)) goto parse_head;
        break;
      }

      // optional .inner.inner_head head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void delPlayerRestict_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bi(i), output);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* delPlayerRestict_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .inner.ban_info bi = 1;
  for (int i = 0; i < this->bi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bi(i), target);
  }

  // optional .inner.inner_head head = 1000;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int delPlayerRestict_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .inner.inner_head head = 1000;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .inner.ban_info bi = 1;
  total_size += 1 * this->bi_size();
  for (int i = 0; i < this->bi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delPlayerRestict_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const delPlayerRestict_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const delPlayerRestict_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void delPlayerRestict_req::MergeFrom(const delPlayerRestict_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  bi_.MergeFrom(from.bi_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head()) {
      mutable_head()->::inner::inner_head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void delPlayerRestict_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delPlayerRestict_req::CopyFrom(const delPlayerRestict_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delPlayerRestict_req::IsInitialized() const {

  for (int i = 0; i < bi_size(); i++) {
    if (!this->bi(i).IsInitialized()) return false;
  }
  return true;
}

void delPlayerRestict_req::Swap(delPlayerRestict_req* other) {
  if (other != this) {
    bi_.Swap(&other->bi_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata delPlayerRestict_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = delPlayerRestict_req_descriptor_;
  metadata.reflection = delPlayerRestict_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int delPlayerRestict_rsp::kTailFieldNumber;
#endif  // !_MSC_VER

delPlayerRestict_rsp::delPlayerRestict_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void delPlayerRestict_rsp::InitAsDefaultInstance() {
  tail_ = const_cast< ::inner::inner_tail*>(&::inner::inner_tail::default_instance());
}

delPlayerRestict_rsp::delPlayerRestict_rsp(const delPlayerRestict_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void delPlayerRestict_rsp::SharedCtor() {
  _cached_size_ = 0;
  tail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

delPlayerRestict_rsp::~delPlayerRestict_rsp() {
  SharedDtor();
}

void delPlayerRestict_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete tail_;
  }
}

void delPlayerRestict_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delPlayerRestict_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return delPlayerRestict_rsp_descriptor_;
}

const delPlayerRestict_rsp& delPlayerRestict_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_2erestict_2eproto();
  return *default_instance_;
}

delPlayerRestict_rsp* delPlayerRestict_rsp::default_instance_ = NULL;

delPlayerRestict_rsp* delPlayerRestict_rsp::New() const {
  return new delPlayerRestict_rsp;
}

void delPlayerRestict_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tail()) {
      if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool delPlayerRestict_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .inner.inner_tail tail = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void delPlayerRestict_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* delPlayerRestict_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .inner.inner_tail tail = 1000;
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int delPlayerRestict_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .inner.inner_tail tail = 1000;
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delPlayerRestict_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const delPlayerRestict_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const delPlayerRestict_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void delPlayerRestict_rsp::MergeFrom(const delPlayerRestict_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tail()) {
      mutable_tail()->::inner::inner_tail::MergeFrom(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void delPlayerRestict_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delPlayerRestict_rsp::CopyFrom(const delPlayerRestict_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delPlayerRestict_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void delPlayerRestict_rsp::Swap(delPlayerRestict_rsp* other) {
  if (other != this) {
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata delPlayerRestict_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = delPlayerRestict_rsp_descriptor_;
  metadata.reflection = delPlayerRestict_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)
