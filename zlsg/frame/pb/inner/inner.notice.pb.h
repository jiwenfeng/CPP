// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.notice.proto

#ifndef PROTOBUF_inner_2enotice_2eproto__INCLUDED
#define PROTOBUF_inner_2enotice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2enotice_2eproto();
void protobuf_AssignDesc_inner_2enotice_2eproto();
void protobuf_ShutdownFile_inner_2enotice_2eproto();

class addNotice_req;
class addNotice_rsp;
class getNoticeList_req;
class notice_info;
class getNoticeList_rsp;
class updateNotice_req;
class updateNotice_rsp;
class delNotice_req;
class delNotice_rsp;

// ===================================================================

class addNotice_req : public ::google::protobuf::Message {
 public:
  addNotice_req();
  virtual ~addNotice_req();

  addNotice_req(const addNotice_req& from);

  inline addNotice_req& operator=(const addNotice_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addNotice_req& default_instance();

  void Swap(addNotice_req* other);

  // implements Message ----------------------------------------------

  addNotice_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const addNotice_req& from);
  void MergeFrom(const addNotice_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // required uint32 intervalTime = 2;
  inline bool has_intervaltime() const;
  inline void clear_intervaltime();
  static const int kIntervalTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 intervaltime() const;
  inline void set_intervaltime(::google::protobuf::uint32 value);

  // required uint32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // required uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.addNotice_req)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_intervaltime();
  inline void clear_has_intervaltime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::uint32 intervaltime_;
  ::google::protobuf::uint32 starttime_;
  ::inner::inner_head* head_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static addNotice_req* default_instance_;
};
// -------------------------------------------------------------------

class addNotice_rsp : public ::google::protobuf::Message {
 public:
  addNotice_rsp();
  virtual ~addNotice_rsp();

  addNotice_rsp(const addNotice_rsp& from);

  inline addNotice_rsp& operator=(const addNotice_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const addNotice_rsp& default_instance();

  void Swap(addNotice_rsp* other);

  // implements Message ----------------------------------------------

  addNotice_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const addNotice_rsp& from);
  void MergeFrom(const addNotice_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.addNotice_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static addNotice_rsp* default_instance_;
};
// -------------------------------------------------------------------

class getNoticeList_req : public ::google::protobuf::Message {
 public:
  getNoticeList_req();
  virtual ~getNoticeList_req();

  getNoticeList_req(const getNoticeList_req& from);

  inline getNoticeList_req& operator=(const getNoticeList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getNoticeList_req& default_instance();

  void Swap(getNoticeList_req* other);

  // implements Message ----------------------------------------------

  getNoticeList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getNoticeList_req& from);
  void MergeFrom(const getNoticeList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 page = 2 [default = 1];
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // required uint32 pageSize = 3 [default = 20];
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.getNoticeList_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 page_;
  ::inner::inner_head* head_;
  ::google::protobuf::uint32 pagesize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static getNoticeList_req* default_instance_;
};
// -------------------------------------------------------------------

class notice_info : public ::google::protobuf::Message {
 public:
  notice_info();
  virtual ~notice_info();

  notice_info(const notice_info& from);

  inline notice_info& operator=(const notice_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notice_info& default_instance();

  void Swap(notice_info* other);

  // implements Message ----------------------------------------------

  notice_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notice_info& from);
  void MergeFrom(const notice_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // required uint32 intervalTime = 3;
  inline bool has_intervaltime() const;
  inline void clear_intervaltime();
  static const int kIntervalTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 intervaltime() const;
  inline void set_intervaltime(::google::protobuf::uint32 value);

  // required uint32 startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // required uint32 endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:inner.notice_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_intervaltime();
  inline void clear_has_intervaltime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 intervaltime_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static notice_info* default_instance_;
};
// -------------------------------------------------------------------

class getNoticeList_rsp : public ::google::protobuf::Message {
 public:
  getNoticeList_rsp();
  virtual ~getNoticeList_rsp();

  getNoticeList_rsp(const getNoticeList_rsp& from);

  inline getNoticeList_rsp& operator=(const getNoticeList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getNoticeList_rsp& default_instance();

  void Swap(getNoticeList_rsp* other);

  // implements Message ----------------------------------------------

  getNoticeList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getNoticeList_rsp& from);
  void MergeFrom(const getNoticeList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inner.notice_info ni = 1;
  inline int ni_size() const;
  inline void clear_ni();
  static const int kNiFieldNumber = 1;
  inline const ::inner::notice_info& ni(int index) const;
  inline ::inner::notice_info* mutable_ni(int index);
  inline ::inner::notice_info* add_ni();
  inline const ::google::protobuf::RepeatedPtrField< ::inner::notice_info >&
      ni() const;
  inline ::google::protobuf::RepeatedPtrField< ::inner::notice_info >*
      mutable_ni();

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.getNoticeList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::inner::notice_info > ni_;
  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static getNoticeList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class updateNotice_req : public ::google::protobuf::Message {
 public:
  updateNotice_req();
  virtual ~updateNotice_req();

  updateNotice_req(const updateNotice_req& from);

  inline updateNotice_req& operator=(const updateNotice_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateNotice_req& default_instance();

  void Swap(updateNotice_req* other);

  // implements Message ----------------------------------------------

  updateNotice_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateNotice_req& from);
  void MergeFrom(const updateNotice_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.notice_info ni = 1;
  inline bool has_ni() const;
  inline void clear_ni();
  static const int kNiFieldNumber = 1;
  inline const ::inner::notice_info& ni() const;
  inline ::inner::notice_info* mutable_ni();
  inline ::inner::notice_info* release_ni();
  inline void set_allocated_ni(::inner::notice_info* ni);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.updateNotice_req)
 private:
  inline void set_has_ni();
  inline void clear_has_ni();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::notice_info* ni_;
  ::inner::inner_head* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static updateNotice_req* default_instance_;
};
// -------------------------------------------------------------------

class updateNotice_rsp : public ::google::protobuf::Message {
 public:
  updateNotice_rsp();
  virtual ~updateNotice_rsp();

  updateNotice_rsp(const updateNotice_rsp& from);

  inline updateNotice_rsp& operator=(const updateNotice_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateNotice_rsp& default_instance();

  void Swap(updateNotice_rsp* other);

  // implements Message ----------------------------------------------

  updateNotice_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateNotice_rsp& from);
  void MergeFrom(const updateNotice_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.updateNotice_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static updateNotice_rsp* default_instance_;
};
// -------------------------------------------------------------------

class delNotice_req : public ::google::protobuf::Message {
 public:
  delNotice_req();
  virtual ~delNotice_req();

  delNotice_req(const delNotice_req& from);

  inline delNotice_req& operator=(const delNotice_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delNotice_req& default_instance();

  void Swap(delNotice_req* other);

  // implements Message ----------------------------------------------

  delNotice_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const delNotice_req& from);
  void MergeFrom(const delNotice_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .inner.inner_head head = 1000;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1000;
  inline const ::inner::inner_head& head() const;
  inline ::inner::inner_head* mutable_head();
  inline ::inner::inner_head* release_head();
  inline void set_allocated_head(::inner::inner_head* head);

  // @@protoc_insertion_point(class_scope:inner.delNotice_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_head* head_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static delNotice_req* default_instance_;
};
// -------------------------------------------------------------------

class delNotice_rsp : public ::google::protobuf::Message {
 public:
  delNotice_rsp();
  virtual ~delNotice_rsp();

  delNotice_rsp(const delNotice_rsp& from);

  inline delNotice_rsp& operator=(const delNotice_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delNotice_rsp& default_instance();

  void Swap(delNotice_rsp* other);

  // implements Message ----------------------------------------------

  delNotice_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const delNotice_rsp& from);
  void MergeFrom(const delNotice_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.delNotice_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2enotice_2eproto();
  friend void protobuf_AssignDesc_inner_2enotice_2eproto();
  friend void protobuf_ShutdownFile_inner_2enotice_2eproto();

  void InitAsDefaultInstance();
  static delNotice_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// addNotice_req

// required string message = 1;
inline bool addNotice_req::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addNotice_req::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addNotice_req::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addNotice_req::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& addNotice_req::message() const {
  return *message_;
}
inline void addNotice_req::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void addNotice_req::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void addNotice_req::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* addNotice_req::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* addNotice_req::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void addNotice_req::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 intervalTime = 2;
inline bool addNotice_req::has_intervaltime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void addNotice_req::set_has_intervaltime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void addNotice_req::clear_has_intervaltime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void addNotice_req::clear_intervaltime() {
  intervaltime_ = 0u;
  clear_has_intervaltime();
}
inline ::google::protobuf::uint32 addNotice_req::intervaltime() const {
  return intervaltime_;
}
inline void addNotice_req::set_intervaltime(::google::protobuf::uint32 value) {
  set_has_intervaltime();
  intervaltime_ = value;
}

// required uint32 startTime = 3;
inline bool addNotice_req::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void addNotice_req::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void addNotice_req::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void addNotice_req::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 addNotice_req::starttime() const {
  return starttime_;
}
inline void addNotice_req::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// required uint32 endTime = 4;
inline bool addNotice_req::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void addNotice_req::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void addNotice_req::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void addNotice_req::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 addNotice_req::endtime() const {
  return endtime_;
}
inline void addNotice_req::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool addNotice_req::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void addNotice_req::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void addNotice_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void addNotice_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& addNotice_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* addNotice_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* addNotice_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void addNotice_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// addNotice_rsp

// required .inner.inner_tail tail = 1000;
inline bool addNotice_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addNotice_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addNotice_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addNotice_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& addNotice_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* addNotice_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* addNotice_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void addNotice_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// getNoticeList_req

// required uint32 id = 1;
inline bool getNoticeList_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getNoticeList_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getNoticeList_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getNoticeList_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 getNoticeList_req::id() const {
  return id_;
}
inline void getNoticeList_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 page = 2 [default = 1];
inline bool getNoticeList_req::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getNoticeList_req::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getNoticeList_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getNoticeList_req::clear_page() {
  page_ = 1u;
  clear_has_page();
}
inline ::google::protobuf::uint32 getNoticeList_req::page() const {
  return page_;
}
inline void getNoticeList_req::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
}

// required uint32 pageSize = 3 [default = 20];
inline bool getNoticeList_req::has_pagesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getNoticeList_req::set_has_pagesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getNoticeList_req::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getNoticeList_req::clear_pagesize() {
  pagesize_ = 20u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 getNoticeList_req::pagesize() const {
  return pagesize_;
}
inline void getNoticeList_req::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool getNoticeList_req::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getNoticeList_req::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getNoticeList_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getNoticeList_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& getNoticeList_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* getNoticeList_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* getNoticeList_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void getNoticeList_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// notice_info

// required uint32 id = 1;
inline bool notice_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notice_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notice_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notice_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 notice_info::id() const {
  return id_;
}
inline void notice_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string message = 2;
inline bool notice_info::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notice_info::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notice_info::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notice_info::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& notice_info::message() const {
  return *message_;
}
inline void notice_info::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void notice_info::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void notice_info::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* notice_info::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* notice_info::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void notice_info::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 intervalTime = 3;
inline bool notice_info::has_intervaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notice_info::set_has_intervaltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notice_info::clear_has_intervaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notice_info::clear_intervaltime() {
  intervaltime_ = 0u;
  clear_has_intervaltime();
}
inline ::google::protobuf::uint32 notice_info::intervaltime() const {
  return intervaltime_;
}
inline void notice_info::set_intervaltime(::google::protobuf::uint32 value) {
  set_has_intervaltime();
  intervaltime_ = value;
}

// required uint32 startTime = 4;
inline bool notice_info::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void notice_info::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void notice_info::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void notice_info::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 notice_info::starttime() const {
  return starttime_;
}
inline void notice_info::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// required uint32 endTime = 5;
inline bool notice_info::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void notice_info::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void notice_info::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void notice_info::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 notice_info::endtime() const {
  return endtime_;
}
inline void notice_info::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// getNoticeList_rsp

// repeated .inner.notice_info ni = 1;
inline int getNoticeList_rsp::ni_size() const {
  return ni_.size();
}
inline void getNoticeList_rsp::clear_ni() {
  ni_.Clear();
}
inline const ::inner::notice_info& getNoticeList_rsp::ni(int index) const {
  return ni_.Get(index);
}
inline ::inner::notice_info* getNoticeList_rsp::mutable_ni(int index) {
  return ni_.Mutable(index);
}
inline ::inner::notice_info* getNoticeList_rsp::add_ni() {
  return ni_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inner::notice_info >&
getNoticeList_rsp::ni() const {
  return ni_;
}
inline ::google::protobuf::RepeatedPtrField< ::inner::notice_info >*
getNoticeList_rsp::mutable_ni() {
  return &ni_;
}

// required .inner.inner_tail tail = 1000;
inline bool getNoticeList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getNoticeList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getNoticeList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getNoticeList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& getNoticeList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* getNoticeList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* getNoticeList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void getNoticeList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// updateNotice_req

// required .inner.notice_info ni = 1;
inline bool updateNotice_req::has_ni() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateNotice_req::set_has_ni() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateNotice_req::clear_has_ni() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateNotice_req::clear_ni() {
  if (ni_ != NULL) ni_->::inner::notice_info::Clear();
  clear_has_ni();
}
inline const ::inner::notice_info& updateNotice_req::ni() const {
  return ni_ != NULL ? *ni_ : *default_instance_->ni_;
}
inline ::inner::notice_info* updateNotice_req::mutable_ni() {
  set_has_ni();
  if (ni_ == NULL) ni_ = new ::inner::notice_info;
  return ni_;
}
inline ::inner::notice_info* updateNotice_req::release_ni() {
  clear_has_ni();
  ::inner::notice_info* temp = ni_;
  ni_ = NULL;
  return temp;
}
inline void updateNotice_req::set_allocated_ni(::inner::notice_info* ni) {
  delete ni_;
  ni_ = ni;
  if (ni) {
    set_has_ni();
  } else {
    clear_has_ni();
  }
}

// optional .inner.inner_head head = 1000;
inline bool updateNotice_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void updateNotice_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void updateNotice_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void updateNotice_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& updateNotice_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* updateNotice_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* updateNotice_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void updateNotice_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// updateNotice_rsp

// optional .inner.inner_tail tail = 1000;
inline bool updateNotice_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateNotice_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateNotice_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateNotice_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& updateNotice_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* updateNotice_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* updateNotice_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void updateNotice_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// delNotice_req

// required uint32 id = 1;
inline bool delNotice_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delNotice_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delNotice_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delNotice_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 delNotice_req::id() const {
  return id_;
}
inline void delNotice_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .inner.inner_head head = 1000;
inline bool delNotice_req::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delNotice_req::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delNotice_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delNotice_req::clear_head() {
  if (head_ != NULL) head_->::inner::inner_head::Clear();
  clear_has_head();
}
inline const ::inner::inner_head& delNotice_req::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::inner::inner_head* delNotice_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::inner::inner_head;
  return head_;
}
inline ::inner::inner_head* delNotice_req::release_head() {
  clear_has_head();
  ::inner::inner_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void delNotice_req::set_allocated_head(::inner::inner_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// delNotice_rsp

// optional .inner.inner_tail tail = 1000;
inline bool delNotice_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delNotice_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delNotice_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delNotice_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& delNotice_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* delNotice_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* delNotice_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void delNotice_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2enotice_2eproto__INCLUDED
