// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.faq.proto

#ifndef PROTOBUF_inner_2efaq_2eproto__INCLUDED
#define PROTOBUF_inner_2efaq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "inner.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace inner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inner_2efaq_2eproto();
void protobuf_AssignDesc_inner_2efaq_2eproto();
void protobuf_ShutdownFile_inner_2efaq_2eproto();

class faqType_req;
class faqType_rsp;
class faqList_req;
class faqList_rsp;
class faqDetail_req;
class faqDetail_rsp;
class faqEvaluate_req;
class faqEvaluate_rsp;
class faqHot_req;
class faqHot_rsp;
class faqSearch_req;
class faqSearch_rsp;

// ===================================================================

class faqType_req : public ::google::protobuf::Message {
 public:
  faqType_req();
  virtual ~faqType_req();

  faqType_req(const faqType_req& from);

  inline faqType_req& operator=(const faqType_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqType_req& default_instance();

  void Swap(faqType_req* other);

  // implements Message ----------------------------------------------

  faqType_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqType_req& from);
  void MergeFrom(const faqType_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lang = 1;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 1;
  inline ::google::protobuf::int32 lang() const;
  inline void set_lang(::google::protobuf::int32 value);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inner.faqType_req)
 private:
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lang_;
  ::google::protobuf::int32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqType_req* default_instance_;
};
// -------------------------------------------------------------------

class faqType_rsp : public ::google::protobuf::Message {
 public:
  faqType_rsp();
  virtual ~faqType_rsp();

  faqType_rsp(const faqType_rsp& from);

  inline faqType_rsp& operator=(const faqType_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqType_rsp& default_instance();

  void Swap(faqType_rsp* other);

  // implements Message ----------------------------------------------

  faqType_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqType_rsp& from);
  void MergeFrom(const faqType_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqType_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqType_rsp* default_instance_;
};
// -------------------------------------------------------------------

class faqList_req : public ::google::protobuf::Message {
 public:
  faqList_req();
  virtual ~faqList_req();

  faqList_req(const faqList_req& from);

  inline faqList_req& operator=(const faqList_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqList_req& default_instance();

  void Swap(faqList_req* other);

  // implements Message ----------------------------------------------

  faqList_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqList_req& from);
  void MergeFrom(const faqList_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 kind_id = 1;
  inline bool has_kind_id() const;
  inline void clear_kind_id();
  static const int kKindIdFieldNumber = 1;
  inline ::google::protobuf::int32 kind_id() const;
  inline void set_kind_id(::google::protobuf::int32 value);

  // optional int32 page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 ps = 3;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 3;
  inline ::google::protobuf::int32 ps() const;
  inline void set_ps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inner.faqList_req)
 private:
  inline void set_has_kind_id();
  inline void clear_has_kind_id();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_ps();
  inline void clear_has_ps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 kind_id_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 ps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqList_req* default_instance_;
};
// -------------------------------------------------------------------

class faqList_rsp : public ::google::protobuf::Message {
 public:
  faqList_rsp();
  virtual ~faqList_rsp();

  faqList_rsp(const faqList_rsp& from);

  inline faqList_rsp& operator=(const faqList_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqList_rsp& default_instance();

  void Swap(faqList_rsp* other);

  // implements Message ----------------------------------------------

  faqList_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqList_rsp& from);
  void MergeFrom(const faqList_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqList_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqList_rsp* default_instance_;
};
// -------------------------------------------------------------------

class faqDetail_req : public ::google::protobuf::Message {
 public:
  faqDetail_req();
  virtual ~faqDetail_req();

  faqDetail_req(const faqDetail_req& from);

  inline faqDetail_req& operator=(const faqDetail_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqDetail_req& default_instance();

  void Swap(faqDetail_req* other);

  // implements Message ----------------------------------------------

  faqDetail_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqDetail_req& from);
  void MergeFrom(const faqDetail_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inner.faqDetail_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqDetail_req* default_instance_;
};
// -------------------------------------------------------------------

class faqDetail_rsp : public ::google::protobuf::Message {
 public:
  faqDetail_rsp();
  virtual ~faqDetail_rsp();

  faqDetail_rsp(const faqDetail_rsp& from);

  inline faqDetail_rsp& operator=(const faqDetail_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqDetail_rsp& default_instance();

  void Swap(faqDetail_rsp* other);

  // implements Message ----------------------------------------------

  faqDetail_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqDetail_rsp& from);
  void MergeFrom(const faqDetail_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqDetail_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqDetail_rsp* default_instance_;
};
// -------------------------------------------------------------------

class faqEvaluate_req : public ::google::protobuf::Message {
 public:
  faqEvaluate_req();
  virtual ~faqEvaluate_req();

  faqEvaluate_req(const faqEvaluate_req& from);

  inline faqEvaluate_req& operator=(const faqEvaluate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqEvaluate_req& default_instance();

  void Swap(faqEvaluate_req* other);

  // implements Message ----------------------------------------------

  faqEvaluate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqEvaluate_req& from);
  void MergeFrom(const faqEvaluate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 faq_whether = 2;
  inline bool has_faq_whether() const;
  inline void clear_faq_whether();
  static const int kFaqWhetherFieldNumber = 2;
  inline ::google::protobuf::int32 faq_whether() const;
  inline void set_faq_whether(::google::protobuf::int32 value);

  // required int32 faq_opinion = 3;
  inline bool has_faq_opinion() const;
  inline void clear_faq_opinion();
  static const int kFaqOpinionFieldNumber = 3;
  inline ::google::protobuf::int32 faq_opinion() const;
  inline void set_faq_opinion(::google::protobuf::int32 value);

  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:inner.faqEvaluate_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_faq_whether();
  inline void clear_has_faq_whether();
  inline void set_has_faq_opinion();
  inline void clear_has_faq_opinion();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 faq_whether_;
  ::std::string* content_;
  ::google::protobuf::int32 faq_opinion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqEvaluate_req* default_instance_;
};
// -------------------------------------------------------------------

class faqEvaluate_rsp : public ::google::protobuf::Message {
 public:
  faqEvaluate_rsp();
  virtual ~faqEvaluate_rsp();

  faqEvaluate_rsp(const faqEvaluate_rsp& from);

  inline faqEvaluate_rsp& operator=(const faqEvaluate_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqEvaluate_rsp& default_instance();

  void Swap(faqEvaluate_rsp* other);

  // implements Message ----------------------------------------------

  faqEvaluate_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqEvaluate_rsp& from);
  void MergeFrom(const faqEvaluate_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqEvaluate_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqEvaluate_rsp* default_instance_;
};
// -------------------------------------------------------------------

class faqHot_req : public ::google::protobuf::Message {
 public:
  faqHot_req();
  virtual ~faqHot_req();

  faqHot_req(const faqHot_req& from);

  inline faqHot_req& operator=(const faqHot_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqHot_req& default_instance();

  void Swap(faqHot_req* other);

  // implements Message ----------------------------------------------

  faqHot_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqHot_req& from);
  void MergeFrom(const faqHot_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lang = 1;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 1;
  inline ::google::protobuf::int32 lang() const;
  inline void set_lang(::google::protobuf::int32 value);

  // required int32 ps = 2;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 2;
  inline ::google::protobuf::int32 ps() const;
  inline void set_ps(::google::protobuf::int32 value);

  // required int32 game_id = 3;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inner.faqHot_req)
 private:
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_ps();
  inline void clear_has_ps();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lang_;
  ::google::protobuf::int32 ps_;
  ::google::protobuf::int32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqHot_req* default_instance_;
};
// -------------------------------------------------------------------

class faqHot_rsp : public ::google::protobuf::Message {
 public:
  faqHot_rsp();
  virtual ~faqHot_rsp();

  faqHot_rsp(const faqHot_rsp& from);

  inline faqHot_rsp& operator=(const faqHot_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqHot_rsp& default_instance();

  void Swap(faqHot_rsp* other);

  // implements Message ----------------------------------------------

  faqHot_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqHot_rsp& from);
  void MergeFrom(const faqHot_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqHot_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqHot_rsp* default_instance_;
};
// -------------------------------------------------------------------

class faqSearch_req : public ::google::protobuf::Message {
 public:
  faqSearch_req();
  virtual ~faqSearch_req();

  faqSearch_req(const faqSearch_req& from);

  inline faqSearch_req& operator=(const faqSearch_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqSearch_req& default_instance();

  void Swap(faqSearch_req* other);

  // implements Message ----------------------------------------------

  faqSearch_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqSearch_req& from);
  void MergeFrom(const faqSearch_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lang = 1;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 1;
  inline ::google::protobuf::int32 lang() const;
  inline void set_lang(::google::protobuf::int32 value);

  // required string key_word = 2;
  inline bool has_key_word() const;
  inline void clear_key_word();
  static const int kKeyWordFieldNumber = 2;
  inline const ::std::string& key_word() const;
  inline void set_key_word(const ::std::string& value);
  inline void set_key_word(const char* value);
  inline void set_key_word(const char* value, size_t size);
  inline ::std::string* mutable_key_word();
  inline ::std::string* release_key_word();
  inline void set_allocated_key_word(::std::string* key_word);

  // required int32 game_id = 3;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 page = 4;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 ps = 5;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 5;
  inline ::google::protobuf::int32 ps() const;
  inline void set_ps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inner.faqSearch_req)
 private:
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_key_word();
  inline void clear_has_key_word();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_ps();
  inline void clear_has_ps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_word_;
  ::google::protobuf::int32 lang_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 ps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqSearch_req* default_instance_;
};
// -------------------------------------------------------------------

class faqSearch_rsp : public ::google::protobuf::Message {
 public:
  faqSearch_rsp();
  virtual ~faqSearch_rsp();

  faqSearch_rsp(const faqSearch_rsp& from);

  inline faqSearch_rsp& operator=(const faqSearch_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const faqSearch_rsp& default_instance();

  void Swap(faqSearch_rsp* other);

  // implements Message ----------------------------------------------

  faqSearch_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const faqSearch_rsp& from);
  void MergeFrom(const faqSearch_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .inner.inner_tail tail = 1000;
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 1000;
  inline const ::inner::inner_tail& tail() const;
  inline ::inner::inner_tail* mutable_tail();
  inline ::inner::inner_tail* release_tail();
  inline void set_allocated_tail(::inner::inner_tail* tail);

  // @@protoc_insertion_point(class_scope:inner.faqSearch_rsp)
 private:
  inline void set_has_tail();
  inline void clear_has_tail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::inner::inner_tail* tail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inner_2efaq_2eproto();
  friend void protobuf_AssignDesc_inner_2efaq_2eproto();
  friend void protobuf_ShutdownFile_inner_2efaq_2eproto();

  void InitAsDefaultInstance();
  static faqSearch_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// faqType_req

// required int32 lang = 1;
inline bool faqType_req::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqType_req::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqType_req::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqType_req::clear_lang() {
  lang_ = 0;
  clear_has_lang();
}
inline ::google::protobuf::int32 faqType_req::lang() const {
  return lang_;
}
inline void faqType_req::set_lang(::google::protobuf::int32 value) {
  set_has_lang();
  lang_ = value;
}

// required int32 game_id = 2;
inline bool faqType_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faqType_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faqType_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faqType_req::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 faqType_req::game_id() const {
  return game_id_;
}
inline void faqType_req::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// faqType_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqType_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqType_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqType_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqType_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqType_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqType_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqType_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqType_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// faqList_req

// required int32 kind_id = 1;
inline bool faqList_req::has_kind_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqList_req::set_has_kind_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqList_req::clear_has_kind_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqList_req::clear_kind_id() {
  kind_id_ = 0;
  clear_has_kind_id();
}
inline ::google::protobuf::int32 faqList_req::kind_id() const {
  return kind_id_;
}
inline void faqList_req::set_kind_id(::google::protobuf::int32 value) {
  set_has_kind_id();
  kind_id_ = value;
}

// optional int32 page = 2;
inline bool faqList_req::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faqList_req::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faqList_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faqList_req::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 faqList_req::page() const {
  return page_;
}
inline void faqList_req::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 ps = 3;
inline bool faqList_req::has_ps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void faqList_req::set_has_ps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void faqList_req::clear_has_ps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void faqList_req::clear_ps() {
  ps_ = 0;
  clear_has_ps();
}
inline ::google::protobuf::int32 faqList_req::ps() const {
  return ps_;
}
inline void faqList_req::set_ps(::google::protobuf::int32 value) {
  set_has_ps();
  ps_ = value;
}

// -------------------------------------------------------------------

// faqList_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqList_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqList_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqList_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqList_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqList_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqList_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqList_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqList_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// faqDetail_req

// required int32 id = 1;
inline bool faqDetail_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqDetail_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqDetail_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqDetail_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 faqDetail_req::id() const {
  return id_;
}
inline void faqDetail_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// faqDetail_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqDetail_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqDetail_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqDetail_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqDetail_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqDetail_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqDetail_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqDetail_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqDetail_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// faqEvaluate_req

// required int32 id = 1;
inline bool faqEvaluate_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqEvaluate_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqEvaluate_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqEvaluate_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 faqEvaluate_req::id() const {
  return id_;
}
inline void faqEvaluate_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 faq_whether = 2;
inline bool faqEvaluate_req::has_faq_whether() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faqEvaluate_req::set_has_faq_whether() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faqEvaluate_req::clear_has_faq_whether() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faqEvaluate_req::clear_faq_whether() {
  faq_whether_ = 0;
  clear_has_faq_whether();
}
inline ::google::protobuf::int32 faqEvaluate_req::faq_whether() const {
  return faq_whether_;
}
inline void faqEvaluate_req::set_faq_whether(::google::protobuf::int32 value) {
  set_has_faq_whether();
  faq_whether_ = value;
}

// required int32 faq_opinion = 3;
inline bool faqEvaluate_req::has_faq_opinion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void faqEvaluate_req::set_has_faq_opinion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void faqEvaluate_req::clear_has_faq_opinion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void faqEvaluate_req::clear_faq_opinion() {
  faq_opinion_ = 0;
  clear_has_faq_opinion();
}
inline ::google::protobuf::int32 faqEvaluate_req::faq_opinion() const {
  return faq_opinion_;
}
inline void faqEvaluate_req::set_faq_opinion(::google::protobuf::int32 value) {
  set_has_faq_opinion();
  faq_opinion_ = value;
}

// required string content = 4;
inline bool faqEvaluate_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void faqEvaluate_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void faqEvaluate_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void faqEvaluate_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& faqEvaluate_req::content() const {
  return *content_;
}
inline void faqEvaluate_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void faqEvaluate_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void faqEvaluate_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* faqEvaluate_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* faqEvaluate_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void faqEvaluate_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// faqEvaluate_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqEvaluate_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqEvaluate_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqEvaluate_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqEvaluate_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqEvaluate_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqEvaluate_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqEvaluate_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqEvaluate_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// faqHot_req

// required int32 lang = 1;
inline bool faqHot_req::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqHot_req::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqHot_req::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqHot_req::clear_lang() {
  lang_ = 0;
  clear_has_lang();
}
inline ::google::protobuf::int32 faqHot_req::lang() const {
  return lang_;
}
inline void faqHot_req::set_lang(::google::protobuf::int32 value) {
  set_has_lang();
  lang_ = value;
}

// required int32 ps = 2;
inline bool faqHot_req::has_ps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faqHot_req::set_has_ps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faqHot_req::clear_has_ps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faqHot_req::clear_ps() {
  ps_ = 0;
  clear_has_ps();
}
inline ::google::protobuf::int32 faqHot_req::ps() const {
  return ps_;
}
inline void faqHot_req::set_ps(::google::protobuf::int32 value) {
  set_has_ps();
  ps_ = value;
}

// required int32 game_id = 3;
inline bool faqHot_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void faqHot_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void faqHot_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void faqHot_req::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 faqHot_req::game_id() const {
  return game_id_;
}
inline void faqHot_req::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// faqHot_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqHot_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqHot_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqHot_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqHot_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqHot_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqHot_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqHot_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqHot_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}

// -------------------------------------------------------------------

// faqSearch_req

// required int32 lang = 1;
inline bool faqSearch_req::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqSearch_req::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqSearch_req::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqSearch_req::clear_lang() {
  lang_ = 0;
  clear_has_lang();
}
inline ::google::protobuf::int32 faqSearch_req::lang() const {
  return lang_;
}
inline void faqSearch_req::set_lang(::google::protobuf::int32 value) {
  set_has_lang();
  lang_ = value;
}

// required string key_word = 2;
inline bool faqSearch_req::has_key_word() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void faqSearch_req::set_has_key_word() {
  _has_bits_[0] |= 0x00000002u;
}
inline void faqSearch_req::clear_has_key_word() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void faqSearch_req::clear_key_word() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    key_word_->clear();
  }
  clear_has_key_word();
}
inline const ::std::string& faqSearch_req::key_word() const {
  return *key_word_;
}
inline void faqSearch_req::set_key_word(const ::std::string& value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void faqSearch_req::set_key_word(const char* value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void faqSearch_req::set_key_word(const char* value, size_t size) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* faqSearch_req::mutable_key_word() {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  return key_word_;
}
inline ::std::string* faqSearch_req::release_key_word() {
  clear_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_word_;
    key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void faqSearch_req::set_allocated_key_word(::std::string* key_word) {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    delete key_word_;
  }
  if (key_word) {
    set_has_key_word();
    key_word_ = key_word;
  } else {
    clear_has_key_word();
    key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 game_id = 3;
inline bool faqSearch_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void faqSearch_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void faqSearch_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void faqSearch_req::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 faqSearch_req::game_id() const {
  return game_id_;
}
inline void faqSearch_req::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 page = 4;
inline bool faqSearch_req::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void faqSearch_req::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void faqSearch_req::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void faqSearch_req::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 faqSearch_req::page() const {
  return page_;
}
inline void faqSearch_req::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 ps = 5;
inline bool faqSearch_req::has_ps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void faqSearch_req::set_has_ps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void faqSearch_req::clear_has_ps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void faqSearch_req::clear_ps() {
  ps_ = 0;
  clear_has_ps();
}
inline ::google::protobuf::int32 faqSearch_req::ps() const {
  return ps_;
}
inline void faqSearch_req::set_ps(::google::protobuf::int32 value) {
  set_has_ps();
  ps_ = value;
}

// -------------------------------------------------------------------

// faqSearch_rsp

// required .inner.inner_tail tail = 1000;
inline bool faqSearch_rsp::has_tail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void faqSearch_rsp::set_has_tail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void faqSearch_rsp::clear_has_tail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void faqSearch_rsp::clear_tail() {
  if (tail_ != NULL) tail_->::inner::inner_tail::Clear();
  clear_has_tail();
}
inline const ::inner::inner_tail& faqSearch_rsp::tail() const {
  return tail_ != NULL ? *tail_ : *default_instance_->tail_;
}
inline ::inner::inner_tail* faqSearch_rsp::mutable_tail() {
  set_has_tail();
  if (tail_ == NULL) tail_ = new ::inner::inner_tail;
  return tail_;
}
inline ::inner::inner_tail* faqSearch_rsp::release_tail() {
  clear_has_tail();
  ::inner::inner_tail* temp = tail_;
  tail_ = NULL;
  return temp;
}
inline void faqSearch_rsp::set_allocated_tail(::inner::inner_tail* tail) {
  delete tail_;
  tail_ = tail;
  if (tail) {
    set_has_tail();
  } else {
    clear_has_tail();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2efaq_2eproto__INCLUDED
