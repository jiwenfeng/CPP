// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.poll_activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.poll_activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* value_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  value_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reward_flag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reward_flag_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_db_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_db_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_open_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_open_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* poll_activity_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  poll_activity_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_shop_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_shop_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_shop_c2g_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_shop_c2g_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_shop_g2c_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_shop_g2c_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_shop_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_shop_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_reward_c2g_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reward_c2g_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_reward_g2c_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reward_g2c_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_reward_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_reward_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_activity_list_center_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_activity_list_center_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_his_record_c2g_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_his_record_c2g_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_his_record_g2c_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_his_record_g2c_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_activity_record_g2c_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_activity_record_g2c_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIVITY_OPEN_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BACKGROUND_ACTIVITY_OPEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REWARD_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2epoll_5factivity_2eproto() {
  protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.poll_activity.proto");
  GOOGLE_CHECK(file != NULL);
  item_info_descriptor_ = file->message_type(0);
  static const int item_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, role_id_),
  };
  item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_info_descriptor_,
      item_info::default_instance_,
      item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_info));
  value_info_descriptor_ = file->message_type(1);
  static const int value_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, new_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, limit_type_),
  };
  value_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      value_info_descriptor_,
      value_info::default_instance_,
      value_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(value_info));
  reward_flag_descriptor_ = file->message_type(2);
  static const int reward_flag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_flag, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_flag, rflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_flag, activity_type_),
  };
  reward_flag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reward_flag_descriptor_,
      reward_flag::default_instance_,
      reward_flag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_flag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_flag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reward_flag));
  act_db_info_descriptor_ = file->message_type(3);
  static const int act_db_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, center_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, flag_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, person_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, values_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, reward_flag_),
  };
  act_db_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_db_info_descriptor_,
      act_db_info::default_instance_,
      act_db_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_db_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_db_info));
  act_open_info_descriptor_ = file->message_type(4);
  static const int act_open_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_open_info, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_open_info, is_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_open_info, remain_time_),
  };
  act_open_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_open_info_descriptor_,
      act_open_info::default_instance_,
      act_open_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_open_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_open_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_open_info));
  poll_activity_rsp_descriptor_ = file->message_type(5);
  static const int poll_activity_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(poll_activity_rsp, uixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(poll_activity_rsp, info_),
  };
  poll_activity_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      poll_activity_rsp_descriptor_,
      poll_activity_rsp::default_instance_,
      poll_activity_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(poll_activity_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(poll_activity_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(poll_activity_rsp));
  activity_info_req_descriptor_ = file->message_type(6);
  static const int activity_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_req, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_req, svr_head_),
  };
  activity_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_req_descriptor_,
      activity_info_req::default_instance_,
      activity_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info_req));
  activity_info_rsp_descriptor_ = file->message_type(7);
  static const int activity_info_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_rsp, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_rsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_rsp, db_info_),
  };
  activity_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_rsp_descriptor_,
      activity_info_rsp::default_instance_,
      activity_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info_rsp));
  activity_shop_req_descriptor_ = file->message_type(8);
  static const int activity_shop_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, svr_head_),
  };
  activity_shop_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_shop_req_descriptor_,
      activity_shop_req::default_instance_,
      activity_shop_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_shop_req));
  activity_shop_c2g_descriptor_ = file->message_type(9);
  static const int activity_shop_c2g_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, close_time_),
  };
  activity_shop_c2g_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_shop_c2g_descriptor_,
      activity_shop_c2g::default_instance_,
      activity_shop_c2g_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_c2g, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_shop_c2g));
  activity_shop_g2c_descriptor_ = file->message_type(10);
  static const int activity_shop_g2c_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, is_sucess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, pro_info_),
  };
  activity_shop_g2c_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_shop_g2c_descriptor_,
      activity_shop_g2c::default_instance_,
      activity_shop_g2c_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_g2c, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_shop_g2c));
  activity_shop_rsp_descriptor_ = file->message_type(11);
  static const int activity_shop_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_rsp, db_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_rsp, pro_info_),
  };
  activity_shop_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_shop_rsp_descriptor_,
      activity_shop_rsp::default_instance_,
      activity_shop_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_shop_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_shop_rsp));
  activity_reward_req_descriptor_ = file->message_type(12);
  static const int activity_reward_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_req, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_req, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_req, svr_head_),
  };
  activity_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_reward_req_descriptor_,
      activity_reward_req::default_instance_,
      activity_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_reward_req));
  activity_reward_c2g_descriptor_ = file->message_type(13);
  static const int activity_reward_c2g_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, close_time_),
  };
  activity_reward_c2g_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_reward_c2g_descriptor_,
      activity_reward_c2g::default_instance_,
      activity_reward_c2g_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_c2g, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_reward_c2g));
  activity_reward_g2c_descriptor_ = file->message_type(14);
  static const int activity_reward_g2c_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, pro_info_),
  };
  activity_reward_g2c_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_reward_g2c_descriptor_,
      activity_reward_g2c::default_instance_,
      activity_reward_g2c_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_g2c, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_reward_g2c));
  activity_reward_rsp_descriptor_ = file->message_type(15);
  static const int activity_reward_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, pro_info_),
  };
  activity_reward_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_reward_rsp_descriptor_,
      activity_reward_rsp::default_instance_,
      activity_reward_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_reward_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_reward_rsp));
  load_activity_list_center_descriptor_ = file->message_type(16);
  static const int load_activity_list_center_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_activity_list_center, role_id_),
  };
  load_activity_list_center_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_activity_list_center_descriptor_,
      load_activity_list_center::default_instance_,
      load_activity_list_center_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_activity_list_center, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_activity_list_center, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_activity_list_center));
  activity_base_descriptor_ = file->message_type(17);
  static const int activity_base_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_base, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_base, activity_status_),
  };
  activity_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_base_descriptor_,
      activity_base::default_instance_,
      activity_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_base));
  activity_list_rsp_descriptor_ = file->message_type(18);
  static const int activity_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_list_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_list_rsp, info_),
  };
  activity_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_list_rsp_descriptor_,
      activity_list_rsp::default_instance_,
      activity_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_list_rsp));
  activity_his_record_c2g_descriptor_ = file->message_type(19);
  static const int activity_his_record_c2g_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_c2g, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_c2g, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_c2g, limit_type_),
  };
  activity_his_record_c2g_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_his_record_c2g_descriptor_,
      activity_his_record_c2g::default_instance_,
      activity_his_record_c2g_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_c2g, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_c2g, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_his_record_c2g));
  activity_his_record_g2c_descriptor_ = file->message_type(20);
  static const int activity_his_record_g2c_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, old_value_),
  };
  activity_his_record_g2c_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_his_record_g2c_descriptor_,
      activity_his_record_g2c::default_instance_,
      activity_his_record_g2c_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_his_record_g2c, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_his_record_g2c));
  update_activity_record_g2c_descriptor_ = file->message_type(21);
  static const int update_activity_record_g2c_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_activity_record_g2c, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_activity_record_g2c, value_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_activity_record_g2c, role_id_),
  };
  update_activity_record_g2c_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_activity_record_g2c_descriptor_,
      update_activity_record_g2c::default_instance_,
      update_activity_record_g2c_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_activity_record_g2c, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_activity_record_g2c, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_activity_record_g2c));
  ACTIVITY_OPEN_TYPE_E_descriptor_ = file->enum_type(0);
  BACKGROUND_ACTIVITY_OPEN_TYPE_descriptor_ = file->enum_type(1);
  REWARD_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2epoll_5factivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_info_descriptor_, &item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    value_info_descriptor_, &value_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reward_flag_descriptor_, &reward_flag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_db_info_descriptor_, &act_db_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_open_info_descriptor_, &act_open_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    poll_activity_rsp_descriptor_, &poll_activity_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_req_descriptor_, &activity_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_rsp_descriptor_, &activity_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_shop_req_descriptor_, &activity_shop_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_shop_c2g_descriptor_, &activity_shop_c2g::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_shop_g2c_descriptor_, &activity_shop_g2c::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_shop_rsp_descriptor_, &activity_shop_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_reward_req_descriptor_, &activity_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_reward_c2g_descriptor_, &activity_reward_c2g::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_reward_g2c_descriptor_, &activity_reward_g2c::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_reward_rsp_descriptor_, &activity_reward_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_activity_list_center_descriptor_, &load_activity_list_center::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_base_descriptor_, &activity_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_list_rsp_descriptor_, &activity_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_his_record_c2g_descriptor_, &activity_his_record_c2g::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_his_record_g2c_descriptor_, &activity_his_record_g2c::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_activity_record_g2c_descriptor_, &update_activity_record_g2c::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2epoll_5factivity_2eproto() {
  delete item_info::default_instance_;
  delete item_info_reflection_;
  delete value_info::default_instance_;
  delete value_info_reflection_;
  delete reward_flag::default_instance_;
  delete reward_flag_reflection_;
  delete act_db_info::default_instance_;
  delete act_db_info_reflection_;
  delete act_open_info::default_instance_;
  delete act_open_info_reflection_;
  delete poll_activity_rsp::default_instance_;
  delete poll_activity_rsp_reflection_;
  delete activity_info_req::default_instance_;
  delete activity_info_req_reflection_;
  delete activity_info_rsp::default_instance_;
  delete activity_info_rsp_reflection_;
  delete activity_shop_req::default_instance_;
  delete activity_shop_req_reflection_;
  delete activity_shop_c2g::default_instance_;
  delete activity_shop_c2g_reflection_;
  delete activity_shop_g2c::default_instance_;
  delete activity_shop_g2c_reflection_;
  delete activity_shop_rsp::default_instance_;
  delete activity_shop_rsp_reflection_;
  delete activity_reward_req::default_instance_;
  delete activity_reward_req_reflection_;
  delete activity_reward_c2g::default_instance_;
  delete activity_reward_c2g_reflection_;
  delete activity_reward_g2c::default_instance_;
  delete activity_reward_g2c_reflection_;
  delete activity_reward_rsp::default_instance_;
  delete activity_reward_rsp_reflection_;
  delete load_activity_list_center::default_instance_;
  delete load_activity_list_center_reflection_;
  delete activity_base::default_instance_;
  delete activity_base_reflection_;
  delete activity_list_rsp::default_instance_;
  delete activity_list_rsp_reflection_;
  delete activity_his_record_c2g::default_instance_;
  delete activity_his_record_c2g_reflection_;
  delete activity_his_record_g2c::default_instance_;
  delete activity_his_record_g2c_reflection_;
  delete update_activity_record_g2c::default_instance_;
  delete update_activity_record_g2c_reflection_;
}

void protobuf_AddDesc_client_2epoll_5factivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032client.poll_activity.proto\022\006client\032\021cl"
    "ient.comm.proto\032\027client.role_props.proto"
    "\"G\n\titem_info\022\022\n\nitem_count\030\001 \001(\r\022\025\n\ract"
    "ivity_type\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\"W\n\nval"
    "ue_info\022\017\n\007role_id\030\001 \001(\r\022\021\n\told_value\030\002 "
    "\001(\r\022\021\n\tnew_value\030\003 \001(\r\022\022\n\nlimit_type\030\004 \001"
    "(\r\"D\n\013reward_flag\022\017\n\007role_id\030\001 \001(\r\022\r\n\005rf"
    "lag\030\002 \001(\r\022\025\n\ractivity_type\030\003 \001(\r\"\303\001\n\013act"
    "_db_info\022&\n\013center_item\030\001 \003(\0132\021.client.i"
    "tem_info\022&\n\tflag_info\030\002 \003(\0132\023.client.rew"
    "ard_flag\022&\n\013person_item\030\003 \003(\0132\021.client.i"
    "tem_info\022\'\n\013values_info\030\004 \003(\0132\022.client.v"
    "alue_info\022\023\n\013reward_flag\030\005 \001(\r\"N\n\ract_op"
    "en_info\022\023\n\013activity_id\030\001 \002(\r\022\023\n\013is_activ"
    "ity\030\002 \002(\010\022\023\n\013remain_time\030\003 \001(\r\"I\n\021poll_a"
    "ctivity_rsp\022\017\n\007uixtime\030\001 \002(\r\022#\n\004info\030\002 \003"
    "(\0132\025.client.act_open_info\"P\n\021activity_in"
    "fo_req\022\023\n\013activity_id\030\001 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"s\n\021activity_"
    "info_rsp\022\023\n\013activity_id\030\001 \002(\r\022#\n\004info\030\002 "
    "\003(\0132\025.client.act_open_info\022$\n\007db_info\030\003 "
    "\003(\0132\023.client.act_db_info\"u\n\021activity_sho"
    "p_req\022\023\n\013activity_id\030\001 \002(\r\022\017\n\007item_id\030\002 "
    "\002(\r\022\022\n\nitem_count\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"x\n\021activity_shop"
    "_c2g\022\023\n\013activity_id\030\001 \002(\r\022\025\n\ractivity_ty"
    "pe\030\002 \002(\r\022\022\n\nitem_count\030\003 \002(\r\022\017\n\007role_id\030"
    "\004 \002(\r\022\022\n\nclose_time\030\005 \002(\r\"\235\001\n\021activity_s"
    "hop_g2c\022\023\n\013activity_id\030\001 \002(\r\022\025\n\ractivity"
    "_type\030\002 \002(\r\022\022\n\nitem_count\030\003 \002(\r\022\017\n\007role_"
    "id\030\004 \002(\r\022\021\n\tis_sucess\030\005 \002(\010\022$\n\010pro_info\030"
    "\006 \003(\0132\022.client.props_info\"t\n\021activity_sh"
    "op_rsp\022\023\n\013result_type\030\001 \002(\r\022$\n\007db_info\030\002"
    " \003(\0132\023.client.act_db_info\022$\n\010pro_info\030\003 "
    "\003(\0132\022.client.props_info\"i\n\023activity_rewa"
    "rd_req\022\023\n\013activity_id\030\001 \002(\r\022\025\n\ractivity_"
    "type\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"f\n\023activity_reward_c2g\022\023\n\013act"
    "ivity_id\030\001 \002(\r\022\025\n\ractivity_type\030\002 \002(\r\022\017\n"
    "\007role_id\030\003 \002(\r\022\022\n\nclose_time\030\004 \002(\r\"\214\001\n\023a"
    "ctivity_reward_g2c\022\023\n\013activity_id\030\001 \002(\r\022"
    "\025\n\ractivity_type\030\002 \002(\r\022\017\n\007role_id\030\003 \002(\r\022"
    "\022\n\nis_success\030\004 \002(\010\022$\n\010pro_info\030\005 \003(\0132\022."
    "client.props_info\"|\n\023activity_reward_rsp"
    "\022\023\n\013activity_id\030\001 \002(\r\022\023\n\013result_type\030\002 \002"
    "(\r\022\025\n\ractivity_type\030\003 \002(\r\022$\n\010pro_info\030\004 "
    "\003(\0132\022.client.props_info\",\n\031load_activity"
    "_list_center\022\017\n\007role_id\030\001 \002(\r\"=\n\ractivit"
    "y_base\022\023\n\013activity_id\030\001 \002(\r\022\027\n\017activity_"
    "status\030\002 \002(\010\"F\n\021activity_list_rsp\022\014\n\004tim"
    "e\030\001 \002(\r\022#\n\004info\030\002 \003(\0132\025.client.activity_"
    "base\"S\n\027activity_his_record_c2g\022\023\n\013activ"
    "ity_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\022\n\nlimit_t"
    "ype\030\003 \002(\r\"f\n\027activity_his_record_g2c\022\023\n\013"
    "activity_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\022\n\nli"
    "mit_type\030\003 \002(\r\022\021\n\told_value\030\004 \001(\r\"V\n\032upd"
    "ate_activity_record_g2c\022\022\n\nlimit_type\030\001 "
    "\002(\r\022\023\n\013value_count\030\002 \002(\r\022\017\n\007role_id\030\003 \002("
    "\r*l\n\024ACTIVITY_OPEN_TYPE_E\022\033\n\027ACTIVITY_OP"
    "EN_TYPE_OPEN\020\001\022\033\n\027ACTIVITY_OPEN_TYPE_DAT"
    "E\020\003\022\032\n\026ACTIVITY_OPEN_TYPE_CIR\020\004*\353\001\n\035BACK"
    "GROUND_ACTIVITY_OPEN_TYPE\022&\n\"BACKGROUND_"
    "ACTIVITY_OPEN_TYPE_NONE\020\000\022&\n\"BACKGROUND_"
    "ACTIVITY_OPEN_TYPE_OPEN\020\001\022\'\n#BACKGROUND_"
    "ACTIVITY_OPEN_TYPE_CLOSE\020\002\022)\n%BACKGROUND"
    "_ACTIVITY_OPEN_TYPE_ALREADY\020\003\022&\n\"BACKGRO"
    "UND_ACTIVITY_OPEN_TYPE_STOP\020\004*\321\001\n\013REWARD"
    "_TYPE\022\025\n\021REWARD_TYPE_LEVEL\020\001\022\024\n\020REWARD_T"
    "YPE_KING\020\002\022\034\n\030REWARD_TYPE_DOUBLE_INGOT\020\003"
    "\022\031\n\025REWARD_TYPE_VIP_LEVEL\020\004\022\025\n\021REWARD_TY"
    "PE_POWER\020\005\022\025\n\021REWARD_TYPE_MOUNT\020\007\022\031\n\025REW"
    "ARD_TYPE_GEM_LEVEL\020\t\022\023\n\017REWARD_TYPE_BOW\020"
    "\013", 2881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.poll_activity.proto", &protobuf_RegisterTypes);
  item_info::default_instance_ = new item_info();
  value_info::default_instance_ = new value_info();
  reward_flag::default_instance_ = new reward_flag();
  act_db_info::default_instance_ = new act_db_info();
  act_open_info::default_instance_ = new act_open_info();
  poll_activity_rsp::default_instance_ = new poll_activity_rsp();
  activity_info_req::default_instance_ = new activity_info_req();
  activity_info_rsp::default_instance_ = new activity_info_rsp();
  activity_shop_req::default_instance_ = new activity_shop_req();
  activity_shop_c2g::default_instance_ = new activity_shop_c2g();
  activity_shop_g2c::default_instance_ = new activity_shop_g2c();
  activity_shop_rsp::default_instance_ = new activity_shop_rsp();
  activity_reward_req::default_instance_ = new activity_reward_req();
  activity_reward_c2g::default_instance_ = new activity_reward_c2g();
  activity_reward_g2c::default_instance_ = new activity_reward_g2c();
  activity_reward_rsp::default_instance_ = new activity_reward_rsp();
  load_activity_list_center::default_instance_ = new load_activity_list_center();
  activity_base::default_instance_ = new activity_base();
  activity_list_rsp::default_instance_ = new activity_list_rsp();
  activity_his_record_c2g::default_instance_ = new activity_his_record_c2g();
  activity_his_record_g2c::default_instance_ = new activity_his_record_g2c();
  update_activity_record_g2c::default_instance_ = new update_activity_record_g2c();
  item_info::default_instance_->InitAsDefaultInstance();
  value_info::default_instance_->InitAsDefaultInstance();
  reward_flag::default_instance_->InitAsDefaultInstance();
  act_db_info::default_instance_->InitAsDefaultInstance();
  act_open_info::default_instance_->InitAsDefaultInstance();
  poll_activity_rsp::default_instance_->InitAsDefaultInstance();
  activity_info_req::default_instance_->InitAsDefaultInstance();
  activity_info_rsp::default_instance_->InitAsDefaultInstance();
  activity_shop_req::default_instance_->InitAsDefaultInstance();
  activity_shop_c2g::default_instance_->InitAsDefaultInstance();
  activity_shop_g2c::default_instance_->InitAsDefaultInstance();
  activity_shop_rsp::default_instance_->InitAsDefaultInstance();
  activity_reward_req::default_instance_->InitAsDefaultInstance();
  activity_reward_c2g::default_instance_->InitAsDefaultInstance();
  activity_reward_g2c::default_instance_->InitAsDefaultInstance();
  activity_reward_rsp::default_instance_->InitAsDefaultInstance();
  load_activity_list_center::default_instance_->InitAsDefaultInstance();
  activity_base::default_instance_->InitAsDefaultInstance();
  activity_list_rsp::default_instance_->InitAsDefaultInstance();
  activity_his_record_c2g::default_instance_->InitAsDefaultInstance();
  activity_his_record_g2c::default_instance_->InitAsDefaultInstance();
  update_activity_record_g2c::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2epoll_5factivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2epoll_5factivity_2eproto {
  StaticDescriptorInitializer_client_2epoll_5factivity_2eproto() {
    protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  }
} static_descriptor_initializer_client_2epoll_5factivity_2eproto_;
const ::google::protobuf::EnumDescriptor* ACTIVITY_OPEN_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIVITY_OPEN_TYPE_E_descriptor_;
}
bool ACTIVITY_OPEN_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BACKGROUND_ACTIVITY_OPEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BACKGROUND_ACTIVITY_OPEN_TYPE_descriptor_;
}
bool BACKGROUND_ACTIVITY_OPEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REWARD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REWARD_TYPE_descriptor_;
}
bool REWARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 9:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int item_info::kItemCountFieldNumber;
const int item_info::kActivityTypeFieldNumber;
const int item_info::kRoleIdFieldNumber;
#endif  // !_MSC_VER

item_info::item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_info::InitAsDefaultInstance() {
}

item_info::item_info(const item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_info::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
  activity_type_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_info::~item_info() {
  SharedDtor();
}

void item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_info_descriptor_;
}

const item_info& item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

item_info* item_info::default_instance_ = NULL;

item_info* item_info::New() const {
  return new item_info;
}

void item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_count_ = 0u;
    activity_type_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // optional uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // optional uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_count = 1;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_count(), target);
  }

  // optional uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_count = 1;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_info::MergeFrom(const item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_info::CopyFrom(const item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_info::IsInitialized() const {

  return true;
}

void item_info::Swap(item_info* other) {
  if (other != this) {
    std::swap(item_count_, other->item_count_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_info_descriptor_;
  metadata.reflection = item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int value_info::kRoleIdFieldNumber;
const int value_info::kOldValueFieldNumber;
const int value_info::kNewValueFieldNumber;
const int value_info::kLimitTypeFieldNumber;
#endif  // !_MSC_VER

value_info::value_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void value_info::InitAsDefaultInstance() {
}

value_info::value_info(const value_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void value_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  old_value_ = 0u;
  new_value_ = 0u;
  limit_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

value_info::~value_info() {
  SharedDtor();
}

void value_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void value_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* value_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return value_info_descriptor_;
}

const value_info& value_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

value_info* value_info::default_instance_ = NULL;

value_info* value_info::New() const {
  return new value_info;
}

void value_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    old_value_ = 0u;
    new_value_ = 0u;
    limit_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool value_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_value;
        break;
      }

      // optional uint32 old_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_value_)));
          set_has_old_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_value;
        break;
      }

      // optional uint32 new_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_value_)));
          set_has_new_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit_type;
        break;
      }

      // optional uint32 limit_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void value_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 old_value = 2;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_value(), output);
  }

  // optional uint32 new_value = 3;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_value(), output);
  }

  // optional uint32 limit_type = 4;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* value_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 old_value = 2;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_value(), target);
  }

  // optional uint32 new_value = 3;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_value(), target);
  }

  // optional uint32 limit_type = 4;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int value_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 old_value = 2;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_value());
    }

    // optional uint32 new_value = 3;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_value());
    }

    // optional uint32 limit_type = 4;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void value_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const value_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const value_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void value_info::MergeFrom(const value_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
    if (from.has_new_value()) {
      set_new_value(from.new_value());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void value_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void value_info::CopyFrom(const value_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value_info::IsInitialized() const {

  return true;
}

void value_info::Swap(value_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata value_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = value_info_descriptor_;
  metadata.reflection = value_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reward_flag::kRoleIdFieldNumber;
const int reward_flag::kRflagFieldNumber;
const int reward_flag::kActivityTypeFieldNumber;
#endif  // !_MSC_VER

reward_flag::reward_flag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reward_flag::InitAsDefaultInstance() {
}

reward_flag::reward_flag(const reward_flag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reward_flag::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  rflag_ = 0u;
  activity_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reward_flag::~reward_flag() {
  SharedDtor();
}

void reward_flag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reward_flag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reward_flag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reward_flag_descriptor_;
}

const reward_flag& reward_flag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

reward_flag* reward_flag::default_instance_ = NULL;

reward_flag* reward_flag::New() const {
  return new reward_flag;
}

void reward_flag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    rflag_ = 0u;
    activity_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reward_flag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rflag;
        break;
      }

      // optional uint32 rflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rflag_)));
          set_has_rflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_type;
        break;
      }

      // optional uint32 activity_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reward_flag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 rflag = 2;
  if (has_rflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rflag(), output);
  }

  // optional uint32 activity_type = 3;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->activity_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reward_flag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 rflag = 2;
  if (has_rflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rflag(), target);
  }

  // optional uint32 activity_type = 3;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->activity_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reward_flag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 rflag = 2;
    if (has_rflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rflag());
    }

    // optional uint32 activity_type = 3;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reward_flag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reward_flag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reward_flag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reward_flag::MergeFrom(const reward_flag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rflag()) {
      set_rflag(from.rflag());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reward_flag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reward_flag::CopyFrom(const reward_flag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reward_flag::IsInitialized() const {

  return true;
}

void reward_flag::Swap(reward_flag* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(rflag_, other->rflag_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reward_flag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reward_flag_descriptor_;
  metadata.reflection = reward_flag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int act_db_info::kCenterItemFieldNumber;
const int act_db_info::kFlagInfoFieldNumber;
const int act_db_info::kPersonItemFieldNumber;
const int act_db_info::kValuesInfoFieldNumber;
const int act_db_info::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

act_db_info::act_db_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void act_db_info::InitAsDefaultInstance() {
}

act_db_info::act_db_info(const act_db_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void act_db_info::SharedCtor() {
  _cached_size_ = 0;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_db_info::~act_db_info() {
  SharedDtor();
}

void act_db_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void act_db_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_db_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_db_info_descriptor_;
}

const act_db_info& act_db_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

act_db_info* act_db_info::default_instance_ = NULL;

act_db_info* act_db_info::New() const {
  return new act_db_info;
}

void act_db_info::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    reward_flag_ = 0u;
  }
  center_item_.Clear();
  flag_info_.Clear();
  person_item_.Clear();
  values_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_db_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.item_info center_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_center_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_center_item;
        if (input->ExpectTag(18)) goto parse_flag_info;
        break;
      }

      // repeated .client.reward_flag flag_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flag_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag_info;
        if (input->ExpectTag(26)) goto parse_person_item;
        break;
      }

      // repeated .client.item_info person_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_person_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_person_item;
        if (input->ExpectTag(34)) goto parse_values_info;
        break;
      }

      // repeated .client.value_info values_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_values_info;
        if (input->ExpectTag(40)) goto parse_reward_flag;
        break;
      }

      // optional uint32 reward_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void act_db_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.item_info center_item = 1;
  for (int i = 0; i < this->center_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center_item(i), output);
  }

  // repeated .client.reward_flag flag_info = 2;
  for (int i = 0; i < this->flag_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flag_info(i), output);
  }

  // repeated .client.item_info person_item = 3;
  for (int i = 0; i < this->person_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->person_item(i), output);
  }

  // repeated .client.value_info values_info = 4;
  for (int i = 0; i < this->values_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->values_info(i), output);
  }

  // optional uint32 reward_flag = 5;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* act_db_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.item_info center_item = 1;
  for (int i = 0; i < this->center_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center_item(i), target);
  }

  // repeated .client.reward_flag flag_info = 2;
  for (int i = 0; i < this->flag_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flag_info(i), target);
  }

  // repeated .client.item_info person_item = 3;
  for (int i = 0; i < this->person_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->person_item(i), target);
  }

  // repeated .client.value_info values_info = 4;
  for (int i = 0; i < this->values_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->values_info(i), target);
  }

  // optional uint32 reward_flag = 5;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int act_db_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 reward_flag = 5;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  // repeated .client.item_info center_item = 1;
  total_size += 1 * this->center_item_size();
  for (int i = 0; i < this->center_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->center_item(i));
  }

  // repeated .client.reward_flag flag_info = 2;
  total_size += 1 * this->flag_info_size();
  for (int i = 0; i < this->flag_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flag_info(i));
  }

  // repeated .client.item_info person_item = 3;
  total_size += 1 * this->person_item_size();
  for (int i = 0; i < this->person_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person_item(i));
  }

  // repeated .client.value_info values_info = 4;
  total_size += 1 * this->values_info_size();
  for (int i = 0; i < this->values_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_db_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_db_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_db_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_db_info::MergeFrom(const act_db_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  center_item_.MergeFrom(from.center_item_);
  flag_info_.MergeFrom(from.flag_info_);
  person_item_.MergeFrom(from.person_item_);
  values_info_.MergeFrom(from.values_info_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_db_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_db_info::CopyFrom(const act_db_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_db_info::IsInitialized() const {

  return true;
}

void act_db_info::Swap(act_db_info* other) {
  if (other != this) {
    center_item_.Swap(&other->center_item_);
    flag_info_.Swap(&other->flag_info_);
    person_item_.Swap(&other->person_item_);
    values_info_.Swap(&other->values_info_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_db_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_db_info_descriptor_;
  metadata.reflection = act_db_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int act_open_info::kActivityIdFieldNumber;
const int act_open_info::kIsActivityFieldNumber;
const int act_open_info::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

act_open_info::act_open_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void act_open_info::InitAsDefaultInstance() {
}

act_open_info::act_open_info(const act_open_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void act_open_info::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  is_activity_ = false;
  remain_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_open_info::~act_open_info() {
  SharedDtor();
}

void act_open_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void act_open_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_open_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_open_info_descriptor_;
}

const act_open_info& act_open_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

act_open_info* act_open_info::default_instance_ = NULL;

act_open_info* act_open_info::New() const {
  return new act_open_info;
}

void act_open_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    is_activity_ = false;
    remain_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_open_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_activity;
        break;
      }

      // required bool is_activity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_activity_)));
          set_has_is_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional uint32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void act_open_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required bool is_activity = 2;
  if (has_is_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_activity(), output);
  }

  // optional uint32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* act_open_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required bool is_activity = 2;
  if (has_is_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_activity(), target);
  }

  // optional uint32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int act_open_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required bool is_activity = 2;
    if (has_is_activity()) {
      total_size += 1 + 1;
    }

    // optional uint32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_open_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_open_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_open_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_open_info::MergeFrom(const act_open_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_is_activity()) {
      set_is_activity(from.is_activity());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_open_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_open_info::CopyFrom(const act_open_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_open_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void act_open_info::Swap(act_open_info* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(is_activity_, other->is_activity_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_open_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_open_info_descriptor_;
  metadata.reflection = act_open_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int poll_activity_rsp::kUixtimeFieldNumber;
const int poll_activity_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

poll_activity_rsp::poll_activity_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void poll_activity_rsp::InitAsDefaultInstance() {
}

poll_activity_rsp::poll_activity_rsp(const poll_activity_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void poll_activity_rsp::SharedCtor() {
  _cached_size_ = 0;
  uixtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

poll_activity_rsp::~poll_activity_rsp() {
  SharedDtor();
}

void poll_activity_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void poll_activity_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* poll_activity_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return poll_activity_rsp_descriptor_;
}

const poll_activity_rsp& poll_activity_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

poll_activity_rsp* poll_activity_rsp::default_instance_ = NULL;

poll_activity_rsp* poll_activity_rsp::New() const {
  return new poll_activity_rsp;
}

void poll_activity_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uixtime_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool poll_activity_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uixtime_)));
          set_has_uixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.act_open_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void poll_activity_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uixtime = 1;
  if (has_uixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uixtime(), output);
  }

  // repeated .client.act_open_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* poll_activity_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uixtime = 1;
  if (has_uixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uixtime(), target);
  }

  // repeated .client.act_open_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int poll_activity_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uixtime = 1;
    if (has_uixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uixtime());
    }

  }
  // repeated .client.act_open_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void poll_activity_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const poll_activity_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const poll_activity_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void poll_activity_rsp::MergeFrom(const poll_activity_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uixtime()) {
      set_uixtime(from.uixtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void poll_activity_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void poll_activity_rsp::CopyFrom(const poll_activity_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool poll_activity_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void poll_activity_rsp::Swap(poll_activity_rsp* other) {
  if (other != this) {
    std::swap(uixtime_, other->uixtime_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata poll_activity_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = poll_activity_rsp_descriptor_;
  metadata.reflection = poll_activity_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info_req::kActivityIdFieldNumber;
const int activity_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

activity_info_req::activity_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

activity_info_req::activity_info_req(const activity_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_info_req::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info_req::~activity_info_req() {
  SharedDtor();
}

void activity_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void activity_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_req_descriptor_;
}

const activity_info_req& activity_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_info_req* activity_info_req::default_instance_ = NULL;

activity_info_req* activity_info_req::New() const {
  return new activity_info_req;
}

void activity_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info_req::MergeFrom(const activity_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info_req::CopyFrom(const activity_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void activity_info_req::Swap(activity_info_req* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_req_descriptor_;
  metadata.reflection = activity_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info_rsp::kActivityIdFieldNumber;
const int activity_info_rsp::kInfoFieldNumber;
const int activity_info_rsp::kDbInfoFieldNumber;
#endif  // !_MSC_VER

activity_info_rsp::activity_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_info_rsp::InitAsDefaultInstance() {
}

activity_info_rsp::activity_info_rsp(const activity_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info_rsp::~activity_info_rsp() {
  SharedDtor();
}

void activity_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_rsp_descriptor_;
}

const activity_info_rsp& activity_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_info_rsp* activity_info_rsp::default_instance_ = NULL;

activity_info_rsp* activity_info_rsp::New() const {
  return new activity_info_rsp;
}

void activity_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
  }
  info_.Clear();
  db_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.act_open_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_db_info;
        break;
      }

      // repeated .client.act_db_info db_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // repeated .client.act_open_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated .client.act_db_info db_info = 3;
  for (int i = 0; i < this->db_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // repeated .client.act_open_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // repeated .client.act_db_info db_info = 3;
  for (int i = 0; i < this->db_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->db_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

  }
  // repeated .client.act_open_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .client.act_db_info db_info = 3;
  total_size += 1 * this->db_info_size();
  for (int i = 0; i < this->db_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info_rsp::MergeFrom(const activity_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  db_info_.MergeFrom(from.db_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info_rsp::CopyFrom(const activity_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_info_rsp::Swap(activity_info_rsp* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    info_.Swap(&other->info_);
    db_info_.Swap(&other->db_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_rsp_descriptor_;
  metadata.reflection = activity_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_shop_req::kActivityIdFieldNumber;
const int activity_shop_req::kItemIdFieldNumber;
const int activity_shop_req::kItemCountFieldNumber;
const int activity_shop_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

activity_shop_req::activity_shop_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_shop_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

activity_shop_req::activity_shop_req(const activity_shop_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_shop_req::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  item_id_ = 0u;
  item_count_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_shop_req::~activity_shop_req() {
  SharedDtor();
}

void activity_shop_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void activity_shop_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_shop_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_shop_req_descriptor_;
}

const activity_shop_req& activity_shop_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_shop_req* activity_shop_req::default_instance_ = NULL;

activity_shop_req* activity_shop_req::New() const {
  return new activity_shop_req;
}

void activity_shop_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    item_id_ = 0u;
    item_count_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_shop_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // required uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_shop_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_shop_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_shop_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_shop_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_shop_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_shop_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_shop_req::MergeFrom(const activity_shop_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_shop_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_shop_req::CopyFrom(const activity_shop_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_shop_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void activity_shop_req::Swap(activity_shop_req* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_shop_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_shop_req_descriptor_;
  metadata.reflection = activity_shop_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_shop_c2g::kActivityIdFieldNumber;
const int activity_shop_c2g::kActivityTypeFieldNumber;
const int activity_shop_c2g::kItemCountFieldNumber;
const int activity_shop_c2g::kRoleIdFieldNumber;
const int activity_shop_c2g::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

activity_shop_c2g::activity_shop_c2g()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_shop_c2g::InitAsDefaultInstance() {
}

activity_shop_c2g::activity_shop_c2g(const activity_shop_c2g& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_shop_c2g::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_type_ = 0u;
  item_count_ = 0u;
  role_id_ = 0u;
  close_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_shop_c2g::~activity_shop_c2g() {
  SharedDtor();
}

void activity_shop_c2g::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_shop_c2g::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_shop_c2g::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_shop_c2g_descriptor_;
}

const activity_shop_c2g& activity_shop_c2g::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_shop_c2g* activity_shop_c2g::default_instance_ = NULL;

activity_shop_c2g* activity_shop_c2g::New() const {
  return new activity_shop_c2g;
}

void activity_shop_c2g::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_type_ = 0u;
    item_count_ = 0u;
    role_id_ = 0u;
    close_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_shop_c2g::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // required uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_close_time;
        break;
      }

      // required uint32 close_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_shop_c2g::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }

  // required uint32 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_id(), output);
  }

  // required uint32 close_time = 5;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->close_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_shop_c2g::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }

  // required uint32 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_id(), target);
  }

  // required uint32 close_time = 5;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->close_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_shop_c2g::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // required uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // required uint32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 close_time = 5;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_shop_c2g::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_shop_c2g* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_shop_c2g*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_shop_c2g::MergeFrom(const activity_shop_c2g& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_shop_c2g::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_shop_c2g::CopyFrom(const activity_shop_c2g& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_shop_c2g::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void activity_shop_c2g::Swap(activity_shop_c2g* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(item_count_, other->item_count_);
    std::swap(role_id_, other->role_id_);
    std::swap(close_time_, other->close_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_shop_c2g::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_shop_c2g_descriptor_;
  metadata.reflection = activity_shop_c2g_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_shop_g2c::kActivityIdFieldNumber;
const int activity_shop_g2c::kActivityTypeFieldNumber;
const int activity_shop_g2c::kItemCountFieldNumber;
const int activity_shop_g2c::kRoleIdFieldNumber;
const int activity_shop_g2c::kIsSucessFieldNumber;
const int activity_shop_g2c::kProInfoFieldNumber;
#endif  // !_MSC_VER

activity_shop_g2c::activity_shop_g2c()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_shop_g2c::InitAsDefaultInstance() {
}

activity_shop_g2c::activity_shop_g2c(const activity_shop_g2c& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_shop_g2c::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_type_ = 0u;
  item_count_ = 0u;
  role_id_ = 0u;
  is_sucess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_shop_g2c::~activity_shop_g2c() {
  SharedDtor();
}

void activity_shop_g2c::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_shop_g2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_shop_g2c::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_shop_g2c_descriptor_;
}

const activity_shop_g2c& activity_shop_g2c::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_shop_g2c* activity_shop_g2c::default_instance_ = NULL;

activity_shop_g2c* activity_shop_g2c::New() const {
  return new activity_shop_g2c;
}

void activity_shop_g2c::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_type_ = 0u;
    item_count_ = 0u;
    role_id_ = 0u;
    is_sucess_ = false;
  }
  pro_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_shop_g2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // required uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_sucess;
        break;
      }

      // required bool is_sucess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sucess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sucess_)));
          set_has_is_sucess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pro_info;
        break;
      }

      // repeated .client.props_info pro_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pro_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_shop_g2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }

  // required uint32 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_id(), output);
  }

  // required bool is_sucess = 5;
  if (has_is_sucess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_sucess(), output);
  }

  // repeated .client.props_info pro_info = 6;
  for (int i = 0; i < this->pro_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pro_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_shop_g2c::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // required uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }

  // required uint32 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_id(), target);
  }

  // required bool is_sucess = 5;
  if (has_is_sucess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_sucess(), target);
  }

  // repeated .client.props_info pro_info = 6;
  for (int i = 0; i < this->pro_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pro_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_shop_g2c::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // required uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // required uint32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required bool is_sucess = 5;
    if (has_is_sucess()) {
      total_size += 1 + 1;
    }

  }
  // repeated .client.props_info pro_info = 6;
  total_size += 1 * this->pro_info_size();
  for (int i = 0; i < this->pro_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_shop_g2c::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_shop_g2c* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_shop_g2c*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_shop_g2c::MergeFrom(const activity_shop_g2c& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_info_.MergeFrom(from.pro_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_sucess()) {
      set_is_sucess(from.is_sucess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_shop_g2c::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_shop_g2c::CopyFrom(const activity_shop_g2c& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_shop_g2c::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < pro_info_size(); i++) {
    if (!this->pro_info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_shop_g2c::Swap(activity_shop_g2c* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(item_count_, other->item_count_);
    std::swap(role_id_, other->role_id_);
    std::swap(is_sucess_, other->is_sucess_);
    pro_info_.Swap(&other->pro_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_shop_g2c::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_shop_g2c_descriptor_;
  metadata.reflection = activity_shop_g2c_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_shop_rsp::kResultTypeFieldNumber;
const int activity_shop_rsp::kDbInfoFieldNumber;
const int activity_shop_rsp::kProInfoFieldNumber;
#endif  // !_MSC_VER

activity_shop_rsp::activity_shop_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_shop_rsp::InitAsDefaultInstance() {
}

activity_shop_rsp::activity_shop_rsp(const activity_shop_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_shop_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_shop_rsp::~activity_shop_rsp() {
  SharedDtor();
}

void activity_shop_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_shop_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_shop_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_shop_rsp_descriptor_;
}

const activity_shop_rsp& activity_shop_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_shop_rsp* activity_shop_rsp::default_instance_ = NULL;

activity_shop_rsp* activity_shop_rsp::New() const {
  return new activity_shop_rsp;
}

void activity_shop_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  db_info_.Clear();
  pro_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_shop_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_info;
        break;
      }

      // repeated .client.act_db_info db_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_info;
        if (input->ExpectTag(26)) goto parse_pro_info;
        break;
      }

      // repeated .client.props_info pro_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pro_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_shop_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // repeated .client.act_db_info db_info = 2;
  for (int i = 0; i < this->db_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_info(i), output);
  }

  // repeated .client.props_info pro_info = 3;
  for (int i = 0; i < this->pro_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pro_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_shop_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // repeated .client.act_db_info db_info = 2;
  for (int i = 0; i < this->db_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_info(i), target);
  }

  // repeated .client.props_info pro_info = 3;
  for (int i = 0; i < this->pro_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pro_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_shop_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  // repeated .client.act_db_info db_info = 2;
  total_size += 1 * this->db_info_size();
  for (int i = 0; i < this->db_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db_info(i));
  }

  // repeated .client.props_info pro_info = 3;
  total_size += 1 * this->pro_info_size();
  for (int i = 0; i < this->pro_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_shop_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_shop_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_shop_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_shop_rsp::MergeFrom(const activity_shop_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_info_.MergeFrom(from.db_info_);
  pro_info_.MergeFrom(from.pro_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_shop_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_shop_rsp::CopyFrom(const activity_shop_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_shop_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pro_info_size(); i++) {
    if (!this->pro_info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_shop_rsp::Swap(activity_shop_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    db_info_.Swap(&other->db_info_);
    pro_info_.Swap(&other->pro_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_shop_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_shop_rsp_descriptor_;
  metadata.reflection = activity_shop_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_reward_req::kActivityIdFieldNumber;
const int activity_reward_req::kActivityTypeFieldNumber;
const int activity_reward_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

activity_reward_req::activity_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_reward_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

activity_reward_req::activity_reward_req(const activity_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_reward_req::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_reward_req::~activity_reward_req() {
  SharedDtor();
}

void activity_reward_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void activity_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_req_descriptor_;
}

const activity_reward_req& activity_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_reward_req* activity_reward_req::default_instance_ = NULL;

activity_reward_req* activity_reward_req::New() const {
  return new activity_reward_req;
}

void activity_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_reward_req::MergeFrom(const activity_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_reward_req::CopyFrom(const activity_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_reward_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_reward_req::Swap(activity_reward_req* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_reward_req_descriptor_;
  metadata.reflection = activity_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_reward_c2g::kActivityIdFieldNumber;
const int activity_reward_c2g::kActivityTypeFieldNumber;
const int activity_reward_c2g::kRoleIdFieldNumber;
const int activity_reward_c2g::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

activity_reward_c2g::activity_reward_c2g()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_reward_c2g::InitAsDefaultInstance() {
}

activity_reward_c2g::activity_reward_c2g(const activity_reward_c2g& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_reward_c2g::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_type_ = 0u;
  role_id_ = 0u;
  close_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_reward_c2g::~activity_reward_c2g() {
  SharedDtor();
}

void activity_reward_c2g::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_reward_c2g::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_reward_c2g::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_c2g_descriptor_;
}

const activity_reward_c2g& activity_reward_c2g::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_reward_c2g* activity_reward_c2g::default_instance_ = NULL;

activity_reward_c2g* activity_reward_c2g::New() const {
  return new activity_reward_c2g;
}

void activity_reward_c2g::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_type_ = 0u;
    role_id_ = 0u;
    close_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_reward_c2g::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_close_time;
        break;
      }

      // required uint32 close_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_reward_c2g::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 close_time = 4;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_reward_c2g::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 close_time = 4;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_reward_c2g::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 close_time = 4;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_reward_c2g::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_reward_c2g* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_reward_c2g*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_reward_c2g::MergeFrom(const activity_reward_c2g& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_reward_c2g::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_reward_c2g::CopyFrom(const activity_reward_c2g& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_reward_c2g::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void activity_reward_c2g::Swap(activity_reward_c2g* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(close_time_, other->close_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_reward_c2g::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_reward_c2g_descriptor_;
  metadata.reflection = activity_reward_c2g_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_reward_g2c::kActivityIdFieldNumber;
const int activity_reward_g2c::kActivityTypeFieldNumber;
const int activity_reward_g2c::kRoleIdFieldNumber;
const int activity_reward_g2c::kIsSuccessFieldNumber;
const int activity_reward_g2c::kProInfoFieldNumber;
#endif  // !_MSC_VER

activity_reward_g2c::activity_reward_g2c()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_reward_g2c::InitAsDefaultInstance() {
}

activity_reward_g2c::activity_reward_g2c(const activity_reward_g2c& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_reward_g2c::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_type_ = 0u;
  role_id_ = 0u;
  is_success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_reward_g2c::~activity_reward_g2c() {
  SharedDtor();
}

void activity_reward_g2c::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_reward_g2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_reward_g2c::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_g2c_descriptor_;
}

const activity_reward_g2c& activity_reward_g2c::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_reward_g2c* activity_reward_g2c::default_instance_ = NULL;

activity_reward_g2c* activity_reward_g2c::New() const {
  return new activity_reward_g2c;
}

void activity_reward_g2c::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_type_ = 0u;
    role_id_ = 0u;
    is_success_ = false;
  }
  pro_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_reward_g2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_success;
        break;
      }

      // required bool is_success = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pro_info;
        break;
      }

      // repeated .client.props_info pro_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pro_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_reward_g2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_type(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required bool is_success = 4;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_success(), output);
  }

  // repeated .client.props_info pro_info = 5;
  for (int i = 0; i < this->pro_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pro_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_reward_g2c::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 activity_type = 2;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_type(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required bool is_success = 4;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_success(), target);
  }

  // repeated .client.props_info pro_info = 5;
  for (int i = 0; i < this->pro_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pro_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_reward_g2c::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 activity_type = 2;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required bool is_success = 4;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

  }
  // repeated .client.props_info pro_info = 5;
  total_size += 1 * this->pro_info_size();
  for (int i = 0; i < this->pro_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_reward_g2c::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_reward_g2c* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_reward_g2c*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_reward_g2c::MergeFrom(const activity_reward_g2c& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_info_.MergeFrom(from.pro_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_reward_g2c::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_reward_g2c::CopyFrom(const activity_reward_g2c& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_reward_g2c::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < pro_info_size(); i++) {
    if (!this->pro_info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_reward_g2c::Swap(activity_reward_g2c* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(is_success_, other->is_success_);
    pro_info_.Swap(&other->pro_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_reward_g2c::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_reward_g2c_descriptor_;
  metadata.reflection = activity_reward_g2c_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_reward_rsp::kActivityIdFieldNumber;
const int activity_reward_rsp::kResultTypeFieldNumber;
const int activity_reward_rsp::kActivityTypeFieldNumber;
const int activity_reward_rsp::kProInfoFieldNumber;
#endif  // !_MSC_VER

activity_reward_rsp::activity_reward_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_reward_rsp::InitAsDefaultInstance() {
}

activity_reward_rsp::activity_reward_rsp(const activity_reward_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_reward_rsp::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  result_type_ = 0u;
  activity_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_reward_rsp::~activity_reward_rsp() {
  SharedDtor();
}

void activity_reward_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_reward_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_reward_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_reward_rsp_descriptor_;
}

const activity_reward_rsp& activity_reward_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_reward_rsp* activity_reward_rsp::default_instance_ = NULL;

activity_reward_rsp* activity_reward_rsp::New() const {
  return new activity_reward_rsp;
}

void activity_reward_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    result_type_ = 0u;
    activity_type_ = 0u;
  }
  pro_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_reward_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_type;
        break;
      }

      // required uint32 activity_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pro_info;
        break;
      }

      // repeated .client.props_info pro_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pro_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_reward_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_type(), output);
  }

  // required uint32 activity_type = 3;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->activity_type(), output);
  }

  // repeated .client.props_info pro_info = 4;
  for (int i = 0; i < this->pro_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pro_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_reward_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_type(), target);
  }

  // required uint32 activity_type = 3;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->activity_type(), target);
  }

  // repeated .client.props_info pro_info = 4;
  for (int i = 0; i < this->pro_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pro_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_reward_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 activity_type = 3;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

  }
  // repeated .client.props_info pro_info = 4;
  total_size += 1 * this->pro_info_size();
  for (int i = 0; i < this->pro_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_reward_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_reward_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_reward_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_reward_rsp::MergeFrom(const activity_reward_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_info_.MergeFrom(from.pro_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_reward_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_reward_rsp::CopyFrom(const activity_reward_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_reward_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < pro_info_size(); i++) {
    if (!this->pro_info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_reward_rsp::Swap(activity_reward_rsp* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(result_type_, other->result_type_);
    std::swap(activity_type_, other->activity_type_);
    pro_info_.Swap(&other->pro_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_reward_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_reward_rsp_descriptor_;
  metadata.reflection = activity_reward_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_activity_list_center::kRoleIdFieldNumber;
#endif  // !_MSC_VER

load_activity_list_center::load_activity_list_center()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_activity_list_center::InitAsDefaultInstance() {
}

load_activity_list_center::load_activity_list_center(const load_activity_list_center& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_activity_list_center::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_activity_list_center::~load_activity_list_center() {
  SharedDtor();
}

void load_activity_list_center::SharedDtor() {
  if (this != default_instance_) {
  }
}

void load_activity_list_center::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_activity_list_center::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_activity_list_center_descriptor_;
}

const load_activity_list_center& load_activity_list_center::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

load_activity_list_center* load_activity_list_center::default_instance_ = NULL;

load_activity_list_center* load_activity_list_center::New() const {
  return new load_activity_list_center;
}

void load_activity_list_center::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_activity_list_center::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_activity_list_center::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_activity_list_center::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_activity_list_center::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_activity_list_center::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_activity_list_center* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_activity_list_center*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_activity_list_center::MergeFrom(const load_activity_list_center& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_activity_list_center::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_activity_list_center::CopyFrom(const load_activity_list_center& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_activity_list_center::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void load_activity_list_center::Swap(load_activity_list_center* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_activity_list_center::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_activity_list_center_descriptor_;
  metadata.reflection = load_activity_list_center_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_base::kActivityIdFieldNumber;
const int activity_base::kActivityStatusFieldNumber;
#endif  // !_MSC_VER

activity_base::activity_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_base::InitAsDefaultInstance() {
}

activity_base::activity_base(const activity_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_base::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  activity_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_base::~activity_base() {
  SharedDtor();
}

void activity_base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_base_descriptor_;
}

const activity_base& activity_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_base* activity_base::default_instance_ = NULL;

activity_base* activity_base::New() const {
  return new activity_base;
}

void activity_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    activity_status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_status;
        break;
      }

      // required bool activity_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activity_status_)));
          set_has_activity_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required bool activity_status = 2;
  if (has_activity_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->activity_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required bool activity_status = 2;
  if (has_activity_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->activity_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required bool activity_status = 2;
    if (has_activity_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_base::MergeFrom(const activity_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_status()) {
      set_activity_status(from.activity_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_base::CopyFrom(const activity_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_base::Swap(activity_base* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_status_, other->activity_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_base_descriptor_;
  metadata.reflection = activity_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_list_rsp::kTimeFieldNumber;
const int activity_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

activity_list_rsp::activity_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_list_rsp::InitAsDefaultInstance() {
}

activity_list_rsp::activity_list_rsp(const activity_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_list_rsp::~activity_list_rsp() {
  SharedDtor();
}

void activity_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_list_rsp_descriptor_;
}

const activity_list_rsp& activity_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_list_rsp* activity_list_rsp::default_instance_ = NULL;

activity_list_rsp* activity_list_rsp::New() const {
  return new activity_list_rsp;
}

void activity_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.activity_base info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // repeated .client.activity_base info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // repeated .client.activity_base info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .client.activity_base info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_list_rsp::MergeFrom(const activity_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_list_rsp::CopyFrom(const activity_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void activity_list_rsp::Swap(activity_list_rsp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_list_rsp_descriptor_;
  metadata.reflection = activity_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_his_record_c2g::kActivityIdFieldNumber;
const int activity_his_record_c2g::kRoleIdFieldNumber;
const int activity_his_record_c2g::kLimitTypeFieldNumber;
#endif  // !_MSC_VER

activity_his_record_c2g::activity_his_record_c2g()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_his_record_c2g::InitAsDefaultInstance() {
}

activity_his_record_c2g::activity_his_record_c2g(const activity_his_record_c2g& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_his_record_c2g::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  role_id_ = 0u;
  limit_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_his_record_c2g::~activity_his_record_c2g() {
  SharedDtor();
}

void activity_his_record_c2g::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_his_record_c2g::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_his_record_c2g::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_his_record_c2g_descriptor_;
}

const activity_his_record_c2g& activity_his_record_c2g::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_his_record_c2g* activity_his_record_c2g::default_instance_ = NULL;

activity_his_record_c2g* activity_his_record_c2g::New() const {
  return new activity_his_record_c2g;
}

void activity_his_record_c2g::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    role_id_ = 0u;
    limit_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_his_record_c2g::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_type;
        break;
      }

      // required uint32 limit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_his_record_c2g::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 limit_type = 3;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_his_record_c2g::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 limit_type = 3;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_his_record_c2g::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 limit_type = 3;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_his_record_c2g::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_his_record_c2g* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_his_record_c2g*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_his_record_c2g::MergeFrom(const activity_his_record_c2g& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_his_record_c2g::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_his_record_c2g::CopyFrom(const activity_his_record_c2g& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_his_record_c2g::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void activity_his_record_c2g::Swap(activity_his_record_c2g* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_his_record_c2g::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_his_record_c2g_descriptor_;
  metadata.reflection = activity_his_record_c2g_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_his_record_g2c::kActivityIdFieldNumber;
const int activity_his_record_g2c::kRoleIdFieldNumber;
const int activity_his_record_g2c::kLimitTypeFieldNumber;
const int activity_his_record_g2c::kOldValueFieldNumber;
#endif  // !_MSC_VER

activity_his_record_g2c::activity_his_record_g2c()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_his_record_g2c::InitAsDefaultInstance() {
}

activity_his_record_g2c::activity_his_record_g2c(const activity_his_record_g2c& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_his_record_g2c::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  role_id_ = 0u;
  limit_type_ = 0u;
  old_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_his_record_g2c::~activity_his_record_g2c() {
  SharedDtor();
}

void activity_his_record_g2c::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_his_record_g2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_his_record_g2c::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_his_record_g2c_descriptor_;
}

const activity_his_record_g2c& activity_his_record_g2c::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

activity_his_record_g2c* activity_his_record_g2c::default_instance_ = NULL;

activity_his_record_g2c* activity_his_record_g2c::New() const {
  return new activity_his_record_g2c;
}

void activity_his_record_g2c::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    role_id_ = 0u;
    limit_type_ = 0u;
    old_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_his_record_g2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_type;
        break;
      }

      // required uint32 limit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_old_value;
        break;
      }

      // optional uint32 old_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_value_)));
          set_has_old_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_his_record_g2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 limit_type = 3;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit_type(), output);
  }

  // optional uint32 old_value = 4;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->old_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_his_record_g2c::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 limit_type = 3;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit_type(), target);
  }

  // optional uint32 old_value = 4;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->old_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_his_record_g2c::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 limit_type = 3;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_type());
    }

    // optional uint32 old_value = 4;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_his_record_g2c::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_his_record_g2c* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_his_record_g2c*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_his_record_g2c::MergeFrom(const activity_his_record_g2c& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_his_record_g2c::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_his_record_g2c::CopyFrom(const activity_his_record_g2c& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_his_record_g2c::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void activity_his_record_g2c::Swap(activity_his_record_g2c* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(old_value_, other->old_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_his_record_g2c::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_his_record_g2c_descriptor_;
  metadata.reflection = activity_his_record_g2c_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_activity_record_g2c::kLimitTypeFieldNumber;
const int update_activity_record_g2c::kValueCountFieldNumber;
const int update_activity_record_g2c::kRoleIdFieldNumber;
#endif  // !_MSC_VER

update_activity_record_g2c::update_activity_record_g2c()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_activity_record_g2c::InitAsDefaultInstance() {
}

update_activity_record_g2c::update_activity_record_g2c(const update_activity_record_g2c& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_activity_record_g2c::SharedCtor() {
  _cached_size_ = 0;
  limit_type_ = 0u;
  value_count_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_activity_record_g2c::~update_activity_record_g2c() {
  SharedDtor();
}

void update_activity_record_g2c::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_activity_record_g2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_activity_record_g2c::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_activity_record_g2c_descriptor_;
}

const update_activity_record_g2c& update_activity_record_g2c::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epoll_5factivity_2eproto();
  return *default_instance_;
}

update_activity_record_g2c* update_activity_record_g2c::default_instance_ = NULL;

update_activity_record_g2c* update_activity_record_g2c::New() const {
  return new update_activity_record_g2c;
}

void update_activity_record_g2c::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    limit_type_ = 0u;
    value_count_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_activity_record_g2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 limit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value_count;
        break;
      }

      // required uint32 value_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_count_)));
          set_has_value_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_activity_record_g2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 limit_type = 1;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limit_type(), output);
  }

  // required uint32 value_count = 2;
  if (has_value_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value_count(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_activity_record_g2c::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 limit_type = 1;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limit_type(), target);
  }

  // required uint32 value_count = 2;
  if (has_value_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value_count(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_activity_record_g2c::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 limit_type = 1;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_type());
    }

    // required uint32 value_count = 2;
    if (has_value_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_count());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_activity_record_g2c::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_activity_record_g2c* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_activity_record_g2c*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_activity_record_g2c::MergeFrom(const update_activity_record_g2c& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_value_count()) {
      set_value_count(from.value_count());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_activity_record_g2c::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_activity_record_g2c::CopyFrom(const update_activity_record_g2c& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_activity_record_g2c::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void update_activity_record_g2c::Swap(update_activity_record_g2c* other) {
  if (other != this) {
    std::swap(limit_type_, other->limit_type_);
    std::swap(value_count_, other->value_count_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_activity_record_g2c::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_activity_record_g2c_descriptor_;
  metadata.reflection = update_activity_record_g2c_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
