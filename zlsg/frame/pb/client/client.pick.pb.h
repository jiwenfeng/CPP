// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.pick.proto

#ifndef PROTOBUF_client_2epick_2eproto__INCLUDED
#define PROTOBUF_client_2epick_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2epick_2eproto();
void protobuf_AssignDesc_client_2epick_2eproto();
void protobuf_ShutdownFile_client_2epick_2eproto();

class pick_info;
class pick_req;
class pick_rsp;

enum PICK_ACTION_E {
  PAE_ADD = 1,
  PAE_COMMIT = 2
};
bool PICK_ACTION_E_IsValid(int value);
const PICK_ACTION_E PICK_ACTION_E_MIN = PAE_ADD;
const PICK_ACTION_E PICK_ACTION_E_MAX = PAE_COMMIT;
const int PICK_ACTION_E_ARRAYSIZE = PICK_ACTION_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PICK_ACTION_E_descriptor();
inline const ::std::string& PICK_ACTION_E_Name(PICK_ACTION_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PICK_ACTION_E_descriptor(), value);
}
inline bool PICK_ACTION_E_Parse(
    const ::std::string& name, PICK_ACTION_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PICK_ACTION_E>(
    PICK_ACTION_E_descriptor(), name, value);
}
enum PICK_RET_E {
  PIRE_SUCCESS = 0,
  PIRE_PARAMETER_ERROR = 1,
  PIRE_TYPE_NOT_EXIST = 2,
  PIRE_TIME = 3,
  PIRE_RANGE = 4,
  PIRE_NOT_ADD = 5,
  PIRE_EFFECT = 6,
  PIRE_REPEAT = 7,
  PIRE_CANCLE = 8,
  PIRE_OFFICIAL_LIMIT = 9,
  PIRE_MONEY_LIMIT = 10,
  PIRE_ACT_CLOSE = 11,
  PIRE_TARGET_IS_MINE = 12,
  PIRE_IN_CD = 13,
  PIRE_ALLIANCE = 14
};
bool PICK_RET_E_IsValid(int value);
const PICK_RET_E PICK_RET_E_MIN = PIRE_SUCCESS;
const PICK_RET_E PICK_RET_E_MAX = PIRE_ALLIANCE;
const int PICK_RET_E_ARRAYSIZE = PICK_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PICK_RET_E_descriptor();
inline const ::std::string& PICK_RET_E_Name(PICK_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PICK_RET_E_descriptor(), value);
}
inline bool PICK_RET_E_Parse(
    const ::std::string& name, PICK_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PICK_RET_E>(
    PICK_RET_E_descriptor(), name, value);
}
// ===================================================================

class pick_info : public ::google::protobuf::Message {
 public:
  pick_info();
  virtual ~pick_info();

  pick_info(const pick_info& from);

  inline pick_info& operator=(const pick_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pick_info& default_instance();

  void Swap(pick_info* other);

  // implements Message ----------------------------------------------

  pick_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pick_info& from);
  void MergeFrom(const pick_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.PICK_ACTION_E action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::client::PICK_ACTION_E action() const;
  inline void set_action(::client::PICK_ACTION_E value);

  // optional .client.role_data rd = 2;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 2;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // @@protoc_insertion_point(class_scope:client.pick_info)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epick_2eproto();
  friend void protobuf_AssignDesc_client_2epick_2eproto();
  friend void protobuf_ShutdownFile_client_2epick_2eproto();

  void InitAsDefaultInstance();
  static pick_info* default_instance_;
};
// -------------------------------------------------------------------

class pick_req : public ::google::protobuf::Message {
 public:
  pick_req();
  virtual ~pick_req();

  pick_req(const pick_req& from);

  inline pick_req& operator=(const pick_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pick_req& default_instance();

  void Swap(pick_req* other);

  // implements Message ----------------------------------------------

  pick_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pick_req& from);
  void MergeFrom(const pick_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.pick_info pi = 1;
  inline bool has_pi() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 1;
  inline const ::client::pick_info& pi() const;
  inline ::client::pick_info* mutable_pi();
  inline ::client::pick_info* release_pi();
  inline void set_allocated_pi(::client::pick_info* pi);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pick_req)
 private:
  inline void set_has_pi();
  inline void clear_has_pi();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::pick_info* pi_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epick_2eproto();
  friend void protobuf_AssignDesc_client_2epick_2eproto();
  friend void protobuf_ShutdownFile_client_2epick_2eproto();

  void InitAsDefaultInstance();
  static pick_req* default_instance_;
};
// -------------------------------------------------------------------

class pick_rsp : public ::google::protobuf::Message {
 public:
  pick_rsp();
  virtual ~pick_rsp();

  pick_rsp(const pick_rsp& from);

  inline pick_rsp& operator=(const pick_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pick_rsp& default_instance();

  void Swap(pick_rsp* other);

  // implements Message ----------------------------------------------

  pick_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pick_rsp& from);
  void MergeFrom(const pick_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 inst_id = 1;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 1;
  inline ::google::protobuf::uint64 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint64 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required .client.PICK_ACTION_E action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::client::PICK_ACTION_E action() const;
  inline void set_action(::client::PICK_ACTION_E value);

  // required .client.PICK_RET_E ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::client::PICK_RET_E ret() const;
  inline void set_ret(::client::PICK_RET_E value);

  // @@protoc_insertion_point(class_scope:client.pick_rsp)
 private:
  inline void set_has_inst_id();
  inline void clear_has_inst_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 inst_id_;
  ::google::protobuf::uint32 role_id_;
  int action_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epick_2eproto();
  friend void protobuf_AssignDesc_client_2epick_2eproto();
  friend void protobuf_ShutdownFile_client_2epick_2eproto();

  void InitAsDefaultInstance();
  static pick_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// pick_info

// required .client.PICK_ACTION_E action = 1;
inline bool pick_info::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pick_info::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pick_info::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pick_info::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::client::PICK_ACTION_E pick_info::action() const {
  return static_cast< ::client::PICK_ACTION_E >(action_);
}
inline void pick_info::set_action(::client::PICK_ACTION_E value) {
  assert(::client::PICK_ACTION_E_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional .client.role_data rd = 2;
inline bool pick_info::has_rd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pick_info::set_has_rd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pick_info::clear_has_rd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pick_info::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& pick_info::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* pick_info::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* pick_info::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void pick_info::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// -------------------------------------------------------------------

// pick_req

// required .client.pick_info pi = 1;
inline bool pick_req::has_pi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pick_req::set_has_pi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pick_req::clear_has_pi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pick_req::clear_pi() {
  if (pi_ != NULL) pi_->::client::pick_info::Clear();
  clear_has_pi();
}
inline const ::client::pick_info& pick_req::pi() const {
  return pi_ != NULL ? *pi_ : *default_instance_->pi_;
}
inline ::client::pick_info* pick_req::mutable_pi() {
  set_has_pi();
  if (pi_ == NULL) pi_ = new ::client::pick_info;
  return pi_;
}
inline ::client::pick_info* pick_req::release_pi() {
  clear_has_pi();
  ::client::pick_info* temp = pi_;
  pi_ = NULL;
  return temp;
}
inline void pick_req::set_allocated_pi(::client::pick_info* pi) {
  delete pi_;
  pi_ = pi;
  if (pi) {
    set_has_pi();
  } else {
    clear_has_pi();
  }
}

// optional .client.server_head svr_head = 1000;
inline bool pick_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pick_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pick_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pick_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pick_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pick_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pick_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pick_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pick_rsp

// required uint64 inst_id = 1;
inline bool pick_rsp::has_inst_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pick_rsp::set_has_inst_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pick_rsp::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pick_rsp::clear_inst_id() {
  inst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_inst_id();
}
inline ::google::protobuf::uint64 pick_rsp::inst_id() const {
  return inst_id_;
}
inline void pick_rsp::set_inst_id(::google::protobuf::uint64 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// required uint32 role_id = 2;
inline bool pick_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pick_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pick_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pick_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 pick_rsp::role_id() const {
  return role_id_;
}
inline void pick_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required .client.PICK_ACTION_E action = 3;
inline bool pick_rsp::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pick_rsp::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pick_rsp::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pick_rsp::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::client::PICK_ACTION_E pick_rsp::action() const {
  return static_cast< ::client::PICK_ACTION_E >(action_);
}
inline void pick_rsp::set_action(::client::PICK_ACTION_E value) {
  assert(::client::PICK_ACTION_E_IsValid(value));
  set_has_action();
  action_ = value;
}

// required .client.PICK_RET_E ret = 4;
inline bool pick_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pick_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pick_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pick_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::PICK_RET_E pick_rsp::ret() const {
  return static_cast< ::client::PICK_RET_E >(ret_);
}
inline void pick_rsp::set_ret(::client::PICK_RET_E value) {
  assert(::client::PICK_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PICK_ACTION_E>() {
  return ::client::PICK_ACTION_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PICK_RET_E>() {
  return ::client::PICK_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2epick_2eproto__INCLUDED
