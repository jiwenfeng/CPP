// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_bows.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_bows.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* bows_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_level_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_level_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_bows_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_bows_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_bows_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_bows_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_bless_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_bless_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_bless_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_bless_time_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_skill_fight_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_skill_fight_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fbows_2eproto() {
  protobuf_AddDesc_client_2erole_5fbows_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_bows.proto");
  GOOGLE_CHECK(file != NULL);
  bows_info_descriptor_ = file->message_type(0);
  static const int bows_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, bow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, advance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, advance_bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, bow_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, bow_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, bow_power_),
  };
  bows_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_info_descriptor_,
      bows_info::default_instance_,
      bows_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_info));
  bows_msg_descriptor_ = file->message_type(1);
  static const int bows_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_msg, mi_),
  };
  bows_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_msg_descriptor_,
      bows_msg::default_instance_,
      bows_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_msg));
  bows_level_rsp_descriptor_ = file->message_type(2);
  static const int bows_level_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_level_rsp, mi_),
  };
  bows_level_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_level_rsp_descriptor_,
      bows_level_rsp::default_instance_,
      bows_level_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_level_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_level_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_level_rsp));
  upgrade_bows_req_descriptor_ = file->message_type(3);
  static const int upgrade_bows_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_req, bow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_req, svr_head_),
  };
  upgrade_bows_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_bows_req_descriptor_,
      upgrade_bows_req::default_instance_,
      upgrade_bows_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_bows_req));
  upgrade_bows_rsp_descriptor_ = file->message_type(4);
  static const int upgrade_bows_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_rsp, mi_),
  };
  upgrade_bows_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_bows_rsp_descriptor_,
      upgrade_bows_rsp::default_instance_,
      upgrade_bows_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_bows_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_bows_rsp));
  bows_bless_time_req_descriptor_ = file->message_type(5);
  static const int bows_bless_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_req, svr_head_),
  };
  bows_bless_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_bless_time_req_descriptor_,
      bows_bless_time_req::default_instance_,
      bows_bless_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_bless_time_req));
  bows_bless_time_rsp_descriptor_ = file->message_type(6);
  static const int bows_bless_time_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_rsp, remain_time_),
  };
  bows_bless_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_bless_time_rsp_descriptor_,
      bows_bless_time_rsp::default_instance_,
      bows_bless_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_bless_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_bless_time_rsp));
  bows_skill_fight_rsp_descriptor_ = file->message_type(7);
  static const int bows_skill_fight_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_fight_rsp, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_fight_rsp, skill_index_),
  };
  bows_skill_fight_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_skill_fight_rsp_descriptor_,
      bows_skill_fight_rsp::default_instance_,
      bows_skill_fight_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_fight_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_fight_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_skill_fight_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fbows_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_info_descriptor_, &bows_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_msg_descriptor_, &bows_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_level_rsp_descriptor_, &bows_level_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_bows_req_descriptor_, &upgrade_bows_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_bows_rsp_descriptor_, &upgrade_bows_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_bless_time_req_descriptor_, &bows_bless_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_bless_time_rsp_descriptor_, &bows_bless_time_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_skill_fight_rsp_descriptor_, &bows_skill_fight_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fbows_2eproto() {
  delete bows_info::default_instance_;
  delete bows_info_reflection_;
  delete bows_msg::default_instance_;
  delete bows_msg_reflection_;
  delete bows_level_rsp::default_instance_;
  delete bows_level_rsp_reflection_;
  delete upgrade_bows_req::default_instance_;
  delete upgrade_bows_req_reflection_;
  delete upgrade_bows_rsp::default_instance_;
  delete upgrade_bows_rsp_reflection_;
  delete bows_bless_time_req::default_instance_;
  delete bows_bless_time_req_reflection_;
  delete bows_bless_time_rsp::default_instance_;
  delete bows_bless_time_rsp_reflection_;
  delete bows_skill_fight_rsp::default_instance_;
  delete bows_skill_fight_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fbows_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026client.role_bows.proto\022\006client\032\021client"
    ".comm.proto\"\177\n\tbows_info\022\016\n\006bow_id\030\001 \002(\r"
    "\022\024\n\014advance_time\030\002 \002(\r\022\025\n\radvance_bless\030"
    "\003 \002(\r\022\021\n\tbow_level\030\004 \002(\r\022\017\n\007bow_exp\030\005 \002("
    "\r\022\021\n\tbow_power\030\006 \001(\r\")\n\010bows_msg\022\035\n\002mi\030\001"
    " \003(\0132\021.client.bows_info\"/\n\016bows_level_rs"
    "p\022\035\n\002mi\030\001 \003(\0132\021.client.bows_info\"J\n\020upgr"
    "ade_bows_req\022\016\n\006bow_id\030\001 \002(\r\022&\n\010svr_head"
    "\030\350\007 \001(\0132\023.client.server_head\">\n\020upgrade_"
    "bows_rsp\022\013\n\003ret\030\001 \002(\r\022\035\n\002mi\030\002 \003(\0132\021.clie"
    "nt.bows_info\"O\n\023bows_bless_time_req\022\020\n\010u"
    "nixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clien"
    "t.server_head\"*\n\023bows_bless_time_rsp\022\023\n\013"
    "remain_time\030\001 \002(\r\"A\n\024bows_skill_fight_rs"
    "p\022\024\n\014attack_count\030\001 \002(\r\022\023\n\013skill_index\030\002"
    " \002(\r", 604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_bows.proto", &protobuf_RegisterTypes);
  bows_info::default_instance_ = new bows_info();
  bows_msg::default_instance_ = new bows_msg();
  bows_level_rsp::default_instance_ = new bows_level_rsp();
  upgrade_bows_req::default_instance_ = new upgrade_bows_req();
  upgrade_bows_rsp::default_instance_ = new upgrade_bows_rsp();
  bows_bless_time_req::default_instance_ = new bows_bless_time_req();
  bows_bless_time_rsp::default_instance_ = new bows_bless_time_rsp();
  bows_skill_fight_rsp::default_instance_ = new bows_skill_fight_rsp();
  bows_info::default_instance_->InitAsDefaultInstance();
  bows_msg::default_instance_->InitAsDefaultInstance();
  bows_level_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_bows_req::default_instance_->InitAsDefaultInstance();
  upgrade_bows_rsp::default_instance_->InitAsDefaultInstance();
  bows_bless_time_req::default_instance_->InitAsDefaultInstance();
  bows_bless_time_rsp::default_instance_->InitAsDefaultInstance();
  bows_skill_fight_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fbows_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fbows_2eproto {
  StaticDescriptorInitializer_client_2erole_5fbows_2eproto() {
    protobuf_AddDesc_client_2erole_5fbows_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fbows_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int bows_info::kBowIdFieldNumber;
const int bows_info::kAdvanceTimeFieldNumber;
const int bows_info::kAdvanceBlessFieldNumber;
const int bows_info::kBowLevelFieldNumber;
const int bows_info::kBowExpFieldNumber;
const int bows_info::kBowPowerFieldNumber;
#endif  // !_MSC_VER

bows_info::bows_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_info::InitAsDefaultInstance() {
}

bows_info::bows_info(const bows_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_info::SharedCtor() {
  _cached_size_ = 0;
  bow_id_ = 0u;
  advance_time_ = 0u;
  advance_bless_ = 0u;
  bow_level_ = 0u;
  bow_exp_ = 0u;
  bow_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_info::~bows_info() {
  SharedDtor();
}

void bows_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_info_descriptor_;
}

const bows_info& bows_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_info* bows_info::default_instance_ = NULL;

bows_info* bows_info::New() const {
  return new bows_info;
}

void bows_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bow_id_ = 0u;
    advance_time_ = 0u;
    advance_bless_ = 0u;
    bow_level_ = 0u;
    bow_exp_ = 0u;
    bow_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bow_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_id_)));
          set_has_bow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advance_time;
        break;
      }

      // required uint32 advance_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_time_)));
          set_has_advance_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_advance_bless;
        break;
      }

      // required uint32 advance_bless = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_bless_)));
          set_has_advance_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bow_level;
        break;
      }

      // required uint32 bow_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_level_)));
          set_has_bow_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bow_exp;
        break;
      }

      // required uint32 bow_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_exp_)));
          set_has_bow_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bow_power;
        break;
      }

      // optional uint32 bow_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_power_)));
          set_has_bow_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bow_id = 1;
  if (has_bow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bow_id(), output);
  }

  // required uint32 advance_time = 2;
  if (has_advance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advance_time(), output);
  }

  // required uint32 advance_bless = 3;
  if (has_advance_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->advance_bless(), output);
  }

  // required uint32 bow_level = 4;
  if (has_bow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bow_level(), output);
  }

  // required uint32 bow_exp = 5;
  if (has_bow_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bow_exp(), output);
  }

  // optional uint32 bow_power = 6;
  if (has_bow_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bow_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bow_id = 1;
  if (has_bow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bow_id(), target);
  }

  // required uint32 advance_time = 2;
  if (has_advance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advance_time(), target);
  }

  // required uint32 advance_bless = 3;
  if (has_advance_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->advance_bless(), target);
  }

  // required uint32 bow_level = 4;
  if (has_bow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bow_level(), target);
  }

  // required uint32 bow_exp = 5;
  if (has_bow_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bow_exp(), target);
  }

  // optional uint32 bow_power = 6;
  if (has_bow_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bow_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bow_id = 1;
    if (has_bow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_id());
    }

    // required uint32 advance_time = 2;
    if (has_advance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance_time());
    }

    // required uint32 advance_bless = 3;
    if (has_advance_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance_bless());
    }

    // required uint32 bow_level = 4;
    if (has_bow_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_level());
    }

    // required uint32 bow_exp = 5;
    if (has_bow_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_exp());
    }

    // optional uint32 bow_power = 6;
    if (has_bow_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_info::MergeFrom(const bows_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bow_id()) {
      set_bow_id(from.bow_id());
    }
    if (from.has_advance_time()) {
      set_advance_time(from.advance_time());
    }
    if (from.has_advance_bless()) {
      set_advance_bless(from.advance_bless());
    }
    if (from.has_bow_level()) {
      set_bow_level(from.bow_level());
    }
    if (from.has_bow_exp()) {
      set_bow_exp(from.bow_exp());
    }
    if (from.has_bow_power()) {
      set_bow_power(from.bow_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_info::CopyFrom(const bows_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void bows_info::Swap(bows_info* other) {
  if (other != this) {
    std::swap(bow_id_, other->bow_id_);
    std::swap(advance_time_, other->advance_time_);
    std::swap(advance_bless_, other->advance_bless_);
    std::swap(bow_level_, other->bow_level_);
    std::swap(bow_exp_, other->bow_exp_);
    std::swap(bow_power_, other->bow_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_info_descriptor_;
  metadata.reflection = bows_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_msg::kMiFieldNumber;
#endif  // !_MSC_VER

bows_msg::bows_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_msg::InitAsDefaultInstance() {
}

bows_msg::bows_msg(const bows_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_msg::~bows_msg() {
  SharedDtor();
}

void bows_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_msg_descriptor_;
}

const bows_msg& bows_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_msg* bows_msg::default_instance_ = NULL;

bows_msg* bows_msg::New() const {
  return new bows_msg;
}

void bows_msg::Clear() {
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.bows_info mi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.bows_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.bows_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.bows_info mi = 1;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_msg::MergeFrom(const bows_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_msg::CopyFrom(const bows_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_msg::IsInitialized() const {

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void bows_msg::Swap(bows_msg* other) {
  if (other != this) {
    mi_.Swap(&other->mi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_msg_descriptor_;
  metadata.reflection = bows_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_level_rsp::kMiFieldNumber;
#endif  // !_MSC_VER

bows_level_rsp::bows_level_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_level_rsp::InitAsDefaultInstance() {
}

bows_level_rsp::bows_level_rsp(const bows_level_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_level_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_level_rsp::~bows_level_rsp() {
  SharedDtor();
}

void bows_level_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_level_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_level_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_level_rsp_descriptor_;
}

const bows_level_rsp& bows_level_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_level_rsp* bows_level_rsp::default_instance_ = NULL;

bows_level_rsp* bows_level_rsp::New() const {
  return new bows_level_rsp;
}

void bows_level_rsp::Clear() {
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_level_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.bows_info mi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_level_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.bows_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_level_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.bows_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_level_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.bows_info mi = 1;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_level_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_level_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_level_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_level_rsp::MergeFrom(const bows_level_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_level_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_level_rsp::CopyFrom(const bows_level_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_level_rsp::IsInitialized() const {

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void bows_level_rsp::Swap(bows_level_rsp* other) {
  if (other != this) {
    mi_.Swap(&other->mi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_level_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_level_rsp_descriptor_;
  metadata.reflection = bows_level_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_bows_req::kBowIdFieldNumber;
const int upgrade_bows_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_bows_req::upgrade_bows_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_bows_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_bows_req::upgrade_bows_req(const upgrade_bows_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_bows_req::SharedCtor() {
  _cached_size_ = 0;
  bow_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_bows_req::~upgrade_bows_req() {
  SharedDtor();
}

void upgrade_bows_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_bows_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_bows_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_bows_req_descriptor_;
}

const upgrade_bows_req& upgrade_bows_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

upgrade_bows_req* upgrade_bows_req::default_instance_ = NULL;

upgrade_bows_req* upgrade_bows_req::New() const {
  return new upgrade_bows_req;
}

void upgrade_bows_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bow_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_bows_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bow_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_id_)));
          set_has_bow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_bows_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bow_id = 1;
  if (has_bow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bow_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_bows_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bow_id = 1;
  if (has_bow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bow_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_bows_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bow_id = 1;
    if (has_bow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_bows_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_bows_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_bows_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_bows_req::MergeFrom(const upgrade_bows_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bow_id()) {
      set_bow_id(from.bow_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_bows_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_bows_req::CopyFrom(const upgrade_bows_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_bows_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void upgrade_bows_req::Swap(upgrade_bows_req* other) {
  if (other != this) {
    std::swap(bow_id_, other->bow_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_bows_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_bows_req_descriptor_;
  metadata.reflection = upgrade_bows_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_bows_rsp::kRetFieldNumber;
const int upgrade_bows_rsp::kMiFieldNumber;
#endif  // !_MSC_VER

upgrade_bows_rsp::upgrade_bows_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_bows_rsp::InitAsDefaultInstance() {
}

upgrade_bows_rsp::upgrade_bows_rsp(const upgrade_bows_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_bows_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_bows_rsp::~upgrade_bows_rsp() {
  SharedDtor();
}

void upgrade_bows_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upgrade_bows_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_bows_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_bows_rsp_descriptor_;
}

const upgrade_bows_rsp& upgrade_bows_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

upgrade_bows_rsp* upgrade_bows_rsp::default_instance_ = NULL;

upgrade_bows_rsp* upgrade_bows_rsp::New() const {
  return new upgrade_bows_rsp;
}

void upgrade_bows_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_bows_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mi;
        break;
      }

      // repeated .client.bows_info mi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_bows_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .client.bows_info mi = 2;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_bows_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .client.bows_info mi = 2;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_bows_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .client.bows_info mi = 2;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_bows_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_bows_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_bows_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_bows_rsp::MergeFrom(const upgrade_bows_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_bows_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_bows_rsp::CopyFrom(const upgrade_bows_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_bows_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void upgrade_bows_rsp::Swap(upgrade_bows_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    mi_.Swap(&other->mi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_bows_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_bows_rsp_descriptor_;
  metadata.reflection = upgrade_bows_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_bless_time_req::kUnixtimeFieldNumber;
const int bows_bless_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

bows_bless_time_req::bows_bless_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_bless_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

bows_bless_time_req::bows_bless_time_req(const bows_bless_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_bless_time_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_bless_time_req::~bows_bless_time_req() {
  SharedDtor();
}

void bows_bless_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void bows_bless_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_bless_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_bless_time_req_descriptor_;
}

const bows_bless_time_req& bows_bless_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_bless_time_req* bows_bless_time_req::default_instance_ = NULL;

bows_bless_time_req* bows_bless_time_req::New() const {
  return new bows_bless_time_req;
}

void bows_bless_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_bless_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_bless_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_bless_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_bless_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_bless_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_bless_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_bless_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_bless_time_req::MergeFrom(const bows_bless_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_bless_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_bless_time_req::CopyFrom(const bows_bless_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_bless_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void bows_bless_time_req::Swap(bows_bless_time_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_bless_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_bless_time_req_descriptor_;
  metadata.reflection = bows_bless_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_bless_time_rsp::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

bows_bless_time_rsp::bows_bless_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_bless_time_rsp::InitAsDefaultInstance() {
}

bows_bless_time_rsp::bows_bless_time_rsp(const bows_bless_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_bless_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  remain_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_bless_time_rsp::~bows_bless_time_rsp() {
  SharedDtor();
}

void bows_bless_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_bless_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_bless_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_bless_time_rsp_descriptor_;
}

const bows_bless_time_rsp& bows_bless_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_bless_time_rsp* bows_bless_time_rsp::default_instance_ = NULL;

bows_bless_time_rsp* bows_bless_time_rsp::New() const {
  return new bows_bless_time_rsp;
}

void bows_bless_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remain_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_bless_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remain_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_bless_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_bless_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_bless_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remain_time = 1;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_bless_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_bless_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_bless_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_bless_time_rsp::MergeFrom(const bows_bless_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_bless_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_bless_time_rsp::CopyFrom(const bows_bless_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_bless_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void bows_bless_time_rsp::Swap(bows_bless_time_rsp* other) {
  if (other != this) {
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_bless_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_bless_time_rsp_descriptor_;
  metadata.reflection = bows_bless_time_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_skill_fight_rsp::kAttackCountFieldNumber;
const int bows_skill_fight_rsp::kSkillIndexFieldNumber;
#endif  // !_MSC_VER

bows_skill_fight_rsp::bows_skill_fight_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_skill_fight_rsp::InitAsDefaultInstance() {
}

bows_skill_fight_rsp::bows_skill_fight_rsp(const bows_skill_fight_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_skill_fight_rsp::SharedCtor() {
  _cached_size_ = 0;
  attack_count_ = 0u;
  skill_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_skill_fight_rsp::~bows_skill_fight_rsp() {
  SharedDtor();
}

void bows_skill_fight_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_skill_fight_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_skill_fight_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_skill_fight_rsp_descriptor_;
}

const bows_skill_fight_rsp& bows_skill_fight_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fbows_2eproto();
  return *default_instance_;
}

bows_skill_fight_rsp* bows_skill_fight_rsp::default_instance_ = NULL;

bows_skill_fight_rsp* bows_skill_fight_rsp::New() const {
  return new bows_skill_fight_rsp;
}

void bows_skill_fight_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_count_ = 0u;
    skill_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_skill_fight_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attack_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_index;
        break;
      }

      // required uint32 skill_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_index_)));
          set_has_skill_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_skill_fight_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attack_count = 1;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack_count(), output);
  }

  // required uint32 skill_index = 2;
  if (has_skill_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_skill_fight_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attack_count = 1;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack_count(), target);
  }

  // required uint32 skill_index = 2;
  if (has_skill_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_skill_fight_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attack_count = 1;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_count());
    }

    // required uint32 skill_index = 2;
    if (has_skill_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_skill_fight_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_skill_fight_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_skill_fight_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_skill_fight_rsp::MergeFrom(const bows_skill_fight_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_skill_index()) {
      set_skill_index(from.skill_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_skill_fight_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_skill_fight_rsp::CopyFrom(const bows_skill_fight_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_skill_fight_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void bows_skill_fight_rsp::Swap(bows_skill_fight_rsp* other) {
  if (other != this) {
    std::swap(attack_count_, other->attack_count_);
    std::swap(skill_index_, other->skill_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_skill_fight_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_skill_fight_rsp_descriptor_;
  metadata.reflection = bows_skill_fight_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
