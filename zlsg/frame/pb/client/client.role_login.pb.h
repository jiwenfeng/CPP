// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_login.proto

#ifndef PROTOBUF_client_2erole_5flogin_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

class role_login_req;
class role_login_rsp;
class auto_login_req;
class auto_login_rsp;
class repeat_login_msg;
class update_auto_login_key;
class update_agent_role;
class personal_info_success;

enum auto_login_rsp_result {
  auto_login_rsp_result_success = 0,
  auto_login_rsp_result_timeout = 1,
  auto_login_rsp_result_online = 2,
  auto_login_rsp_result_error = 3
};
bool auto_login_rsp_result_IsValid(int value);
const auto_login_rsp_result auto_login_rsp_result_result_MIN = auto_login_rsp_result_success;
const auto_login_rsp_result auto_login_rsp_result_result_MAX = auto_login_rsp_result_error;
const int auto_login_rsp_result_result_ARRAYSIZE = auto_login_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* auto_login_rsp_result_descriptor();
inline const ::std::string& auto_login_rsp_result_Name(auto_login_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    auto_login_rsp_result_descriptor(), value);
}
inline bool auto_login_rsp_result_Parse(
    const ::std::string& name, auto_login_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<auto_login_rsp_result>(
    auto_login_rsp_result_descriptor(), name, value);
}
enum ROLE_LOGIN_RET_E {
  RLRE_SUCCESS = 0,
  RLRE_NOT_EXIST = 1,
  RLRE_NOT_BELONG = 2,
  RLRE_LOGIN_FROBID = 3,
  RLRE_SYSERROR = 4
};
bool ROLE_LOGIN_RET_E_IsValid(int value);
const ROLE_LOGIN_RET_E ROLE_LOGIN_RET_E_MIN = RLRE_SUCCESS;
const ROLE_LOGIN_RET_E ROLE_LOGIN_RET_E_MAX = RLRE_SYSERROR;
const int ROLE_LOGIN_RET_E_ARRAYSIZE = ROLE_LOGIN_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROLE_LOGIN_RET_E_descriptor();
inline const ::std::string& ROLE_LOGIN_RET_E_Name(ROLE_LOGIN_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROLE_LOGIN_RET_E_descriptor(), value);
}
inline bool ROLE_LOGIN_RET_E_Parse(
    const ::std::string& name, ROLE_LOGIN_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROLE_LOGIN_RET_E>(
    ROLE_LOGIN_RET_E_descriptor(), name, value);
}
// ===================================================================

class role_login_req : public ::google::protobuf::Message {
 public:
  role_login_req();
  virtual ~role_login_req();

  role_login_req(const role_login_req& from);

  inline role_login_req& operator=(const role_login_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_login_req& default_instance();

  void Swap(role_login_req* other);

  // implements Message ----------------------------------------------

  role_login_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_login_req& from);
  void MergeFrom(const role_login_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.role_login_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static role_login_req* default_instance_;
};
// -------------------------------------------------------------------

class role_login_rsp : public ::google::protobuf::Message {
 public:
  role_login_rsp();
  virtual ~role_login_rsp();

  role_login_rsp(const role_login_rsp& from);

  inline role_login_rsp& operator=(const role_login_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_login_rsp& default_instance();

  void Swap(role_login_rsp* other);

  // implements Message ----------------------------------------------

  role_login_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_login_rsp& from);
  void MergeFrom(const role_login_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.ROLE_LOGIN_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::ROLE_LOGIN_RET_E ret() const;
  inline void set_ret(::client::ROLE_LOGIN_RET_E value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:client.role_login_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static role_login_rsp* default_instance_;
};
// -------------------------------------------------------------------

class auto_login_req : public ::google::protobuf::Message {
 public:
  auto_login_req();
  virtual ~auto_login_req();

  auto_login_req(const auto_login_req& from);

  inline auto_login_req& operator=(const auto_login_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_login_req& default_instance();

  void Swap(auto_login_req* other);

  // implements Message ----------------------------------------------

  auto_login_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_login_req& from);
  void MergeFrom(const auto_login_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.auto_login_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static auto_login_req* default_instance_;
};
// -------------------------------------------------------------------

class auto_login_rsp : public ::google::protobuf::Message {
 public:
  auto_login_rsp();
  virtual ~auto_login_rsp();

  auto_login_rsp(const auto_login_rsp& from);

  inline auto_login_rsp& operator=(const auto_login_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_login_rsp& default_instance();

  void Swap(auto_login_rsp* other);

  // implements Message ----------------------------------------------

  auto_login_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_login_rsp& from);
  void MergeFrom(const auto_login_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef auto_login_rsp_result result;
  static const result success = auto_login_rsp_result_success;
  static const result timeout = auto_login_rsp_result_timeout;
  static const result online = auto_login_rsp_result_online;
  static const result error = auto_login_rsp_result_error;
  static inline bool result_IsValid(int value) {
    return auto_login_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    auto_login_rsp_result_result_MIN;
  static const result result_MAX =
    auto_login_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    auto_login_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return auto_login_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return auto_login_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return auto_login_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.auto_login_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::auto_login_rsp_result ret() const;
  inline void set_ret(::client::auto_login_rsp_result value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:client.auto_login_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static auto_login_rsp* default_instance_;
};
// -------------------------------------------------------------------

class repeat_login_msg : public ::google::protobuf::Message {
 public:
  repeat_login_msg();
  virtual ~repeat_login_msg();

  repeat_login_msg(const repeat_login_msg& from);

  inline repeat_login_msg& operator=(const repeat_login_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const repeat_login_msg& default_instance();

  void Swap(repeat_login_msg* other);

  // implements Message ----------------------------------------------

  repeat_login_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const repeat_login_msg& from);
  void MergeFrom(const repeat_login_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.repeat_login_msg)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static repeat_login_msg* default_instance_;
};
// -------------------------------------------------------------------

class update_auto_login_key : public ::google::protobuf::Message {
 public:
  update_auto_login_key();
  virtual ~update_auto_login_key();

  update_auto_login_key(const update_auto_login_key& from);

  inline update_auto_login_key& operator=(const update_auto_login_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_auto_login_key& default_instance();

  void Swap(update_auto_login_key* other);

  // implements Message ----------------------------------------------

  update_auto_login_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_auto_login_key& from);
  void MergeFrom(const update_auto_login_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:client.update_auto_login_key)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static update_auto_login_key* default_instance_;
};
// -------------------------------------------------------------------

class update_agent_role : public ::google::protobuf::Message {
 public:
  update_agent_role();
  virtual ~update_agent_role();

  update_agent_role(const update_agent_role& from);

  inline update_agent_role& operator=(const update_agent_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_agent_role& default_instance();

  void Swap(update_agent_role* other);

  // implements Message ----------------------------------------------

  update_agent_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_agent_role& from);
  void MergeFrom(const update_agent_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_agent_role)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static update_agent_role* default_instance_;
};
// -------------------------------------------------------------------

class personal_info_success : public ::google::protobuf::Message {
 public:
  personal_info_success();
  virtual ~personal_info_success();

  personal_info_success(const personal_info_success& from);

  inline personal_info_success& operator=(const personal_info_success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personal_info_success& default_instance();

  void Swap(personal_info_success* other);

  // implements Message ----------------------------------------------

  personal_info_success* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const personal_info_success& from);
  void MergeFrom(const personal_info_success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:client.personal_info_success)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flogin_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flogin_2eproto();

  void InitAsDefaultInstance();
  static personal_info_success* default_instance_;
};
// ===================================================================


// ===================================================================

// role_login_req

// required uint32 role_id = 1;
inline bool role_login_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_login_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_login_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_login_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_login_req::role_id() const {
  return role_id_;
}
inline void role_login_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool role_login_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_login_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_login_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_login_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& role_login_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* role_login_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* role_login_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void role_login_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_login_rsp

// required .client.ROLE_LOGIN_RET_E ret = 1;
inline bool role_login_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_login_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_login_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_login_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::ROLE_LOGIN_RET_E role_login_rsp::ret() const {
  return static_cast< ::client::ROLE_LOGIN_RET_E >(ret_);
}
inline void role_login_rsp::set_ret(::client::ROLE_LOGIN_RET_E value) {
  assert(::client::ROLE_LOGIN_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional string key = 2;
inline bool role_login_rsp::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_login_rsp::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_login_rsp::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_login_rsp::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& role_login_rsp::key() const {
  return *key_;
}
inline void role_login_rsp::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void role_login_rsp::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void role_login_rsp::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_login_rsp::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* role_login_rsp::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_login_rsp::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// auto_login_req

// required uint32 role_id = 1;
inline bool auto_login_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_login_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_login_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_login_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 auto_login_req::role_id() const {
  return role_id_;
}
inline void auto_login_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string key = 2;
inline bool auto_login_req::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_login_req::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_login_req::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_login_req::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& auto_login_req::key() const {
  return *key_;
}
inline void auto_login_req::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void auto_login_req::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void auto_login_req::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auto_login_req::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* auto_login_req::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auto_login_req::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool auto_login_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auto_login_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auto_login_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auto_login_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& auto_login_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* auto_login_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* auto_login_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void auto_login_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// auto_login_rsp

// required .client.auto_login_rsp.result ret = 1;
inline bool auto_login_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_login_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_login_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_login_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::auto_login_rsp_result auto_login_rsp::ret() const {
  return static_cast< ::client::auto_login_rsp_result >(ret_);
}
inline void auto_login_rsp::set_ret(::client::auto_login_rsp_result value) {
  assert(::client::auto_login_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional string key = 2;
inline bool auto_login_rsp::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_login_rsp::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_login_rsp::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_login_rsp::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& auto_login_rsp::key() const {
  return *key_;
}
inline void auto_login_rsp::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void auto_login_rsp::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void auto_login_rsp::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auto_login_rsp::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* auto_login_rsp::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auto_login_rsp::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// repeat_login_msg

// required uint32 type = 1;
inline bool repeat_login_msg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void repeat_login_msg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void repeat_login_msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void repeat_login_msg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 repeat_login_msg::type() const {
  return type_;
}
inline void repeat_login_msg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// update_auto_login_key

// required uint32 role_id = 1;
inline bool update_auto_login_key::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_auto_login_key::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_auto_login_key::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_auto_login_key::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_auto_login_key::role_id() const {
  return role_id_;
}
inline void update_auto_login_key::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string key = 2;
inline bool update_auto_login_key::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_auto_login_key::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_auto_login_key::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_auto_login_key::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& update_auto_login_key::key() const {
  return *key_;
}
inline void update_auto_login_key::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void update_auto_login_key::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void update_auto_login_key::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* update_auto_login_key::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* update_auto_login_key::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void update_auto_login_key::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// update_agent_role

// required uint32 role_id = 1;
inline bool update_agent_role::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_agent_role::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_agent_role::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_agent_role::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_agent_role::role_id() const {
  return role_id_;
}
inline void update_agent_role::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// personal_info_success

// required bool ret = 1;
inline bool personal_info_success::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void personal_info_success::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void personal_info_success::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void personal_info_success::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool personal_info_success::ret() const {
  return ret_;
}
inline void personal_info_success::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::auto_login_rsp_result>() {
  return ::client::auto_login_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ROLE_LOGIN_RET_E>() {
  return ::client::ROLE_LOGIN_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5flogin_2eproto__INCLUDED
