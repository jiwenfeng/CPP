// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.pets.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* pet_kill_count_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_kill_count_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_change_mode_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_change_mode_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_change_mode_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_change_mode_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_id_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_id_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_db_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_db_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pets_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pets_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_recruit_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_recruit_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_recruit_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_recruit_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_lingering_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_lingering_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_lingering_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_lingering_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pet_lingering_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* pet_levelup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_levelup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_levelup_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_levelup_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pet_levelup_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* pet_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rest_or_fight_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rest_or_fight_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rest_or_fight_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rest_or_fight_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_resurgence_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_resurgence_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_resurgence_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_resurgence_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* magic_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  magic_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* magic_upgrade_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  magic_upgrade_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_skill_rpgrate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_skill_rpgrate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_mode_change_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_mode_change_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_mode_change_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_mode_change_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_levels_set_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_levels_set_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_levels_set_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_levels_set_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_STATUS_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_LINGERING_STATUS_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RECRUIT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_OPERATE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_REST_OR_FIGHT_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_ATTR_CHANGE_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2epets_2eproto() {
  protobuf_AddDesc_client_2epets_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.pets.proto");
  GOOGLE_CHECK(file != NULL);
  pet_kill_count_msg_descriptor_ = file->message_type(0);
  static const int pet_kill_count_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_kill_count_msg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_kill_count_msg, count_),
  };
  pet_kill_count_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_kill_count_msg_descriptor_,
      pet_kill_count_msg::default_instance_,
      pet_kill_count_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_kill_count_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_kill_count_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_kill_count_msg));
  pet_change_mode_req_descriptor_ = file->message_type(1);
  static const int pet_change_mode_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_req, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_req, svr_head_),
  };
  pet_change_mode_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_change_mode_req_descriptor_,
      pet_change_mode_req::default_instance_,
      pet_change_mode_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_change_mode_req));
  pet_change_mode_rsp_descriptor_ = file->message_type(2);
  static const int pet_change_mode_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_rsp, m_),
  };
  pet_change_mode_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_change_mode_rsp_descriptor_,
      pet_change_mode_rsp::default_instance_,
      pet_change_mode_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_mode_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_change_mode_rsp));
  pet_id_rsp_descriptor_ = file->message_type(3);
  static const int pet_id_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_id_rsp, pet_info_),
  };
  pet_id_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_id_rsp_descriptor_,
      pet_id_rsp::default_instance_,
      pet_id_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_id_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_id_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_id_rsp));
  pet_fight_attr_descriptor_ = file->message_type(4);
  static const int pet_fight_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_attr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_attr, num_),
  };
  pet_fight_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_attr_descriptor_,
      pet_fight_attr::default_instance_,
      pet_fight_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_attr));
  pet_db_info_descriptor_ = file->message_type(5);
  static const int pet_db_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, pet_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, pet_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, lingering_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, magic_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, debris_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, pfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, levels_status_),
  };
  pet_db_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_db_info_descriptor_,
      pet_db_info::default_instance_,
      pet_db_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_db_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_db_info));
  pets_msg_descriptor_ = file->message_type(6);
  static const int pets_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pets_msg, pet_info_),
  };
  pets_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pets_msg_descriptor_,
      pets_msg::default_instance_,
      pets_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pets_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pets_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pets_msg));
  pet_recruit_req_descriptor_ = file->message_type(7);
  static const int pet_recruit_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_req, svr_head_),
  };
  pet_recruit_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_recruit_req_descriptor_,
      pet_recruit_req::default_instance_,
      pet_recruit_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_recruit_req));
  pet_recruit_rsp_descriptor_ = file->message_type(8);
  static const int pet_recruit_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_rsp, recruit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_rsp, pet_info_),
  };
  pet_recruit_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_recruit_rsp_descriptor_,
      pet_recruit_rsp::default_instance_,
      pet_recruit_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_recruit_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_recruit_rsp));
  pet_lingering_req_descriptor_ = file->message_type(9);
  static const int pet_lingering_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_req, svr_head_),
  };
  pet_lingering_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_lingering_req_descriptor_,
      pet_lingering_req::default_instance_,
      pet_lingering_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_lingering_req));
  pet_lingering_rsp_descriptor_ = file->message_type(10);
  static const int pet_lingering_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_rsp, pet_info_),
  };
  pet_lingering_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_lingering_rsp_descriptor_,
      pet_lingering_rsp::default_instance_,
      pet_lingering_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_lingering_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_lingering_rsp));
  pet_lingering_rsp_result_descriptor_ = pet_lingering_rsp_descriptor_->enum_type(0);
  pet_levelup_req_descriptor_ = file->message_type(11);
  static const int pet_levelup_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_req, svr_head_),
  };
  pet_levelup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_levelup_req_descriptor_,
      pet_levelup_req::default_instance_,
      pet_levelup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_levelup_req));
  pet_levelup_rsp_descriptor_ = file->message_type(12);
  static const int pet_levelup_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_rsp, pet_info_),
  };
  pet_levelup_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_levelup_rsp_descriptor_,
      pet_levelup_rsp::default_instance_,
      pet_levelup_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levelup_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_levelup_rsp));
  pet_levelup_rsp_result_descriptor_ = pet_levelup_rsp_descriptor_->enum_type(0);
  pet_list_req_descriptor_ = file->message_type(13);
  static const int pet_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_req, svr_head_),
  };
  pet_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_list_req_descriptor_,
      pet_list_req::default_instance_,
      pet_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_list_req));
  pet_list_rsp_descriptor_ = file->message_type(14);
  static const int pet_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_rsp, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_rsp, pet_info_),
  };
  pet_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_list_rsp_descriptor_,
      pet_list_rsp::default_instance_,
      pet_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_list_rsp));
  pet_rest_or_fight_req_descriptor_ = file->message_type(15);
  static const int pet_rest_or_fight_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_req, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_req, svr_head_),
  };
  pet_rest_or_fight_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rest_or_fight_req_descriptor_,
      pet_rest_or_fight_req::default_instance_,
      pet_rest_or_fight_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rest_or_fight_req));
  pet_rest_or_fight_rsp_descriptor_ = file->message_type(16);
  static const int pet_rest_or_fight_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_rsp, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_rsp, result_type_),
  };
  pet_rest_or_fight_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rest_or_fight_rsp_descriptor_,
      pet_rest_or_fight_rsp::default_instance_,
      pet_rest_or_fight_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_or_fight_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rest_or_fight_rsp));
  pet_resurgence_req_descriptor_ = file->message_type(17);
  static const int pet_resurgence_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, resurgence_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, svr_head_),
  };
  pet_resurgence_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_resurgence_req_descriptor_,
      pet_resurgence_req::default_instance_,
      pet_resurgence_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_resurgence_req));
  pet_resurgence_rsp_descriptor_ = file->message_type(18);
  static const int pet_resurgence_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_rsp, pet_info_),
  };
  pet_resurgence_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_resurgence_rsp_descriptor_,
      pet_resurgence_rsp::default_instance_,
      pet_resurgence_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_resurgence_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_resurgence_rsp));
  pet_info_req_descriptor_ = file->message_type(19);
  static const int pet_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_req, svr_head_),
  };
  pet_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_info_req_descriptor_,
      pet_info_req::default_instance_,
      pet_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_info_req));
  pet_info_rsp_descriptor_ = file->message_type(20);
  static const int pet_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_rsp, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_rsp, pet_info_),
  };
  pet_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_info_rsp_descriptor_,
      pet_info_rsp::default_instance_,
      pet_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_info_rsp));
  magic_upgrade_req_descriptor_ = file->message_type(21);
  static const int magic_upgrade_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_req, svr_head_),
  };
  magic_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      magic_upgrade_req_descriptor_,
      magic_upgrade_req::default_instance_,
      magic_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(magic_upgrade_req));
  magic_upgrade_rsp_descriptor_ = file->message_type(22);
  static const int magic_upgrade_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_rsp, pet_info_),
  };
  magic_upgrade_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      magic_upgrade_rsp_descriptor_,
      magic_upgrade_rsp::default_instance_,
      magic_upgrade_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(magic_upgrade_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(magic_upgrade_rsp));
  pet_skill_rpgrate_req_descriptor_ = file->message_type(23);
  static const int pet_skill_rpgrate_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_rpgrate_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_rpgrate_req, svr_head_),
  };
  pet_skill_rpgrate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_skill_rpgrate_req_descriptor_,
      pet_skill_rpgrate_req::default_instance_,
      pet_skill_rpgrate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_rpgrate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_rpgrate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_skill_rpgrate_req));
  pet_fight_mode_change_req_descriptor_ = file->message_type(24);
  static const int pet_fight_mode_change_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, is_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, flag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, svr_head_),
  };
  pet_fight_mode_change_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_mode_change_req_descriptor_,
      pet_fight_mode_change_req::default_instance_,
      pet_fight_mode_change_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_mode_change_req));
  pet_fight_info_descriptor_ = file->message_type(25);
  static const int pet_fight_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_info, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_info, pet_status_),
  };
  pet_fight_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_info_descriptor_,
      pet_fight_info::default_instance_,
      pet_fight_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_info));
  pet_fight_mode_change_rsp_descriptor_ = file->message_type(26);
  static const int pet_fight_mode_change_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_rsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_rsp, flag_type_),
  };
  pet_fight_mode_change_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_mode_change_rsp_descriptor_,
      pet_fight_mode_change_rsp::default_instance_,
      pet_fight_mode_change_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_mode_change_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_mode_change_rsp));
  pet_levels_set_req_descriptor_ = file->message_type(27);
  static const int pet_levels_set_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_req, levels_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_req, svr_head_),
  };
  pet_levels_set_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_levels_set_req_descriptor_,
      pet_levels_set_req::default_instance_,
      pet_levels_set_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_levels_set_req));
  pet_levels_set_rsp_descriptor_ = file->message_type(28);
  static const int pet_levels_set_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_rsp, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_rsp, levels_status_),
  };
  pet_levels_set_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_levels_set_rsp_descriptor_,
      pet_levels_set_rsp::default_instance_,
      pet_levels_set_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_levels_set_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_levels_set_rsp));
  PET_MODE_descriptor_ = file->enum_type(0);
  PET_STATUS_E_descriptor_ = file->enum_type(1);
  PET_LINGERING_STATUS_E_descriptor_ = file->enum_type(2);
  RECRUIT_TYPE_descriptor_ = file->enum_type(3);
  PET_OPERATE_E_descriptor_ = file->enum_type(4);
  PET_REST_OR_FIGHT_E_descriptor_ = file->enum_type(5);
  PET_RESURGENCE_TYPE_E_descriptor_ = file->enum_type(6);
  PET_RESURGENCE_E_descriptor_ = file->enum_type(7);
  PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor_ = file->enum_type(8);
  PET_ATTR_CHANGE_TYPE_E_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2epets_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_kill_count_msg_descriptor_, &pet_kill_count_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_change_mode_req_descriptor_, &pet_change_mode_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_change_mode_rsp_descriptor_, &pet_change_mode_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_id_rsp_descriptor_, &pet_id_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_attr_descriptor_, &pet_fight_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_db_info_descriptor_, &pet_db_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pets_msg_descriptor_, &pets_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_recruit_req_descriptor_, &pet_recruit_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_recruit_rsp_descriptor_, &pet_recruit_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_lingering_req_descriptor_, &pet_lingering_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_lingering_rsp_descriptor_, &pet_lingering_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_levelup_req_descriptor_, &pet_levelup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_levelup_rsp_descriptor_, &pet_levelup_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_list_req_descriptor_, &pet_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_list_rsp_descriptor_, &pet_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rest_or_fight_req_descriptor_, &pet_rest_or_fight_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rest_or_fight_rsp_descriptor_, &pet_rest_or_fight_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_resurgence_req_descriptor_, &pet_resurgence_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_resurgence_rsp_descriptor_, &pet_resurgence_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_info_req_descriptor_, &pet_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_info_rsp_descriptor_, &pet_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    magic_upgrade_req_descriptor_, &magic_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    magic_upgrade_rsp_descriptor_, &magic_upgrade_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_skill_rpgrate_req_descriptor_, &pet_skill_rpgrate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_mode_change_req_descriptor_, &pet_fight_mode_change_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_info_descriptor_, &pet_fight_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_mode_change_rsp_descriptor_, &pet_fight_mode_change_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_levels_set_req_descriptor_, &pet_levels_set_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_levels_set_rsp_descriptor_, &pet_levels_set_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2epets_2eproto() {
  delete pet_kill_count_msg::default_instance_;
  delete pet_kill_count_msg_reflection_;
  delete pet_change_mode_req::default_instance_;
  delete pet_change_mode_req_reflection_;
  delete pet_change_mode_rsp::default_instance_;
  delete pet_change_mode_rsp_reflection_;
  delete pet_id_rsp::default_instance_;
  delete pet_id_rsp_reflection_;
  delete pet_fight_attr::default_instance_;
  delete pet_fight_attr_reflection_;
  delete pet_db_info::default_instance_;
  delete pet_db_info_reflection_;
  delete pets_msg::default_instance_;
  delete pets_msg_reflection_;
  delete pet_recruit_req::default_instance_;
  delete pet_recruit_req_reflection_;
  delete pet_recruit_rsp::default_instance_;
  delete pet_recruit_rsp_reflection_;
  delete pet_lingering_req::default_instance_;
  delete pet_lingering_req_reflection_;
  delete pet_lingering_rsp::default_instance_;
  delete pet_lingering_rsp_reflection_;
  delete pet_levelup_req::default_instance_;
  delete pet_levelup_req_reflection_;
  delete pet_levelup_rsp::default_instance_;
  delete pet_levelup_rsp_reflection_;
  delete pet_list_req::default_instance_;
  delete pet_list_req_reflection_;
  delete pet_list_rsp::default_instance_;
  delete pet_list_rsp_reflection_;
  delete pet_rest_or_fight_req::default_instance_;
  delete pet_rest_or_fight_req_reflection_;
  delete pet_rest_or_fight_rsp::default_instance_;
  delete pet_rest_or_fight_rsp_reflection_;
  delete pet_resurgence_req::default_instance_;
  delete pet_resurgence_req_reflection_;
  delete pet_resurgence_rsp::default_instance_;
  delete pet_resurgence_rsp_reflection_;
  delete pet_info_req::default_instance_;
  delete pet_info_req_reflection_;
  delete pet_info_rsp::default_instance_;
  delete pet_info_rsp_reflection_;
  delete magic_upgrade_req::default_instance_;
  delete magic_upgrade_req_reflection_;
  delete magic_upgrade_rsp::default_instance_;
  delete magic_upgrade_rsp_reflection_;
  delete pet_skill_rpgrate_req::default_instance_;
  delete pet_skill_rpgrate_req_reflection_;
  delete pet_fight_mode_change_req::default_instance_;
  delete pet_fight_mode_change_req_reflection_;
  delete pet_fight_info::default_instance_;
  delete pet_fight_info_reflection_;
  delete pet_fight_mode_change_rsp::default_instance_;
  delete pet_fight_mode_change_rsp_reflection_;
  delete pet_levels_set_req::default_instance_;
  delete pet_levels_set_req_reflection_;
  delete pet_levels_set_rsp::default_instance_;
  delete pet_levels_set_rsp_reflection_;
}

void protobuf_AddDesc_client_2epets_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.pets.proto\022\006client\032\021client.comm"
    ".proto\"/\n\022pet_kill_count_msg\022\n\n\002id\030\001 \002(\r"
    "\022\r\n\005count\030\002 \002(\r\"Z\n\023pet_change_mode_req\022\033"
    "\n\001m\030\001 \002(\0162\020.client.PET_MODE\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"2\n\023pet_chang"
    "e_mode_rsp\022\033\n\001m\030\001 \002(\0162\020.client.PET_MODE\""
    "3\n\npet_id_rsp\022%\n\010pet_info\030\001 \002(\0132\023.client"
    ".pet_db_info\")\n\016pet_fight_attr\022\n\n\002id\030\001 \002"
    "(\r\022\013\n\003num\030\002 \002(\r\"\356\001\n\013pet_db_info\022\016\n\006pet_i"
    "d\030\001 \002(\r\022\021\n\tpet_level\030\002 \002(\r\022\017\n\007pet_exp\030\003 "
    "\002(\r\022\016\n\006cur_hp\030\004 \002(\r\022\016\n\006status\030\005 \002(\r\022\027\n\017l"
    "ingering_count\030\006 \002(\r\022\022\n\nmagic_star\030\007 \002(\r"
    "\022\022\n\ndebris_exp\030\010 \002(\r\022#\n\003pfa\030\t \003(\0132\026.clie"
    "nt.pet_fight_attr\022\016\n\006max_hp\030\n \001(\r\022\025\n\rlev"
    "els_status\030\013 \001(\r\"1\n\010pets_msg\022%\n\010pet_info"
    "\030\001 \003(\0132\023.client.pet_db_info\"I\n\017pet_recru"
    "it_req\022\016\n\006pet_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"N\n\017pet_recruit_rs"
    "p\022\024\n\014recruit_type\030\001 \002(\r\022%\n\010pet_info\030\002 \001("
    "\0132\023.client.pet_db_info\"K\n\021pet_lingering_"
    "req\022\016\n\006pet_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"\224\001\n\021pet_lingering_rs"
    "p\0225\n\013result_type\030\001 \002(\0162 .client.pet_ling"
    "ering_rsp.result\022%\n\010pet_info\030\002 \003(\0132\023.cli"
    "ent.pet_db_info\"!\n\006result\022\013\n\007success\020\001\022\n"
    "\n\006failed\020\002\"I\n\017pet_levelup_req\022\016\n\006pet_id\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"\220\001\n\017pet_levelup_rsp\0223\n\013result_type"
    "\030\001 \002(\0162\036.client.pet_levelup_rsp.result\022%"
    "\n\010pet_info\030\002 \003(\0132\023.client.pet_db_info\"!\n"
    "\006result\022\013\n\007success\020\001\022\n\n\006failed\020\002\"H\n\014pet_"
    "list_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"T\n\014pet_list_r"
    "sp\022\035\n\002rd\030\001 \002(\0132\021.client.role_data\022%\n\010pet"
    "_info\030\002 \003(\0132\023.client.pet_db_info\"e\n\025pet_"
    "rest_or_fight_req\022\016\n\006pet_id\030\001 \002(\r\022\024\n\014ope"
    "rate_type\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"<\n\025pet_rest_or_fight_rsp"
    "\022\016\n\006pet_id\030\001 \002(\r\022\023\n\013result_type\030\002 \002(\r\"{\n"
    "\022pet_resurgence_req\022\016\n\006pet_id\030\001 \002(\r\022\024\n\014o"
    "perate_type\030\002 \002(\r\022\027\n\017resurgence_type\030\003 \002"
    "(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_he"
    "ad\"P\n\022pet_resurgence_rsp\022\023\n\013result_type\030"
    "\001 \002(\r\022%\n\010pet_info\030\002 \003(\0132\023.client.pet_db_"
    "info\"F\n\014pet_info_req\022\016\n\006pet_id\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"T\n\014"
    "pet_info_rsp\022\035\n\002rd\030\001 \002(\0132\021.client.role_d"
    "ata\022%\n\010pet_info\030\002 \003(\0132\023.client.pet_db_in"
    "fo\"K\n\021magic_upgrade_req\022\016\n\006pet_id\030\001 \002(\r\022"
    "&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\""
    "O\n\021magic_upgrade_rsp\022\023\n\013result_type\030\001 \002("
    "\r\022%\n\010pet_info\030\002 \003(\0132\023.client.pet_db_info"
    "\"Q\n\025pet_skill_rpgrate_req\022\020\n\010skill_id\030\001 "
    "\002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_h"
    "ead\"x\n\031pet_fight_mode_change_req\022\016\n\006pet_"
    "id\030\001 \002(\r\022\020\n\010is_first\030\002 \001(\r\022\021\n\tflag_type\030"
    "\003 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"4\n\016pet_fight_info\022\016\n\006pet_id\030\001 \001(\r\022"
    "\022\n\npet_status\030\002 \001(\r\"i\n\031pet_fight_mode_ch"
    "ange_rsp\022\023\n\013result_type\030\001 \002(\r\022$\n\004info\030\002 "
    "\003(\0132\026.client.pet_fight_info\022\021\n\tflag_type"
    "\030\003 \001(\r\"c\n\022pet_levels_set_req\022\016\n\006pet_id\030\001"
    " \002(\r\022\025\n\rlevels_status\030\002 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"P\n\022pet_level"
    "s_set_rsp\022\023\n\013result_type\030\001 \002(\r\022\016\n\006pet_id"
    "\030\002 \002(\r\022\025\n\rlevels_status\030\003 \002(\r*&\n\010PET_MOD"
    "E\022\r\n\tPM_FOLLOW\020\001\022\013\n\007PM_STAY\020\002*j\n\014PET_STA"
    "TUS_E\022\024\n\020PET_STATUS_TRUCE\020\000\022\027\n\023PET_STATU"
    "S_FIGHTING\020\001\022\023\n\017PET_STATUS_DEAD\020\002\022\026\n\022PET"
    "_STATUS_PREPARE\020\003*T\n\026PET_LINGERING_STATU"
    "S_E\022\034\n\030PET_LINGERING_STATUS_NOT\020\000\022\034\n\030PET"
    "_LINGERING_STATUS_HAD\020\001*{\n\014RECRUIT_TYPE\022"
    "\023\n\017RECRUIT_SUCCESS\020\001\022\037\n\033RECRUIT_STRATEGY"
    "_NOT_ENOUGH\020\002\022\034\n\030RECRUIT_LEVEL_NOT_ENOUG"
    "H\020\003\022\027\n\023RECRUIT_HAS_RECRUIT\020\004*<\n\rPET_OPER"
    "ATE_E\022\024\n\020PET_OPERATE_REST\020\000\022\025\n\021PET_OPERA"
    "TE_FIGHT\020\001*\204\001\n\023PET_REST_OR_FIGHT_E\022\024\n\020PE"
    "T_REST_SUCCESS\020\000\022\025\n\021PET_FIGHT_SUCCESS\020\001\022"
    "\022\n\016PET_REST_FAILD\020\002\022\023\n\017PET_FIGHT_FAILD\020\003"
    "\022\027\n\023PET_PREPARE_SUCCESS\020\004*Y\n\025PET_RESURGE"
    "NCE_TYPE_E\022\"\n\036PET_RESURGENCE_TYPE_RESURG"
    "ENCE\020\000\022\034\n\030PET_RESURGENCE_TYPE_CURE\020\001*\274\001\n"
    "\020PET_RESURGENCE_E\022\032\n\026PET_RESURGENCE_SUCC"
    "ESS\020\000\022\035\n\031PET_RESURGENCE_HP_SUCCESS\020\001\022(\n$"
    "PET_RESURGENCE_REPUTATION_NOT_ENOUGH\020\002\022%"
    "\n!PET_RESURGENCE_SILIVER_NOT_ENOUGH\020\003\022\034\n"
    "\030PET_RESURGENCE_HP_ENOUGH\020\004*j\n#PET_FIGHT"
    "_MODE_CHANGE_RESULT_TYPE_E\022!\n\035PET_FIGHT_"
    "MODE_CHANGE_SUCCEED\020\001\022 \n\034PET_FIGHT_MODE_"
    "CHANGE_FAILED\020\002*X\n\026PET_ATTR_CHANGE_TYPE_"
    "E\022\036\n\032PET_ATTR_CHANGE_TYPE_LEVEL\020\001\022\036\n\032PET"
    "_ATTR_CHANGE_TYPE_EQUIP\020\002", 3665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.pets.proto", &protobuf_RegisterTypes);
  pet_kill_count_msg::default_instance_ = new pet_kill_count_msg();
  pet_change_mode_req::default_instance_ = new pet_change_mode_req();
  pet_change_mode_rsp::default_instance_ = new pet_change_mode_rsp();
  pet_id_rsp::default_instance_ = new pet_id_rsp();
  pet_fight_attr::default_instance_ = new pet_fight_attr();
  pet_db_info::default_instance_ = new pet_db_info();
  pets_msg::default_instance_ = new pets_msg();
  pet_recruit_req::default_instance_ = new pet_recruit_req();
  pet_recruit_rsp::default_instance_ = new pet_recruit_rsp();
  pet_lingering_req::default_instance_ = new pet_lingering_req();
  pet_lingering_rsp::default_instance_ = new pet_lingering_rsp();
  pet_levelup_req::default_instance_ = new pet_levelup_req();
  pet_levelup_rsp::default_instance_ = new pet_levelup_rsp();
  pet_list_req::default_instance_ = new pet_list_req();
  pet_list_rsp::default_instance_ = new pet_list_rsp();
  pet_rest_or_fight_req::default_instance_ = new pet_rest_or_fight_req();
  pet_rest_or_fight_rsp::default_instance_ = new pet_rest_or_fight_rsp();
  pet_resurgence_req::default_instance_ = new pet_resurgence_req();
  pet_resurgence_rsp::default_instance_ = new pet_resurgence_rsp();
  pet_info_req::default_instance_ = new pet_info_req();
  pet_info_rsp::default_instance_ = new pet_info_rsp();
  magic_upgrade_req::default_instance_ = new magic_upgrade_req();
  magic_upgrade_rsp::default_instance_ = new magic_upgrade_rsp();
  pet_skill_rpgrate_req::default_instance_ = new pet_skill_rpgrate_req();
  pet_fight_mode_change_req::default_instance_ = new pet_fight_mode_change_req();
  pet_fight_info::default_instance_ = new pet_fight_info();
  pet_fight_mode_change_rsp::default_instance_ = new pet_fight_mode_change_rsp();
  pet_levels_set_req::default_instance_ = new pet_levels_set_req();
  pet_levels_set_rsp::default_instance_ = new pet_levels_set_rsp();
  pet_kill_count_msg::default_instance_->InitAsDefaultInstance();
  pet_change_mode_req::default_instance_->InitAsDefaultInstance();
  pet_change_mode_rsp::default_instance_->InitAsDefaultInstance();
  pet_id_rsp::default_instance_->InitAsDefaultInstance();
  pet_fight_attr::default_instance_->InitAsDefaultInstance();
  pet_db_info::default_instance_->InitAsDefaultInstance();
  pets_msg::default_instance_->InitAsDefaultInstance();
  pet_recruit_req::default_instance_->InitAsDefaultInstance();
  pet_recruit_rsp::default_instance_->InitAsDefaultInstance();
  pet_lingering_req::default_instance_->InitAsDefaultInstance();
  pet_lingering_rsp::default_instance_->InitAsDefaultInstance();
  pet_levelup_req::default_instance_->InitAsDefaultInstance();
  pet_levelup_rsp::default_instance_->InitAsDefaultInstance();
  pet_list_req::default_instance_->InitAsDefaultInstance();
  pet_list_rsp::default_instance_->InitAsDefaultInstance();
  pet_rest_or_fight_req::default_instance_->InitAsDefaultInstance();
  pet_rest_or_fight_rsp::default_instance_->InitAsDefaultInstance();
  pet_resurgence_req::default_instance_->InitAsDefaultInstance();
  pet_resurgence_rsp::default_instance_->InitAsDefaultInstance();
  pet_info_req::default_instance_->InitAsDefaultInstance();
  pet_info_rsp::default_instance_->InitAsDefaultInstance();
  magic_upgrade_req::default_instance_->InitAsDefaultInstance();
  magic_upgrade_rsp::default_instance_->InitAsDefaultInstance();
  pet_skill_rpgrate_req::default_instance_->InitAsDefaultInstance();
  pet_fight_mode_change_req::default_instance_->InitAsDefaultInstance();
  pet_fight_info::default_instance_->InitAsDefaultInstance();
  pet_fight_mode_change_rsp::default_instance_->InitAsDefaultInstance();
  pet_levels_set_req::default_instance_->InitAsDefaultInstance();
  pet_levels_set_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2epets_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2epets_2eproto {
  StaticDescriptorInitializer_client_2epets_2eproto() {
    protobuf_AddDesc_client_2epets_2eproto();
  }
} static_descriptor_initializer_client_2epets_2eproto_;
const ::google::protobuf::EnumDescriptor* PET_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_MODE_descriptor_;
}
bool PET_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_STATUS_E_descriptor_;
}
bool PET_STATUS_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_LINGERING_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_LINGERING_STATUS_E_descriptor_;
}
bool PET_LINGERING_STATUS_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RECRUIT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RECRUIT_TYPE_descriptor_;
}
bool RECRUIT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_OPERATE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_OPERATE_E_descriptor_;
}
bool PET_OPERATE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_REST_OR_FIGHT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_REST_OR_FIGHT_E_descriptor_;
}
bool PET_REST_OR_FIGHT_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_RESURGENCE_TYPE_E_descriptor_;
}
bool PET_RESURGENCE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_RESURGENCE_E_descriptor_;
}
bool PET_RESURGENCE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor_;
}
bool PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_ATTR_CHANGE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_ATTR_CHANGE_TYPE_E_descriptor_;
}
bool PET_ATTR_CHANGE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pet_kill_count_msg::kIdFieldNumber;
const int pet_kill_count_msg::kCountFieldNumber;
#endif  // !_MSC_VER

pet_kill_count_msg::pet_kill_count_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_kill_count_msg::InitAsDefaultInstance() {
}

pet_kill_count_msg::pet_kill_count_msg(const pet_kill_count_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_kill_count_msg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_kill_count_msg::~pet_kill_count_msg() {
  SharedDtor();
}

void pet_kill_count_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_kill_count_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_kill_count_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_kill_count_msg_descriptor_;
}

const pet_kill_count_msg& pet_kill_count_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_kill_count_msg* pet_kill_count_msg::default_instance_ = NULL;

pet_kill_count_msg* pet_kill_count_msg::New() const {
  return new pet_kill_count_msg;
}

void pet_kill_count_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_kill_count_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_kill_count_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_kill_count_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_kill_count_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_kill_count_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_kill_count_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_kill_count_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_kill_count_msg::MergeFrom(const pet_kill_count_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_kill_count_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_kill_count_msg::CopyFrom(const pet_kill_count_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_kill_count_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_kill_count_msg::Swap(pet_kill_count_msg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_kill_count_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_kill_count_msg_descriptor_;
  metadata.reflection = pet_kill_count_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_change_mode_req::kMFieldNumber;
const int pet_change_mode_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_change_mode_req::pet_change_mode_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_change_mode_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_change_mode_req::pet_change_mode_req(const pet_change_mode_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_change_mode_req::SharedCtor() {
  _cached_size_ = 0;
  m_ = 1;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_change_mode_req::~pet_change_mode_req() {
  SharedDtor();
}

void pet_change_mode_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_change_mode_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_change_mode_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_change_mode_req_descriptor_;
}

const pet_change_mode_req& pet_change_mode_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_change_mode_req* pet_change_mode_req::default_instance_ = NULL;

pet_change_mode_req* pet_change_mode_req::New() const {
  return new pet_change_mode_req;
}

void pet_change_mode_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ = 1;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_change_mode_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.PET_MODE m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_MODE_IsValid(value)) {
            set_m(static_cast< ::client::PET_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_change_mode_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.PET_MODE m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_change_mode_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.PET_MODE m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_change_mode_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.PET_MODE m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_change_mode_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_change_mode_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_change_mode_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_change_mode_req::MergeFrom(const pet_change_mode_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_change_mode_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_change_mode_req::CopyFrom(const pet_change_mode_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_change_mode_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_change_mode_req::Swap(pet_change_mode_req* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_change_mode_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_change_mode_req_descriptor_;
  metadata.reflection = pet_change_mode_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_change_mode_rsp::kMFieldNumber;
#endif  // !_MSC_VER

pet_change_mode_rsp::pet_change_mode_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_change_mode_rsp::InitAsDefaultInstance() {
}

pet_change_mode_rsp::pet_change_mode_rsp(const pet_change_mode_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_change_mode_rsp::SharedCtor() {
  _cached_size_ = 0;
  m_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_change_mode_rsp::~pet_change_mode_rsp() {
  SharedDtor();
}

void pet_change_mode_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_change_mode_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_change_mode_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_change_mode_rsp_descriptor_;
}

const pet_change_mode_rsp& pet_change_mode_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_change_mode_rsp* pet_change_mode_rsp::default_instance_ = NULL;

pet_change_mode_rsp* pet_change_mode_rsp::New() const {
  return new pet_change_mode_rsp;
}

void pet_change_mode_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_change_mode_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.PET_MODE m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_MODE_IsValid(value)) {
            set_m(static_cast< ::client::PET_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_change_mode_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.PET_MODE m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_change_mode_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.PET_MODE m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_change_mode_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.PET_MODE m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_change_mode_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_change_mode_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_change_mode_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_change_mode_rsp::MergeFrom(const pet_change_mode_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_change_mode_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_change_mode_rsp::CopyFrom(const pet_change_mode_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_change_mode_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_change_mode_rsp::Swap(pet_change_mode_rsp* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_change_mode_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_change_mode_rsp_descriptor_;
  metadata.reflection = pet_change_mode_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_id_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_id_rsp::pet_id_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_id_rsp::InitAsDefaultInstance() {
  pet_info_ = const_cast< ::client::pet_db_info*>(&::client::pet_db_info::default_instance());
}

pet_id_rsp::pet_id_rsp(const pet_id_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_id_rsp::SharedCtor() {
  _cached_size_ = 0;
  pet_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_id_rsp::~pet_id_rsp() {
  SharedDtor();
}

void pet_id_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_info_;
  }
}

void pet_id_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_id_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_id_rsp_descriptor_;
}

const pet_id_rsp& pet_id_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_id_rsp* pet_id_rsp::default_instance_ = NULL;

pet_id_rsp* pet_id_rsp::New() const {
  return new pet_id_rsp;
}

void pet_id_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pet_info()) {
      if (pet_info_ != NULL) pet_info_->::client::pet_db_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_id_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.pet_db_info pet_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_id_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.pet_db_info pet_info = 1;
  if (has_pet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_id_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.pet_db_info pet_info = 1;
  if (has_pet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_id_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.pet_db_info pet_info = 1;
    if (has_pet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_id_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_id_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_id_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_id_rsp::MergeFrom(const pet_id_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_info()) {
      mutable_pet_info()->::client::pet_db_info::MergeFrom(from.pet_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_id_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_id_rsp::CopyFrom(const pet_id_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_id_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pet_info()) {
    if (!this->pet_info().IsInitialized()) return false;
  }
  return true;
}

void pet_id_rsp::Swap(pet_id_rsp* other) {
  if (other != this) {
    std::swap(pet_info_, other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_id_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_id_rsp_descriptor_;
  metadata.reflection = pet_id_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_attr::kIdFieldNumber;
const int pet_fight_attr::kNumFieldNumber;
#endif  // !_MSC_VER

pet_fight_attr::pet_fight_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_attr::InitAsDefaultInstance() {
}

pet_fight_attr::pet_fight_attr(const pet_fight_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_attr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_attr::~pet_fight_attr() {
  SharedDtor();
}

void pet_fight_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_fight_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_attr_descriptor_;
}

const pet_fight_attr& pet_fight_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_fight_attr* pet_fight_attr::default_instance_ = NULL;

pet_fight_attr* pet_fight_attr::New() const {
  return new pet_fight_attr;
}

void pet_fight_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_attr::MergeFrom(const pet_fight_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_attr::CopyFrom(const pet_fight_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_fight_attr::Swap(pet_fight_attr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_attr_descriptor_;
  metadata.reflection = pet_fight_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_db_info::kPetIdFieldNumber;
const int pet_db_info::kPetLevelFieldNumber;
const int pet_db_info::kPetExpFieldNumber;
const int pet_db_info::kCurHpFieldNumber;
const int pet_db_info::kStatusFieldNumber;
const int pet_db_info::kLingeringCountFieldNumber;
const int pet_db_info::kMagicStarFieldNumber;
const int pet_db_info::kDebrisExpFieldNumber;
const int pet_db_info::kPfaFieldNumber;
const int pet_db_info::kMaxHpFieldNumber;
const int pet_db_info::kLevelsStatusFieldNumber;
#endif  // !_MSC_VER

pet_db_info::pet_db_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_db_info::InitAsDefaultInstance() {
}

pet_db_info::pet_db_info(const pet_db_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_db_info::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  pet_level_ = 0u;
  pet_exp_ = 0u;
  cur_hp_ = 0u;
  status_ = 0u;
  lingering_count_ = 0u;
  magic_star_ = 0u;
  debris_exp_ = 0u;
  max_hp_ = 0u;
  levels_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_db_info::~pet_db_info() {
  SharedDtor();
}

void pet_db_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_db_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_db_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_db_info_descriptor_;
}

const pet_db_info& pet_db_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_db_info* pet_db_info::default_instance_ = NULL;

pet_db_info* pet_db_info::New() const {
  return new pet_db_info;
}

void pet_db_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    pet_level_ = 0u;
    pet_exp_ = 0u;
    cur_hp_ = 0u;
    status_ = 0u;
    lingering_count_ = 0u;
    magic_star_ = 0u;
    debris_exp_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    max_hp_ = 0u;
    levels_status_ = 0u;
  }
  pfa_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_db_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_level;
        break;
      }

      // required uint32 pet_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_level_)));
          set_has_pet_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_exp;
        break;
      }

      // required uint32 pet_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_exp_)));
          set_has_pet_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_hp;
        break;
      }

      // required uint32 cur_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lingering_count;
        break;
      }

      // required uint32 lingering_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lingering_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lingering_count_)));
          set_has_lingering_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_magic_star;
        break;
      }

      // required uint32 magic_star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_star_)));
          set_has_magic_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_debris_exp;
        break;
      }

      // required uint32 debris_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debris_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debris_exp_)));
          set_has_debris_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pfa;
        break;
      }

      // repeated .client.pet_fight_attr pfa = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pfa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pfa;
        if (input->ExpectTag(80)) goto parse_max_hp;
        break;
      }

      // optional uint32 max_hp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_levels_status;
        break;
      }

      // optional uint32 levels_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levels_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levels_status_)));
          set_has_levels_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_db_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // required uint32 pet_level = 2;
  if (has_pet_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_level(), output);
  }

  // required uint32 pet_exp = 3;
  if (has_pet_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pet_exp(), output);
  }

  // required uint32 cur_hp = 4;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_hp(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 lingering_count = 6;
  if (has_lingering_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lingering_count(), output);
  }

  // required uint32 magic_star = 7;
  if (has_magic_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magic_star(), output);
  }

  // required uint32 debris_exp = 8;
  if (has_debris_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->debris_exp(), output);
  }

  // repeated .client.pet_fight_attr pfa = 9;
  for (int i = 0; i < this->pfa_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pfa(i), output);
  }

  // optional uint32 max_hp = 10;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_hp(), output);
  }

  // optional uint32 levels_status = 11;
  if (has_levels_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->levels_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_db_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // required uint32 pet_level = 2;
  if (has_pet_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_level(), target);
  }

  // required uint32 pet_exp = 3;
  if (has_pet_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pet_exp(), target);
  }

  // required uint32 cur_hp = 4;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_hp(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 lingering_count = 6;
  if (has_lingering_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lingering_count(), target);
  }

  // required uint32 magic_star = 7;
  if (has_magic_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magic_star(), target);
  }

  // required uint32 debris_exp = 8;
  if (has_debris_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->debris_exp(), target);
  }

  // repeated .client.pet_fight_attr pfa = 9;
  for (int i = 0; i < this->pfa_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pfa(i), target);
  }

  // optional uint32 max_hp = 10;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_hp(), target);
  }

  // optional uint32 levels_status = 11;
  if (has_levels_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->levels_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_db_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 pet_level = 2;
    if (has_pet_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_level());
    }

    // required uint32 pet_exp = 3;
    if (has_pet_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_exp());
    }

    // required uint32 cur_hp = 4;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_hp());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 lingering_count = 6;
    if (has_lingering_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lingering_count());
    }

    // required uint32 magic_star = 7;
    if (has_magic_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_star());
    }

    // required uint32 debris_exp = 8;
    if (has_debris_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debris_exp());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 max_hp = 10;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }

    // optional uint32 levels_status = 11;
    if (has_levels_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levels_status());
    }

  }
  // repeated .client.pet_fight_attr pfa = 9;
  total_size += 1 * this->pfa_size();
  for (int i = 0; i < this->pfa_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pfa(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_db_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_db_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_db_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_db_info::MergeFrom(const pet_db_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  pfa_.MergeFrom(from.pfa_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_level()) {
      set_pet_level(from.pet_level());
    }
    if (from.has_pet_exp()) {
      set_pet_exp(from.pet_exp());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_lingering_count()) {
      set_lingering_count(from.lingering_count());
    }
    if (from.has_magic_star()) {
      set_magic_star(from.magic_star());
    }
    if (from.has_debris_exp()) {
      set_debris_exp(from.debris_exp());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_levels_status()) {
      set_levels_status(from.levels_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_db_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_db_info::CopyFrom(const pet_db_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_db_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  for (int i = 0; i < pfa_size(); i++) {
    if (!this->pfa(i).IsInitialized()) return false;
  }
  return true;
}

void pet_db_info::Swap(pet_db_info* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_level_, other->pet_level_);
    std::swap(pet_exp_, other->pet_exp_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(status_, other->status_);
    std::swap(lingering_count_, other->lingering_count_);
    std::swap(magic_star_, other->magic_star_);
    std::swap(debris_exp_, other->debris_exp_);
    pfa_.Swap(&other->pfa_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(levels_status_, other->levels_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_db_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_db_info_descriptor_;
  metadata.reflection = pet_db_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pets_msg::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pets_msg::pets_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pets_msg::InitAsDefaultInstance() {
}

pets_msg::pets_msg(const pets_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pets_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pets_msg::~pets_msg() {
  SharedDtor();
}

void pets_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pets_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pets_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pets_msg_descriptor_;
}

const pets_msg& pets_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pets_msg* pets_msg::default_instance_ = NULL;

pets_msg* pets_msg::New() const {
  return new pets_msg;
}

void pets_msg::Clear() {
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pets_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.pet_db_info pet_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pets_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.pet_db_info pet_info = 1;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pets_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.pet_db_info pet_info = 1;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pets_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.pet_db_info pet_info = 1;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pets_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pets_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pets_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pets_msg::MergeFrom(const pets_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pets_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pets_msg::CopyFrom(const pets_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pets_msg::IsInitialized() const {

  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pets_msg::Swap(pets_msg* other) {
  if (other != this) {
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pets_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pets_msg_descriptor_;
  metadata.reflection = pets_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_recruit_req::kPetIdFieldNumber;
const int pet_recruit_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_recruit_req::pet_recruit_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_recruit_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_recruit_req::pet_recruit_req(const pet_recruit_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_recruit_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_recruit_req::~pet_recruit_req() {
  SharedDtor();
}

void pet_recruit_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_recruit_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_recruit_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_recruit_req_descriptor_;
}

const pet_recruit_req& pet_recruit_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_recruit_req* pet_recruit_req::default_instance_ = NULL;

pet_recruit_req* pet_recruit_req::New() const {
  return new pet_recruit_req;
}

void pet_recruit_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_recruit_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_recruit_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_recruit_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_recruit_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_recruit_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_recruit_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_recruit_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_recruit_req::MergeFrom(const pet_recruit_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_recruit_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_recruit_req::CopyFrom(const pet_recruit_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_recruit_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_recruit_req::Swap(pet_recruit_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_recruit_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_recruit_req_descriptor_;
  metadata.reflection = pet_recruit_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_recruit_rsp::kRecruitTypeFieldNumber;
const int pet_recruit_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_recruit_rsp::pet_recruit_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_recruit_rsp::InitAsDefaultInstance() {
  pet_info_ = const_cast< ::client::pet_db_info*>(&::client::pet_db_info::default_instance());
}

pet_recruit_rsp::pet_recruit_rsp(const pet_recruit_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_recruit_rsp::SharedCtor() {
  _cached_size_ = 0;
  recruit_type_ = 0u;
  pet_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_recruit_rsp::~pet_recruit_rsp() {
  SharedDtor();
}

void pet_recruit_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_info_;
  }
}

void pet_recruit_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_recruit_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_recruit_rsp_descriptor_;
}

const pet_recruit_rsp& pet_recruit_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_recruit_rsp* pet_recruit_rsp::default_instance_ = NULL;

pet_recruit_rsp* pet_recruit_rsp::New() const {
  return new pet_recruit_rsp;
}

void pet_recruit_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recruit_type_ = 0u;
    if (has_pet_info()) {
      if (pet_info_ != NULL) pet_info_->::client::pet_db_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_recruit_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recruit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruit_type_)));
          set_has_recruit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // optional .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_recruit_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 recruit_type = 1;
  if (has_recruit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recruit_type(), output);
  }

  // optional .client.pet_db_info pet_info = 2;
  if (has_pet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_recruit_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 recruit_type = 1;
  if (has_recruit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recruit_type(), target);
  }

  // optional .client.pet_db_info pet_info = 2;
  if (has_pet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_recruit_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 recruit_type = 1;
    if (has_recruit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruit_type());
    }

    // optional .client.pet_db_info pet_info = 2;
    if (has_pet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_recruit_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_recruit_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_recruit_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_recruit_rsp::MergeFrom(const pet_recruit_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recruit_type()) {
      set_recruit_type(from.recruit_type());
    }
    if (from.has_pet_info()) {
      mutable_pet_info()->::client::pet_db_info::MergeFrom(from.pet_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_recruit_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_recruit_rsp::CopyFrom(const pet_recruit_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_recruit_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pet_info()) {
    if (!this->pet_info().IsInitialized()) return false;
  }
  return true;
}

void pet_recruit_rsp::Swap(pet_recruit_rsp* other) {
  if (other != this) {
    std::swap(recruit_type_, other->recruit_type_);
    std::swap(pet_info_, other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_recruit_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_recruit_rsp_descriptor_;
  metadata.reflection = pet_recruit_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_lingering_req::kPetIdFieldNumber;
const int pet_lingering_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_lingering_req::pet_lingering_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_lingering_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_lingering_req::pet_lingering_req(const pet_lingering_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_lingering_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_lingering_req::~pet_lingering_req() {
  SharedDtor();
}

void pet_lingering_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_lingering_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_lingering_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_lingering_req_descriptor_;
}

const pet_lingering_req& pet_lingering_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_lingering_req* pet_lingering_req::default_instance_ = NULL;

pet_lingering_req* pet_lingering_req::New() const {
  return new pet_lingering_req;
}

void pet_lingering_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_lingering_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_lingering_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_lingering_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_lingering_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_lingering_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_lingering_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_lingering_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_lingering_req::MergeFrom(const pet_lingering_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_lingering_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_lingering_req::CopyFrom(const pet_lingering_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_lingering_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_lingering_req::Swap(pet_lingering_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_lingering_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_lingering_req_descriptor_;
  metadata.reflection = pet_lingering_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* pet_lingering_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_lingering_rsp_result_descriptor_;
}
bool pet_lingering_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const pet_lingering_rsp_result pet_lingering_rsp::success;
const pet_lingering_rsp_result pet_lingering_rsp::failed;
const pet_lingering_rsp_result pet_lingering_rsp::result_MIN;
const pet_lingering_rsp_result pet_lingering_rsp::result_MAX;
const int pet_lingering_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int pet_lingering_rsp::kResultTypeFieldNumber;
const int pet_lingering_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_lingering_rsp::pet_lingering_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_lingering_rsp::InitAsDefaultInstance() {
}

pet_lingering_rsp::pet_lingering_rsp(const pet_lingering_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_lingering_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_lingering_rsp::~pet_lingering_rsp() {
  SharedDtor();
}

void pet_lingering_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_lingering_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_lingering_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_lingering_rsp_descriptor_;
}

const pet_lingering_rsp& pet_lingering_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_lingering_rsp* pet_lingering_rsp::default_instance_ = NULL;

pet_lingering_rsp* pet_lingering_rsp::New() const {
  return new pet_lingering_rsp;
}

void pet_lingering_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 1;
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_lingering_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.pet_lingering_rsp.result result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::pet_lingering_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::pet_lingering_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_lingering_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.pet_lingering_rsp.result result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_lingering_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.pet_lingering_rsp.result result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_lingering_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.pet_lingering_rsp.result result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_lingering_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_lingering_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_lingering_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_lingering_rsp::MergeFrom(const pet_lingering_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_lingering_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_lingering_rsp::CopyFrom(const pet_lingering_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_lingering_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_lingering_rsp::Swap(pet_lingering_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_lingering_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_lingering_rsp_descriptor_;
  metadata.reflection = pet_lingering_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_levelup_req::kPetIdFieldNumber;
const int pet_levelup_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_levelup_req::pet_levelup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_levelup_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_levelup_req::pet_levelup_req(const pet_levelup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_levelup_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_levelup_req::~pet_levelup_req() {
  SharedDtor();
}

void pet_levelup_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_levelup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_levelup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_levelup_req_descriptor_;
}

const pet_levelup_req& pet_levelup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_levelup_req* pet_levelup_req::default_instance_ = NULL;

pet_levelup_req* pet_levelup_req::New() const {
  return new pet_levelup_req;
}

void pet_levelup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_levelup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_levelup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_levelup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_levelup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_levelup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_levelup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_levelup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_levelup_req::MergeFrom(const pet_levelup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_levelup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_levelup_req::CopyFrom(const pet_levelup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_levelup_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_levelup_req::Swap(pet_levelup_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_levelup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_levelup_req_descriptor_;
  metadata.reflection = pet_levelup_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* pet_levelup_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_levelup_rsp_result_descriptor_;
}
bool pet_levelup_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const pet_levelup_rsp_result pet_levelup_rsp::success;
const pet_levelup_rsp_result pet_levelup_rsp::failed;
const pet_levelup_rsp_result pet_levelup_rsp::result_MIN;
const pet_levelup_rsp_result pet_levelup_rsp::result_MAX;
const int pet_levelup_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int pet_levelup_rsp::kResultTypeFieldNumber;
const int pet_levelup_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_levelup_rsp::pet_levelup_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_levelup_rsp::InitAsDefaultInstance() {
}

pet_levelup_rsp::pet_levelup_rsp(const pet_levelup_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_levelup_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_levelup_rsp::~pet_levelup_rsp() {
  SharedDtor();
}

void pet_levelup_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_levelup_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_levelup_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_levelup_rsp_descriptor_;
}

const pet_levelup_rsp& pet_levelup_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_levelup_rsp* pet_levelup_rsp::default_instance_ = NULL;

pet_levelup_rsp* pet_levelup_rsp::New() const {
  return new pet_levelup_rsp;
}

void pet_levelup_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 1;
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_levelup_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.pet_levelup_rsp.result result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::pet_levelup_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::pet_levelup_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_levelup_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.pet_levelup_rsp.result result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_levelup_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.pet_levelup_rsp.result result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_levelup_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.pet_levelup_rsp.result result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_levelup_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_levelup_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_levelup_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_levelup_rsp::MergeFrom(const pet_levelup_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_levelup_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_levelup_rsp::CopyFrom(const pet_levelup_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_levelup_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_levelup_rsp::Swap(pet_levelup_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_levelup_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_levelup_rsp_descriptor_;
  metadata.reflection = pet_levelup_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_list_req::kUnixtimeFieldNumber;
const int pet_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_list_req::pet_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_list_req::pet_list_req(const pet_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_list_req::~pet_list_req() {
  SharedDtor();
}

void pet_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_list_req_descriptor_;
}

const pet_list_req& pet_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_list_req* pet_list_req::default_instance_ = NULL;

pet_list_req* pet_list_req::New() const {
  return new pet_list_req;
}

void pet_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_list_req::MergeFrom(const pet_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_list_req::CopyFrom(const pet_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_list_req::Swap(pet_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_list_req_descriptor_;
  metadata.reflection = pet_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_list_rsp::kRdFieldNumber;
const int pet_list_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_list_rsp::pet_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_list_rsp::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

pet_list_rsp::pet_list_rsp(const pet_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_list_rsp::~pet_list_rsp() {
  SharedDtor();
}

void pet_list_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void pet_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_list_rsp_descriptor_;
}

const pet_list_rsp& pet_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_list_rsp* pet_list_rsp::default_instance_ = NULL;

pet_list_rsp* pet_list_rsp::New() const {
  return new pet_list_rsp;
}

void pet_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_list_rsp::MergeFrom(const pet_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_list_rsp::CopyFrom(const pet_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_list_rsp::Swap(pet_list_rsp* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_list_rsp_descriptor_;
  metadata.reflection = pet_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rest_or_fight_req::kPetIdFieldNumber;
const int pet_rest_or_fight_req::kOperateTypeFieldNumber;
const int pet_rest_or_fight_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_rest_or_fight_req::pet_rest_or_fight_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rest_or_fight_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_rest_or_fight_req::pet_rest_or_fight_req(const pet_rest_or_fight_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rest_or_fight_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  operate_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rest_or_fight_req::~pet_rest_or_fight_req() {
  SharedDtor();
}

void pet_rest_or_fight_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_rest_or_fight_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rest_or_fight_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rest_or_fight_req_descriptor_;
}

const pet_rest_or_fight_req& pet_rest_or_fight_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_rest_or_fight_req* pet_rest_or_fight_req::default_instance_ = NULL;

pet_rest_or_fight_req* pet_rest_or_fight_req::New() const {
  return new pet_rest_or_fight_req;
}

void pet_rest_or_fight_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    operate_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rest_or_fight_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // required uint32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rest_or_fight_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rest_or_fight_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rest_or_fight_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rest_or_fight_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rest_or_fight_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rest_or_fight_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rest_or_fight_req::MergeFrom(const pet_rest_or_fight_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rest_or_fight_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rest_or_fight_req::CopyFrom(const pet_rest_or_fight_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rest_or_fight_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_rest_or_fight_req::Swap(pet_rest_or_fight_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rest_or_fight_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rest_or_fight_req_descriptor_;
  metadata.reflection = pet_rest_or_fight_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rest_or_fight_rsp::kPetIdFieldNumber;
const int pet_rest_or_fight_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

pet_rest_or_fight_rsp::pet_rest_or_fight_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rest_or_fight_rsp::InitAsDefaultInstance() {
}

pet_rest_or_fight_rsp::pet_rest_or_fight_rsp(const pet_rest_or_fight_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rest_or_fight_rsp::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rest_or_fight_rsp::~pet_rest_or_fight_rsp() {
  SharedDtor();
}

void pet_rest_or_fight_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_rest_or_fight_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rest_or_fight_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rest_or_fight_rsp_descriptor_;
}

const pet_rest_or_fight_rsp& pet_rest_or_fight_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_rest_or_fight_rsp* pet_rest_or_fight_rsp::default_instance_ = NULL;

pet_rest_or_fight_rsp* pet_rest_or_fight_rsp::New() const {
  return new pet_rest_or_fight_rsp;
}

void pet_rest_or_fight_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rest_or_fight_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rest_or_fight_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rest_or_fight_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rest_or_fight_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rest_or_fight_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rest_or_fight_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rest_or_fight_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rest_or_fight_rsp::MergeFrom(const pet_rest_or_fight_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rest_or_fight_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rest_or_fight_rsp::CopyFrom(const pet_rest_or_fight_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rest_or_fight_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_rest_or_fight_rsp::Swap(pet_rest_or_fight_rsp* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rest_or_fight_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rest_or_fight_rsp_descriptor_;
  metadata.reflection = pet_rest_or_fight_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_resurgence_req::kPetIdFieldNumber;
const int pet_resurgence_req::kOperateTypeFieldNumber;
const int pet_resurgence_req::kResurgenceTypeFieldNumber;
const int pet_resurgence_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_resurgence_req::pet_resurgence_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_resurgence_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_resurgence_req::pet_resurgence_req(const pet_resurgence_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_resurgence_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  operate_type_ = 0u;
  resurgence_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_resurgence_req::~pet_resurgence_req() {
  SharedDtor();
}

void pet_resurgence_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_resurgence_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_resurgence_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_resurgence_req_descriptor_;
}

const pet_resurgence_req& pet_resurgence_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_resurgence_req* pet_resurgence_req::default_instance_ = NULL;

pet_resurgence_req* pet_resurgence_req::New() const {
  return new pet_resurgence_req;
}

void pet_resurgence_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    operate_type_ = 0u;
    resurgence_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_resurgence_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // required uint32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resurgence_type;
        break;
      }

      // required uint32 resurgence_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resurgence_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resurgence_type_)));
          set_has_resurgence_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_resurgence_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate_type(), output);
  }

  // required uint32 resurgence_type = 3;
  if (has_resurgence_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resurgence_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_resurgence_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate_type(), target);
  }

  // required uint32 resurgence_type = 3;
  if (has_resurgence_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resurgence_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_resurgence_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // required uint32 resurgence_type = 3;
    if (has_resurgence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resurgence_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_resurgence_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_resurgence_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_resurgence_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_resurgence_req::MergeFrom(const pet_resurgence_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_resurgence_type()) {
      set_resurgence_type(from.resurgence_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_resurgence_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_resurgence_req::CopyFrom(const pet_resurgence_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_resurgence_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pet_resurgence_req::Swap(pet_resurgence_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(resurgence_type_, other->resurgence_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_resurgence_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_resurgence_req_descriptor_;
  metadata.reflection = pet_resurgence_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_resurgence_rsp::kResultTypeFieldNumber;
const int pet_resurgence_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_resurgence_rsp::pet_resurgence_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_resurgence_rsp::InitAsDefaultInstance() {
}

pet_resurgence_rsp::pet_resurgence_rsp(const pet_resurgence_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_resurgence_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_resurgence_rsp::~pet_resurgence_rsp() {
  SharedDtor();
}

void pet_resurgence_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_resurgence_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_resurgence_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_resurgence_rsp_descriptor_;
}

const pet_resurgence_rsp& pet_resurgence_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_resurgence_rsp* pet_resurgence_rsp::default_instance_ = NULL;

pet_resurgence_rsp* pet_resurgence_rsp::New() const {
  return new pet_resurgence_rsp;
}

void pet_resurgence_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_resurgence_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_resurgence_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_resurgence_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_resurgence_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_resurgence_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_resurgence_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_resurgence_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_resurgence_rsp::MergeFrom(const pet_resurgence_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_resurgence_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_resurgence_rsp::CopyFrom(const pet_resurgence_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_resurgence_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_resurgence_rsp::Swap(pet_resurgence_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_resurgence_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_resurgence_rsp_descriptor_;
  metadata.reflection = pet_resurgence_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_info_req::kPetIdFieldNumber;
const int pet_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_info_req::pet_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_info_req::pet_info_req(const pet_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_info_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_info_req::~pet_info_req() {
  SharedDtor();
}

void pet_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_info_req_descriptor_;
}

const pet_info_req& pet_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_info_req* pet_info_req::default_instance_ = NULL;

pet_info_req* pet_info_req::New() const {
  return new pet_info_req;
}

void pet_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_info_req::MergeFrom(const pet_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_info_req::CopyFrom(const pet_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_info_req::Swap(pet_info_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_info_req_descriptor_;
  metadata.reflection = pet_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_info_rsp::kRdFieldNumber;
const int pet_info_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

pet_info_rsp::pet_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_info_rsp::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

pet_info_rsp::pet_info_rsp(const pet_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_info_rsp::~pet_info_rsp() {
  SharedDtor();
}

void pet_info_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void pet_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_info_rsp_descriptor_;
}

const pet_info_rsp& pet_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_info_rsp* pet_info_rsp::default_instance_ = NULL;

pet_info_rsp* pet_info_rsp::New() const {
  return new pet_info_rsp;
}

void pet_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_info_rsp::MergeFrom(const pet_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_info_rsp::CopyFrom(const pet_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_info_rsp::Swap(pet_info_rsp* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_info_rsp_descriptor_;
  metadata.reflection = pet_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int magic_upgrade_req::kPetIdFieldNumber;
const int magic_upgrade_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

magic_upgrade_req::magic_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void magic_upgrade_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

magic_upgrade_req::magic_upgrade_req(const magic_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void magic_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

magic_upgrade_req::~magic_upgrade_req() {
  SharedDtor();
}

void magic_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void magic_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* magic_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return magic_upgrade_req_descriptor_;
}

const magic_upgrade_req& magic_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

magic_upgrade_req* magic_upgrade_req::default_instance_ = NULL;

magic_upgrade_req* magic_upgrade_req::New() const {
  return new magic_upgrade_req;
}

void magic_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool magic_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void magic_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* magic_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int magic_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void magic_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const magic_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const magic_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void magic_upgrade_req::MergeFrom(const magic_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void magic_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void magic_upgrade_req::CopyFrom(const magic_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool magic_upgrade_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void magic_upgrade_req::Swap(magic_upgrade_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata magic_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = magic_upgrade_req_descriptor_;
  metadata.reflection = magic_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int magic_upgrade_rsp::kResultTypeFieldNumber;
const int magic_upgrade_rsp::kPetInfoFieldNumber;
#endif  // !_MSC_VER

magic_upgrade_rsp::magic_upgrade_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void magic_upgrade_rsp::InitAsDefaultInstance() {
}

magic_upgrade_rsp::magic_upgrade_rsp(const magic_upgrade_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void magic_upgrade_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

magic_upgrade_rsp::~magic_upgrade_rsp() {
  SharedDtor();
}

void magic_upgrade_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void magic_upgrade_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* magic_upgrade_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return magic_upgrade_rsp_descriptor_;
}

const magic_upgrade_rsp& magic_upgrade_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

magic_upgrade_rsp* magic_upgrade_rsp::default_instance_ = NULL;

magic_upgrade_rsp* magic_upgrade_rsp::New() const {
  return new magic_upgrade_rsp;
}

void magic_upgrade_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  pet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool magic_upgrade_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        break;
      }

      // repeated .client.pet_db_info pet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void magic_upgrade_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* magic_upgrade_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // repeated .client.pet_db_info pet_info = 2;
  for (int i = 0; i < this->pet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int magic_upgrade_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  // repeated .client.pet_db_info pet_info = 2;
  total_size += 1 * this->pet_info_size();
  for (int i = 0; i < this->pet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void magic_upgrade_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const magic_upgrade_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const magic_upgrade_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void magic_upgrade_rsp::MergeFrom(const magic_upgrade_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_info_.MergeFrom(from.pet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void magic_upgrade_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void magic_upgrade_rsp::CopyFrom(const magic_upgrade_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool magic_upgrade_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pet_info_size(); i++) {
    if (!this->pet_info(i).IsInitialized()) return false;
  }
  return true;
}

void magic_upgrade_rsp::Swap(magic_upgrade_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    pet_info_.Swap(&other->pet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata magic_upgrade_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = magic_upgrade_rsp_descriptor_;
  metadata.reflection = magic_upgrade_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_skill_rpgrate_req::kSkillIdFieldNumber;
const int pet_skill_rpgrate_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_skill_rpgrate_req::pet_skill_rpgrate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_skill_rpgrate_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_skill_rpgrate_req::pet_skill_rpgrate_req(const pet_skill_rpgrate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_skill_rpgrate_req::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_skill_rpgrate_req::~pet_skill_rpgrate_req() {
  SharedDtor();
}

void pet_skill_rpgrate_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_skill_rpgrate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_skill_rpgrate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_skill_rpgrate_req_descriptor_;
}

const pet_skill_rpgrate_req& pet_skill_rpgrate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_skill_rpgrate_req* pet_skill_rpgrate_req::default_instance_ = NULL;

pet_skill_rpgrate_req* pet_skill_rpgrate_req::New() const {
  return new pet_skill_rpgrate_req;
}

void pet_skill_rpgrate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_skill_rpgrate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_skill_rpgrate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_skill_rpgrate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_skill_rpgrate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_skill_rpgrate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_skill_rpgrate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_skill_rpgrate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_skill_rpgrate_req::MergeFrom(const pet_skill_rpgrate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_skill_rpgrate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_skill_rpgrate_req::CopyFrom(const pet_skill_rpgrate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_skill_rpgrate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_skill_rpgrate_req::Swap(pet_skill_rpgrate_req* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_skill_rpgrate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_skill_rpgrate_req_descriptor_;
  metadata.reflection = pet_skill_rpgrate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_mode_change_req::kPetIdFieldNumber;
const int pet_fight_mode_change_req::kIsFirstFieldNumber;
const int pet_fight_mode_change_req::kFlagTypeFieldNumber;
const int pet_fight_mode_change_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_fight_mode_change_req::pet_fight_mode_change_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_mode_change_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_fight_mode_change_req::pet_fight_mode_change_req(const pet_fight_mode_change_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_mode_change_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  is_first_ = 0u;
  flag_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_mode_change_req::~pet_fight_mode_change_req() {
  SharedDtor();
}

void pet_fight_mode_change_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_fight_mode_change_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_mode_change_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_mode_change_req_descriptor_;
}

const pet_fight_mode_change_req& pet_fight_mode_change_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_fight_mode_change_req* pet_fight_mode_change_req::default_instance_ = NULL;

pet_fight_mode_change_req* pet_fight_mode_change_req::New() const {
  return new pet_fight_mode_change_req;
}

void pet_fight_mode_change_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    is_first_ = 0u;
    flag_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_mode_change_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_first;
        break;
      }

      // optional uint32 is_first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_first_)));
          set_has_is_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_type;
        break;
      }

      // optional uint32 flag_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_type_)));
          set_has_flag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_mode_change_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional uint32 is_first = 2;
  if (has_is_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_first(), output);
  }

  // optional uint32 flag_type = 3;
  if (has_flag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_mode_change_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional uint32 is_first = 2;
  if (has_is_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_first(), target);
  }

  // optional uint32 flag_type = 3;
  if (has_flag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_mode_change_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional uint32 is_first = 2;
    if (has_is_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_first());
    }

    // optional uint32 flag_type = 3;
    if (has_flag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_mode_change_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_mode_change_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_mode_change_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_mode_change_req::MergeFrom(const pet_fight_mode_change_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_is_first()) {
      set_is_first(from.is_first());
    }
    if (from.has_flag_type()) {
      set_flag_type(from.flag_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_mode_change_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_mode_change_req::CopyFrom(const pet_fight_mode_change_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_mode_change_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_fight_mode_change_req::Swap(pet_fight_mode_change_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(is_first_, other->is_first_);
    std::swap(flag_type_, other->flag_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_mode_change_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_mode_change_req_descriptor_;
  metadata.reflection = pet_fight_mode_change_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_info::kPetIdFieldNumber;
const int pet_fight_info::kPetStatusFieldNumber;
#endif  // !_MSC_VER

pet_fight_info::pet_fight_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_info::InitAsDefaultInstance() {
}

pet_fight_info::pet_fight_info(const pet_fight_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_info::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  pet_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_info::~pet_fight_info() {
  SharedDtor();
}

void pet_fight_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_fight_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_info_descriptor_;
}

const pet_fight_info& pet_fight_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_fight_info* pet_fight_info::default_instance_ = NULL;

pet_fight_info* pet_fight_info::New() const {
  return new pet_fight_info;
}

void pet_fight_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    pet_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_status;
        break;
      }

      // optional uint32 pet_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_status_)));
          set_has_pet_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional uint32 pet_status = 2;
  if (has_pet_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional uint32 pet_status = 2;
  if (has_pet_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional uint32 pet_status = 2;
    if (has_pet_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_info::MergeFrom(const pet_fight_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_status()) {
      set_pet_status(from.pet_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_info::CopyFrom(const pet_fight_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_info::IsInitialized() const {

  return true;
}

void pet_fight_info::Swap(pet_fight_info* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_status_, other->pet_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_info_descriptor_;
  metadata.reflection = pet_fight_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_mode_change_rsp::kResultTypeFieldNumber;
const int pet_fight_mode_change_rsp::kInfoFieldNumber;
const int pet_fight_mode_change_rsp::kFlagTypeFieldNumber;
#endif  // !_MSC_VER

pet_fight_mode_change_rsp::pet_fight_mode_change_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_mode_change_rsp::InitAsDefaultInstance() {
}

pet_fight_mode_change_rsp::pet_fight_mode_change_rsp(const pet_fight_mode_change_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_mode_change_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  flag_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_mode_change_rsp::~pet_fight_mode_change_rsp() {
  SharedDtor();
}

void pet_fight_mode_change_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_fight_mode_change_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_mode_change_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_mode_change_rsp_descriptor_;
}

const pet_fight_mode_change_rsp& pet_fight_mode_change_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_fight_mode_change_rsp* pet_fight_mode_change_rsp::default_instance_ = NULL;

pet_fight_mode_change_rsp* pet_fight_mode_change_rsp::New() const {
  return new pet_fight_mode_change_rsp;
}

void pet_fight_mode_change_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    flag_type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_mode_change_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.pet_fight_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_flag_type;
        break;
      }

      // optional uint32 flag_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_type_)));
          set_has_flag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_mode_change_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // repeated .client.pet_fight_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint32 flag_type = 3;
  if (has_flag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_mode_change_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // repeated .client.pet_fight_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint32 flag_type = 3;
  if (has_flag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_mode_change_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 flag_type = 3;
    if (has_flag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_type());
    }

  }
  // repeated .client.pet_fight_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_mode_change_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_mode_change_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_mode_change_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_mode_change_rsp::MergeFrom(const pet_fight_mode_change_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_flag_type()) {
      set_flag_type(from.flag_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_mode_change_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_mode_change_rsp::CopyFrom(const pet_fight_mode_change_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_mode_change_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_fight_mode_change_rsp::Swap(pet_fight_mode_change_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    info_.Swap(&other->info_);
    std::swap(flag_type_, other->flag_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_mode_change_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_mode_change_rsp_descriptor_;
  metadata.reflection = pet_fight_mode_change_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_levels_set_req::kPetIdFieldNumber;
const int pet_levels_set_req::kLevelsStatusFieldNumber;
const int pet_levels_set_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_levels_set_req::pet_levels_set_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_levels_set_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_levels_set_req::pet_levels_set_req(const pet_levels_set_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_levels_set_req::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  levels_status_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_levels_set_req::~pet_levels_set_req() {
  SharedDtor();
}

void pet_levels_set_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_levels_set_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_levels_set_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_levels_set_req_descriptor_;
}

const pet_levels_set_req& pet_levels_set_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_levels_set_req* pet_levels_set_req::default_instance_ = NULL;

pet_levels_set_req* pet_levels_set_req::New() const {
  return new pet_levels_set_req;
}

void pet_levels_set_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    levels_status_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_levels_set_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levels_status;
        break;
      }

      // required uint32 levels_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levels_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levels_status_)));
          set_has_levels_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_levels_set_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // required uint32 levels_status = 2;
  if (has_levels_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levels_status(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_levels_set_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // required uint32 levels_status = 2;
  if (has_levels_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levels_status(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_levels_set_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 levels_status = 2;
    if (has_levels_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levels_status());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_levels_set_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_levels_set_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_levels_set_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_levels_set_req::MergeFrom(const pet_levels_set_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_levels_status()) {
      set_levels_status(from.levels_status());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_levels_set_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_levels_set_req::CopyFrom(const pet_levels_set_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_levels_set_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_levels_set_req::Swap(pet_levels_set_req* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(levels_status_, other->levels_status_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_levels_set_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_levels_set_req_descriptor_;
  metadata.reflection = pet_levels_set_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_levels_set_rsp::kResultTypeFieldNumber;
const int pet_levels_set_rsp::kPetIdFieldNumber;
const int pet_levels_set_rsp::kLevelsStatusFieldNumber;
#endif  // !_MSC_VER

pet_levels_set_rsp::pet_levels_set_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_levels_set_rsp::InitAsDefaultInstance() {
}

pet_levels_set_rsp::pet_levels_set_rsp(const pet_levels_set_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_levels_set_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  pet_id_ = 0u;
  levels_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_levels_set_rsp::~pet_levels_set_rsp() {
  SharedDtor();
}

void pet_levels_set_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_levels_set_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_levels_set_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_levels_set_rsp_descriptor_;
}

const pet_levels_set_rsp& pet_levels_set_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epets_2eproto();
  return *default_instance_;
}

pet_levels_set_rsp* pet_levels_set_rsp::default_instance_ = NULL;

pet_levels_set_rsp* pet_levels_set_rsp::New() const {
  return new pet_levels_set_rsp;
}

void pet_levels_set_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    pet_id_ = 0u;
    levels_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_levels_set_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // required uint32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levels_status;
        break;
      }

      // required uint32 levels_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levels_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levels_status_)));
          set_has_levels_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_levels_set_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  // required uint32 levels_status = 3;
  if (has_levels_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->levels_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_levels_set_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  // required uint32 levels_status = 3;
  if (has_levels_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->levels_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_levels_set_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required uint32 levels_status = 3;
    if (has_levels_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levels_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_levels_set_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_levels_set_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_levels_set_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_levels_set_rsp::MergeFrom(const pet_levels_set_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_levels_status()) {
      set_levels_status(from.levels_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_levels_set_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_levels_set_rsp::CopyFrom(const pet_levels_set_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_levels_set_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pet_levels_set_rsp::Swap(pet_levels_set_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(levels_status_, other->levels_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_levels_set_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_levels_set_rsp_descriptor_;
  metadata.reflection = pet_levels_set_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
