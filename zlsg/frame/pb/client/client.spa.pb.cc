// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.spa.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.spa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* enter_spa_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_spa_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_spa_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_spa_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* leave_spa_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  leave_spa_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* spa_action_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  spa_action_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* spa_action_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  spa_action_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ENTER_SPA_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SPA_ACTION_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SPA_ACTION_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2espa_2eproto() {
  protobuf_AddDesc_client_2espa_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.spa.proto");
  GOOGLE_CHECK(file != NULL);
  enter_spa_req_descriptor_ = file->message_type(0);
  static const int enter_spa_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_req, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_req, svr_head_),
  };
  enter_spa_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_spa_req_descriptor_,
      enter_spa_req::default_instance_,
      enter_spa_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_spa_req));
  enter_spa_rsp_descriptor_ = file->message_type(1);
  static const int enter_spa_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_rsp, ret_),
  };
  enter_spa_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_spa_rsp_descriptor_,
      enter_spa_rsp::default_instance_,
      enter_spa_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_spa_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_spa_rsp));
  leave_spa_req_descriptor_ = file->message_type(2);
  static const int leave_spa_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_spa_req, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_spa_req, svr_head_),
  };
  leave_spa_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      leave_spa_req_descriptor_,
      leave_spa_req::default_instance_,
      leave_spa_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_spa_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_spa_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(leave_spa_req));
  spa_action_req_descriptor_ = file->message_type(3);
  static const int spa_action_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_req, dst_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_req, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_req, svr_head_),
  };
  spa_action_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      spa_action_req_descriptor_,
      spa_action_req::default_instance_,
      spa_action_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(spa_action_req));
  spa_action_msg_descriptor_ = file->message_type(4);
  static const int spa_action_msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, src_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, dst_role_id_),
  };
  spa_action_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      spa_action_msg_descriptor_,
      spa_action_msg::default_instance_,
      spa_action_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spa_action_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(spa_action_msg));
  ENTER_SPA_RET_E_descriptor_ = file->enum_type(0);
  SPA_ACTION_TYPE_E_descriptor_ = file->enum_type(1);
  SPA_ACTION_RET_E_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2espa_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_spa_req_descriptor_, &enter_spa_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_spa_rsp_descriptor_, &enter_spa_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    leave_spa_req_descriptor_, &leave_spa_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    spa_action_req_descriptor_, &spa_action_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    spa_action_msg_descriptor_, &spa_action_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2espa_2eproto() {
  delete enter_spa_req::default_instance_;
  delete enter_spa_req_reflection_;
  delete enter_spa_rsp::default_instance_;
  delete enter_spa_rsp_reflection_;
  delete leave_spa_req::default_instance_;
  delete leave_spa_req_reflection_;
  delete spa_action_req::default_instance_;
  delete spa_action_req_reflection_;
  delete spa_action_msg::default_instance_;
  delete spa_action_msg_reflection_;
}

void protobuf_AddDesc_client_2espa_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020client.spa.proto\022\006client\032\021client.comm."
    "proto\"D\n\renter_spa_req\022\013\n\003now\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head\"5\n\re"
    "nter_spa_rsp\022$\n\003ret\030\001 \002(\0162\027.client.ENTER"
    "_SPA_RET_E\"D\n\rleave_spa_req\022\013\n\003now\030\001 \002(\r"
    "\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head"
    "\"}\n\016spa_action_req\022\023\n\013dst_role_id\030\001 \002(\r\022"
    ".\n\013action_type\030\002 \002(\0162\031.client.SPA_ACTION"
    "_TYPE_E\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"\240\001\n\016spa_action_msg\022%\n\003ret\030\001 \002(\0162"
    "\030.client.SPA_ACTION_RET_E\022.\n\013action_type"
    "\030\002 \002(\0162\031.client.SPA_ACTION_TYPE_E\022\r\n\005tim"
    "es\030\003 \002(\r\022\023\n\013src_role_id\030\004 \001(\r\022\023\n\013dst_rol"
    "e_id\030\005 \001(\r*`\n\017ENTER_SPA_RET_E\022\020\n\014ESRE_SU"
    "CCESS\020\000\022\022\n\016ESRE_LVL_LIMIT\020\001\022\023\n\017ESRE_TIME"
    "_LIMIT\020\002\022\022\n\016ESRE_SYS_ERROR\020\003*T\n\021SPA_ACTI"
    "ON_TYPE_E\022\017\n\013SATE_XISHUI\020\001\022\017\n\013SATE_CUOBE"
    "I\020\002\022\r\n\tSATE_ANMO\020\003\022\016\n\nSATE_TIMES\020\004*H\n\020SP"
    "A_ACTION_RET_E\022\020\n\014SARE_SUCCESS\020\000\022\024\n\020SARE"
    "_TIMES_LIMIT\020\001\022\014\n\010SARE_OUT\020\002", 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.spa.proto", &protobuf_RegisterTypes);
  enter_spa_req::default_instance_ = new enter_spa_req();
  enter_spa_rsp::default_instance_ = new enter_spa_rsp();
  leave_spa_req::default_instance_ = new leave_spa_req();
  spa_action_req::default_instance_ = new spa_action_req();
  spa_action_msg::default_instance_ = new spa_action_msg();
  enter_spa_req::default_instance_->InitAsDefaultInstance();
  enter_spa_rsp::default_instance_->InitAsDefaultInstance();
  leave_spa_req::default_instance_->InitAsDefaultInstance();
  spa_action_req::default_instance_->InitAsDefaultInstance();
  spa_action_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2espa_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2espa_2eproto {
  StaticDescriptorInitializer_client_2espa_2eproto() {
    protobuf_AddDesc_client_2espa_2eproto();
  }
} static_descriptor_initializer_client_2espa_2eproto_;
const ::google::protobuf::EnumDescriptor* ENTER_SPA_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENTER_SPA_RET_E_descriptor_;
}
bool ENTER_SPA_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SPA_ACTION_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPA_ACTION_TYPE_E_descriptor_;
}
bool SPA_ACTION_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SPA_ACTION_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPA_ACTION_RET_E_descriptor_;
}
bool SPA_ACTION_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int enter_spa_req::kNowFieldNumber;
const int enter_spa_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

enter_spa_req::enter_spa_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_spa_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

enter_spa_req::enter_spa_req(const enter_spa_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_spa_req::SharedCtor() {
  _cached_size_ = 0;
  now_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_spa_req::~enter_spa_req() {
  SharedDtor();
}

void enter_spa_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void enter_spa_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_spa_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_spa_req_descriptor_;
}

const enter_spa_req& enter_spa_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2espa_2eproto();
  return *default_instance_;
}

enter_spa_req* enter_spa_req::default_instance_ = NULL;

enter_spa_req* enter_spa_req::New() const {
  return new enter_spa_req;
}

void enter_spa_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    now_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_spa_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_spa_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 now = 1;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->now(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_spa_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 now = 1;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->now(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_spa_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 now = 1;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_spa_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_spa_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_spa_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_spa_req::MergeFrom(const enter_spa_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_spa_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_spa_req::CopyFrom(const enter_spa_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_spa_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_spa_req::Swap(enter_spa_req* other) {
  if (other != this) {
    std::swap(now_, other->now_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_spa_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_spa_req_descriptor_;
  metadata.reflection = enter_spa_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_spa_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

enter_spa_rsp::enter_spa_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_spa_rsp::InitAsDefaultInstance() {
}

enter_spa_rsp::enter_spa_rsp(const enter_spa_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_spa_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_spa_rsp::~enter_spa_rsp() {
  SharedDtor();
}

void enter_spa_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_spa_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_spa_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_spa_rsp_descriptor_;
}

const enter_spa_rsp& enter_spa_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2espa_2eproto();
  return *default_instance_;
}

enter_spa_rsp* enter_spa_rsp::default_instance_ = NULL;

enter_spa_rsp* enter_spa_rsp::New() const {
  return new enter_spa_rsp;
}

void enter_spa_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_spa_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.ENTER_SPA_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::ENTER_SPA_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::ENTER_SPA_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_spa_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.ENTER_SPA_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_spa_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.ENTER_SPA_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_spa_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.ENTER_SPA_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_spa_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_spa_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_spa_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_spa_rsp::MergeFrom(const enter_spa_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_spa_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_spa_rsp::CopyFrom(const enter_spa_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_spa_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_spa_rsp::Swap(enter_spa_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_spa_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_spa_rsp_descriptor_;
  metadata.reflection = enter_spa_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int leave_spa_req::kNowFieldNumber;
const int leave_spa_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

leave_spa_req::leave_spa_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void leave_spa_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

leave_spa_req::leave_spa_req(const leave_spa_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void leave_spa_req::SharedCtor() {
  _cached_size_ = 0;
  now_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

leave_spa_req::~leave_spa_req() {
  SharedDtor();
}

void leave_spa_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void leave_spa_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* leave_spa_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return leave_spa_req_descriptor_;
}

const leave_spa_req& leave_spa_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2espa_2eproto();
  return *default_instance_;
}

leave_spa_req* leave_spa_req::default_instance_ = NULL;

leave_spa_req* leave_spa_req::New() const {
  return new leave_spa_req;
}

void leave_spa_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    now_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool leave_spa_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void leave_spa_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 now = 1;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->now(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* leave_spa_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 now = 1;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->now(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int leave_spa_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 now = 1;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void leave_spa_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const leave_spa_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const leave_spa_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void leave_spa_req::MergeFrom(const leave_spa_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void leave_spa_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void leave_spa_req::CopyFrom(const leave_spa_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leave_spa_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void leave_spa_req::Swap(leave_spa_req* other) {
  if (other != this) {
    std::swap(now_, other->now_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata leave_spa_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = leave_spa_req_descriptor_;
  metadata.reflection = leave_spa_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int spa_action_req::kDstRoleIdFieldNumber;
const int spa_action_req::kActionTypeFieldNumber;
const int spa_action_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

spa_action_req::spa_action_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void spa_action_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

spa_action_req::spa_action_req(const spa_action_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void spa_action_req::SharedCtor() {
  _cached_size_ = 0;
  dst_role_id_ = 0u;
  action_type_ = 1;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

spa_action_req::~spa_action_req() {
  SharedDtor();
}

void spa_action_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void spa_action_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* spa_action_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return spa_action_req_descriptor_;
}

const spa_action_req& spa_action_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2espa_2eproto();
  return *default_instance_;
}

spa_action_req* spa_action_req::default_instance_ = NULL;

spa_action_req* spa_action_req::New() const {
  return new spa_action_req;
}

void spa_action_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_role_id_ = 0u;
    action_type_ = 1;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool spa_action_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dst_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // required .client.SPA_ACTION_TYPE_E action_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SPA_ACTION_TYPE_E_IsValid(value)) {
            set_action_type(static_cast< ::client::SPA_ACTION_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void spa_action_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dst_role_id = 1;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dst_role_id(), output);
  }

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* spa_action_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dst_role_id = 1;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dst_role_id(), target);
  }

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int spa_action_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dst_role_id = 1;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_role_id());
    }

    // required .client.SPA_ACTION_TYPE_E action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void spa_action_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const spa_action_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const spa_action_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void spa_action_req::MergeFrom(const spa_action_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void spa_action_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void spa_action_req::CopyFrom(const spa_action_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spa_action_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void spa_action_req::Swap(spa_action_req* other) {
  if (other != this) {
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(action_type_, other->action_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata spa_action_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = spa_action_req_descriptor_;
  metadata.reflection = spa_action_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int spa_action_msg::kRetFieldNumber;
const int spa_action_msg::kActionTypeFieldNumber;
const int spa_action_msg::kTimesFieldNumber;
const int spa_action_msg::kSrcRoleIdFieldNumber;
const int spa_action_msg::kDstRoleIdFieldNumber;
#endif  // !_MSC_VER

spa_action_msg::spa_action_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void spa_action_msg::InitAsDefaultInstance() {
}

spa_action_msg::spa_action_msg(const spa_action_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void spa_action_msg::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  action_type_ = 1;
  times_ = 0u;
  src_role_id_ = 0u;
  dst_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

spa_action_msg::~spa_action_msg() {
  SharedDtor();
}

void spa_action_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void spa_action_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* spa_action_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return spa_action_msg_descriptor_;
}

const spa_action_msg& spa_action_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2espa_2eproto();
  return *default_instance_;
}

spa_action_msg* spa_action_msg::default_instance_ = NULL;

spa_action_msg* spa_action_msg::New() const {
  return new spa_action_msg;
}

void spa_action_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    action_type_ = 1;
    times_ = 0u;
    src_role_id_ = 0u;
    dst_role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool spa_action_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.SPA_ACTION_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SPA_ACTION_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::SPA_ACTION_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // required .client.SPA_ACTION_TYPE_E action_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SPA_ACTION_TYPE_E_IsValid(value)) {
            set_action_type(static_cast< ::client::SPA_ACTION_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // required uint32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_src_role_id;
        break;
      }

      // optional uint32 src_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_role_id_)));
          set_has_src_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dst_role_id;
        break;
      }

      // optional uint32 dst_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void spa_action_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.SPA_ACTION_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action_type(), output);
  }

  // required uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  // optional uint32 src_role_id = 4;
  if (has_src_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->src_role_id(), output);
  }

  // optional uint32 dst_role_id = 5;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dst_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* spa_action_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.SPA_ACTION_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action_type(), target);
  }

  // required uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  // optional uint32 src_role_id = 4;
  if (has_src_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->src_role_id(), target);
  }

  // optional uint32 dst_role_id = 5;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dst_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int spa_action_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.SPA_ACTION_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required .client.SPA_ACTION_TYPE_E action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

    // required uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 src_role_id = 4;
    if (has_src_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_role_id());
    }

    // optional uint32 dst_role_id = 5;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void spa_action_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const spa_action_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const spa_action_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void spa_action_msg::MergeFrom(const spa_action_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_src_role_id()) {
      set_src_role_id(from.src_role_id());
    }
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void spa_action_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void spa_action_msg::CopyFrom(const spa_action_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spa_action_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void spa_action_msg::Swap(spa_action_msg* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(action_type_, other->action_type_);
    std::swap(times_, other->times_);
    std::swap(src_role_id_, other->src_role_id_);
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata spa_action_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = spa_action_msg_descriptor_;
  metadata.reflection = spa_action_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
