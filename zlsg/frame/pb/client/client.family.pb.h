// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.family.proto

#ifndef PROTOBUF_client_2efamily_2eproto__INCLUDED
#define PROTOBUF_client_2efamily_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2efamily_2eproto();
void protobuf_AssignDesc_client_2efamily_2eproto();
void protobuf_ShutdownFile_client_2efamily_2eproto();

class family_info;
class family_diplomacy_info;
class set_create_famliy_consume;
class set_donate_consume;
class set_family_req;
class set_family_money;
class secede_family_to_center;
class secede_family_game;
class update_family_data_from_center;
class family_info_req;
class family_info_rsp;
class modify_family_power;
class update_player_power_to_smy;
class notive_center_donate_sucess;
class family_money_mod_req;
class family_simple_info;
class family_money_query_req;
class family_money_query_rsp;
class family_list_req;
class family_list_rsp;
class create_family_req;
class create_family_rsp;
class family_req;
class family_rsp;
class apply_family_req;
class apply_family_rsp;
class family_set_req;
class family_set_rsp;
class apply_family_list_req;
class apply_family_list_rsp;
class approval_family_req;
class approval_family_rsp;
class invite_family_req;
class invite_family_rsp;
class invite_family_list_req;
class invite_family_info;
class invite_family_list_rsp;
class agree_family_req;
class agree_family_rsp;
class modify_family_post_req;
class modify_family_post_rsp;
class disband_family_req;
class disband_family_rsp;
class family_self_req;
class family_self_rsp;
class apply_family_list_self_req;
class apply_family_list_self_rsp;
class family_member_list_req;
class family_member_info;
class family_member_list_rsp;
class modify_family_member_req;
class modify_family_member_rsp;
class secede_family_req;
class secede_family_rsp;
class expel_member_req;
class expel_member_rsp;
class upgrade_family_req;
class upgrade_family_rsp;
class donate_family_req;
class donate_family_rsp;
class donate_list_req;
class donate_info;
class donate_list_rsp;
class family_log_req;
class family_log_info;
class family_log_rsp;
class family_log_update;
class family_record_req;
class family_record_info;
class family_record_rsp;
class family_record_update;
class change_family_flag_id_req;
class change_family_flag_id_rsp;
class change_family_flag_name_req;
class change_family_flag_name_rsp;
class impeach_chief_req;
class impeach_chief_rsp;
class ally_family_req;
class ally_family_rsp;
class remove_foreign_req;
class remove_foreign_rsp;
class ally_family_list_req;
class ally_info;
class ally_family_list_rsp;
class activity_opt_rsp;
class load_friend_family_req;
class load_friend_family_rsp;
class update_friend_family_rsp;
class family_relation_list;
class update_family_relation;
class family_title_info;
class family_title_list_rsp;

enum set_create_famliy_consume_result {
  set_create_famliy_consume_result_RESULT_SUCCESS = 1,
  set_create_famliy_consume_result_RESULT_FAILD = 2
};
bool set_create_famliy_consume_result_IsValid(int value);
const set_create_famliy_consume_result set_create_famliy_consume_result_result_MIN = set_create_famliy_consume_result_RESULT_SUCCESS;
const set_create_famliy_consume_result set_create_famliy_consume_result_result_MAX = set_create_famliy_consume_result_RESULT_FAILD;
const int set_create_famliy_consume_result_result_ARRAYSIZE = set_create_famliy_consume_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* set_create_famliy_consume_result_descriptor();
inline const ::std::string& set_create_famliy_consume_result_Name(set_create_famliy_consume_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    set_create_famliy_consume_result_descriptor(), value);
}
inline bool set_create_famliy_consume_result_Parse(
    const ::std::string& name, set_create_famliy_consume_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<set_create_famliy_consume_result>(
    set_create_famliy_consume_result_descriptor(), name, value);
}
enum create_family_req_use {
  create_family_req_use_copper = 1,
  create_family_req_use_silver = 2,
  create_family_req_use_token = 3
};
bool create_family_req_use_IsValid(int value);
const create_family_req_use create_family_req_use_use_MIN = create_family_req_use_copper;
const create_family_req_use create_family_req_use_use_MAX = create_family_req_use_token;
const int create_family_req_use_use_ARRAYSIZE = create_family_req_use_use_MAX + 1;

const ::google::protobuf::EnumDescriptor* create_family_req_use_descriptor();
inline const ::std::string& create_family_req_use_Name(create_family_req_use value) {
  return ::google::protobuf::internal::NameOfEnum(
    create_family_req_use_descriptor(), value);
}
inline bool create_family_req_use_Parse(
    const ::std::string& name, create_family_req_use* value) {
  return ::google::protobuf::internal::ParseNamedEnum<create_family_req_use>(
    create_family_req_use_descriptor(), name, value);
}
enum create_family_rsp_result {
  create_family_rsp_result_success = 0,
  create_family_rsp_result_copper_limit = 1,
  create_family_rsp_result_silver_limit = 2,
  create_family_rsp_result_token_limit = 4,
  create_family_rsp_result_name_limit = 8,
  create_family_rsp_result_flag_limit = 16,
  create_family_rsp_result_have_limit = 32,
  create_family_rsp_result_activity_limit = 64
};
bool create_family_rsp_result_IsValid(int value);
const create_family_rsp_result create_family_rsp_result_result_MIN = create_family_rsp_result_success;
const create_family_rsp_result create_family_rsp_result_result_MAX = create_family_rsp_result_activity_limit;
const int create_family_rsp_result_result_ARRAYSIZE = create_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* create_family_rsp_result_descriptor();
inline const ::std::string& create_family_rsp_result_Name(create_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    create_family_rsp_result_descriptor(), value);
}
inline bool create_family_rsp_result_Parse(
    const ::std::string& name, create_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<create_family_rsp_result>(
    create_family_rsp_result_descriptor(), name, value);
}
enum apply_family_rsp_result {
  apply_family_rsp_result_success = 0,
  apply_family_rsp_result_lvl_limit = 1,
  apply_family_rsp_result_full_family = 2,
  apply_family_rsp_result_apply_count = 4,
  apply_family_rsp_result_not_family = 8,
  apply_family_rsp_result_time_out = 16,
  apply_family_rsp_result_leader_offline = 32,
  apply_family_rsp_result_have_family = 64,
  apply_family_rsp_result_already_apply = 128
};
bool apply_family_rsp_result_IsValid(int value);
const apply_family_rsp_result apply_family_rsp_result_result_MIN = apply_family_rsp_result_success;
const apply_family_rsp_result apply_family_rsp_result_result_MAX = apply_family_rsp_result_already_apply;
const int apply_family_rsp_result_result_ARRAYSIZE = apply_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* apply_family_rsp_result_descriptor();
inline const ::std::string& apply_family_rsp_result_Name(apply_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    apply_family_rsp_result_descriptor(), value);
}
inline bool apply_family_rsp_result_Parse(
    const ::std::string& name, apply_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<apply_family_rsp_result>(
    apply_family_rsp_result_descriptor(), name, value);
}
enum approval_family_rsp_result {
  approval_family_rsp_result_success = 0,
  approval_family_rsp_result_permissions = 1,
  approval_family_rsp_result_full_family = 2,
  approval_family_rsp_result_pass_join = 3,
  approval_family_rsp_result_reject_join = 4,
  approval_family_rsp_result_have_family = 8
};
bool approval_family_rsp_result_IsValid(int value);
const approval_family_rsp_result approval_family_rsp_result_result_MIN = approval_family_rsp_result_success;
const approval_family_rsp_result approval_family_rsp_result_result_MAX = approval_family_rsp_result_have_family;
const int approval_family_rsp_result_result_ARRAYSIZE = approval_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* approval_family_rsp_result_descriptor();
inline const ::std::string& approval_family_rsp_result_Name(approval_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    approval_family_rsp_result_descriptor(), value);
}
inline bool approval_family_rsp_result_Parse(
    const ::std::string& name, approval_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<approval_family_rsp_result>(
    approval_family_rsp_result_descriptor(), name, value);
}
enum invite_family_rsp_result {
  invite_family_rsp_result_success = 0,
  invite_family_rsp_result_null_family = 1,
  invite_family_rsp_result_not_online = 2,
  invite_family_rsp_result_lvl_limit = 4,
  invite_family_rsp_result_has_family = 8,
  invite_family_rsp_result_full_family = 16
};
bool invite_family_rsp_result_IsValid(int value);
const invite_family_rsp_result invite_family_rsp_result_result_MIN = invite_family_rsp_result_success;
const invite_family_rsp_result invite_family_rsp_result_result_MAX = invite_family_rsp_result_full_family;
const int invite_family_rsp_result_result_ARRAYSIZE = invite_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* invite_family_rsp_result_descriptor();
inline const ::std::string& invite_family_rsp_result_Name(invite_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    invite_family_rsp_result_descriptor(), value);
}
inline bool invite_family_rsp_result_Parse(
    const ::std::string& name, invite_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<invite_family_rsp_result>(
    invite_family_rsp_result_descriptor(), name, value);
}
enum agree_family_rsp_result {
  agree_family_rsp_result_success = 0,
  agree_family_rsp_result_has_family = 1,
  agree_family_rsp_result_full_family = 2
};
bool agree_family_rsp_result_IsValid(int value);
const agree_family_rsp_result agree_family_rsp_result_result_MIN = agree_family_rsp_result_success;
const agree_family_rsp_result agree_family_rsp_result_result_MAX = agree_family_rsp_result_full_family;
const int agree_family_rsp_result_result_ARRAYSIZE = agree_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* agree_family_rsp_result_descriptor();
inline const ::std::string& agree_family_rsp_result_Name(agree_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    agree_family_rsp_result_descriptor(), value);
}
inline bool agree_family_rsp_result_Parse(
    const ::std::string& name, agree_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<agree_family_rsp_result>(
    agree_family_rsp_result_descriptor(), name, value);
}
enum modify_family_post_rsp_result {
  modify_family_post_rsp_result_success = 0,
  modify_family_post_rsp_result_permissions = 1,
  modify_family_post_rsp_result_too_long = 2
};
bool modify_family_post_rsp_result_IsValid(int value);
const modify_family_post_rsp_result modify_family_post_rsp_result_result_MIN = modify_family_post_rsp_result_success;
const modify_family_post_rsp_result modify_family_post_rsp_result_result_MAX = modify_family_post_rsp_result_too_long;
const int modify_family_post_rsp_result_result_ARRAYSIZE = modify_family_post_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* modify_family_post_rsp_result_descriptor();
inline const ::std::string& modify_family_post_rsp_result_Name(modify_family_post_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    modify_family_post_rsp_result_descriptor(), value);
}
inline bool modify_family_post_rsp_result_Parse(
    const ::std::string& name, modify_family_post_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<modify_family_post_rsp_result>(
    modify_family_post_rsp_result_descriptor(), name, value);
}
enum disband_family_rsp_result {
  disband_family_rsp_result_success = 0,
  disband_family_rsp_result_permissions = 1,
  disband_family_rsp_result_family_id_err = 2,
  disband_family_rsp_result_family_has_king = 4
};
bool disband_family_rsp_result_IsValid(int value);
const disband_family_rsp_result disband_family_rsp_result_result_MIN = disband_family_rsp_result_success;
const disband_family_rsp_result disband_family_rsp_result_result_MAX = disband_family_rsp_result_family_has_king;
const int disband_family_rsp_result_result_ARRAYSIZE = disband_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* disband_family_rsp_result_descriptor();
inline const ::std::string& disband_family_rsp_result_Name(disband_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    disband_family_rsp_result_descriptor(), value);
}
inline bool disband_family_rsp_result_Parse(
    const ::std::string& name, disband_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<disband_family_rsp_result>(
    disband_family_rsp_result_descriptor(), name, value);
}
enum modify_family_member_rsp_result {
  modify_family_member_rsp_result_success = 0,
  modify_family_member_rsp_result_not_member = 1,
  modify_family_member_rsp_result_permissions = 2,
  modify_family_member_rsp_result_failure = 4,
  modify_family_member_rsp_result_king_erro = 8
};
bool modify_family_member_rsp_result_IsValid(int value);
const modify_family_member_rsp_result modify_family_member_rsp_result_result_MIN = modify_family_member_rsp_result_success;
const modify_family_member_rsp_result modify_family_member_rsp_result_result_MAX = modify_family_member_rsp_result_king_erro;
const int modify_family_member_rsp_result_result_ARRAYSIZE = modify_family_member_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* modify_family_member_rsp_result_descriptor();
inline const ::std::string& modify_family_member_rsp_result_Name(modify_family_member_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    modify_family_member_rsp_result_descriptor(), value);
}
inline bool modify_family_member_rsp_result_Parse(
    const ::std::string& name, modify_family_member_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<modify_family_member_rsp_result>(
    modify_family_member_rsp_result_descriptor(), name, value);
}
enum upgrade_family_rsp_result {
  upgrade_family_rsp_result_success = 0,
  upgrade_family_rsp_result_permissions = 1,
  upgrade_family_rsp_result_money_limit = 2
};
bool upgrade_family_rsp_result_IsValid(int value);
const upgrade_family_rsp_result upgrade_family_rsp_result_result_MIN = upgrade_family_rsp_result_success;
const upgrade_family_rsp_result upgrade_family_rsp_result_result_MAX = upgrade_family_rsp_result_money_limit;
const int upgrade_family_rsp_result_result_ARRAYSIZE = upgrade_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* upgrade_family_rsp_result_descriptor();
inline const ::std::string& upgrade_family_rsp_result_Name(upgrade_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    upgrade_family_rsp_result_descriptor(), value);
}
inline bool upgrade_family_rsp_result_Parse(
    const ::std::string& name, upgrade_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<upgrade_family_rsp_result>(
    upgrade_family_rsp_result_descriptor(), name, value);
}
enum donate_family_rsp_result {
  donate_family_rsp_result_success = 0,
  donate_family_rsp_result_not_enough = 1,
  donate_family_rsp_result_day_limit = 2,
  donate_family_rsp_result_donate_type_err = 3
};
bool donate_family_rsp_result_IsValid(int value);
const donate_family_rsp_result donate_family_rsp_result_result_MIN = donate_family_rsp_result_success;
const donate_family_rsp_result donate_family_rsp_result_result_MAX = donate_family_rsp_result_donate_type_err;
const int donate_family_rsp_result_result_ARRAYSIZE = donate_family_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* donate_family_rsp_result_descriptor();
inline const ::std::string& donate_family_rsp_result_Name(donate_family_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    donate_family_rsp_result_descriptor(), value);
}
inline bool donate_family_rsp_result_Parse(
    const ::std::string& name, donate_family_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<donate_family_rsp_result>(
    donate_family_rsp_result_descriptor(), name, value);
}
enum SECEDE_FAMILY_TYPE_E {
  SECEDE_FAMILY_TYPE_SUCCESS = 1,
  SECEDE_FAMILY_TYPE_LEADER_FAILD = 2,
  SECEDE_FAMILY_TYPE_FAILD = 3
};
bool SECEDE_FAMILY_TYPE_E_IsValid(int value);
const SECEDE_FAMILY_TYPE_E SECEDE_FAMILY_TYPE_E_MIN = SECEDE_FAMILY_TYPE_SUCCESS;
const SECEDE_FAMILY_TYPE_E SECEDE_FAMILY_TYPE_E_MAX = SECEDE_FAMILY_TYPE_FAILD;
const int SECEDE_FAMILY_TYPE_E_ARRAYSIZE = SECEDE_FAMILY_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SECEDE_FAMILY_TYPE_E_descriptor();
inline const ::std::string& SECEDE_FAMILY_TYPE_E_Name(SECEDE_FAMILY_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SECEDE_FAMILY_TYPE_E_descriptor(), value);
}
inline bool SECEDE_FAMILY_TYPE_E_Parse(
    const ::std::string& name, SECEDE_FAMILY_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SECEDE_FAMILY_TYPE_E>(
    SECEDE_FAMILY_TYPE_E_descriptor(), name, value);
}
enum EXPEL_MEMBER_RESULT_E {
  EXPEL_MEMBER_RESULT_SUCCEED = 1,
  EXPEL_MEMBER_RESULT_MEMBER_FAILD = 2,
  EXPEL_MEMBER_RESULT_FAMILY_FAILD = 3,
  EXPEL_MEMBER_RESULT_PERMISSION = 4
};
bool EXPEL_MEMBER_RESULT_E_IsValid(int value);
const EXPEL_MEMBER_RESULT_E EXPEL_MEMBER_RESULT_E_MIN = EXPEL_MEMBER_RESULT_SUCCEED;
const EXPEL_MEMBER_RESULT_E EXPEL_MEMBER_RESULT_E_MAX = EXPEL_MEMBER_RESULT_PERMISSION;
const int EXPEL_MEMBER_RESULT_E_ARRAYSIZE = EXPEL_MEMBER_RESULT_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* EXPEL_MEMBER_RESULT_E_descriptor();
inline const ::std::string& EXPEL_MEMBER_RESULT_E_Name(EXPEL_MEMBER_RESULT_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    EXPEL_MEMBER_RESULT_E_descriptor(), value);
}
inline bool EXPEL_MEMBER_RESULT_E_Parse(
    const ::std::string& name, EXPEL_MEMBER_RESULT_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EXPEL_MEMBER_RESULT_E>(
    EXPEL_MEMBER_RESULT_E_descriptor(), name, value);
}
enum DONATE_TYPE_E {
  DONATE_TYPE_COIN = 0,
  DONATE_TYPE_DRAGON = 1,
  DONATE_TYPE_ROSEFINCH = 2,
  DONATE_TYPE_TORROISE = 3,
  DONATE_TYPE_TIGER = 4
};
bool DONATE_TYPE_E_IsValid(int value);
const DONATE_TYPE_E DONATE_TYPE_E_MIN = DONATE_TYPE_COIN;
const DONATE_TYPE_E DONATE_TYPE_E_MAX = DONATE_TYPE_TIGER;
const int DONATE_TYPE_E_ARRAYSIZE = DONATE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* DONATE_TYPE_E_descriptor();
inline const ::std::string& DONATE_TYPE_E_Name(DONATE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    DONATE_TYPE_E_descriptor(), value);
}
inline bool DONATE_TYPE_E_Parse(
    const ::std::string& name, DONATE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DONATE_TYPE_E>(
    DONATE_TYPE_E_descriptor(), name, value);
}
enum FAMILY_LOG_TYPE {
  FAMILY_CREATE = 1,
  FAMILY_INVITE_MEMBER = 3,
  FAMILY_QUIT_MEMBER = 4,
  FAMILY_KCIK_MEMBER = 5,
  FAMILY_MODIFY_POST = 6,
  FAMILY_KILL_PLAYER = 7,
  FAMILY_BE_KILL_BY_PLAYER = 8,
  FAMILY_PROMOTION = 9,
  FAMILY_DISMISS = 10,
  FAMILY_IMPEACH = 11,
  FAMILY_UPGRATE_FLAG = 12,
  FAMILY_COIN_DONATE = 13,
  FAMILY_DRAGON_DONATE = 14,
  FAMILY_TIGER_DONATE = 15,
  FAMILY_ROSEFINCH_DONATE = 16,
  FAMILY_TORROISE_DONATE = 17,
  FAMILY_DOMAIN = 18,
  FAMILY_SIEGE = 19,
  FAMILY_WORLD_BOSS = 20,
  FAMILY_CHANGE_FLAG_ID = 21,
  FAMILY_CHANGE_FLAG_NAME = 22,
  FAMILY_ALLIANCE = 23,
  FAMILY_CANCEL_ALLIANCE = 24,
  FAMILY_ENENY_FAMILY = 25,
  FAMILY_ENENY_CANCEL_FAMILY = 26
};
bool FAMILY_LOG_TYPE_IsValid(int value);
const FAMILY_LOG_TYPE FAMILY_LOG_TYPE_MIN = FAMILY_CREATE;
const FAMILY_LOG_TYPE FAMILY_LOG_TYPE_MAX = FAMILY_ENENY_CANCEL_FAMILY;
const int FAMILY_LOG_TYPE_ARRAYSIZE = FAMILY_LOG_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FAMILY_LOG_TYPE_descriptor();
inline const ::std::string& FAMILY_LOG_TYPE_Name(FAMILY_LOG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FAMILY_LOG_TYPE_descriptor(), value);
}
inline bool FAMILY_LOG_TYPE_Parse(
    const ::std::string& name, FAMILY_LOG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FAMILY_LOG_TYPE>(
    FAMILY_LOG_TYPE_descriptor(), name, value);
}
enum OPT_CHANGE_FLAG_NAME_RESULT {
  OPT_CHANGE_FLAG_NAME_CHANGE_SUCESS = 0,
  OPT_CHANGE_FLAG_NAME_CAN_NOT_NULL = 1,
  OPT_CHANGE_FLAG_NAME_TOO_LONG = 2,
  OPT_CHANGE_FLAG_NAME_ILLEGAL = 3,
  OPT_CHANGE_FLAG_NAME_REPETITION = 4,
  OPT_CHANGE_FLAG_NAME_RESOURCE = 5,
  OPT_CHANGE_FLAG_NAME_PRMISSION_LIMIT = 6,
  PT_CHANGE_FLAG_NAME_CONFIG_ERRO = 7
};
bool OPT_CHANGE_FLAG_NAME_RESULT_IsValid(int value);
const OPT_CHANGE_FLAG_NAME_RESULT OPT_CHANGE_FLAG_NAME_RESULT_MIN = OPT_CHANGE_FLAG_NAME_CHANGE_SUCESS;
const OPT_CHANGE_FLAG_NAME_RESULT OPT_CHANGE_FLAG_NAME_RESULT_MAX = PT_CHANGE_FLAG_NAME_CONFIG_ERRO;
const int OPT_CHANGE_FLAG_NAME_RESULT_ARRAYSIZE = OPT_CHANGE_FLAG_NAME_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPT_CHANGE_FLAG_NAME_RESULT_descriptor();
inline const ::std::string& OPT_CHANGE_FLAG_NAME_RESULT_Name(OPT_CHANGE_FLAG_NAME_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPT_CHANGE_FLAG_NAME_RESULT_descriptor(), value);
}
inline bool OPT_CHANGE_FLAG_NAME_RESULT_Parse(
    const ::std::string& name, OPT_CHANGE_FLAG_NAME_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPT_CHANGE_FLAG_NAME_RESULT>(
    OPT_CHANGE_FLAG_NAME_RESULT_descriptor(), name, value);
}
enum IMPEACH_RESULT_E {
  IMPEACH_RESULT_SUCESS = 0,
  IMPEACH_RESULT_TIME_ERRO = 1,
  IMPEACH_RESULT_HAS_DOMAIN = 2,
  IMPEACH_RESULT_HAS_KING = 3,
  IMPEACH_RESULT_CHIEF_ERRO = 4
};
bool IMPEACH_RESULT_E_IsValid(int value);
const IMPEACH_RESULT_E IMPEACH_RESULT_E_MIN = IMPEACH_RESULT_SUCESS;
const IMPEACH_RESULT_E IMPEACH_RESULT_E_MAX = IMPEACH_RESULT_CHIEF_ERRO;
const int IMPEACH_RESULT_E_ARRAYSIZE = IMPEACH_RESULT_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* IMPEACH_RESULT_E_descriptor();
inline const ::std::string& IMPEACH_RESULT_E_Name(IMPEACH_RESULT_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    IMPEACH_RESULT_E_descriptor(), value);
}
inline bool IMPEACH_RESULT_E_Parse(
    const ::std::string& name, IMPEACH_RESULT_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IMPEACH_RESULT_E>(
    IMPEACH_RESULT_E_descriptor(), name, value);
}
enum OPT_FORIGN_TYPE {
  OPT_FORIGN_TYPE_ALLY = 1,
  OPT_FORIGN_TYPE_HOSTILITY = 2,
  OPT_FORIGN_TYPE_CHECKING = 3,
  OPT_FORIGN_TYPE_REJECT = 4,
  OPT_FORIGN_TYPE_REMOVE_ALLY = 5,
  OPT_FORIGN_TYPE_REMOVE_HOS = 6
};
bool OPT_FORIGN_TYPE_IsValid(int value);
const OPT_FORIGN_TYPE OPT_FORIGN_TYPE_MIN = OPT_FORIGN_TYPE_ALLY;
const OPT_FORIGN_TYPE OPT_FORIGN_TYPE_MAX = OPT_FORIGN_TYPE_REMOVE_HOS;
const int OPT_FORIGN_TYPE_ARRAYSIZE = OPT_FORIGN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPT_FORIGN_TYPE_descriptor();
inline const ::std::string& OPT_FORIGN_TYPE_Name(OPT_FORIGN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPT_FORIGN_TYPE_descriptor(), value);
}
inline bool OPT_FORIGN_TYPE_Parse(
    const ::std::string& name, OPT_FORIGN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPT_FORIGN_TYPE>(
    OPT_FORIGN_TYPE_descriptor(), name, value);
}
enum UPTATE_TYPE_E {
  UPTATE_TYPE_ADD = 1,
  UPTATE_TYPE_DEL = 2,
  UPTATE_TYPE_ALL = 3
};
bool UPTATE_TYPE_E_IsValid(int value);
const UPTATE_TYPE_E UPTATE_TYPE_E_MIN = UPTATE_TYPE_ADD;
const UPTATE_TYPE_E UPTATE_TYPE_E_MAX = UPTATE_TYPE_ALL;
const int UPTATE_TYPE_E_ARRAYSIZE = UPTATE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* UPTATE_TYPE_E_descriptor();
inline const ::std::string& UPTATE_TYPE_E_Name(UPTATE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    UPTATE_TYPE_E_descriptor(), value);
}
inline bool UPTATE_TYPE_E_Parse(
    const ::std::string& name, UPTATE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UPTATE_TYPE_E>(
    UPTATE_TYPE_E_descriptor(), name, value);
}
// ===================================================================

class family_info : public ::google::protobuf::Message {
 public:
  family_info();
  virtual ~family_info();

  family_info(const family_info& from);

  inline family_info& operator=(const family_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_info& default_instance();

  void Swap(family_info* other);

  // implements Message ----------------------------------------------

  family_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_info& from);
  void MergeFrom(const family_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 flag_id = 3;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // required string flag_name = 4;
  inline bool has_flag_name() const;
  inline void clear_flag_name();
  static const int kFlagNameFieldNumber = 4;
  inline const ::std::string& flag_name() const;
  inline void set_flag_name(const ::std::string& value);
  inline void set_flag_name(const char* value);
  inline void set_flag_name(const char* value, size_t size);
  inline ::std::string* mutable_flag_name();
  inline ::std::string* release_flag_name();
  inline void set_allocated_flag_name(::std::string* flag_name);

  // required uint32 lvl = 5;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 5;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required uint32 chief_id = 6;
  inline bool has_chief_id() const;
  inline void clear_chief_id();
  static const int kChiefIdFieldNumber = 6;
  inline ::google::protobuf::uint32 chief_id() const;
  inline void set_chief_id(::google::protobuf::uint32 value);

  // required string chief_name = 7;
  inline bool has_chief_name() const;
  inline void clear_chief_name();
  static const int kChiefNameFieldNumber = 7;
  inline const ::std::string& chief_name() const;
  inline void set_chief_name(const ::std::string& value);
  inline void set_chief_name(const char* value);
  inline void set_chief_name(const char* value, size_t size);
  inline ::std::string* mutable_chief_name();
  inline ::std::string* release_chief_name();
  inline void set_allocated_chief_name(::std::string* chief_name);

  // required uint32 deputy_id = 8;
  inline bool has_deputy_id() const;
  inline void clear_deputy_id();
  static const int kDeputyIdFieldNumber = 8;
  inline ::google::protobuf::uint32 deputy_id() const;
  inline void set_deputy_id(::google::protobuf::uint32 value);

  // required string post = 9;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 9;
  inline const ::std::string& post() const;
  inline void set_post(const ::std::string& value);
  inline void set_post(const char* value);
  inline void set_post(const char* value, size_t size);
  inline ::std::string* mutable_post();
  inline ::std::string* release_post();
  inline void set_allocated_post(::std::string* post);

  // required uint32 money = 10;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint32 power = 11;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 11;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required uint32 domain = 12;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 12;
  inline ::google::protobuf::uint32 domain() const;
  inline void set_domain(::google::protobuf::uint32 value);

  // required bool king = 13 [default = false];
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 13;
  inline bool king() const;
  inline void set_king(bool value);

  // required bool emperor = 14;
  inline bool has_emperor() const;
  inline void clear_emperor();
  static const int kEmperorFieldNumber = 14;
  inline bool emperor() const;
  inline void set_emperor(bool value);

  // required uint32 cur_member_num = 15;
  inline bool has_cur_member_num() const;
  inline void clear_cur_member_num();
  static const int kCurMemberNumFieldNumber = 15;
  inline ::google::protobuf::uint32 cur_member_num() const;
  inline void set_cur_member_num(::google::protobuf::uint32 value);

  // required bool approval = 16;
  inline bool has_approval() const;
  inline void clear_approval();
  static const int kApprovalFieldNumber = 16;
  inline bool approval() const;
  inline void set_approval(bool value);

  // required uint32 leader_online = 17;
  inline bool has_leader_online() const;
  inline void clear_leader_online();
  static const int kLeaderOnlineFieldNumber = 17;
  inline ::google::protobuf::uint32 leader_online() const;
  inline void set_leader_online(::google::protobuf::uint32 value);

  // required uint32 create_time = 18;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 18;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 dragon_count = 19;
  inline bool has_dragon_count() const;
  inline void clear_dragon_count();
  static const int kDragonCountFieldNumber = 19;
  inline ::google::protobuf::uint32 dragon_count() const;
  inline void set_dragon_count(::google::protobuf::uint32 value);

  // required uint32 tiger_count = 20;
  inline bool has_tiger_count() const;
  inline void clear_tiger_count();
  static const int kTigerCountFieldNumber = 20;
  inline ::google::protobuf::uint32 tiger_count() const;
  inline void set_tiger_count(::google::protobuf::uint32 value);

  // required uint32 rosefinch_count = 21;
  inline bool has_rosefinch_count() const;
  inline void clear_rosefinch_count();
  static const int kRosefinchCountFieldNumber = 21;
  inline ::google::protobuf::uint32 rosefinch_count() const;
  inline void set_rosefinch_count(::google::protobuf::uint32 value);

  // required uint32 tortoise_count = 22;
  inline bool has_tortoise_count() const;
  inline void clear_tortoise_count();
  static const int kTortoiseCountFieldNumber = 22;
  inline ::google::protobuf::uint32 tortoise_count() const;
  inline void set_tortoise_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_flag_name();
  inline void clear_has_flag_name();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_chief_id();
  inline void clear_has_chief_id();
  inline void set_has_chief_name();
  inline void clear_has_chief_name();
  inline void set_has_deputy_id();
  inline void clear_has_deputy_id();
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_king();
  inline void clear_has_king();
  inline void set_has_emperor();
  inline void clear_has_emperor();
  inline void set_has_cur_member_num();
  inline void clear_has_cur_member_num();
  inline void set_has_approval();
  inline void clear_has_approval();
  inline void set_has_leader_online();
  inline void clear_has_leader_online();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_dragon_count();
  inline void clear_has_dragon_count();
  inline void set_has_tiger_count();
  inline void clear_has_tiger_count();
  inline void set_has_rosefinch_count();
  inline void clear_has_rosefinch_count();
  inline void set_has_tortoise_count();
  inline void clear_has_tortoise_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flag_id_;
  ::std::string* flag_name_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 chief_id_;
  ::std::string* chief_name_;
  ::std::string* post_;
  ::google::protobuf::uint32 deputy_id_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 domain_;
  bool king_;
  bool emperor_;
  bool approval_;
  ::google::protobuf::uint32 cur_member_num_;
  ::google::protobuf::uint32 leader_online_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 dragon_count_;
  ::google::protobuf::uint32 tiger_count_;
  ::google::protobuf::uint32 rosefinch_count_;
  ::google::protobuf::uint32 tortoise_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_info* default_instance_;
};
// -------------------------------------------------------------------

class family_diplomacy_info : public ::google::protobuf::Message {
 public:
  family_diplomacy_info();
  virtual ~family_diplomacy_info();

  family_diplomacy_info(const family_diplomacy_info& from);

  inline family_diplomacy_info& operator=(const family_diplomacy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_diplomacy_info& default_instance();

  void Swap(family_diplomacy_info* other);

  // implements Message ----------------------------------------------

  family_diplomacy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_diplomacy_info& from);
  void MergeFrom(const family_diplomacy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // required uint32 relation_type = 3;
  inline bool has_relation_type() const;
  inline void clear_relation_type();
  static const int kRelationTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 relation_type() const;
  inline void set_relation_type(::google::protobuf::uint32 value);

  // optional uint32 apply_time = 4;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_diplomacy_info)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_relation_type();
  inline void clear_has_relation_type();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 target_id_;
  ::google::protobuf::uint32 relation_type_;
  ::google::protobuf::uint32 apply_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_diplomacy_info* default_instance_;
};
// -------------------------------------------------------------------

class set_create_famliy_consume : public ::google::protobuf::Message {
 public:
  set_create_famliy_consume();
  virtual ~set_create_famliy_consume();

  set_create_famliy_consume(const set_create_famliy_consume& from);

  inline set_create_famliy_consume& operator=(const set_create_famliy_consume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_create_famliy_consume& default_instance();

  void Swap(set_create_famliy_consume* other);

  // implements Message ----------------------------------------------

  set_create_famliy_consume* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_create_famliy_consume& from);
  void MergeFrom(const set_create_famliy_consume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef set_create_famliy_consume_result result;
  static const result RESULT_SUCCESS = set_create_famliy_consume_result_RESULT_SUCCESS;
  static const result RESULT_FAILD = set_create_famliy_consume_result_RESULT_FAILD;
  static inline bool result_IsValid(int value) {
    return set_create_famliy_consume_result_IsValid(value);
  }
  static const result result_MIN =
    set_create_famliy_consume_result_result_MIN;
  static const result result_MAX =
    set_create_famliy_consume_result_result_MAX;
  static const int result_ARRAYSIZE =
    set_create_famliy_consume_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return set_create_famliy_consume_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return set_create_famliy_consume_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return set_create_famliy_consume_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .client.set_create_famliy_consume.result is_succeed = 2;
  inline bool has_is_succeed() const;
  inline void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 2;
  inline ::client::set_create_famliy_consume_result is_succeed() const;
  inline void set_is_succeed(::client::set_create_famliy_consume_result value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_create_famliy_consume)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_succeed();
  inline void clear_has_is_succeed();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  int is_succeed_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static set_create_famliy_consume* default_instance_;
};
// -------------------------------------------------------------------

class set_donate_consume : public ::google::protobuf::Message {
 public:
  set_donate_consume();
  virtual ~set_donate_consume();

  set_donate_consume(const set_donate_consume& from);

  inline set_donate_consume& operator=(const set_donate_consume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_donate_consume& default_instance();

  void Swap(set_donate_consume* other);

  // implements Message ----------------------------------------------

  set_donate_consume* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_donate_consume& from);
  void MergeFrom(const set_donate_consume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required bool is_success = 3;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 3;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // required uint32 contr_value = 4;
  inline bool has_contr_value() const;
  inline void clear_contr_value();
  static const int kContrValueFieldNumber = 4;
  inline ::google::protobuf::uint32 contr_value() const;
  inline void set_contr_value(::google::protobuf::uint32 value);

  // required uint32 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 total_value = 6;
  inline bool has_total_value() const;
  inline void clear_total_value();
  static const int kTotalValueFieldNumber = 6;
  inline ::google::protobuf::uint32 total_value() const;
  inline void set_total_value(::google::protobuf::uint32 value);

  // required uint32 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_donate_consume)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_contr_value();
  inline void clear_has_contr_value();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_total_value();
  inline void clear_has_total_value();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  bool is_success_;
  ::google::protobuf::uint32 contr_value_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 total_value_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static set_donate_consume* default_instance_;
};
// -------------------------------------------------------------------

class set_family_req : public ::google::protobuf::Message {
 public:
  set_family_req();
  virtual ~set_family_req();

  set_family_req(const set_family_req& from);

  inline set_family_req& operator=(const set_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_family_req& default_instance();

  void Swap(set_family_req* other);

  // implements Message ----------------------------------------------

  set_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_family_req& from);
  void MergeFrom(const set_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 family_level = 4;
  inline bool has_family_level() const;
  inline void clear_family_level();
  static const int kFamilyLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 family_level() const;
  inline void set_family_level(::google::protobuf::uint32 value);

  // optional uint32 donate = 5;
  inline bool has_donate() const;
  inline void clear_donate();
  static const int kDonateFieldNumber = 5;
  inline ::google::protobuf::uint32 donate() const;
  inline void set_donate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_family_level();
  inline void clear_has_family_level();
  inline void set_has_donate();
  inline void clear_has_donate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 family_level_;
  ::google::protobuf::uint32 donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static set_family_req* default_instance_;
};
// -------------------------------------------------------------------

class set_family_money : public ::google::protobuf::Message {
 public:
  set_family_money();
  virtual ~set_family_money();

  set_family_money(const set_family_money& from);

  inline set_family_money& operator=(const set_family_money& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_family_money& default_instance();

  void Swap(set_family_money* other);

  // implements Message ----------------------------------------------

  set_family_money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_family_money& from);
  void MergeFrom(const set_family_money& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_family_money)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static set_family_money* default_instance_;
};
// -------------------------------------------------------------------

class secede_family_to_center : public ::google::protobuf::Message {
 public:
  secede_family_to_center();
  virtual ~secede_family_to_center();

  secede_family_to_center(const secede_family_to_center& from);

  inline secede_family_to_center& operator=(const secede_family_to_center& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secede_family_to_center& default_instance();

  void Swap(secede_family_to_center* other);

  // implements Message ----------------------------------------------

  secede_family_to_center* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secede_family_to_center& from);
  void MergeFrom(const secede_family_to_center& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.secede_family_to_center)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static secede_family_to_center* default_instance_;
};
// -------------------------------------------------------------------

class secede_family_game : public ::google::protobuf::Message {
 public:
  secede_family_game();
  virtual ~secede_family_game();

  secede_family_game(const secede_family_game& from);

  inline secede_family_game& operator=(const secede_family_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secede_family_game& default_instance();

  void Swap(secede_family_game* other);

  // implements Message ----------------------------------------------

  secede_family_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secede_family_game& from);
  void MergeFrom(const secede_family_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.secede_family_game)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static secede_family_game* default_instance_;
};
// -------------------------------------------------------------------

class update_family_data_from_center : public ::google::protobuf::Message {
 public:
  update_family_data_from_center();
  virtual ~update_family_data_from_center();

  update_family_data_from_center(const update_family_data_from_center& from);

  inline update_family_data_from_center& operator=(const update_family_data_from_center& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_family_data_from_center& default_instance();

  void Swap(update_family_data_from_center* other);

  // implements Message ----------------------------------------------

  update_family_data_from_center* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_family_data_from_center& from);
  void MergeFrom(const update_family_data_from_center& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_family_data_from_center)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static update_family_data_from_center* default_instance_;
};
// -------------------------------------------------------------------

class family_info_req : public ::google::protobuf::Message {
 public:
  family_info_req();
  virtual ~family_info_req();

  family_info_req(const family_info_req& from);

  inline family_info_req& operator=(const family_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_info_req& default_instance();

  void Swap(family_info_req* other);

  // implements Message ----------------------------------------------

  family_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_info_req& from);
  void MergeFrom(const family_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_info_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_info_req* default_instance_;
};
// -------------------------------------------------------------------

class family_info_rsp : public ::google::protobuf::Message {
 public:
  family_info_rsp();
  virtual ~family_info_rsp();

  family_info_rsp(const family_info_rsp& from);

  inline family_info_rsp& operator=(const family_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_info_rsp& default_instance();

  void Swap(family_info_rsp* other);

  // implements Message ----------------------------------------------

  family_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_info_rsp& from);
  void MergeFrom(const family_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.family_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // @@protoc_insertion_point(class_scope:client.family_info_rsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::family_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class modify_family_power : public ::google::protobuf::Message {
 public:
  modify_family_power();
  virtual ~modify_family_power();

  modify_family_power(const modify_family_power& from);

  inline modify_family_power& operator=(const modify_family_power& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_family_power& default_instance();

  void Swap(modify_family_power* other);

  // implements Message ----------------------------------------------

  modify_family_power* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_family_power& from);
  void MergeFrom(const modify_family_power& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 new_power = 3;
  inline bool has_new_power() const;
  inline void clear_new_power();
  static const int kNewPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 new_power() const;
  inline void set_new_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.modify_family_power)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_new_power();
  inline void clear_has_new_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 new_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static modify_family_power* default_instance_;
};
// -------------------------------------------------------------------

class update_player_power_to_smy : public ::google::protobuf::Message {
 public:
  update_player_power_to_smy();
  virtual ~update_player_power_to_smy();

  update_player_power_to_smy(const update_player_power_to_smy& from);

  inline update_player_power_to_smy& operator=(const update_player_power_to_smy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_player_power_to_smy& default_instance();

  void Swap(update_player_power_to_smy* other);

  // implements Message ----------------------------------------------

  update_player_power_to_smy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_player_power_to_smy& from);
  void MergeFrom(const update_player_power_to_smy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_player_power_to_smy)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static update_player_power_to_smy* default_instance_;
};
// -------------------------------------------------------------------

class notive_center_donate_sucess : public ::google::protobuf::Message {
 public:
  notive_center_donate_sucess();
  virtual ~notive_center_donate_sucess();

  notive_center_donate_sucess(const notive_center_donate_sucess& from);

  inline notive_center_donate_sucess& operator=(const notive_center_donate_sucess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notive_center_donate_sucess& default_instance();

  void Swap(notive_center_donate_sucess* other);

  // implements Message ----------------------------------------------

  notive_center_donate_sucess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notive_center_donate_sucess& from);
  void MergeFrom(const notive_center_donate_sucess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 total_donate = 3;
  inline bool has_total_donate() const;
  inline void clear_total_donate();
  static const int kTotalDonateFieldNumber = 3;
  inline ::google::protobuf::uint32 total_donate() const;
  inline void set_total_donate(::google::protobuf::uint32 value);

  // required uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // required uint32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.notive_center_donate_sucess)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total_donate();
  inline void clear_has_total_donate();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 total_donate_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static notive_center_donate_sucess* default_instance_;
};
// -------------------------------------------------------------------

class family_money_mod_req : public ::google::protobuf::Message {
 public:
  family_money_mod_req();
  virtual ~family_money_mod_req();

  family_money_mod_req(const family_money_mod_req& from);

  inline family_money_mod_req& operator=(const family_money_mod_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_money_mod_req& default_instance();

  void Swap(family_money_mod_req* other);

  // implements Message ----------------------------------------------

  family_money_mod_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_money_mod_req& from);
  void MergeFrom(const family_money_mod_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_money_mod_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_money_mod_req* default_instance_;
};
// -------------------------------------------------------------------

class family_simple_info : public ::google::protobuf::Message {
 public:
  family_simple_info();
  virtual ~family_simple_info();

  family_simple_info(const family_simple_info& from);

  inline family_simple_info& operator=(const family_simple_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_simple_info& default_instance();

  void Swap(family_simple_info* other);

  // implements Message ----------------------------------------------

  family_simple_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_simple_info& from);
  void MergeFrom(const family_simple_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required string family_name = 2;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // required uint32 flag_id = 3;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // required string user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // repeated uint32 alliance = 6;
  inline int alliance_size() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 6;
  inline ::google::protobuf::uint32 alliance(int index) const;
  inline void set_alliance(int index, ::google::protobuf::uint32 value);
  inline void add_alliance(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      alliance() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_alliance();

  // @@protoc_insertion_point(class_scope:client.family_simple_info)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* family_name_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 flag_id_;
  ::std::string* user_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > alliance_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_simple_info* default_instance_;
};
// -------------------------------------------------------------------

class family_money_query_req : public ::google::protobuf::Message {
 public:
  family_money_query_req();
  virtual ~family_money_query_req();

  family_money_query_req(const family_money_query_req& from);

  inline family_money_query_req& operator=(const family_money_query_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_money_query_req& default_instance();

  void Swap(family_money_query_req* other);

  // implements Message ----------------------------------------------

  family_money_query_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_money_query_req& from);
  void MergeFrom(const family_money_query_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint64 inst_id = 3;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 3;
  inline ::google::protobuf::uint64 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:client.family_money_query_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint64 inst_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_money_query_req* default_instance_;
};
// -------------------------------------------------------------------

class family_money_query_rsp : public ::google::protobuf::Message {
 public:
  family_money_query_rsp();
  virtual ~family_money_query_rsp();

  family_money_query_rsp(const family_money_query_rsp& from);

  inline family_money_query_rsp& operator=(const family_money_query_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_money_query_rsp& default_instance();

  void Swap(family_money_query_rsp* other);

  // implements Message ----------------------------------------------

  family_money_query_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_money_query_rsp& from);
  void MergeFrom(const family_money_query_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required int32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint64 inst_id = 4;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 4;
  inline ::google::protobuf::uint64 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:client.family_money_query_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::uint64 inst_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_money_query_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_list_req : public ::google::protobuf::Message {
 public:
  family_list_req();
  virtual ~family_list_req();

  family_list_req(const family_list_req& from);

  inline family_list_req& operator=(const family_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_list_req& default_instance();

  void Swap(family_list_req* other);

  // implements Message ----------------------------------------------

  family_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_list_req& from);
  void MergeFrom(const family_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_list_req* default_instance_;
};
// -------------------------------------------------------------------

class family_list_rsp : public ::google::protobuf::Message {
 public:
  family_list_rsp();
  virtual ~family_list_rsp();

  family_list_rsp(const family_list_rsp& from);

  inline family_list_rsp& operator=(const family_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_list_rsp& default_instance();

  void Swap(family_list_rsp* other);

  // implements Message ----------------------------------------------

  family_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_list_rsp& from);
  void MergeFrom(const family_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 list_type = 1;
  inline bool has_list_type() const;
  inline void clear_list_type();
  static const int kListTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 list_type() const;
  inline void set_list_type(::google::protobuf::uint32 value);

  // repeated .client.family_info family = 2;
  inline int family_size() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 2;
  inline const ::client::family_info& family(int index) const;
  inline ::client::family_info* mutable_family(int index);
  inline ::client::family_info* add_family();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_info >&
      family() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_info >*
      mutable_family();

  // @@protoc_insertion_point(class_scope:client.family_list_rsp)
 private:
  inline void set_has_list_type();
  inline void clear_has_list_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_info > family_;
  ::google::protobuf::uint32 list_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class create_family_req : public ::google::protobuf::Message {
 public:
  create_family_req();
  virtual ~create_family_req();

  create_family_req(const create_family_req& from);

  inline create_family_req& operator=(const create_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_family_req& default_instance();

  void Swap(create_family_req* other);

  // implements Message ----------------------------------------------

  create_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_family_req& from);
  void MergeFrom(const create_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef create_family_req_use use;
  static const use copper = create_family_req_use_copper;
  static const use silver = create_family_req_use_silver;
  static const use token = create_family_req_use_token;
  static inline bool use_IsValid(int value) {
    return create_family_req_use_IsValid(value);
  }
  static const use use_MIN =
    create_family_req_use_use_MIN;
  static const use use_MAX =
    create_family_req_use_use_MAX;
  static const int use_ARRAYSIZE =
    create_family_req_use_use_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  use_descriptor() {
    return create_family_req_use_descriptor();
  }
  static inline const ::std::string& use_Name(use value) {
    return create_family_req_use_Name(value);
  }
  static inline bool use_Parse(const ::std::string& name,
      use* value) {
    return create_family_req_use_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.create_family_req.use type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::create_family_req_use type() const;
  inline void set_type(::client::create_family_req_use value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 flag_id = 3;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // required string flag_name = 4;
  inline bool has_flag_name() const;
  inline void clear_flag_name();
  static const int kFlagNameFieldNumber = 4;
  inline const ::std::string& flag_name() const;
  inline void set_flag_name(const ::std::string& value);
  inline void set_flag_name(const char* value);
  inline void set_flag_name(const char* value, size_t size);
  inline ::std::string* mutable_flag_name();
  inline ::std::string* release_flag_name();
  inline void set_allocated_flag_name(::std::string* flag_name);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.create_family_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_flag_name();
  inline void clear_has_flag_name();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 flag_id_;
  ::std::string* flag_name_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static create_family_req* default_instance_;
};
// -------------------------------------------------------------------

class create_family_rsp : public ::google::protobuf::Message {
 public:
  create_family_rsp();
  virtual ~create_family_rsp();

  create_family_rsp(const create_family_rsp& from);

  inline create_family_rsp& operator=(const create_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_family_rsp& default_instance();

  void Swap(create_family_rsp* other);

  // implements Message ----------------------------------------------

  create_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_family_rsp& from);
  void MergeFrom(const create_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef create_family_rsp_result result;
  static const result success = create_family_rsp_result_success;
  static const result copper_limit = create_family_rsp_result_copper_limit;
  static const result silver_limit = create_family_rsp_result_silver_limit;
  static const result token_limit = create_family_rsp_result_token_limit;
  static const result name_limit = create_family_rsp_result_name_limit;
  static const result flag_limit = create_family_rsp_result_flag_limit;
  static const result have_limit = create_family_rsp_result_have_limit;
  static const result activity_limit = create_family_rsp_result_activity_limit;
  static inline bool result_IsValid(int value) {
    return create_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    create_family_rsp_result_result_MIN;
  static const result result_MAX =
    create_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    create_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return create_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return create_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return create_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.create_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::create_family_rsp_result ret() const;
  inline void set_ret(::client::create_family_rsp_result value);

  // optional uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.create_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static create_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_req : public ::google::protobuf::Message {
 public:
  family_req();
  virtual ~family_req();

  family_req(const family_req& from);

  inline family_req& operator=(const family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_req& default_instance();

  void Swap(family_req* other);

  // implements Message ----------------------------------------------

  family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_req& from);
  void MergeFrom(const family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 family_id = 1;
  inline int family_id_size() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id(int index) const;
  inline void set_family_id(int index, ::google::protobuf::uint32 value);
  inline void add_family_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      family_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_family_id();

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_req)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > family_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_req* default_instance_;
};
// -------------------------------------------------------------------

class family_rsp : public ::google::protobuf::Message {
 public:
  family_rsp();
  virtual ~family_rsp();

  family_rsp(const family_rsp& from);

  inline family_rsp& operator=(const family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_rsp& default_instance();

  void Swap(family_rsp* other);

  // implements Message ----------------------------------------------

  family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_rsp& from);
  void MergeFrom(const family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.family_info fi = 1;
  inline int fi_size() const;
  inline void clear_fi();
  static const int kFiFieldNumber = 1;
  inline const ::client::family_info& fi(int index) const;
  inline ::client::family_info* mutable_fi(int index);
  inline ::client::family_info* add_fi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_info >&
      fi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_info >*
      mutable_fi();

  // @@protoc_insertion_point(class_scope:client.family_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_info > fi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_req : public ::google::protobuf::Message {
 public:
  apply_family_req();
  virtual ~apply_family_req();

  apply_family_req(const apply_family_req& from);

  inline apply_family_req& operator=(const apply_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_req& default_instance();

  void Swap(apply_family_req* other);

  // implements Message ----------------------------------------------

  apply_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_req& from);
  void MergeFrom(const apply_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.apply_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_req* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_rsp : public ::google::protobuf::Message {
 public:
  apply_family_rsp();
  virtual ~apply_family_rsp();

  apply_family_rsp(const apply_family_rsp& from);

  inline apply_family_rsp& operator=(const apply_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_rsp& default_instance();

  void Swap(apply_family_rsp* other);

  // implements Message ----------------------------------------------

  apply_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_rsp& from);
  void MergeFrom(const apply_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef apply_family_rsp_result result;
  static const result success = apply_family_rsp_result_success;
  static const result lvl_limit = apply_family_rsp_result_lvl_limit;
  static const result full_family = apply_family_rsp_result_full_family;
  static const result apply_count = apply_family_rsp_result_apply_count;
  static const result not_family = apply_family_rsp_result_not_family;
  static const result time_out = apply_family_rsp_result_time_out;
  static const result leader_offline = apply_family_rsp_result_leader_offline;
  static const result have_family = apply_family_rsp_result_have_family;
  static const result already_apply = apply_family_rsp_result_already_apply;
  static inline bool result_IsValid(int value) {
    return apply_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    apply_family_rsp_result_result_MIN;
  static const result result_MAX =
    apply_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    apply_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return apply_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return apply_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return apply_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.apply_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::apply_family_rsp_result ret() const;
  inline void set_ret(::client::apply_family_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.apply_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_set_req : public ::google::protobuf::Message {
 public:
  family_set_req();
  virtual ~family_set_req();

  family_set_req(const family_set_req& from);

  inline family_set_req& operator=(const family_set_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_set_req& default_instance();

  void Swap(family_set_req* other);

  // implements Message ----------------------------------------------

  family_set_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_set_req& from);
  void MergeFrom(const family_set_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 approval = 2;
  inline bool has_approval() const;
  inline void clear_approval();
  static const int kApprovalFieldNumber = 2;
  inline ::google::protobuf::uint32 approval() const;
  inline void set_approval(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_set_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_approval();
  inline void clear_has_approval();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 approval_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_set_req* default_instance_;
};
// -------------------------------------------------------------------

class family_set_rsp : public ::google::protobuf::Message {
 public:
  family_set_rsp();
  virtual ~family_set_rsp();

  family_set_rsp(const family_set_rsp& from);

  inline family_set_rsp& operator=(const family_set_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_set_rsp& default_instance();

  void Swap(family_set_rsp* other);

  // implements Message ----------------------------------------------

  family_set_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_set_rsp& from);
  void MergeFrom(const family_set_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 is_success = 1;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  inline ::google::protobuf::uint32 is_success() const;
  inline void set_is_success(::google::protobuf::uint32 value);

  // optional uint32 approval = 2;
  inline bool has_approval() const;
  inline void clear_approval();
  static const int kApprovalFieldNumber = 2;
  inline ::google::protobuf::uint32 approval() const;
  inline void set_approval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_set_rsp)
 private:
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_approval();
  inline void clear_has_approval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_success_;
  ::google::protobuf::uint32 approval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_set_rsp* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_list_req : public ::google::protobuf::Message {
 public:
  apply_family_list_req();
  virtual ~apply_family_list_req();

  apply_family_list_req(const apply_family_list_req& from);

  inline apply_family_list_req& operator=(const apply_family_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_list_req& default_instance();

  void Swap(apply_family_list_req* other);

  // implements Message ----------------------------------------------

  apply_family_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_list_req& from);
  void MergeFrom(const apply_family_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.apply_family_list_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_list_req* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_list_rsp : public ::google::protobuf::Message {
 public:
  apply_family_list_rsp();
  virtual ~apply_family_list_rsp();

  apply_family_list_rsp(const apply_family_list_rsp& from);

  inline apply_family_list_rsp& operator=(const apply_family_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_list_rsp& default_instance();

  void Swap(apply_family_list_rsp* other);

  // implements Message ----------------------------------------------

  apply_family_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_list_rsp& from);
  void MergeFrom(const apply_family_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated uint32 role_id = 2;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // @@protoc_insertion_point(class_scope:client.apply_family_list_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class approval_family_req : public ::google::protobuf::Message {
 public:
  approval_family_req();
  virtual ~approval_family_req();

  approval_family_req(const approval_family_req& from);

  inline approval_family_req& operator=(const approval_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const approval_family_req& default_instance();

  void Swap(approval_family_req* other);

  // implements Message ----------------------------------------------

  approval_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const approval_family_req& from);
  void MergeFrom(const approval_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.approval_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static approval_family_req* default_instance_;
};
// -------------------------------------------------------------------

class approval_family_rsp : public ::google::protobuf::Message {
 public:
  approval_family_rsp();
  virtual ~approval_family_rsp();

  approval_family_rsp(const approval_family_rsp& from);

  inline approval_family_rsp& operator=(const approval_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const approval_family_rsp& default_instance();

  void Swap(approval_family_rsp* other);

  // implements Message ----------------------------------------------

  approval_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const approval_family_rsp& from);
  void MergeFrom(const approval_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef approval_family_rsp_result result;
  static const result success = approval_family_rsp_result_success;
  static const result permissions = approval_family_rsp_result_permissions;
  static const result full_family = approval_family_rsp_result_full_family;
  static const result pass_join = approval_family_rsp_result_pass_join;
  static const result reject_join = approval_family_rsp_result_reject_join;
  static const result have_family = approval_family_rsp_result_have_family;
  static inline bool result_IsValid(int value) {
    return approval_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    approval_family_rsp_result_result_MIN;
  static const result result_MAX =
    approval_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    approval_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return approval_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return approval_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return approval_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.approval_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::approval_family_rsp_result ret() const;
  inline void set_ret(::client::approval_family_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 sect_id = 5;
  inline bool has_sect_id() const;
  inline void clear_sect_id();
  static const int kSectIdFieldNumber = 5;
  inline ::google::protobuf::uint32 sect_id() const;
  inline void set_sect_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.approval_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sect_id();
  inline void clear_has_sect_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sect_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static approval_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class invite_family_req : public ::google::protobuf::Message {
 public:
  invite_family_req();
  virtual ~invite_family_req();

  invite_family_req(const invite_family_req& from);

  inline invite_family_req& operator=(const invite_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_family_req& default_instance();

  void Swap(invite_family_req* other);

  // implements Message ----------------------------------------------

  invite_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_family_req& from);
  void MergeFrom(const invite_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.invite_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static invite_family_req* default_instance_;
};
// -------------------------------------------------------------------

class invite_family_rsp : public ::google::protobuf::Message {
 public:
  invite_family_rsp();
  virtual ~invite_family_rsp();

  invite_family_rsp(const invite_family_rsp& from);

  inline invite_family_rsp& operator=(const invite_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_family_rsp& default_instance();

  void Swap(invite_family_rsp* other);

  // implements Message ----------------------------------------------

  invite_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_family_rsp& from);
  void MergeFrom(const invite_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef invite_family_rsp_result result;
  static const result success = invite_family_rsp_result_success;
  static const result null_family = invite_family_rsp_result_null_family;
  static const result not_online = invite_family_rsp_result_not_online;
  static const result lvl_limit = invite_family_rsp_result_lvl_limit;
  static const result has_family = invite_family_rsp_result_has_family;
  static const result full_family = invite_family_rsp_result_full_family;
  static inline bool result_IsValid(int value) {
    return invite_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    invite_family_rsp_result_result_MIN;
  static const result result_MAX =
    invite_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    invite_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return invite_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return invite_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return invite_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required .client.invite_family_rsp.result ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::client::invite_family_rsp_result ret() const;
  inline void set_ret(::client::invite_family_rsp_result value);

  // @@protoc_insertion_point(class_scope:client.invite_family_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static invite_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class invite_family_list_req : public ::google::protobuf::Message {
 public:
  invite_family_list_req();
  virtual ~invite_family_list_req();

  invite_family_list_req(const invite_family_list_req& from);

  inline invite_family_list_req& operator=(const invite_family_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_family_list_req& default_instance();

  void Swap(invite_family_list_req* other);

  // implements Message ----------------------------------------------

  invite_family_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_family_list_req& from);
  void MergeFrom(const invite_family_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.invite_family_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static invite_family_list_req* default_instance_;
};
// -------------------------------------------------------------------

class invite_family_info : public ::google::protobuf::Message {
 public:
  invite_family_info();
  virtual ~invite_family_info();

  invite_family_info(const invite_family_info& from);

  inline invite_family_info& operator=(const invite_family_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_family_info& default_instance();

  void Swap(invite_family_info* other);

  // implements Message ----------------------------------------------

  invite_family_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_family_info& from);
  void MergeFrom(const invite_family_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.invite_family_info)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static invite_family_info* default_instance_;
};
// -------------------------------------------------------------------

class invite_family_list_rsp : public ::google::protobuf::Message {
 public:
  invite_family_list_rsp();
  virtual ~invite_family_list_rsp();

  invite_family_list_rsp(const invite_family_list_rsp& from);

  inline invite_family_list_rsp& operator=(const invite_family_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_family_list_rsp& default_instance();

  void Swap(invite_family_list_rsp* other);

  // implements Message ----------------------------------------------

  invite_family_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_family_list_rsp& from);
  void MergeFrom(const invite_family_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.invite_family_info ifi = 1;
  inline int ifi_size() const;
  inline void clear_ifi();
  static const int kIfiFieldNumber = 1;
  inline const ::client::invite_family_info& ifi(int index) const;
  inline ::client::invite_family_info* mutable_ifi(int index);
  inline ::client::invite_family_info* add_ifi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::invite_family_info >&
      ifi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::invite_family_info >*
      mutable_ifi();

  // @@protoc_insertion_point(class_scope:client.invite_family_list_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::invite_family_info > ifi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static invite_family_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class agree_family_req : public ::google::protobuf::Message {
 public:
  agree_family_req();
  virtual ~agree_family_req();

  agree_family_req(const agree_family_req& from);

  inline agree_family_req& operator=(const agree_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agree_family_req& default_instance();

  void Swap(agree_family_req* other);

  // implements Message ----------------------------------------------

  agree_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agree_family_req& from);
  void MergeFrom(const agree_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.agree_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 type_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static agree_family_req* default_instance_;
};
// -------------------------------------------------------------------

class agree_family_rsp : public ::google::protobuf::Message {
 public:
  agree_family_rsp();
  virtual ~agree_family_rsp();

  agree_family_rsp(const agree_family_rsp& from);

  inline agree_family_rsp& operator=(const agree_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agree_family_rsp& default_instance();

  void Swap(agree_family_rsp* other);

  // implements Message ----------------------------------------------

  agree_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agree_family_rsp& from);
  void MergeFrom(const agree_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef agree_family_rsp_result result;
  static const result success = agree_family_rsp_result_success;
  static const result has_family = agree_family_rsp_result_has_family;
  static const result full_family = agree_family_rsp_result_full_family;
  static inline bool result_IsValid(int value) {
    return agree_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    agree_family_rsp_result_result_MIN;
  static const result result_MAX =
    agree_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    agree_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return agree_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return agree_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return agree_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.agree_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::agree_family_rsp_result ret() const;
  inline void set_ret(::client::agree_family_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.agree_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static agree_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class modify_family_post_req : public ::google::protobuf::Message {
 public:
  modify_family_post_req();
  virtual ~modify_family_post_req();

  modify_family_post_req(const modify_family_post_req& from);

  inline modify_family_post_req& operator=(const modify_family_post_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_family_post_req& default_instance();

  void Swap(modify_family_post_req* other);

  // implements Message ----------------------------------------------

  modify_family_post_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_family_post_req& from);
  void MergeFrom(const modify_family_post_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string post = 2;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 2;
  inline const ::std::string& post() const;
  inline void set_post(const ::std::string& value);
  inline void set_post(const char* value);
  inline void set_post(const char* value, size_t size);
  inline ::std::string* mutable_post();
  inline ::std::string* release_post();
  inline void set_allocated_post(::std::string* post);

  // optional uint32 qq = 3;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 3;
  inline ::google::protobuf::uint32 qq() const;
  inline void set_qq(::google::protobuf::uint32 value);

  // optional uint32 yy = 4;
  inline bool has_yy() const;
  inline void clear_yy();
  static const int kYyFieldNumber = 4;
  inline ::google::protobuf::uint32 yy() const;
  inline void set_yy(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.modify_family_post_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_yy();
  inline void clear_has_yy();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* post_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 qq_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 yy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static modify_family_post_req* default_instance_;
};
// -------------------------------------------------------------------

class modify_family_post_rsp : public ::google::protobuf::Message {
 public:
  modify_family_post_rsp();
  virtual ~modify_family_post_rsp();

  modify_family_post_rsp(const modify_family_post_rsp& from);

  inline modify_family_post_rsp& operator=(const modify_family_post_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_family_post_rsp& default_instance();

  void Swap(modify_family_post_rsp* other);

  // implements Message ----------------------------------------------

  modify_family_post_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_family_post_rsp& from);
  void MergeFrom(const modify_family_post_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef modify_family_post_rsp_result result;
  static const result success = modify_family_post_rsp_result_success;
  static const result permissions = modify_family_post_rsp_result_permissions;
  static const result too_long = modify_family_post_rsp_result_too_long;
  static inline bool result_IsValid(int value) {
    return modify_family_post_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    modify_family_post_rsp_result_result_MIN;
  static const result result_MAX =
    modify_family_post_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    modify_family_post_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return modify_family_post_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return modify_family_post_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return modify_family_post_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.modify_family_post_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::modify_family_post_rsp_result ret() const;
  inline void set_ret(::client::modify_family_post_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string post = 3;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 3;
  inline const ::std::string& post() const;
  inline void set_post(const ::std::string& value);
  inline void set_post(const char* value);
  inline void set_post(const char* value, size_t size);
  inline ::std::string* mutable_post();
  inline ::std::string* release_post();
  inline void set_allocated_post(::std::string* post);

  // optional uint32 qq = 4;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 4;
  inline ::google::protobuf::uint32 qq() const;
  inline void set_qq(::google::protobuf::uint32 value);

  // optional uint32 yy = 5;
  inline bool has_yy() const;
  inline void clear_yy();
  static const int kYyFieldNumber = 5;
  inline ::google::protobuf::uint32 yy() const;
  inline void set_yy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.modify_family_post_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_yy();
  inline void clear_has_yy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* post_;
  ::google::protobuf::uint32 qq_;
  ::google::protobuf::uint32 yy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static modify_family_post_rsp* default_instance_;
};
// -------------------------------------------------------------------

class disband_family_req : public ::google::protobuf::Message {
 public:
  disband_family_req();
  virtual ~disband_family_req();

  disband_family_req(const disband_family_req& from);

  inline disband_family_req& operator=(const disband_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const disband_family_req& default_instance();

  void Swap(disband_family_req* other);

  // implements Message ----------------------------------------------

  disband_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const disband_family_req& from);
  void MergeFrom(const disband_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.disband_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static disband_family_req* default_instance_;
};
// -------------------------------------------------------------------

class disband_family_rsp : public ::google::protobuf::Message {
 public:
  disband_family_rsp();
  virtual ~disband_family_rsp();

  disband_family_rsp(const disband_family_rsp& from);

  inline disband_family_rsp& operator=(const disband_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const disband_family_rsp& default_instance();

  void Swap(disband_family_rsp* other);

  // implements Message ----------------------------------------------

  disband_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const disband_family_rsp& from);
  void MergeFrom(const disband_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef disband_family_rsp_result result;
  static const result success = disband_family_rsp_result_success;
  static const result permissions = disband_family_rsp_result_permissions;
  static const result family_id_err = disband_family_rsp_result_family_id_err;
  static const result family_has_king = disband_family_rsp_result_family_has_king;
  static inline bool result_IsValid(int value) {
    return disband_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    disband_family_rsp_result_result_MIN;
  static const result result_MAX =
    disband_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    disband_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return disband_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return disband_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return disband_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.disband_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::disband_family_rsp_result ret() const;
  inline void set_ret(::client::disband_family_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.disband_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static disband_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_self_req : public ::google::protobuf::Message {
 public:
  family_self_req();
  virtual ~family_self_req();

  family_self_req(const family_self_req& from);

  inline family_self_req& operator=(const family_self_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_self_req& default_instance();

  void Swap(family_self_req* other);

  // implements Message ----------------------------------------------

  family_self_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_self_req& from);
  void MergeFrom(const family_self_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_self_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_self_req* default_instance_;
};
// -------------------------------------------------------------------

class family_self_rsp : public ::google::protobuf::Message {
 public:
  family_self_rsp();
  virtual ~family_self_rsp();

  family_self_rsp(const family_self_rsp& from);

  inline family_self_rsp& operator=(const family_self_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_self_rsp& default_instance();

  void Swap(family_self_rsp* other);

  // implements Message ----------------------------------------------

  family_self_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_self_rsp& from);
  void MergeFrom(const family_self_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 permissions = 2;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  inline ::google::protobuf::uint32 permissions() const;
  inline void set_permissions(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 add_by = 4;
  inline bool has_add_by() const;
  inline void clear_add_by();
  static const int kAddByFieldNumber = 4;
  inline ::google::protobuf::uint32 add_by() const;
  inline void set_add_by(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_self_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_permissions();
  inline void clear_has_permissions();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_add_by();
  inline void clear_has_add_by();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 permissions_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 add_by_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_self_rsp* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_list_self_req : public ::google::protobuf::Message {
 public:
  apply_family_list_self_req();
  virtual ~apply_family_list_self_req();

  apply_family_list_self_req(const apply_family_list_self_req& from);

  inline apply_family_list_self_req& operator=(const apply_family_list_self_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_list_self_req& default_instance();

  void Swap(apply_family_list_self_req* other);

  // implements Message ----------------------------------------------

  apply_family_list_self_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_list_self_req& from);
  void MergeFrom(const apply_family_list_self_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.apply_family_list_self_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_list_self_req* default_instance_;
};
// -------------------------------------------------------------------

class apply_family_list_self_rsp : public ::google::protobuf::Message {
 public:
  apply_family_list_self_rsp();
  virtual ~apply_family_list_self_rsp();

  apply_family_list_self_rsp(const apply_family_list_self_rsp& from);

  inline apply_family_list_self_rsp& operator=(const apply_family_list_self_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const apply_family_list_self_rsp& default_instance();

  void Swap(apply_family_list_self_rsp* other);

  // implements Message ----------------------------------------------

  apply_family_list_self_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const apply_family_list_self_rsp& from);
  void MergeFrom(const apply_family_list_self_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 family_id = 1;
  inline int family_id_size() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id(int index) const;
  inline void set_family_id(int index, ::google::protobuf::uint32 value);
  inline void add_family_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      family_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_family_id();

  // repeated uint32 time = 2;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time(int index) const;
  inline void set_time(int index, ::google::protobuf::uint32 value);
  inline void add_time(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_time();

  // @@protoc_insertion_point(class_scope:client.apply_family_list_self_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > family_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static apply_family_list_self_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_member_list_req : public ::google::protobuf::Message {
 public:
  family_member_list_req();
  virtual ~family_member_list_req();

  family_member_list_req(const family_member_list_req& from);

  inline family_member_list_req& operator=(const family_member_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_member_list_req& default_instance();

  void Swap(family_member_list_req* other);

  // implements Message ----------------------------------------------

  family_member_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_member_list_req& from);
  void MergeFrom(const family_member_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_member_list_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_member_list_req* default_instance_;
};
// -------------------------------------------------------------------

class family_member_info : public ::google::protobuf::Message {
 public:
  family_member_info();
  virtual ~family_member_info();

  family_member_info(const family_member_info& from);

  inline family_member_info& operator=(const family_member_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_member_info& default_instance();

  void Swap(family_member_info* other);

  // implements Message ----------------------------------------------

  family_member_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_member_info& from);
  void MergeFrom(const family_member_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 permissions = 2;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  inline ::google::protobuf::uint32 permissions() const;
  inline void set_permissions(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 total_donate = 4;
  inline bool has_total_donate() const;
  inline void clear_total_donate();
  static const int kTotalDonateFieldNumber = 4;
  inline ::google::protobuf::uint32 total_donate() const;
  inline void set_total_donate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_member_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_permissions();
  inline void clear_has_permissions();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_total_donate();
  inline void clear_has_total_donate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 permissions_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 total_donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_member_info* default_instance_;
};
// -------------------------------------------------------------------

class family_member_list_rsp : public ::google::protobuf::Message {
 public:
  family_member_list_rsp();
  virtual ~family_member_list_rsp();

  family_member_list_rsp(const family_member_list_rsp& from);

  inline family_member_list_rsp& operator=(const family_member_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_member_list_rsp& default_instance();

  void Swap(family_member_list_rsp* other);

  // implements Message ----------------------------------------------

  family_member_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_member_list_rsp& from);
  void MergeFrom(const family_member_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.family_member_info fmi = 2;
  inline int fmi_size() const;
  inline void clear_fmi();
  static const int kFmiFieldNumber = 2;
  inline const ::client::family_member_info& fmi(int index) const;
  inline ::client::family_member_info* mutable_fmi(int index);
  inline ::client::family_member_info* add_fmi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_member_info >&
      fmi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_member_info >*
      mutable_fmi();

  // @@protoc_insertion_point(class_scope:client.family_member_list_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_member_info > fmi_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_member_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class modify_family_member_req : public ::google::protobuf::Message {
 public:
  modify_family_member_req();
  virtual ~modify_family_member_req();

  modify_family_member_req(const modify_family_member_req& from);

  inline modify_family_member_req& operator=(const modify_family_member_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_family_member_req& default_instance();

  void Swap(modify_family_member_req* other);

  // implements Message ----------------------------------------------

  modify_family_member_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_family_member_req& from);
  void MergeFrom(const modify_family_member_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.modify_family_member_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static modify_family_member_req* default_instance_;
};
// -------------------------------------------------------------------

class modify_family_member_rsp : public ::google::protobuf::Message {
 public:
  modify_family_member_rsp();
  virtual ~modify_family_member_rsp();

  modify_family_member_rsp(const modify_family_member_rsp& from);

  inline modify_family_member_rsp& operator=(const modify_family_member_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_family_member_rsp& default_instance();

  void Swap(modify_family_member_rsp* other);

  // implements Message ----------------------------------------------

  modify_family_member_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_family_member_rsp& from);
  void MergeFrom(const modify_family_member_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef modify_family_member_rsp_result result;
  static const result success = modify_family_member_rsp_result_success;
  static const result not_member = modify_family_member_rsp_result_not_member;
  static const result permissions = modify_family_member_rsp_result_permissions;
  static const result failure = modify_family_member_rsp_result_failure;
  static const result king_erro = modify_family_member_rsp_result_king_erro;
  static inline bool result_IsValid(int value) {
    return modify_family_member_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    modify_family_member_rsp_result_result_MIN;
  static const result result_MAX =
    modify_family_member_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    modify_family_member_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return modify_family_member_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return modify_family_member_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return modify_family_member_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.modify_family_member_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::modify_family_member_rsp_result ret() const;
  inline void set_ret(::client::modify_family_member_rsp_result value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.modify_family_member_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static modify_family_member_rsp* default_instance_;
};
// -------------------------------------------------------------------

class secede_family_req : public ::google::protobuf::Message {
 public:
  secede_family_req();
  virtual ~secede_family_req();

  secede_family_req(const secede_family_req& from);

  inline secede_family_req& operator=(const secede_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secede_family_req& default_instance();

  void Swap(secede_family_req* other);

  // implements Message ----------------------------------------------

  secede_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secede_family_req& from);
  void MergeFrom(const secede_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.secede_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static secede_family_req* default_instance_;
};
// -------------------------------------------------------------------

class secede_family_rsp : public ::google::protobuf::Message {
 public:
  secede_family_rsp();
  virtual ~secede_family_rsp();

  secede_family_rsp(const secede_family_rsp& from);

  inline secede_family_rsp& operator=(const secede_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secede_family_rsp& default_instance();

  void Swap(secede_family_rsp* other);

  // implements Message ----------------------------------------------

  secede_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secede_family_rsp& from);
  void MergeFrom(const secede_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 result_type = 3;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.secede_family_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static secede_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class expel_member_req : public ::google::protobuf::Message {
 public:
  expel_member_req();
  virtual ~expel_member_req();

  expel_member_req(const expel_member_req& from);

  inline expel_member_req& operator=(const expel_member_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const expel_member_req& default_instance();

  void Swap(expel_member_req* other);

  // implements Message ----------------------------------------------

  expel_member_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const expel_member_req& from);
  void MergeFrom(const expel_member_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 evictee_id = 1;
  inline bool has_evictee_id() const;
  inline void clear_evictee_id();
  static const int kEvicteeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 evictee_id() const;
  inline void set_evictee_id(::google::protobuf::uint32 value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.expel_member_req)
 private:
  inline void set_has_evictee_id();
  inline void clear_has_evictee_id();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 evictee_id_;
  ::google::protobuf::uint32 family_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static expel_member_req* default_instance_;
};
// -------------------------------------------------------------------

class expel_member_rsp : public ::google::protobuf::Message {
 public:
  expel_member_rsp();
  virtual ~expel_member_rsp();

  expel_member_rsp(const expel_member_rsp& from);

  inline expel_member_rsp& operator=(const expel_member_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const expel_member_rsp& default_instance();

  void Swap(expel_member_rsp* other);

  // implements Message ----------------------------------------------

  expel_member_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const expel_member_rsp& from);
  void MergeFrom(const expel_member_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 evictee_id = 3;
  inline bool has_evictee_id() const;
  inline void clear_evictee_id();
  static const int kEvicteeIdFieldNumber = 3;
  inline ::google::protobuf::uint32 evictee_id() const;
  inline void set_evictee_id(::google::protobuf::uint32 value);

  // required uint32 result_type = 4;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.expel_member_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_evictee_id();
  inline void clear_has_evictee_id();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 evictee_id_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static expel_member_rsp* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_family_req : public ::google::protobuf::Message {
 public:
  upgrade_family_req();
  virtual ~upgrade_family_req();

  upgrade_family_req(const upgrade_family_req& from);

  inline upgrade_family_req& operator=(const upgrade_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_family_req& default_instance();

  void Swap(upgrade_family_req* other);

  // implements Message ----------------------------------------------

  upgrade_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_family_req& from);
  void MergeFrom(const upgrade_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.upgrade_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static upgrade_family_req* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_family_rsp : public ::google::protobuf::Message {
 public:
  upgrade_family_rsp();
  virtual ~upgrade_family_rsp();

  upgrade_family_rsp(const upgrade_family_rsp& from);

  inline upgrade_family_rsp& operator=(const upgrade_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_family_rsp& default_instance();

  void Swap(upgrade_family_rsp* other);

  // implements Message ----------------------------------------------

  upgrade_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_family_rsp& from);
  void MergeFrom(const upgrade_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef upgrade_family_rsp_result result;
  static const result success = upgrade_family_rsp_result_success;
  static const result permissions = upgrade_family_rsp_result_permissions;
  static const result money_limit = upgrade_family_rsp_result_money_limit;
  static inline bool result_IsValid(int value) {
    return upgrade_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    upgrade_family_rsp_result_result_MIN;
  static const result result_MAX =
    upgrade_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    upgrade_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return upgrade_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return upgrade_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return upgrade_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.upgrade_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::upgrade_family_rsp_result ret() const;
  inline void set_ret(::client::upgrade_family_rsp_result value);

  // optional .client.family_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // @@protoc_insertion_point(class_scope:client.upgrade_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::family_info* info_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static upgrade_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class donate_family_req : public ::google::protobuf::Message {
 public:
  donate_family_req();
  virtual ~donate_family_req();

  donate_family_req(const donate_family_req& from);

  inline donate_family_req& operator=(const donate_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const donate_family_req& default_instance();

  void Swap(donate_family_req* other);

  // implements Message ----------------------------------------------

  donate_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const donate_family_req& from);
  void MergeFrom(const donate_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.donate_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 type_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static donate_family_req* default_instance_;
};
// -------------------------------------------------------------------

class donate_family_rsp : public ::google::protobuf::Message {
 public:
  donate_family_rsp();
  virtual ~donate_family_rsp();

  donate_family_rsp(const donate_family_rsp& from);

  inline donate_family_rsp& operator=(const donate_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const donate_family_rsp& default_instance();

  void Swap(donate_family_rsp* other);

  // implements Message ----------------------------------------------

  donate_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const donate_family_rsp& from);
  void MergeFrom(const donate_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef donate_family_rsp_result result;
  static const result success = donate_family_rsp_result_success;
  static const result not_enough = donate_family_rsp_result_not_enough;
  static const result day_limit = donate_family_rsp_result_day_limit;
  static const result donate_type_err = donate_family_rsp_result_donate_type_err;
  static inline bool result_IsValid(int value) {
    return donate_family_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    donate_family_rsp_result_result_MIN;
  static const result result_MAX =
    donate_family_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    donate_family_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return donate_family_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return donate_family_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return donate_family_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.donate_family_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::donate_family_rsp_result ret() const;
  inline void set_ret(::client::donate_family_rsp_result value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.family_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // optional uint32 total_donate = 4;
  inline bool has_total_donate() const;
  inline void clear_total_donate();
  static const int kTotalDonateFieldNumber = 4;
  inline ::google::protobuf::uint32 total_donate() const;
  inline void set_total_donate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.donate_family_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_total_donate();
  inline void clear_has_total_donate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 type_;
  ::client::family_info* info_;
  ::google::protobuf::uint32 total_donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static donate_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class donate_list_req : public ::google::protobuf::Message {
 public:
  donate_list_req();
  virtual ~donate_list_req();

  donate_list_req(const donate_list_req& from);

  inline donate_list_req& operator=(const donate_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const donate_list_req& default_instance();

  void Swap(donate_list_req* other);

  // implements Message ----------------------------------------------

  donate_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const donate_list_req& from);
  void MergeFrom(const donate_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.donate_list_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static donate_list_req* default_instance_;
};
// -------------------------------------------------------------------

class donate_info : public ::google::protobuf::Message {
 public:
  donate_info();
  virtual ~donate_info();

  donate_info(const donate_info& from);

  inline donate_info& operator=(const donate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const donate_info& default_instance();

  void Swap(donate_info* other);

  // implements Message ----------------------------------------------

  donate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const donate_info& from);
  void MergeFrom(const donate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 dragon_count = 2;
  inline bool has_dragon_count() const;
  inline void clear_dragon_count();
  static const int kDragonCountFieldNumber = 2;
  inline ::google::protobuf::uint32 dragon_count() const;
  inline void set_dragon_count(::google::protobuf::uint32 value);

  // required uint32 tiger_count = 3;
  inline bool has_tiger_count() const;
  inline void clear_tiger_count();
  static const int kTigerCountFieldNumber = 3;
  inline ::google::protobuf::uint32 tiger_count() const;
  inline void set_tiger_count(::google::protobuf::uint32 value);

  // required uint32 rosefinch_count = 4;
  inline bool has_rosefinch_count() const;
  inline void clear_rosefinch_count();
  static const int kRosefinchCountFieldNumber = 4;
  inline ::google::protobuf::uint32 rosefinch_count() const;
  inline void set_rosefinch_count(::google::protobuf::uint32 value);

  // required uint32 tortoise_count = 5;
  inline bool has_tortoise_count() const;
  inline void clear_tortoise_count();
  static const int kTortoiseCountFieldNumber = 5;
  inline ::google::protobuf::uint32 tortoise_count() const;
  inline void set_tortoise_count(::google::protobuf::uint32 value);

  // required uint32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.donate_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_dragon_count();
  inline void clear_has_dragon_count();
  inline void set_has_tiger_count();
  inline void clear_has_tiger_count();
  inline void set_has_rosefinch_count();
  inline void clear_has_rosefinch_count();
  inline void set_has_tortoise_count();
  inline void clear_has_tortoise_count();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 dragon_count_;
  ::google::protobuf::uint32 tiger_count_;
  ::google::protobuf::uint32 rosefinch_count_;
  ::google::protobuf::uint32 tortoise_count_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static donate_info* default_instance_;
};
// -------------------------------------------------------------------

class donate_list_rsp : public ::google::protobuf::Message {
 public:
  donate_list_rsp();
  virtual ~donate_list_rsp();

  donate_list_rsp(const donate_list_rsp& from);

  inline donate_list_rsp& operator=(const donate_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const donate_list_rsp& default_instance();

  void Swap(donate_list_rsp* other);

  // implements Message ----------------------------------------------

  donate_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const donate_list_rsp& from);
  void MergeFrom(const donate_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.donate_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::donate_info& info(int index) const;
  inline ::client::donate_info* mutable_info(int index);
  inline ::client::donate_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::donate_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::donate_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.donate_list_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::donate_info > info_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static donate_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_log_req : public ::google::protobuf::Message {
 public:
  family_log_req();
  virtual ~family_log_req();

  family_log_req(const family_log_req& from);

  inline family_log_req& operator=(const family_log_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_log_req& default_instance();

  void Swap(family_log_req* other);

  // implements Message ----------------------------------------------

  family_log_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_log_req& from);
  void MergeFrom(const family_log_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_log_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_log_req* default_instance_;
};
// -------------------------------------------------------------------

class family_log_info : public ::google::protobuf::Message {
 public:
  family_log_info();
  virtual ~family_log_info();

  family_log_info(const family_log_info& from);

  inline family_log_info& operator=(const family_log_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_log_info& default_instance();

  void Swap(family_log_info* other);

  // implements Message ----------------------------------------------

  family_log_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_log_info& from);
  void MergeFrom(const family_log_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // required uint32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required string family_name = 5;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 5;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // @@protoc_insertion_point(class_scope:client.family_log_info)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;
  ::std::string* family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_log_info* default_instance_;
};
// -------------------------------------------------------------------

class family_log_rsp : public ::google::protobuf::Message {
 public:
  family_log_rsp();
  virtual ~family_log_rsp();

  family_log_rsp(const family_log_rsp& from);

  inline family_log_rsp& operator=(const family_log_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_log_rsp& default_instance();

  void Swap(family_log_rsp* other);

  // implements Message ----------------------------------------------

  family_log_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_log_rsp& from);
  void MergeFrom(const family_log_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.family_log_info fli = 2;
  inline int fli_size() const;
  inline void clear_fli();
  static const int kFliFieldNumber = 2;
  inline const ::client::family_log_info& fli(int index) const;
  inline ::client::family_log_info* mutable_fli(int index);
  inline ::client::family_log_info* add_fli();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_log_info >&
      fli() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_log_info >*
      mutable_fli();

  // @@protoc_insertion_point(class_scope:client.family_log_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_log_info > fli_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_log_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_log_update : public ::google::protobuf::Message {
 public:
  family_log_update();
  virtual ~family_log_update();

  family_log_update(const family_log_update& from);

  inline family_log_update& operator=(const family_log_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_log_update& default_instance();

  void Swap(family_log_update* other);

  // implements Message ----------------------------------------------

  family_log_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_log_update& from);
  void MergeFrom(const family_log_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.family_log_info fli = 2;
  inline int fli_size() const;
  inline void clear_fli();
  static const int kFliFieldNumber = 2;
  inline const ::client::family_log_info& fli(int index) const;
  inline ::client::family_log_info* mutable_fli(int index);
  inline ::client::family_log_info* add_fli();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_log_info >&
      fli() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_log_info >*
      mutable_fli();

  // @@protoc_insertion_point(class_scope:client.family_log_update)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_log_info > fli_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_log_update* default_instance_;
};
// -------------------------------------------------------------------

class family_record_req : public ::google::protobuf::Message {
 public:
  family_record_req();
  virtual ~family_record_req();

  family_record_req(const family_record_req& from);

  inline family_record_req& operator=(const family_record_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_record_req& default_instance();

  void Swap(family_record_req* other);

  // implements Message ----------------------------------------------

  family_record_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_record_req& from);
  void MergeFrom(const family_record_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_record_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_record_req* default_instance_;
};
// -------------------------------------------------------------------

class family_record_info : public ::google::protobuf::Message {
 public:
  family_record_info();
  virtual ~family_record_info();

  family_record_info(const family_record_info& from);

  inline family_record_info& operator=(const family_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_record_info& default_instance();

  void Swap(family_record_info* other);

  // implements Message ----------------------------------------------

  family_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_record_info& from);
  void MergeFrom(const family_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 join_num = 2;
  inline bool has_join_num() const;
  inline void clear_join_num();
  static const int kJoinNumFieldNumber = 2;
  inline ::google::protobuf::uint32 join_num() const;
  inline void set_join_num(::google::protobuf::uint32 value);

  // required uint32 kill_chief_num = 3;
  inline bool has_kill_chief_num() const;
  inline void clear_kill_chief_num();
  static const int kKillChiefNumFieldNumber = 3;
  inline ::google::protobuf::uint32 kill_chief_num() const;
  inline void set_kill_chief_num(::google::protobuf::uint32 value);

  // required uint32 kill_vice_chief_num = 4;
  inline bool has_kill_vice_chief_num() const;
  inline void clear_kill_vice_chief_num();
  static const int kKillViceChiefNumFieldNumber = 4;
  inline ::google::protobuf::uint32 kill_vice_chief_num() const;
  inline void set_kill_vice_chief_num(::google::protobuf::uint32 value);

  // required uint32 kill_elder_num = 5;
  inline bool has_kill_elder_num() const;
  inline void clear_kill_elder_num();
  static const int kKillElderNumFieldNumber = 5;
  inline ::google::protobuf::uint32 kill_elder_num() const;
  inline void set_kill_elder_num(::google::protobuf::uint32 value);

  // required uint32 kill_elite_num = 6;
  inline bool has_kill_elite_num() const;
  inline void clear_kill_elite_num();
  static const int kKillEliteNumFieldNumber = 6;
  inline ::google::protobuf::uint32 kill_elite_num() const;
  inline void set_kill_elite_num(::google::protobuf::uint32 value);

  // required uint32 kill_member_num = 7;
  inline bool has_kill_member_num() const;
  inline void clear_kill_member_num();
  static const int kKillMemberNumFieldNumber = 7;
  inline ::google::protobuf::uint32 kill_member_num() const;
  inline void set_kill_member_num(::google::protobuf::uint32 value);

  // required uint32 dead_num = 8;
  inline bool has_dead_num() const;
  inline void clear_dead_num();
  static const int kDeadNumFieldNumber = 8;
  inline ::google::protobuf::uint32 dead_num() const;
  inline void set_dead_num(::google::protobuf::uint32 value);

  // required uint32 be_kill = 9;
  inline bool has_be_kill() const;
  inline void clear_be_kill();
  static const int kBeKillFieldNumber = 9;
  inline ::google::protobuf::uint32 be_kill() const;
  inline void set_be_kill(::google::protobuf::uint32 value);

  // required uint32 be_kill_num = 10;
  inline bool has_be_kill_num() const;
  inline void clear_be_kill_num();
  static const int kBeKillNumFieldNumber = 10;
  inline ::google::protobuf::uint32 be_kill_num() const;
  inline void set_be_kill_num(::google::protobuf::uint32 value);

  // required uint32 type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.family_record_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_join_num();
  inline void clear_has_join_num();
  inline void set_has_kill_chief_num();
  inline void clear_has_kill_chief_num();
  inline void set_has_kill_vice_chief_num();
  inline void clear_has_kill_vice_chief_num();
  inline void set_has_kill_elder_num();
  inline void clear_has_kill_elder_num();
  inline void set_has_kill_elite_num();
  inline void clear_has_kill_elite_num();
  inline void set_has_kill_member_num();
  inline void clear_has_kill_member_num();
  inline void set_has_dead_num();
  inline void clear_has_dead_num();
  inline void set_has_be_kill();
  inline void clear_has_be_kill();
  inline void set_has_be_kill_num();
  inline void clear_has_be_kill_num();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 join_num_;
  ::google::protobuf::uint32 kill_chief_num_;
  ::google::protobuf::uint32 kill_vice_chief_num_;
  ::google::protobuf::uint32 kill_elder_num_;
  ::google::protobuf::uint32 kill_elite_num_;
  ::google::protobuf::uint32 kill_member_num_;
  ::google::protobuf::uint32 dead_num_;
  ::google::protobuf::uint32 be_kill_;
  ::google::protobuf::uint32 be_kill_num_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_record_info* default_instance_;
};
// -------------------------------------------------------------------

class family_record_rsp : public ::google::protobuf::Message {
 public:
  family_record_rsp();
  virtual ~family_record_rsp();

  family_record_rsp(const family_record_rsp& from);

  inline family_record_rsp& operator=(const family_record_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_record_rsp& default_instance();

  void Swap(family_record_rsp* other);

  // implements Message ----------------------------------------------

  family_record_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_record_rsp& from);
  void MergeFrom(const family_record_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.family_record_info fri = 2;
  inline int fri_size() const;
  inline void clear_fri();
  static const int kFriFieldNumber = 2;
  inline const ::client::family_record_info& fri(int index) const;
  inline ::client::family_record_info* mutable_fri(int index);
  inline ::client::family_record_info* add_fri();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_record_info >&
      fri() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_record_info >*
      mutable_fri();

  // @@protoc_insertion_point(class_scope:client.family_record_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_record_info > fri_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_record_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_record_update : public ::google::protobuf::Message {
 public:
  family_record_update();
  virtual ~family_record_update();

  family_record_update(const family_record_update& from);

  inline family_record_update& operator=(const family_record_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_record_update& default_instance();

  void Swap(family_record_update* other);

  // implements Message ----------------------------------------------

  family_record_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_record_update& from);
  void MergeFrom(const family_record_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 killer_family = 2;
  inline bool has_killer_family() const;
  inline void clear_killer_family();
  static const int kKillerFamilyFieldNumber = 2;
  inline ::google::protobuf::uint32 killer_family() const;
  inline void set_killer_family(::google::protobuf::uint32 value);

  // required uint32 killer = 3;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 3;
  inline ::google::protobuf::uint32 killer() const;
  inline void set_killer(::google::protobuf::uint32 value);

  // required uint32 slain_family = 4;
  inline bool has_slain_family() const;
  inline void clear_slain_family();
  static const int kSlainFamilyFieldNumber = 4;
  inline ::google::protobuf::uint32 slain_family() const;
  inline void set_slain_family(::google::protobuf::uint32 value);

  // required uint32 slain_title = 5;
  inline bool has_slain_title() const;
  inline void clear_slain_title();
  static const int kSlainTitleFieldNumber = 5;
  inline ::google::protobuf::uint32 slain_title() const;
  inline void set_slain_title(::google::protobuf::uint32 value);

  // required uint32 slain = 6;
  inline bool has_slain() const;
  inline void clear_slain();
  static const int kSlainFieldNumber = 6;
  inline ::google::protobuf::uint32 slain() const;
  inline void set_slain(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.family_record_update)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_killer_family();
  inline void clear_has_killer_family();
  inline void set_has_killer();
  inline void clear_has_killer();
  inline void set_has_slain_family();
  inline void clear_has_slain_family();
  inline void set_has_slain_title();
  inline void clear_has_slain_title();
  inline void set_has_slain();
  inline void clear_has_slain();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 killer_family_;
  ::google::protobuf::uint32 killer_;
  ::google::protobuf::uint32 slain_family_;
  ::google::protobuf::uint32 slain_title_;
  ::google::protobuf::uint32 slain_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_record_update* default_instance_;
};
// -------------------------------------------------------------------

class change_family_flag_id_req : public ::google::protobuf::Message {
 public:
  change_family_flag_id_req();
  virtual ~change_family_flag_id_req();

  change_family_flag_id_req(const change_family_flag_id_req& from);

  inline change_family_flag_id_req& operator=(const change_family_flag_id_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_family_flag_id_req& default_instance();

  void Swap(change_family_flag_id_req* other);

  // implements Message ----------------------------------------------

  change_family_flag_id_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_family_flag_id_req& from);
  void MergeFrom(const change_family_flag_id_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 flag_id = 2;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 2;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.change_family_flag_id_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 flag_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static change_family_flag_id_req* default_instance_;
};
// -------------------------------------------------------------------

class change_family_flag_id_rsp : public ::google::protobuf::Message {
 public:
  change_family_flag_id_rsp();
  virtual ~change_family_flag_id_rsp();

  change_family_flag_id_rsp(const change_family_flag_id_rsp& from);

  inline change_family_flag_id_rsp& operator=(const change_family_flag_id_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_family_flag_id_rsp& default_instance();

  void Swap(change_family_flag_id_rsp* other);

  // implements Message ----------------------------------------------

  change_family_flag_id_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_family_flag_id_rsp& from);
  void MergeFrom(const change_family_flag_id_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.family_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // @@protoc_insertion_point(class_scope:client.change_family_flag_id_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::family_info* info_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static change_family_flag_id_rsp* default_instance_;
};
// -------------------------------------------------------------------

class change_family_flag_name_req : public ::google::protobuf::Message {
 public:
  change_family_flag_name_req();
  virtual ~change_family_flag_name_req();

  change_family_flag_name_req(const change_family_flag_name_req& from);

  inline change_family_flag_name_req& operator=(const change_family_flag_name_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_family_flag_name_req& default_instance();

  void Swap(change_family_flag_name_req* other);

  // implements Message ----------------------------------------------

  change_family_flag_name_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_family_flag_name_req& from);
  void MergeFrom(const change_family_flag_name_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required string flag_name = 2;
  inline bool has_flag_name() const;
  inline void clear_flag_name();
  static const int kFlagNameFieldNumber = 2;
  inline const ::std::string& flag_name() const;
  inline void set_flag_name(const ::std::string& value);
  inline void set_flag_name(const char* value);
  inline void set_flag_name(const char* value, size_t size);
  inline ::std::string* mutable_flag_name();
  inline ::std::string* release_flag_name();
  inline void set_allocated_flag_name(::std::string* flag_name);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.change_family_flag_name_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_flag_name();
  inline void clear_has_flag_name();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* flag_name_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static change_family_flag_name_req* default_instance_;
};
// -------------------------------------------------------------------

class change_family_flag_name_rsp : public ::google::protobuf::Message {
 public:
  change_family_flag_name_rsp();
  virtual ~change_family_flag_name_rsp();

  change_family_flag_name_rsp(const change_family_flag_name_rsp& from);

  inline change_family_flag_name_rsp& operator=(const change_family_flag_name_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_family_flag_name_rsp& default_instance();

  void Swap(change_family_flag_name_rsp* other);

  // implements Message ----------------------------------------------

  change_family_flag_name_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_family_flag_name_rsp& from);
  void MergeFrom(const change_family_flag_name_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.family_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // @@protoc_insertion_point(class_scope:client.change_family_flag_name_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::family_info* info_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static change_family_flag_name_rsp* default_instance_;
};
// -------------------------------------------------------------------

class impeach_chief_req : public ::google::protobuf::Message {
 public:
  impeach_chief_req();
  virtual ~impeach_chief_req();

  impeach_chief_req(const impeach_chief_req& from);

  inline impeach_chief_req& operator=(const impeach_chief_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const impeach_chief_req& default_instance();

  void Swap(impeach_chief_req* other);

  // implements Message ----------------------------------------------

  impeach_chief_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const impeach_chief_req& from);
  void MergeFrom(const impeach_chief_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.impeach_chief_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static impeach_chief_req* default_instance_;
};
// -------------------------------------------------------------------

class impeach_chief_rsp : public ::google::protobuf::Message {
 public:
  impeach_chief_rsp();
  virtual ~impeach_chief_rsp();

  impeach_chief_rsp(const impeach_chief_rsp& from);

  inline impeach_chief_rsp& operator=(const impeach_chief_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const impeach_chief_rsp& default_instance();

  void Swap(impeach_chief_rsp* other);

  // implements Message ----------------------------------------------

  impeach_chief_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const impeach_chief_rsp& from);
  void MergeFrom(const impeach_chief_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.family_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::family_info& info() const;
  inline ::client::family_info* mutable_info();
  inline ::client::family_info* release_info();
  inline void set_allocated_info(::client::family_info* info);

  // @@protoc_insertion_point(class_scope:client.impeach_chief_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::family_info* info_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static impeach_chief_rsp* default_instance_;
};
// -------------------------------------------------------------------

class ally_family_req : public ::google::protobuf::Message {
 public:
  ally_family_req();
  virtual ~ally_family_req();

  ally_family_req(const ally_family_req& from);

  inline ally_family_req& operator=(const ally_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ally_family_req& default_instance();

  void Swap(ally_family_req* other);

  // implements Message ----------------------------------------------

  ally_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ally_family_req& from);
  void MergeFrom(const ally_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 opt_type = 1;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 opt_type() const;
  inline void set_opt_type(::google::protobuf::uint32 value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 target_family_id = 3;
  inline bool has_target_family_id() const;
  inline void clear_target_family_id();
  static const int kTargetFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 target_family_id() const;
  inline void set_target_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.ally_family_req)
 private:
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_target_family_id();
  inline void clear_has_target_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 opt_type_;
  ::google::protobuf::uint32 family_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 target_family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static ally_family_req* default_instance_;
};
// -------------------------------------------------------------------

class ally_family_rsp : public ::google::protobuf::Message {
 public:
  ally_family_rsp();
  virtual ~ally_family_rsp();

  ally_family_rsp(const ally_family_rsp& from);

  inline ally_family_rsp& operator=(const ally_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ally_family_rsp& default_instance();

  void Swap(ally_family_rsp* other);

  // implements Message ----------------------------------------------

  ally_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ally_family_rsp& from);
  void MergeFrom(const ally_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // required uint32 opt_type = 2;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 opt_type() const;
  inline void set_opt_type(::google::protobuf::uint32 value);

  // optional uint32 target_family_id = 3;
  inline bool has_target_family_id() const;
  inline void clear_target_family_id();
  static const int kTargetFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 target_family_id() const;
  inline void set_target_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.ally_family_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_target_family_id();
  inline void clear_has_target_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 opt_type_;
  ::google::protobuf::uint32 target_family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static ally_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class remove_foreign_req : public ::google::protobuf::Message {
 public:
  remove_foreign_req();
  virtual ~remove_foreign_req();

  remove_foreign_req(const remove_foreign_req& from);

  inline remove_foreign_req& operator=(const remove_foreign_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const remove_foreign_req& default_instance();

  void Swap(remove_foreign_req* other);

  // implements Message ----------------------------------------------

  remove_foreign_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const remove_foreign_req& from);
  void MergeFrom(const remove_foreign_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 target_family_id = 2;
  inline bool has_target_family_id() const;
  inline void clear_target_family_id();
  static const int kTargetFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 target_family_id() const;
  inline void set_target_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.remove_foreign_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_target_family_id();
  inline void clear_has_target_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 target_family_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static remove_foreign_req* default_instance_;
};
// -------------------------------------------------------------------

class remove_foreign_rsp : public ::google::protobuf::Message {
 public:
  remove_foreign_rsp();
  virtual ~remove_foreign_rsp();

  remove_foreign_rsp(const remove_foreign_rsp& from);

  inline remove_foreign_rsp& operator=(const remove_foreign_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const remove_foreign_rsp& default_instance();

  void Swap(remove_foreign_rsp* other);

  // implements Message ----------------------------------------------

  remove_foreign_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const remove_foreign_rsp& from);
  void MergeFrom(const remove_foreign_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional uint32 src_family_id = 2;
  inline bool has_src_family_id() const;
  inline void clear_src_family_id();
  static const int kSrcFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 src_family_id() const;
  inline void set_src_family_id(::google::protobuf::uint32 value);

  // optional uint32 target_family_id = 3;
  inline bool has_target_family_id() const;
  inline void clear_target_family_id();
  static const int kTargetFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 target_family_id() const;
  inline void set_target_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.remove_foreign_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_src_family_id();
  inline void clear_has_src_family_id();
  inline void set_has_target_family_id();
  inline void clear_has_target_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 src_family_id_;
  ::google::protobuf::uint32 target_family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static remove_foreign_rsp* default_instance_;
};
// -------------------------------------------------------------------

class ally_family_list_req : public ::google::protobuf::Message {
 public:
  ally_family_list_req();
  virtual ~ally_family_list_req();

  ally_family_list_req(const ally_family_list_req& from);

  inline ally_family_list_req& operator=(const ally_family_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ally_family_list_req& default_instance();

  void Swap(ally_family_list_req* other);

  // implements Message ----------------------------------------------

  ally_family_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ally_family_list_req& from);
  void MergeFrom(const ally_family_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.ally_family_list_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static ally_family_list_req* default_instance_;
};
// -------------------------------------------------------------------

class ally_info : public ::google::protobuf::Message {
 public:
  ally_info();
  virtual ~ally_info();

  ally_info(const ally_info& from);

  inline ally_info& operator=(const ally_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ally_info& default_instance();

  void Swap(ally_info* other);

  // implements Message ----------------------------------------------

  ally_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ally_info& from);
  void MergeFrom(const ally_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 camp_type = 1;
  inline bool has_camp_type() const;
  inline void clear_camp_type();
  static const int kCampTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 camp_type() const;
  inline void set_camp_type(::google::protobuf::uint32 value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.ally_info)
 private:
  inline void set_has_camp_type();
  inline void clear_has_camp_type();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 camp_type_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static ally_info* default_instance_;
};
// -------------------------------------------------------------------

class ally_family_list_rsp : public ::google::protobuf::Message {
 public:
  ally_family_list_rsp();
  virtual ~ally_family_list_rsp();

  ally_family_list_rsp(const ally_family_list_rsp& from);

  inline ally_family_list_rsp& operator=(const ally_family_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ally_family_list_rsp& default_instance();

  void Swap(ally_family_list_rsp* other);

  // implements Message ----------------------------------------------

  ally_family_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ally_family_list_rsp& from);
  void MergeFrom(const ally_family_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // repeated .client.ally_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::ally_info& info(int index) const;
  inline ::client::ally_info* mutable_info(int index);
  inline ::client::ally_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::ally_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::ally_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.ally_family_list_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::ally_info > info_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static ally_family_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class activity_opt_rsp : public ::google::protobuf::Message {
 public:
  activity_opt_rsp();
  virtual ~activity_opt_rsp();

  activity_opt_rsp(const activity_opt_rsp& from);

  inline activity_opt_rsp& operator=(const activity_opt_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const activity_opt_rsp& default_instance();

  void Swap(activity_opt_rsp* other);

  // implements Message ----------------------------------------------

  activity_opt_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity_opt_rsp& from);
  void MergeFrom(const activity_opt_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.activity_opt_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static activity_opt_rsp* default_instance_;
};
// -------------------------------------------------------------------

class load_friend_family_req : public ::google::protobuf::Message {
 public:
  load_friend_family_req();
  virtual ~load_friend_family_req();

  load_friend_family_req(const load_friend_family_req& from);

  inline load_friend_family_req& operator=(const load_friend_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const load_friend_family_req& default_instance();

  void Swap(load_friend_family_req* other);

  // implements Message ----------------------------------------------

  load_friend_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const load_friend_family_req& from);
  void MergeFrom(const load_friend_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.load_friend_family_req)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static load_friend_family_req* default_instance_;
};
// -------------------------------------------------------------------

class load_friend_family_rsp : public ::google::protobuf::Message {
 public:
  load_friend_family_rsp();
  virtual ~load_friend_family_rsp();

  load_friend_family_rsp(const load_friend_family_rsp& from);

  inline load_friend_family_rsp& operator=(const load_friend_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const load_friend_family_rsp& default_instance();

  void Swap(load_friend_family_rsp* other);

  // implements Message ----------------------------------------------

  load_friend_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const load_friend_family_rsp& from);
  void MergeFrom(const load_friend_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // repeated uint32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:client.load_friend_family_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static load_friend_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class update_friend_family_rsp : public ::google::protobuf::Message {
 public:
  update_friend_family_rsp();
  virtual ~update_friend_family_rsp();

  update_friend_family_rsp(const update_friend_family_rsp& from);

  inline update_friend_family_rsp& operator=(const update_friend_family_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_friend_family_rsp& default_instance();

  void Swap(update_friend_family_rsp* other);

  // implements Message ----------------------------------------------

  update_friend_family_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_friend_family_rsp& from);
  void MergeFrom(const update_friend_family_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 family_id = 3;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_friend_family_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static update_friend_family_rsp* default_instance_;
};
// -------------------------------------------------------------------

class family_relation_list : public ::google::protobuf::Message {
 public:
  family_relation_list();
  virtual ~family_relation_list();

  family_relation_list(const family_relation_list& from);

  inline family_relation_list& operator=(const family_relation_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_relation_list& default_instance();

  void Swap(family_relation_list* other);

  // implements Message ----------------------------------------------

  family_relation_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_relation_list& from);
  void MergeFrom(const family_relation_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 alliance = 1;
  inline int alliance_size() const;
  inline void clear_alliance();
  static const int kAllianceFieldNumber = 1;
  inline ::google::protobuf::uint32 alliance(int index) const;
  inline void set_alliance(int index, ::google::protobuf::uint32 value);
  inline void add_alliance(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      alliance() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_alliance();

  // repeated uint32 enemy = 2;
  inline int enemy_size() const;
  inline void clear_enemy();
  static const int kEnemyFieldNumber = 2;
  inline ::google::protobuf::uint32 enemy(int index) const;
  inline void set_enemy(int index, ::google::protobuf::uint32 value);
  inline void add_enemy(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enemy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enemy();

  // @@protoc_insertion_point(class_scope:client.family_relation_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > alliance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enemy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_relation_list* default_instance_;
};
// -------------------------------------------------------------------

class update_family_relation : public ::google::protobuf::Message {
 public:
  update_family_relation();
  virtual ~update_family_relation();

  update_family_relation(const update_family_relation& from);

  inline update_family_relation& operator=(const update_family_relation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_family_relation& default_instance();

  void Swap(update_family_relation* other);

  // implements Message ----------------------------------------------

  update_family_relation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_family_relation& from);
  void MergeFrom(const update_family_relation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 op_type() const;
  inline void set_op_type(::google::protobuf::uint32 value);

  // required uint32 re_type = 2;
  inline bool has_re_type() const;
  inline void clear_re_type();
  static const int kReTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 re_type() const;
  inline void set_re_type(::google::protobuf::uint32 value);

  // required uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_family_relation)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_re_type();
  inline void clear_has_re_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 op_type_;
  ::google::protobuf::uint32 re_type_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static update_family_relation* default_instance_;
};
// -------------------------------------------------------------------

class family_title_info : public ::google::protobuf::Message {
 public:
  family_title_info();
  virtual ~family_title_info();

  family_title_info(const family_title_info& from);

  inline family_title_info& operator=(const family_title_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_title_info& default_instance();

  void Swap(family_title_info* other);

  // implements Message ----------------------------------------------

  family_title_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_title_info& from);
  void MergeFrom(const family_title_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:client.family_title_info)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_title_info* default_instance_;
};
// -------------------------------------------------------------------

class family_title_list_rsp : public ::google::protobuf::Message {
 public:
  family_title_list_rsp();
  virtual ~family_title_list_rsp();

  family_title_list_rsp(const family_title_list_rsp& from);

  inline family_title_list_rsp& operator=(const family_title_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_title_list_rsp& default_instance();

  void Swap(family_title_list_rsp* other);

  // implements Message ----------------------------------------------

  family_title_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_title_list_rsp& from);
  void MergeFrom(const family_title_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .client.family_title_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::family_title_info& info(int index) const;
  inline ::client::family_title_info* mutable_info(int index);
  inline ::client::family_title_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::family_title_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::family_title_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.family_title_list_rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::family_title_info > info_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efamily_2eproto();
  friend void protobuf_AssignDesc_client_2efamily_2eproto();
  friend void protobuf_ShutdownFile_client_2efamily_2eproto();

  void InitAsDefaultInstance();
  static family_title_list_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// family_info

// required uint32 id = 1;
inline bool family_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 family_info::id() const {
  return id_;
}
inline void family_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool family_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& family_info::name() const {
  return *name_;
}
inline void family_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void family_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void family_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* family_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag_id = 3;
inline bool family_info::has_flag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_info::set_has_flag_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_info::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_info::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 family_info::flag_id() const {
  return flag_id_;
}
inline void family_info::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// required string flag_name = 4;
inline bool family_info::has_flag_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_info::set_has_flag_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_info::clear_has_flag_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_info::clear_flag_name() {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    flag_name_->clear();
  }
  clear_has_flag_name();
}
inline const ::std::string& family_info::flag_name() const {
  return *flag_name_;
}
inline void family_info::set_flag_name(const ::std::string& value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void family_info::set_flag_name(const char* value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void family_info::set_flag_name(const char* value, size_t size) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_info::mutable_flag_name() {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  return flag_name_;
}
inline ::std::string* family_info::release_flag_name() {
  clear_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_name_;
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_info::set_allocated_flag_name(::std::string* flag_name) {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (flag_name) {
    set_has_flag_name();
    flag_name_ = flag_name;
  } else {
    clear_has_flag_name();
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 lvl = 5;
inline bool family_info::has_lvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_info::set_has_lvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_info::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_info::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 family_info::lvl() const {
  return lvl_;
}
inline void family_info::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// required uint32 chief_id = 6;
inline bool family_info::has_chief_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void family_info::set_has_chief_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void family_info::clear_has_chief_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void family_info::clear_chief_id() {
  chief_id_ = 0u;
  clear_has_chief_id();
}
inline ::google::protobuf::uint32 family_info::chief_id() const {
  return chief_id_;
}
inline void family_info::set_chief_id(::google::protobuf::uint32 value) {
  set_has_chief_id();
  chief_id_ = value;
}

// required string chief_name = 7;
inline bool family_info::has_chief_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void family_info::set_has_chief_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void family_info::clear_has_chief_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void family_info::clear_chief_name() {
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    chief_name_->clear();
  }
  clear_has_chief_name();
}
inline const ::std::string& family_info::chief_name() const {
  return *chief_name_;
}
inline void family_info::set_chief_name(const ::std::string& value) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(value);
}
inline void family_info::set_chief_name(const char* value) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(value);
}
inline void family_info::set_chief_name(const char* value, size_t size) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_info::mutable_chief_name() {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  return chief_name_;
}
inline ::std::string* family_info::release_chief_name() {
  clear_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chief_name_;
    chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_info::set_allocated_chief_name(::std::string* chief_name) {
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chief_name_;
  }
  if (chief_name) {
    set_has_chief_name();
    chief_name_ = chief_name;
  } else {
    clear_has_chief_name();
    chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 deputy_id = 8;
inline bool family_info::has_deputy_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void family_info::set_has_deputy_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void family_info::clear_has_deputy_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void family_info::clear_deputy_id() {
  deputy_id_ = 0u;
  clear_has_deputy_id();
}
inline ::google::protobuf::uint32 family_info::deputy_id() const {
  return deputy_id_;
}
inline void family_info::set_deputy_id(::google::protobuf::uint32 value) {
  set_has_deputy_id();
  deputy_id_ = value;
}

// required string post = 9;
inline bool family_info::has_post() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void family_info::set_has_post() {
  _has_bits_[0] |= 0x00000100u;
}
inline void family_info::clear_has_post() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void family_info::clear_post() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    post_->clear();
  }
  clear_has_post();
}
inline const ::std::string& family_info::post() const {
  return *post_;
}
inline void family_info::set_post(const ::std::string& value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void family_info::set_post(const char* value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void family_info::set_post(const char* value, size_t size) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_info::mutable_post() {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  return post_;
}
inline ::std::string* family_info::release_post() {
  clear_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = post_;
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_info::set_allocated_post(::std::string* post) {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (post) {
    set_has_post();
    post_ = post;
  } else {
    clear_has_post();
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 10;
inline bool family_info::has_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void family_info::set_has_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void family_info::clear_has_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void family_info::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 family_info::money() const {
  return money_;
}
inline void family_info::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint32 power = 11;
inline bool family_info::has_power() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void family_info::set_has_power() {
  _has_bits_[0] |= 0x00000400u;
}
inline void family_info::clear_has_power() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void family_info::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 family_info::power() const {
  return power_;
}
inline void family_info::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required uint32 domain = 12;
inline bool family_info::has_domain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void family_info::set_has_domain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void family_info::clear_has_domain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void family_info::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
inline ::google::protobuf::uint32 family_info::domain() const {
  return domain_;
}
inline void family_info::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
}

// required bool king = 13 [default = false];
inline bool family_info::has_king() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void family_info::set_has_king() {
  _has_bits_[0] |= 0x00001000u;
}
inline void family_info::clear_has_king() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void family_info::clear_king() {
  king_ = false;
  clear_has_king();
}
inline bool family_info::king() const {
  return king_;
}
inline void family_info::set_king(bool value) {
  set_has_king();
  king_ = value;
}

// required bool emperor = 14;
inline bool family_info::has_emperor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void family_info::set_has_emperor() {
  _has_bits_[0] |= 0x00002000u;
}
inline void family_info::clear_has_emperor() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void family_info::clear_emperor() {
  emperor_ = false;
  clear_has_emperor();
}
inline bool family_info::emperor() const {
  return emperor_;
}
inline void family_info::set_emperor(bool value) {
  set_has_emperor();
  emperor_ = value;
}

// required uint32 cur_member_num = 15;
inline bool family_info::has_cur_member_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void family_info::set_has_cur_member_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void family_info::clear_has_cur_member_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void family_info::clear_cur_member_num() {
  cur_member_num_ = 0u;
  clear_has_cur_member_num();
}
inline ::google::protobuf::uint32 family_info::cur_member_num() const {
  return cur_member_num_;
}
inline void family_info::set_cur_member_num(::google::protobuf::uint32 value) {
  set_has_cur_member_num();
  cur_member_num_ = value;
}

// required bool approval = 16;
inline bool family_info::has_approval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void family_info::set_has_approval() {
  _has_bits_[0] |= 0x00008000u;
}
inline void family_info::clear_has_approval() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void family_info::clear_approval() {
  approval_ = false;
  clear_has_approval();
}
inline bool family_info::approval() const {
  return approval_;
}
inline void family_info::set_approval(bool value) {
  set_has_approval();
  approval_ = value;
}

// required uint32 leader_online = 17;
inline bool family_info::has_leader_online() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void family_info::set_has_leader_online() {
  _has_bits_[0] |= 0x00010000u;
}
inline void family_info::clear_has_leader_online() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void family_info::clear_leader_online() {
  leader_online_ = 0u;
  clear_has_leader_online();
}
inline ::google::protobuf::uint32 family_info::leader_online() const {
  return leader_online_;
}
inline void family_info::set_leader_online(::google::protobuf::uint32 value) {
  set_has_leader_online();
  leader_online_ = value;
}

// required uint32 create_time = 18;
inline bool family_info::has_create_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void family_info::set_has_create_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void family_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void family_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 family_info::create_time() const {
  return create_time_;
}
inline void family_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required uint32 dragon_count = 19;
inline bool family_info::has_dragon_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void family_info::set_has_dragon_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void family_info::clear_has_dragon_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void family_info::clear_dragon_count() {
  dragon_count_ = 0u;
  clear_has_dragon_count();
}
inline ::google::protobuf::uint32 family_info::dragon_count() const {
  return dragon_count_;
}
inline void family_info::set_dragon_count(::google::protobuf::uint32 value) {
  set_has_dragon_count();
  dragon_count_ = value;
}

// required uint32 tiger_count = 20;
inline bool family_info::has_tiger_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void family_info::set_has_tiger_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void family_info::clear_has_tiger_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void family_info::clear_tiger_count() {
  tiger_count_ = 0u;
  clear_has_tiger_count();
}
inline ::google::protobuf::uint32 family_info::tiger_count() const {
  return tiger_count_;
}
inline void family_info::set_tiger_count(::google::protobuf::uint32 value) {
  set_has_tiger_count();
  tiger_count_ = value;
}

// required uint32 rosefinch_count = 21;
inline bool family_info::has_rosefinch_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void family_info::set_has_rosefinch_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void family_info::clear_has_rosefinch_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void family_info::clear_rosefinch_count() {
  rosefinch_count_ = 0u;
  clear_has_rosefinch_count();
}
inline ::google::protobuf::uint32 family_info::rosefinch_count() const {
  return rosefinch_count_;
}
inline void family_info::set_rosefinch_count(::google::protobuf::uint32 value) {
  set_has_rosefinch_count();
  rosefinch_count_ = value;
}

// required uint32 tortoise_count = 22;
inline bool family_info::has_tortoise_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void family_info::set_has_tortoise_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void family_info::clear_has_tortoise_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void family_info::clear_tortoise_count() {
  tortoise_count_ = 0u;
  clear_has_tortoise_count();
}
inline ::google::protobuf::uint32 family_info::tortoise_count() const {
  return tortoise_count_;
}
inline void family_info::set_tortoise_count(::google::protobuf::uint32 value) {
  set_has_tortoise_count();
  tortoise_count_ = value;
}

// -------------------------------------------------------------------

// family_diplomacy_info

// required uint32 family_id = 1;
inline bool family_diplomacy_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_diplomacy_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_diplomacy_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_diplomacy_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_diplomacy_info::family_id() const {
  return family_id_;
}
inline void family_diplomacy_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 target_id = 2;
inline bool family_diplomacy_info::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_diplomacy_info::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_diplomacy_info::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_diplomacy_info::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 family_diplomacy_info::target_id() const {
  return target_id_;
}
inline void family_diplomacy_info::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// required uint32 relation_type = 3;
inline bool family_diplomacy_info::has_relation_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_diplomacy_info::set_has_relation_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_diplomacy_info::clear_has_relation_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_diplomacy_info::clear_relation_type() {
  relation_type_ = 0u;
  clear_has_relation_type();
}
inline ::google::protobuf::uint32 family_diplomacy_info::relation_type() const {
  return relation_type_;
}
inline void family_diplomacy_info::set_relation_type(::google::protobuf::uint32 value) {
  set_has_relation_type();
  relation_type_ = value;
}

// optional uint32 apply_time = 4;
inline bool family_diplomacy_info::has_apply_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_diplomacy_info::set_has_apply_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_diplomacy_info::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_diplomacy_info::clear_apply_time() {
  apply_time_ = 0u;
  clear_has_apply_time();
}
inline ::google::protobuf::uint32 family_diplomacy_info::apply_time() const {
  return apply_time_;
}
inline void family_diplomacy_info::set_apply_time(::google::protobuf::uint32 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// -------------------------------------------------------------------

// set_create_famliy_consume

// required uint32 type = 1;
inline bool set_create_famliy_consume::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_create_famliy_consume::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_create_famliy_consume::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_create_famliy_consume::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 set_create_famliy_consume::type() const {
  return type_;
}
inline void set_create_famliy_consume::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required .client.set_create_famliy_consume.result is_succeed = 2;
inline bool set_create_famliy_consume::has_is_succeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_create_famliy_consume::set_has_is_succeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_create_famliy_consume::clear_has_is_succeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_create_famliy_consume::clear_is_succeed() {
  is_succeed_ = 1;
  clear_has_is_succeed();
}
inline ::client::set_create_famliy_consume_result set_create_famliy_consume::is_succeed() const {
  return static_cast< ::client::set_create_famliy_consume_result >(is_succeed_);
}
inline void set_create_famliy_consume::set_is_succeed(::client::set_create_famliy_consume_result value) {
  assert(::client::set_create_famliy_consume_result_IsValid(value));
  set_has_is_succeed();
  is_succeed_ = value;
}

// required uint32 role_id = 3;
inline bool set_create_famliy_consume::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void set_create_famliy_consume::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void set_create_famliy_consume::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void set_create_famliy_consume::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 set_create_famliy_consume::role_id() const {
  return role_id_;
}
inline void set_create_famliy_consume::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// set_donate_consume

// required uint32 type = 1;
inline bool set_donate_consume::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_donate_consume::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_donate_consume::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_donate_consume::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 set_donate_consume::type() const {
  return type_;
}
inline void set_donate_consume::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 count = 2;
inline bool set_donate_consume::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_donate_consume::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_donate_consume::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_donate_consume::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 set_donate_consume::count() const {
  return count_;
}
inline void set_donate_consume::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required bool is_success = 3;
inline bool set_donate_consume::has_is_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void set_donate_consume::set_has_is_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void set_donate_consume::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void set_donate_consume::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool set_donate_consume::is_success() const {
  return is_success_;
}
inline void set_donate_consume::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// required uint32 contr_value = 4;
inline bool set_donate_consume::has_contr_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_donate_consume::set_has_contr_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_donate_consume::clear_has_contr_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_donate_consume::clear_contr_value() {
  contr_value_ = 0u;
  clear_has_contr_value();
}
inline ::google::protobuf::uint32 set_donate_consume::contr_value() const {
  return contr_value_;
}
inline void set_donate_consume::set_contr_value(::google::protobuf::uint32 value) {
  set_has_contr_value();
  contr_value_ = value;
}

// required uint32 role_id = 5;
inline bool set_donate_consume::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void set_donate_consume::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void set_donate_consume::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void set_donate_consume::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 set_donate_consume::role_id() const {
  return role_id_;
}
inline void set_donate_consume::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 total_value = 6;
inline bool set_donate_consume::has_total_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void set_donate_consume::set_has_total_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void set_donate_consume::clear_has_total_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void set_donate_consume::clear_total_value() {
  total_value_ = 0u;
  clear_has_total_value();
}
inline ::google::protobuf::uint32 set_donate_consume::total_value() const {
  return total_value_;
}
inline void set_donate_consume::set_total_value(::google::protobuf::uint32 value) {
  set_has_total_value();
  total_value_ = value;
}

// required uint32 money = 7;
inline bool set_donate_consume::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void set_donate_consume::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void set_donate_consume::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void set_donate_consume::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 set_donate_consume::money() const {
  return money_;
}
inline void set_donate_consume::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// set_family_req

// required uint32 family_id = 1;
inline bool set_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 set_family_req::family_id() const {
  return family_id_;
}
inline void set_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 title = 2;
inline bool set_family_req::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_family_req::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_family_req::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_family_req::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 set_family_req::title() const {
  return title_;
}
inline void set_family_req::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
}

// required uint32 role_id = 3;
inline bool set_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void set_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void set_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void set_family_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 set_family_req::role_id() const {
  return role_id_;
}
inline void set_family_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 family_level = 4;
inline bool set_family_req::has_family_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_family_req::set_has_family_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_family_req::clear_has_family_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_family_req::clear_family_level() {
  family_level_ = 0u;
  clear_has_family_level();
}
inline ::google::protobuf::uint32 set_family_req::family_level() const {
  return family_level_;
}
inline void set_family_req::set_family_level(::google::protobuf::uint32 value) {
  set_has_family_level();
  family_level_ = value;
}

// optional uint32 donate = 5;
inline bool set_family_req::has_donate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void set_family_req::set_has_donate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void set_family_req::clear_has_donate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void set_family_req::clear_donate() {
  donate_ = 0u;
  clear_has_donate();
}
inline ::google::protobuf::uint32 set_family_req::donate() const {
  return donate_;
}
inline void set_family_req::set_donate(::google::protobuf::uint32 value) {
  set_has_donate();
  donate_ = value;
}

// -------------------------------------------------------------------

// set_family_money

// required uint32 role_id = 1;
inline bool set_family_money::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_family_money::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_family_money::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_family_money::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 set_family_money::role_id() const {
  return role_id_;
}
inline void set_family_money::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 money = 2;
inline bool set_family_money::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_family_money::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_family_money::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_family_money::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 set_family_money::money() const {
  return money_;
}
inline void set_family_money::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint32 type = 3;
inline bool set_family_money::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void set_family_money::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void set_family_money::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void set_family_money::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 set_family_money::type() const {
  return type_;
}
inline void set_family_money::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 server_id = 4;
inline bool set_family_money::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_family_money::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_family_money::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_family_money::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 set_family_money::server_id() const {
  return server_id_;
}
inline void set_family_money::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// secede_family_to_center

// required uint32 family_id = 1;
inline bool secede_family_to_center::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secede_family_to_center::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secede_family_to_center::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secede_family_to_center::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 secede_family_to_center::family_id() const {
  return family_id_;
}
inline void secede_family_to_center::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool secede_family_to_center::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void secede_family_to_center::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void secede_family_to_center::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void secede_family_to_center::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 secede_family_to_center::role_id() const {
  return role_id_;
}
inline void secede_family_to_center::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 server_id = 3;
inline bool secede_family_to_center::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void secede_family_to_center::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void secede_family_to_center::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void secede_family_to_center::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 secede_family_to_center::server_id() const {
  return server_id_;
}
inline void secede_family_to_center::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// secede_family_game

// required uint32 role_id = 1;
inline bool secede_family_game::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secede_family_game::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secede_family_game::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secede_family_game::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 secede_family_game::role_id() const {
  return role_id_;
}
inline void secede_family_game::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool secede_family_game::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void secede_family_game::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void secede_family_game::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void secede_family_game::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& secede_family_game::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* secede_family_game::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* secede_family_game::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void secede_family_game::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// update_family_data_from_center

// required uint32 family_id = 1;
inline bool update_family_data_from_center::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_family_data_from_center::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_family_data_from_center::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_family_data_from_center::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 update_family_data_from_center::family_id() const {
  return family_id_;
}
inline void update_family_data_from_center::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool update_family_data_from_center::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_family_data_from_center::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_family_data_from_center::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_family_data_from_center::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_family_data_from_center::role_id() const {
  return role_id_;
}
inline void update_family_data_from_center::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// family_info_req

// required uint32 role_id = 1;
inline bool family_info_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_info_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_info_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_info_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 family_info_req::role_id() const {
  return role_id_;
}
inline void family_info_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// family_info_rsp

// required .client.family_info info = 1;
inline bool family_info_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_info_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_info_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_info_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& family_info_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* family_info_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* family_info_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void family_info_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// modify_family_power

// required uint32 role_id = 1;
inline bool modify_family_power::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_family_power::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_family_power::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_family_power::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 modify_family_power::role_id() const {
  return role_id_;
}
inline void modify_family_power::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 family_id = 2;
inline bool modify_family_power::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_family_power::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_family_power::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_family_power::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 modify_family_power::family_id() const {
  return family_id_;
}
inline void modify_family_power::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 new_power = 3;
inline bool modify_family_power::has_new_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_family_power::set_has_new_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_family_power::clear_has_new_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_family_power::clear_new_power() {
  new_power_ = 0u;
  clear_has_new_power();
}
inline ::google::protobuf::uint32 modify_family_power::new_power() const {
  return new_power_;
}
inline void modify_family_power::set_new_power(::google::protobuf::uint32 value) {
  set_has_new_power();
  new_power_ = value;
}

// -------------------------------------------------------------------

// update_player_power_to_smy

// required uint32 role_id = 1;
inline bool update_player_power_to_smy::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_player_power_to_smy::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_player_power_to_smy::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_player_power_to_smy::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_player_power_to_smy::role_id() const {
  return role_id_;
}
inline void update_player_power_to_smy::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// notive_center_donate_sucess

// required uint32 role_id = 1;
inline bool notive_center_donate_sucess::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notive_center_donate_sucess::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notive_center_donate_sucess::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notive_center_donate_sucess::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 notive_center_donate_sucess::role_id() const {
  return role_id_;
}
inline void notive_center_donate_sucess::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 2;
inline bool notive_center_donate_sucess::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notive_center_donate_sucess::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notive_center_donate_sucess::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notive_center_donate_sucess::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 notive_center_donate_sucess::type() const {
  return type_;
}
inline void notive_center_donate_sucess::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 total_donate = 3;
inline bool notive_center_donate_sucess::has_total_donate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notive_center_donate_sucess::set_has_total_donate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notive_center_donate_sucess::clear_has_total_donate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notive_center_donate_sucess::clear_total_donate() {
  total_donate_ = 0u;
  clear_has_total_donate();
}
inline ::google::protobuf::uint32 notive_center_donate_sucess::total_donate() const {
  return total_donate_;
}
inline void notive_center_donate_sucess::set_total_donate(::google::protobuf::uint32 value) {
  set_has_total_donate();
  total_donate_ = value;
}

// required uint32 ret = 4;
inline bool notive_center_donate_sucess::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void notive_center_donate_sucess::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void notive_center_donate_sucess::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void notive_center_donate_sucess::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 notive_center_donate_sucess::ret() const {
  return ret_;
}
inline void notive_center_donate_sucess::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint32 money = 5;
inline bool notive_center_donate_sucess::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void notive_center_donate_sucess::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void notive_center_donate_sucess::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void notive_center_donate_sucess::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 notive_center_donate_sucess::money() const {
  return money_;
}
inline void notive_center_donate_sucess::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// family_money_mod_req

// required uint32 family_id = 1;
inline bool family_money_mod_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_money_mod_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_money_mod_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_money_mod_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_money_mod_req::family_id() const {
  return family_id_;
}
inline void family_money_mod_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 money = 2;
inline bool family_money_mod_req::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_money_mod_req::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_money_mod_req::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_money_mod_req::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 family_money_mod_req::money() const {
  return money_;
}
inline void family_money_mod_req::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// family_simple_info

// required uint32 family_id = 1;
inline bool family_simple_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_simple_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_simple_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_simple_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_simple_info::family_id() const {
  return family_id_;
}
inline void family_simple_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required string family_name = 2;
inline bool family_simple_info::has_family_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_simple_info::set_has_family_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_simple_info::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_simple_info::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& family_simple_info::family_name() const {
  return *family_name_;
}
inline void family_simple_info::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_simple_info::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_simple_info::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_simple_info::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* family_simple_info::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_simple_info::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag_id = 3;
inline bool family_simple_info::has_flag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_simple_info::set_has_flag_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_simple_info::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_simple_info::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 family_simple_info::flag_id() const {
  return flag_id_;
}
inline void family_simple_info::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// required string user_name = 4;
inline bool family_simple_info::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_simple_info::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_simple_info::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_simple_info::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& family_simple_info::user_name() const {
  return *user_name_;
}
inline void family_simple_info::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void family_simple_info::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void family_simple_info::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_simple_info::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* family_simple_info::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_simple_info::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 role_id = 5;
inline bool family_simple_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_simple_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_simple_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_simple_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 family_simple_info::role_id() const {
  return role_id_;
}
inline void family_simple_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated uint32 alliance = 6;
inline int family_simple_info::alliance_size() const {
  return alliance_.size();
}
inline void family_simple_info::clear_alliance() {
  alliance_.Clear();
}
inline ::google::protobuf::uint32 family_simple_info::alliance(int index) const {
  return alliance_.Get(index);
}
inline void family_simple_info::set_alliance(int index, ::google::protobuf::uint32 value) {
  alliance_.Set(index, value);
}
inline void family_simple_info::add_alliance(::google::protobuf::uint32 value) {
  alliance_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
family_simple_info::alliance() const {
  return alliance_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
family_simple_info::mutable_alliance() {
  return &alliance_;
}

// -------------------------------------------------------------------

// family_money_query_req

// required uint32 family_id = 1;
inline bool family_money_query_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_money_query_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_money_query_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_money_query_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_money_query_req::family_id() const {
  return family_id_;
}
inline void family_money_query_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool family_money_query_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_money_query_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_money_query_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_money_query_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 family_money_query_req::role_id() const {
  return role_id_;
}
inline void family_money_query_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint64 inst_id = 3;
inline bool family_money_query_req::has_inst_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_money_query_req::set_has_inst_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_money_query_req::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_money_query_req::clear_inst_id() {
  inst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_inst_id();
}
inline ::google::protobuf::uint64 family_money_query_req::inst_id() const {
  return inst_id_;
}
inline void family_money_query_req::set_inst_id(::google::protobuf::uint64 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// -------------------------------------------------------------------

// family_money_query_rsp

// required uint32 family_id = 1;
inline bool family_money_query_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_money_query_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_money_query_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_money_query_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_money_query_rsp::family_id() const {
  return family_id_;
}
inline void family_money_query_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required int32 money = 2;
inline bool family_money_query_rsp::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_money_query_rsp::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_money_query_rsp::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_money_query_rsp::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 family_money_query_rsp::money() const {
  return money_;
}
inline void family_money_query_rsp::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// required uint32 role_id = 3;
inline bool family_money_query_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_money_query_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_money_query_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_money_query_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 family_money_query_rsp::role_id() const {
  return role_id_;
}
inline void family_money_query_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint64 inst_id = 4;
inline bool family_money_query_rsp::has_inst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_money_query_rsp::set_has_inst_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_money_query_rsp::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_money_query_rsp::clear_inst_id() {
  inst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_inst_id();
}
inline ::google::protobuf::uint64 family_money_query_rsp::inst_id() const {
  return inst_id_;
}
inline void family_money_query_rsp::set_inst_id(::google::protobuf::uint64 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// -------------------------------------------------------------------

// family_list_req

// required uint32 unixtime = 1;
inline bool family_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 family_list_req::unixtime() const {
  return unixtime_;
}
inline void family_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_list_rsp

// required uint32 list_type = 1;
inline bool family_list_rsp::has_list_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_list_rsp::set_has_list_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_list_rsp::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_list_rsp::clear_list_type() {
  list_type_ = 0u;
  clear_has_list_type();
}
inline ::google::protobuf::uint32 family_list_rsp::list_type() const {
  return list_type_;
}
inline void family_list_rsp::set_list_type(::google::protobuf::uint32 value) {
  set_has_list_type();
  list_type_ = value;
}

// repeated .client.family_info family = 2;
inline int family_list_rsp::family_size() const {
  return family_.size();
}
inline void family_list_rsp::clear_family() {
  family_.Clear();
}
inline const ::client::family_info& family_list_rsp::family(int index) const {
  return family_.Get(index);
}
inline ::client::family_info* family_list_rsp::mutable_family(int index) {
  return family_.Mutable(index);
}
inline ::client::family_info* family_list_rsp::add_family() {
  return family_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_info >&
family_list_rsp::family() const {
  return family_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_info >*
family_list_rsp::mutable_family() {
  return &family_;
}

// -------------------------------------------------------------------

// create_family_req

// required .client.create_family_req.use type = 1;
inline bool create_family_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_family_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_family_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_family_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::create_family_req_use create_family_req::type() const {
  return static_cast< ::client::create_family_req_use >(type_);
}
inline void create_family_req::set_type(::client::create_family_req_use value) {
  assert(::client::create_family_req_use_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string name = 2;
inline bool create_family_req::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_family_req::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_family_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_family_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& create_family_req::name() const {
  return *name_;
}
inline void create_family_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void create_family_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void create_family_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_family_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* create_family_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_family_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag_id = 3;
inline bool create_family_req::has_flag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_family_req::set_has_flag_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_family_req::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_family_req::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 create_family_req::flag_id() const {
  return flag_id_;
}
inline void create_family_req::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// required string flag_name = 4;
inline bool create_family_req::has_flag_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_family_req::set_has_flag_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_family_req::clear_has_flag_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_family_req::clear_flag_name() {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    flag_name_->clear();
  }
  clear_has_flag_name();
}
inline const ::std::string& create_family_req::flag_name() const {
  return *flag_name_;
}
inline void create_family_req::set_flag_name(const ::std::string& value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void create_family_req::set_flag_name(const char* value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void create_family_req::set_flag_name(const char* value, size_t size) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_family_req::mutable_flag_name() {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  return flag_name_;
}
inline ::std::string* create_family_req::release_flag_name() {
  clear_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_name_;
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_family_req::set_allocated_flag_name(::std::string* flag_name) {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (flag_name) {
    set_has_flag_name();
    flag_name_ = flag_name;
  } else {
    clear_has_flag_name();
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool create_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void create_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void create_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void create_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& create_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* create_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* create_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void create_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// create_family_rsp

// required .client.create_family_rsp.result ret = 1;
inline bool create_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::create_family_rsp_result create_family_rsp::ret() const {
  return static_cast< ::client::create_family_rsp_result >(ret_);
}
inline void create_family_rsp::set_ret(::client::create_family_rsp_result value) {
  assert(::client::create_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 family_id = 2;
inline bool create_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 create_family_rsp::family_id() const {
  return family_id_;
}
inline void create_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// family_req

// repeated uint32 family_id = 1;
inline int family_req::family_id_size() const {
  return family_id_.size();
}
inline void family_req::clear_family_id() {
  family_id_.Clear();
}
inline ::google::protobuf::uint32 family_req::family_id(int index) const {
  return family_id_.Get(index);
}
inline void family_req::set_family_id(int index, ::google::protobuf::uint32 value) {
  family_id_.Set(index, value);
}
inline void family_req::add_family_id(::google::protobuf::uint32 value) {
  family_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
family_req::family_id() const {
  return family_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
family_req::mutable_family_id() {
  return &family_id_;
}

// optional uint32 scene_id = 2;
inline bool family_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 family_req::scene_id() const {
  return scene_id_;
}
inline void family_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_rsp

// repeated .client.family_info fi = 1;
inline int family_rsp::fi_size() const {
  return fi_.size();
}
inline void family_rsp::clear_fi() {
  fi_.Clear();
}
inline const ::client::family_info& family_rsp::fi(int index) const {
  return fi_.Get(index);
}
inline ::client::family_info* family_rsp::mutable_fi(int index) {
  return fi_.Mutable(index);
}
inline ::client::family_info* family_rsp::add_fi() {
  return fi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_info >&
family_rsp::fi() const {
  return fi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_info >*
family_rsp::mutable_fi() {
  return &fi_;
}

// -------------------------------------------------------------------

// apply_family_req

// required uint32 family_id = 1;
inline bool apply_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void apply_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void apply_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void apply_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 apply_family_req::family_id() const {
  return family_id_;
}
inline void apply_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool apply_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void apply_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void apply_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void apply_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& apply_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* apply_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* apply_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void apply_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// apply_family_rsp

// required .client.apply_family_rsp.result ret = 1;
inline bool apply_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void apply_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void apply_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void apply_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::apply_family_rsp_result apply_family_rsp::ret() const {
  return static_cast< ::client::apply_family_rsp_result >(ret_);
}
inline void apply_family_rsp::set_ret(::client::apply_family_rsp_result value) {
  assert(::client::apply_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool apply_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void apply_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void apply_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void apply_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 apply_family_rsp::family_id() const {
  return family_id_;
}
inline void apply_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// family_set_req

// required uint32 family_id = 1;
inline bool family_set_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_set_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_set_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_set_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_set_req::family_id() const {
  return family_id_;
}
inline void family_set_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 approval = 2;
inline bool family_set_req::has_approval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_set_req::set_has_approval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_set_req::clear_has_approval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_set_req::clear_approval() {
  approval_ = 0u;
  clear_has_approval();
}
inline ::google::protobuf::uint32 family_set_req::approval() const {
  return approval_;
}
inline void family_set_req::set_approval(::google::protobuf::uint32 value) {
  set_has_approval();
  approval_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_set_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_set_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_set_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_set_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_set_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_set_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_set_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_set_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_set_rsp

// required uint32 is_success = 1;
inline bool family_set_rsp::has_is_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_set_rsp::set_has_is_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_set_rsp::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_set_rsp::clear_is_success() {
  is_success_ = 0u;
  clear_has_is_success();
}
inline ::google::protobuf::uint32 family_set_rsp::is_success() const {
  return is_success_;
}
inline void family_set_rsp::set_is_success(::google::protobuf::uint32 value) {
  set_has_is_success();
  is_success_ = value;
}

// optional uint32 approval = 2;
inline bool family_set_rsp::has_approval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_set_rsp::set_has_approval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_set_rsp::clear_has_approval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_set_rsp::clear_approval() {
  approval_ = 0u;
  clear_has_approval();
}
inline ::google::protobuf::uint32 family_set_rsp::approval() const {
  return approval_;
}
inline void family_set_rsp::set_approval(::google::protobuf::uint32 value) {
  set_has_approval();
  approval_ = value;
}

// -------------------------------------------------------------------

// apply_family_list_req

// required uint32 family_id = 1;
inline bool apply_family_list_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void apply_family_list_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void apply_family_list_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void apply_family_list_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 apply_family_list_req::family_id() const {
  return family_id_;
}
inline void apply_family_list_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool apply_family_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void apply_family_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void apply_family_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void apply_family_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& apply_family_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* apply_family_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* apply_family_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void apply_family_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// apply_family_list_rsp

// required uint32 family_id = 1;
inline bool apply_family_list_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void apply_family_list_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void apply_family_list_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void apply_family_list_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 apply_family_list_rsp::family_id() const {
  return family_id_;
}
inline void apply_family_list_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated uint32 role_id = 2;
inline int apply_family_list_rsp::role_id_size() const {
  return role_id_.size();
}
inline void apply_family_list_rsp::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 apply_family_list_rsp::role_id(int index) const {
  return role_id_.Get(index);
}
inline void apply_family_list_rsp::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void apply_family_list_rsp::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
apply_family_list_rsp::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
apply_family_list_rsp::mutable_role_id() {
  return &role_id_;
}

// -------------------------------------------------------------------

// approval_family_req

// required uint32 family_id = 1;
inline bool approval_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void approval_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void approval_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void approval_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 approval_family_req::family_id() const {
  return family_id_;
}
inline void approval_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool approval_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void approval_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void approval_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void approval_family_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 approval_family_req::role_id() const {
  return role_id_;
}
inline void approval_family_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 3;
inline bool approval_family_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void approval_family_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void approval_family_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void approval_family_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 approval_family_req::type() const {
  return type_;
}
inline void approval_family_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool approval_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void approval_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void approval_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void approval_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& approval_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* approval_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* approval_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void approval_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// approval_family_rsp

// required .client.approval_family_rsp.result ret = 1;
inline bool approval_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void approval_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void approval_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void approval_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::approval_family_rsp_result approval_family_rsp::ret() const {
  return static_cast< ::client::approval_family_rsp_result >(ret_);
}
inline void approval_family_rsp::set_ret(::client::approval_family_rsp_result value) {
  assert(::client::approval_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool approval_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void approval_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void approval_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void approval_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 approval_family_rsp::family_id() const {
  return family_id_;
}
inline void approval_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 3;
inline bool approval_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void approval_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void approval_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void approval_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 approval_family_rsp::role_id() const {
  return role_id_;
}
inline void approval_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 4;
inline bool approval_family_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void approval_family_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void approval_family_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void approval_family_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 approval_family_rsp::type() const {
  return type_;
}
inline void approval_family_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 sect_id = 5;
inline bool approval_family_rsp::has_sect_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void approval_family_rsp::set_has_sect_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void approval_family_rsp::clear_has_sect_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void approval_family_rsp::clear_sect_id() {
  sect_id_ = 0u;
  clear_has_sect_id();
}
inline ::google::protobuf::uint32 approval_family_rsp::sect_id() const {
  return sect_id_;
}
inline void approval_family_rsp::set_sect_id(::google::protobuf::uint32 value) {
  set_has_sect_id();
  sect_id_ = value;
}

// -------------------------------------------------------------------

// invite_family_req

// required uint32 family_id = 1;
inline bool invite_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 invite_family_req::family_id() const {
  return family_id_;
}
inline void invite_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool invite_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_family_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 invite_family_req::role_id() const {
  return role_id_;
}
inline void invite_family_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool invite_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void invite_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void invite_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void invite_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& invite_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* invite_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* invite_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void invite_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// invite_family_rsp

// required uint32 family_id = 1;
inline bool invite_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 invite_family_rsp::family_id() const {
  return family_id_;
}
inline void invite_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool invite_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 invite_family_rsp::role_id() const {
  return role_id_;
}
inline void invite_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required .client.invite_family_rsp.result ret = 3;
inline bool invite_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void invite_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void invite_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void invite_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::invite_family_rsp_result invite_family_rsp::ret() const {
  return static_cast< ::client::invite_family_rsp_result >(ret_);
}
inline void invite_family_rsp::set_ret(::client::invite_family_rsp_result value) {
  assert(::client::invite_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// invite_family_list_req

// required uint32 unixtime = 1;
inline bool invite_family_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_family_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_family_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_family_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 invite_family_list_req::unixtime() const {
  return unixtime_;
}
inline void invite_family_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool invite_family_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_family_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_family_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_family_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& invite_family_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* invite_family_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* invite_family_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void invite_family_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// invite_family_info

// required uint32 family_id = 1;
inline bool invite_family_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_family_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_family_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_family_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 invite_family_info::family_id() const {
  return family_id_;
}
inline void invite_family_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool invite_family_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_family_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_family_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_family_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 invite_family_info::role_id() const {
  return role_id_;
}
inline void invite_family_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// invite_family_list_rsp

// repeated .client.invite_family_info ifi = 1;
inline int invite_family_list_rsp::ifi_size() const {
  return ifi_.size();
}
inline void invite_family_list_rsp::clear_ifi() {
  ifi_.Clear();
}
inline const ::client::invite_family_info& invite_family_list_rsp::ifi(int index) const {
  return ifi_.Get(index);
}
inline ::client::invite_family_info* invite_family_list_rsp::mutable_ifi(int index) {
  return ifi_.Mutable(index);
}
inline ::client::invite_family_info* invite_family_list_rsp::add_ifi() {
  return ifi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::invite_family_info >&
invite_family_list_rsp::ifi() const {
  return ifi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::invite_family_info >*
invite_family_list_rsp::mutable_ifi() {
  return &ifi_;
}

// -------------------------------------------------------------------

// agree_family_req

// required uint32 family_id = 1;
inline bool agree_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agree_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agree_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agree_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 agree_family_req::family_id() const {
  return family_id_;
}
inline void agree_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 type = 2;
inline bool agree_family_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agree_family_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agree_family_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agree_family_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 agree_family_req::type() const {
  return type_;
}
inline void agree_family_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool agree_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agree_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agree_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agree_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& agree_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* agree_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* agree_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void agree_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// agree_family_rsp

// required .client.agree_family_rsp.result ret = 1;
inline bool agree_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agree_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agree_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agree_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::agree_family_rsp_result agree_family_rsp::ret() const {
  return static_cast< ::client::agree_family_rsp_result >(ret_);
}
inline void agree_family_rsp::set_ret(::client::agree_family_rsp_result value) {
  assert(::client::agree_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool agree_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agree_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agree_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agree_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 agree_family_rsp::family_id() const {
  return family_id_;
}
inline void agree_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 3;
inline bool agree_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agree_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agree_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agree_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 agree_family_rsp::role_id() const {
  return role_id_;
}
inline void agree_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 4;
inline bool agree_family_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void agree_family_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void agree_family_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void agree_family_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 agree_family_rsp::type() const {
  return type_;
}
inline void agree_family_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// modify_family_post_req

// required uint32 family_id = 1;
inline bool modify_family_post_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_family_post_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_family_post_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_family_post_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 modify_family_post_req::family_id() const {
  return family_id_;
}
inline void modify_family_post_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string post = 2;
inline bool modify_family_post_req::has_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_family_post_req::set_has_post() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_family_post_req::clear_has_post() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_family_post_req::clear_post() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    post_->clear();
  }
  clear_has_post();
}
inline const ::std::string& modify_family_post_req::post() const {
  return *post_;
}
inline void modify_family_post_req::set_post(const ::std::string& value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void modify_family_post_req::set_post(const char* value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void modify_family_post_req::set_post(const char* value, size_t size) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* modify_family_post_req::mutable_post() {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  return post_;
}
inline ::std::string* modify_family_post_req::release_post() {
  clear_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = post_;
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void modify_family_post_req::set_allocated_post(::std::string* post) {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (post) {
    set_has_post();
    post_ = post;
  } else {
    clear_has_post();
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 qq = 3;
inline bool modify_family_post_req::has_qq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_family_post_req::set_has_qq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_family_post_req::clear_has_qq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_family_post_req::clear_qq() {
  qq_ = 0u;
  clear_has_qq();
}
inline ::google::protobuf::uint32 modify_family_post_req::qq() const {
  return qq_;
}
inline void modify_family_post_req::set_qq(::google::protobuf::uint32 value) {
  set_has_qq();
  qq_ = value;
}

// optional uint32 yy = 4;
inline bool modify_family_post_req::has_yy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_family_post_req::set_has_yy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_family_post_req::clear_has_yy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_family_post_req::clear_yy() {
  yy_ = 0u;
  clear_has_yy();
}
inline ::google::protobuf::uint32 modify_family_post_req::yy() const {
  return yy_;
}
inline void modify_family_post_req::set_yy(::google::protobuf::uint32 value) {
  set_has_yy();
  yy_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool modify_family_post_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void modify_family_post_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void modify_family_post_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void modify_family_post_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& modify_family_post_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* modify_family_post_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* modify_family_post_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void modify_family_post_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// modify_family_post_rsp

// required .client.modify_family_post_rsp.result ret = 1;
inline bool modify_family_post_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_family_post_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_family_post_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_family_post_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::modify_family_post_rsp_result modify_family_post_rsp::ret() const {
  return static_cast< ::client::modify_family_post_rsp_result >(ret_);
}
inline void modify_family_post_rsp::set_ret(::client::modify_family_post_rsp_result value) {
  assert(::client::modify_family_post_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool modify_family_post_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_family_post_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_family_post_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_family_post_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 modify_family_post_rsp::family_id() const {
  return family_id_;
}
inline void modify_family_post_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string post = 3;
inline bool modify_family_post_rsp::has_post() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_family_post_rsp::set_has_post() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_family_post_rsp::clear_has_post() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_family_post_rsp::clear_post() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    post_->clear();
  }
  clear_has_post();
}
inline const ::std::string& modify_family_post_rsp::post() const {
  return *post_;
}
inline void modify_family_post_rsp::set_post(const ::std::string& value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void modify_family_post_rsp::set_post(const char* value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void modify_family_post_rsp::set_post(const char* value, size_t size) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* modify_family_post_rsp::mutable_post() {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  return post_;
}
inline ::std::string* modify_family_post_rsp::release_post() {
  clear_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = post_;
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void modify_family_post_rsp::set_allocated_post(::std::string* post) {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (post) {
    set_has_post();
    post_ = post;
  } else {
    clear_has_post();
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 qq = 4;
inline bool modify_family_post_rsp::has_qq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_family_post_rsp::set_has_qq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_family_post_rsp::clear_has_qq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_family_post_rsp::clear_qq() {
  qq_ = 0u;
  clear_has_qq();
}
inline ::google::protobuf::uint32 modify_family_post_rsp::qq() const {
  return qq_;
}
inline void modify_family_post_rsp::set_qq(::google::protobuf::uint32 value) {
  set_has_qq();
  qq_ = value;
}

// optional uint32 yy = 5;
inline bool modify_family_post_rsp::has_yy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void modify_family_post_rsp::set_has_yy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void modify_family_post_rsp::clear_has_yy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void modify_family_post_rsp::clear_yy() {
  yy_ = 0u;
  clear_has_yy();
}
inline ::google::protobuf::uint32 modify_family_post_rsp::yy() const {
  return yy_;
}
inline void modify_family_post_rsp::set_yy(::google::protobuf::uint32 value) {
  set_has_yy();
  yy_ = value;
}

// -------------------------------------------------------------------

// disband_family_req

// required uint32 family_id = 1;
inline bool disband_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void disband_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void disband_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void disband_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 disband_family_req::family_id() const {
  return family_id_;
}
inline void disband_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool disband_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void disband_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void disband_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void disband_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& disband_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* disband_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* disband_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void disband_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// disband_family_rsp

// required .client.disband_family_rsp.result ret = 1;
inline bool disband_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void disband_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void disband_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void disband_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::disband_family_rsp_result disband_family_rsp::ret() const {
  return static_cast< ::client::disband_family_rsp_result >(ret_);
}
inline void disband_family_rsp::set_ret(::client::disband_family_rsp_result value) {
  assert(::client::disband_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool disband_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void disband_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void disband_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void disband_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 disband_family_rsp::family_id() const {
  return family_id_;
}
inline void disband_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// family_self_req

// required uint32 unixtime = 1;
inline bool family_self_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_self_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_self_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_self_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 family_self_req::unixtime() const {
  return unixtime_;
}
inline void family_self_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_self_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_self_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_self_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_self_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_self_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_self_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_self_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_self_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_self_rsp

// required uint32 family_id = 1;
inline bool family_self_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_self_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_self_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_self_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_self_rsp::family_id() const {
  return family_id_;
}
inline void family_self_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 permissions = 2;
inline bool family_self_rsp::has_permissions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_self_rsp::set_has_permissions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_self_rsp::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_self_rsp::clear_permissions() {
  permissions_ = 0u;
  clear_has_permissions();
}
inline ::google::protobuf::uint32 family_self_rsp::permissions() const {
  return permissions_;
}
inline void family_self_rsp::set_permissions(::google::protobuf::uint32 value) {
  set_has_permissions();
  permissions_ = value;
}

// required uint32 time = 3;
inline bool family_self_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_self_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_self_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_self_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 family_self_rsp::time() const {
  return time_;
}
inline void family_self_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 add_by = 4;
inline bool family_self_rsp::has_add_by() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_self_rsp::set_has_add_by() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_self_rsp::clear_has_add_by() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_self_rsp::clear_add_by() {
  add_by_ = 0u;
  clear_has_add_by();
}
inline ::google::protobuf::uint32 family_self_rsp::add_by() const {
  return add_by_;
}
inline void family_self_rsp::set_add_by(::google::protobuf::uint32 value) {
  set_has_add_by();
  add_by_ = value;
}

// -------------------------------------------------------------------

// apply_family_list_self_req

// required uint32 unixtime = 1;
inline bool apply_family_list_self_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void apply_family_list_self_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void apply_family_list_self_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void apply_family_list_self_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 apply_family_list_self_req::unixtime() const {
  return unixtime_;
}
inline void apply_family_list_self_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool apply_family_list_self_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void apply_family_list_self_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void apply_family_list_self_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void apply_family_list_self_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& apply_family_list_self_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* apply_family_list_self_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* apply_family_list_self_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void apply_family_list_self_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// apply_family_list_self_rsp

// repeated uint32 family_id = 1;
inline int apply_family_list_self_rsp::family_id_size() const {
  return family_id_.size();
}
inline void apply_family_list_self_rsp::clear_family_id() {
  family_id_.Clear();
}
inline ::google::protobuf::uint32 apply_family_list_self_rsp::family_id(int index) const {
  return family_id_.Get(index);
}
inline void apply_family_list_self_rsp::set_family_id(int index, ::google::protobuf::uint32 value) {
  family_id_.Set(index, value);
}
inline void apply_family_list_self_rsp::add_family_id(::google::protobuf::uint32 value) {
  family_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
apply_family_list_self_rsp::family_id() const {
  return family_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
apply_family_list_self_rsp::mutable_family_id() {
  return &family_id_;
}

// repeated uint32 time = 2;
inline int apply_family_list_self_rsp::time_size() const {
  return time_.size();
}
inline void apply_family_list_self_rsp::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::uint32 apply_family_list_self_rsp::time(int index) const {
  return time_.Get(index);
}
inline void apply_family_list_self_rsp::set_time(int index, ::google::protobuf::uint32 value) {
  time_.Set(index, value);
}
inline void apply_family_list_self_rsp::add_time(::google::protobuf::uint32 value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
apply_family_list_self_rsp::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
apply_family_list_self_rsp::mutable_time() {
  return &time_;
}

// -------------------------------------------------------------------

// family_member_list_req

// required uint32 family_id = 1;
inline bool family_member_list_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_member_list_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_member_list_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_member_list_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_member_list_req::family_id() const {
  return family_id_;
}
inline void family_member_list_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_member_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_member_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_member_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_member_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_member_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_member_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_member_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_member_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_member_info

// required uint32 id = 1;
inline bool family_member_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_member_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_member_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_member_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 family_member_info::id() const {
  return id_;
}
inline void family_member_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 permissions = 2;
inline bool family_member_info::has_permissions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_member_info::set_has_permissions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_member_info::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_member_info::clear_permissions() {
  permissions_ = 0u;
  clear_has_permissions();
}
inline ::google::protobuf::uint32 family_member_info::permissions() const {
  return permissions_;
}
inline void family_member_info::set_permissions(::google::protobuf::uint32 value) {
  set_has_permissions();
  permissions_ = value;
}

// required uint32 time = 3;
inline bool family_member_info::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_member_info::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_member_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_member_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 family_member_info::time() const {
  return time_;
}
inline void family_member_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 total_donate = 4;
inline bool family_member_info::has_total_donate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_member_info::set_has_total_donate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_member_info::clear_has_total_donate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_member_info::clear_total_donate() {
  total_donate_ = 0u;
  clear_has_total_donate();
}
inline ::google::protobuf::uint32 family_member_info::total_donate() const {
  return total_donate_;
}
inline void family_member_info::set_total_donate(::google::protobuf::uint32 value) {
  set_has_total_donate();
  total_donate_ = value;
}

// -------------------------------------------------------------------

// family_member_list_rsp

// required uint32 family_id = 1;
inline bool family_member_list_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_member_list_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_member_list_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_member_list_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_member_list_rsp::family_id() const {
  return family_id_;
}
inline void family_member_list_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.family_member_info fmi = 2;
inline int family_member_list_rsp::fmi_size() const {
  return fmi_.size();
}
inline void family_member_list_rsp::clear_fmi() {
  fmi_.Clear();
}
inline const ::client::family_member_info& family_member_list_rsp::fmi(int index) const {
  return fmi_.Get(index);
}
inline ::client::family_member_info* family_member_list_rsp::mutable_fmi(int index) {
  return fmi_.Mutable(index);
}
inline ::client::family_member_info* family_member_list_rsp::add_fmi() {
  return fmi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_member_info >&
family_member_list_rsp::fmi() const {
  return fmi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_member_info >*
family_member_list_rsp::mutable_fmi() {
  return &fmi_;
}

// -------------------------------------------------------------------

// modify_family_member_req

// required uint32 family_id = 1;
inline bool modify_family_member_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_family_member_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_family_member_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_family_member_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 modify_family_member_req::family_id() const {
  return family_id_;
}
inline void modify_family_member_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool modify_family_member_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_family_member_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_family_member_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_family_member_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 modify_family_member_req::role_id() const {
  return role_id_;
}
inline void modify_family_member_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 3;
inline bool modify_family_member_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_family_member_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_family_member_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_family_member_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 modify_family_member_req::type() const {
  return type_;
}
inline void modify_family_member_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool modify_family_member_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_family_member_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_family_member_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_family_member_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& modify_family_member_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* modify_family_member_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* modify_family_member_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void modify_family_member_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// modify_family_member_rsp

// required .client.modify_family_member_rsp.result ret = 1;
inline bool modify_family_member_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_family_member_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_family_member_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_family_member_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::modify_family_member_rsp_result modify_family_member_rsp::ret() const {
  return static_cast< ::client::modify_family_member_rsp_result >(ret_);
}
inline void modify_family_member_rsp::set_ret(::client::modify_family_member_rsp_result value) {
  assert(::client::modify_family_member_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 family_id = 2;
inline bool modify_family_member_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_family_member_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_family_member_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_family_member_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 modify_family_member_rsp::family_id() const {
  return family_id_;
}
inline void modify_family_member_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 3;
inline bool modify_family_member_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_family_member_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_family_member_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_family_member_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 modify_family_member_rsp::role_id() const {
  return role_id_;
}
inline void modify_family_member_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 4;
inline bool modify_family_member_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_family_member_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_family_member_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_family_member_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 modify_family_member_rsp::type() const {
  return type_;
}
inline void modify_family_member_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// secede_family_req

// required uint32 family_id = 1;
inline bool secede_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secede_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secede_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secede_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 secede_family_req::family_id() const {
  return family_id_;
}
inline void secede_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool secede_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void secede_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void secede_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void secede_family_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 secede_family_req::role_id() const {
  return role_id_;
}
inline void secede_family_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool secede_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void secede_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void secede_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void secede_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& secede_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* secede_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* secede_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void secede_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// secede_family_rsp

// required uint32 family_id = 1;
inline bool secede_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secede_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secede_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secede_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 secede_family_rsp::family_id() const {
  return family_id_;
}
inline void secede_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool secede_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void secede_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void secede_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void secede_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 secede_family_rsp::role_id() const {
  return role_id_;
}
inline void secede_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 result_type = 3;
inline bool secede_family_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void secede_family_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void secede_family_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void secede_family_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 secede_family_rsp::result_type() const {
  return result_type_;
}
inline void secede_family_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// expel_member_req

// required uint32 evictee_id = 1;
inline bool expel_member_req::has_evictee_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void expel_member_req::set_has_evictee_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void expel_member_req::clear_has_evictee_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void expel_member_req::clear_evictee_id() {
  evictee_id_ = 0u;
  clear_has_evictee_id();
}
inline ::google::protobuf::uint32 expel_member_req::evictee_id() const {
  return evictee_id_;
}
inline void expel_member_req::set_evictee_id(::google::protobuf::uint32 value) {
  set_has_evictee_id();
  evictee_id_ = value;
}

// required uint32 family_id = 2;
inline bool expel_member_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void expel_member_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void expel_member_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void expel_member_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 expel_member_req::family_id() const {
  return family_id_;
}
inline void expel_member_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool expel_member_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void expel_member_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void expel_member_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void expel_member_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& expel_member_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* expel_member_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* expel_member_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void expel_member_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// expel_member_rsp

// required uint32 family_id = 1;
inline bool expel_member_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void expel_member_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void expel_member_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void expel_member_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 expel_member_rsp::family_id() const {
  return family_id_;
}
inline void expel_member_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool expel_member_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void expel_member_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void expel_member_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void expel_member_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 expel_member_rsp::role_id() const {
  return role_id_;
}
inline void expel_member_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 evictee_id = 3;
inline bool expel_member_rsp::has_evictee_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void expel_member_rsp::set_has_evictee_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void expel_member_rsp::clear_has_evictee_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void expel_member_rsp::clear_evictee_id() {
  evictee_id_ = 0u;
  clear_has_evictee_id();
}
inline ::google::protobuf::uint32 expel_member_rsp::evictee_id() const {
  return evictee_id_;
}
inline void expel_member_rsp::set_evictee_id(::google::protobuf::uint32 value) {
  set_has_evictee_id();
  evictee_id_ = value;
}

// required uint32 result_type = 4;
inline bool expel_member_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void expel_member_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void expel_member_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void expel_member_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 expel_member_rsp::result_type() const {
  return result_type_;
}
inline void expel_member_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// upgrade_family_req

// required uint32 family_id = 1;
inline bool upgrade_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 upgrade_family_req::family_id() const {
  return family_id_;
}
inline void upgrade_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool upgrade_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& upgrade_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* upgrade_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* upgrade_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void upgrade_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// upgrade_family_rsp

// required .client.upgrade_family_rsp.result ret = 1;
inline bool upgrade_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::upgrade_family_rsp_result upgrade_family_rsp::ret() const {
  return static_cast< ::client::upgrade_family_rsp_result >(ret_);
}
inline void upgrade_family_rsp::set_ret(::client::upgrade_family_rsp_result value) {
  assert(::client::upgrade_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .client.family_info info = 2;
inline bool upgrade_family_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_family_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_family_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_family_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& upgrade_family_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* upgrade_family_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* upgrade_family_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void upgrade_family_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// donate_family_req

// required uint32 family_id = 1;
inline bool donate_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void donate_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void donate_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void donate_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 donate_family_req::family_id() const {
  return family_id_;
}
inline void donate_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 type = 2;
inline bool donate_family_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void donate_family_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void donate_family_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void donate_family_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 donate_family_req::type() const {
  return type_;
}
inline void donate_family_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 num = 3;
inline bool donate_family_req::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void donate_family_req::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void donate_family_req::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void donate_family_req::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 donate_family_req::num() const {
  return num_;
}
inline void donate_family_req::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool donate_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void donate_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void donate_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void donate_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& donate_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* donate_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* donate_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void donate_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// donate_family_rsp

// required .client.donate_family_rsp.result ret = 1;
inline bool donate_family_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void donate_family_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void donate_family_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void donate_family_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::donate_family_rsp_result donate_family_rsp::ret() const {
  return static_cast< ::client::donate_family_rsp_result >(ret_);
}
inline void donate_family_rsp::set_ret(::client::donate_family_rsp_result value) {
  assert(::client::donate_family_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 type = 2;
inline bool donate_family_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void donate_family_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void donate_family_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void donate_family_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 donate_family_rsp::type() const {
  return type_;
}
inline void donate_family_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.family_info info = 3;
inline bool donate_family_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void donate_family_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void donate_family_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void donate_family_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& donate_family_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* donate_family_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* donate_family_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void donate_family_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 total_donate = 4;
inline bool donate_family_rsp::has_total_donate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void donate_family_rsp::set_has_total_donate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void donate_family_rsp::clear_has_total_donate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void donate_family_rsp::clear_total_donate() {
  total_donate_ = 0u;
  clear_has_total_donate();
}
inline ::google::protobuf::uint32 donate_family_rsp::total_donate() const {
  return total_donate_;
}
inline void donate_family_rsp::set_total_donate(::google::protobuf::uint32 value) {
  set_has_total_donate();
  total_donate_ = value;
}

// -------------------------------------------------------------------

// donate_list_req

// required uint32 family_id = 1;
inline bool donate_list_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void donate_list_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void donate_list_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void donate_list_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 donate_list_req::family_id() const {
  return family_id_;
}
inline void donate_list_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool donate_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void donate_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void donate_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void donate_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& donate_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* donate_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* donate_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void donate_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// donate_info

// required uint32 role_id = 1;
inline bool donate_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void donate_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void donate_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void donate_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 donate_info::role_id() const {
  return role_id_;
}
inline void donate_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 dragon_count = 2;
inline bool donate_info::has_dragon_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void donate_info::set_has_dragon_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void donate_info::clear_has_dragon_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void donate_info::clear_dragon_count() {
  dragon_count_ = 0u;
  clear_has_dragon_count();
}
inline ::google::protobuf::uint32 donate_info::dragon_count() const {
  return dragon_count_;
}
inline void donate_info::set_dragon_count(::google::protobuf::uint32 value) {
  set_has_dragon_count();
  dragon_count_ = value;
}

// required uint32 tiger_count = 3;
inline bool donate_info::has_tiger_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void donate_info::set_has_tiger_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void donate_info::clear_has_tiger_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void donate_info::clear_tiger_count() {
  tiger_count_ = 0u;
  clear_has_tiger_count();
}
inline ::google::protobuf::uint32 donate_info::tiger_count() const {
  return tiger_count_;
}
inline void donate_info::set_tiger_count(::google::protobuf::uint32 value) {
  set_has_tiger_count();
  tiger_count_ = value;
}

// required uint32 rosefinch_count = 4;
inline bool donate_info::has_rosefinch_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void donate_info::set_has_rosefinch_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void donate_info::clear_has_rosefinch_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void donate_info::clear_rosefinch_count() {
  rosefinch_count_ = 0u;
  clear_has_rosefinch_count();
}
inline ::google::protobuf::uint32 donate_info::rosefinch_count() const {
  return rosefinch_count_;
}
inline void donate_info::set_rosefinch_count(::google::protobuf::uint32 value) {
  set_has_rosefinch_count();
  rosefinch_count_ = value;
}

// required uint32 tortoise_count = 5;
inline bool donate_info::has_tortoise_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void donate_info::set_has_tortoise_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void donate_info::clear_has_tortoise_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void donate_info::clear_tortoise_count() {
  tortoise_count_ = 0u;
  clear_has_tortoise_count();
}
inline ::google::protobuf::uint32 donate_info::tortoise_count() const {
  return tortoise_count_;
}
inline void donate_info::set_tortoise_count(::google::protobuf::uint32 value) {
  set_has_tortoise_count();
  tortoise_count_ = value;
}

// required uint32 money = 6;
inline bool donate_info::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void donate_info::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void donate_info::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void donate_info::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 donate_info::money() const {
  return money_;
}
inline void donate_info::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// donate_list_rsp

// required uint32 family_id = 1;
inline bool donate_list_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void donate_list_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void donate_list_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void donate_list_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 donate_list_rsp::family_id() const {
  return family_id_;
}
inline void donate_list_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.donate_info info = 2;
inline int donate_list_rsp::info_size() const {
  return info_.size();
}
inline void donate_list_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::donate_info& donate_list_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::donate_info* donate_list_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::donate_info* donate_list_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::donate_info >&
donate_list_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::donate_info >*
donate_list_rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// family_log_req

// required uint32 family_id = 1;
inline bool family_log_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_log_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_log_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_log_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_log_req::family_id() const {
  return family_id_;
}
inline void family_log_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_log_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_log_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_log_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_log_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_log_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_log_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_log_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_log_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_log_info

// required uint32 time = 1;
inline bool family_log_info::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_log_info::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_log_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_log_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 family_log_info::time() const {
  return time_;
}
inline void family_log_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 type = 2;
inline bool family_log_info::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_log_info::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_log_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_log_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 family_log_info::type() const {
  return type_;
}
inline void family_log_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 key = 3;
inline bool family_log_info::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_log_info::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_log_info::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_log_info::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 family_log_info::key() const {
  return key_;
}
inline void family_log_info::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required uint32 value = 4;
inline bool family_log_info::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_log_info::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_log_info::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_log_info::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 family_log_info::value() const {
  return value_;
}
inline void family_log_info::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required string family_name = 5;
inline bool family_log_info::has_family_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_log_info::set_has_family_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_log_info::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_log_info::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& family_log_info::family_name() const {
  return *family_name_;
}
inline void family_log_info::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_log_info::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_log_info::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_log_info::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* family_log_info::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_log_info::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// family_log_rsp

// required uint32 family_id = 1;
inline bool family_log_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_log_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_log_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_log_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_log_rsp::family_id() const {
  return family_id_;
}
inline void family_log_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.family_log_info fli = 2;
inline int family_log_rsp::fli_size() const {
  return fli_.size();
}
inline void family_log_rsp::clear_fli() {
  fli_.Clear();
}
inline const ::client::family_log_info& family_log_rsp::fli(int index) const {
  return fli_.Get(index);
}
inline ::client::family_log_info* family_log_rsp::mutable_fli(int index) {
  return fli_.Mutable(index);
}
inline ::client::family_log_info* family_log_rsp::add_fli() {
  return fli_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_log_info >&
family_log_rsp::fli() const {
  return fli_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_log_info >*
family_log_rsp::mutable_fli() {
  return &fli_;
}

// -------------------------------------------------------------------

// family_log_update

// required uint32 family_id = 1;
inline bool family_log_update::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_log_update::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_log_update::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_log_update::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_log_update::family_id() const {
  return family_id_;
}
inline void family_log_update::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.family_log_info fli = 2;
inline int family_log_update::fli_size() const {
  return fli_.size();
}
inline void family_log_update::clear_fli() {
  fli_.Clear();
}
inline const ::client::family_log_info& family_log_update::fli(int index) const {
  return fli_.Get(index);
}
inline ::client::family_log_info* family_log_update::mutable_fli(int index) {
  return fli_.Mutable(index);
}
inline ::client::family_log_info* family_log_update::add_fli() {
  return fli_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_log_info >&
family_log_update::fli() const {
  return fli_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_log_info >*
family_log_update::mutable_fli() {
  return &fli_;
}

// -------------------------------------------------------------------

// family_record_req

// required uint32 family_id = 1;
inline bool family_record_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_record_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_record_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_record_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_record_req::family_id() const {
  return family_id_;
}
inline void family_record_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_record_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_record_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_record_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_record_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_record_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_record_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_record_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_record_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// family_record_info

// required uint32 role_id = 1;
inline bool family_record_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_record_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_record_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_record_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 family_record_info::role_id() const {
  return role_id_;
}
inline void family_record_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 join_num = 2;
inline bool family_record_info::has_join_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_record_info::set_has_join_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_record_info::clear_has_join_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_record_info::clear_join_num() {
  join_num_ = 0u;
  clear_has_join_num();
}
inline ::google::protobuf::uint32 family_record_info::join_num() const {
  return join_num_;
}
inline void family_record_info::set_join_num(::google::protobuf::uint32 value) {
  set_has_join_num();
  join_num_ = value;
}

// required uint32 kill_chief_num = 3;
inline bool family_record_info::has_kill_chief_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_record_info::set_has_kill_chief_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_record_info::clear_has_kill_chief_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_record_info::clear_kill_chief_num() {
  kill_chief_num_ = 0u;
  clear_has_kill_chief_num();
}
inline ::google::protobuf::uint32 family_record_info::kill_chief_num() const {
  return kill_chief_num_;
}
inline void family_record_info::set_kill_chief_num(::google::protobuf::uint32 value) {
  set_has_kill_chief_num();
  kill_chief_num_ = value;
}

// required uint32 kill_vice_chief_num = 4;
inline bool family_record_info::has_kill_vice_chief_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_record_info::set_has_kill_vice_chief_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_record_info::clear_has_kill_vice_chief_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_record_info::clear_kill_vice_chief_num() {
  kill_vice_chief_num_ = 0u;
  clear_has_kill_vice_chief_num();
}
inline ::google::protobuf::uint32 family_record_info::kill_vice_chief_num() const {
  return kill_vice_chief_num_;
}
inline void family_record_info::set_kill_vice_chief_num(::google::protobuf::uint32 value) {
  set_has_kill_vice_chief_num();
  kill_vice_chief_num_ = value;
}

// required uint32 kill_elder_num = 5;
inline bool family_record_info::has_kill_elder_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_record_info::set_has_kill_elder_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_record_info::clear_has_kill_elder_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_record_info::clear_kill_elder_num() {
  kill_elder_num_ = 0u;
  clear_has_kill_elder_num();
}
inline ::google::protobuf::uint32 family_record_info::kill_elder_num() const {
  return kill_elder_num_;
}
inline void family_record_info::set_kill_elder_num(::google::protobuf::uint32 value) {
  set_has_kill_elder_num();
  kill_elder_num_ = value;
}

// required uint32 kill_elite_num = 6;
inline bool family_record_info::has_kill_elite_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void family_record_info::set_has_kill_elite_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void family_record_info::clear_has_kill_elite_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void family_record_info::clear_kill_elite_num() {
  kill_elite_num_ = 0u;
  clear_has_kill_elite_num();
}
inline ::google::protobuf::uint32 family_record_info::kill_elite_num() const {
  return kill_elite_num_;
}
inline void family_record_info::set_kill_elite_num(::google::protobuf::uint32 value) {
  set_has_kill_elite_num();
  kill_elite_num_ = value;
}

// required uint32 kill_member_num = 7;
inline bool family_record_info::has_kill_member_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void family_record_info::set_has_kill_member_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void family_record_info::clear_has_kill_member_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void family_record_info::clear_kill_member_num() {
  kill_member_num_ = 0u;
  clear_has_kill_member_num();
}
inline ::google::protobuf::uint32 family_record_info::kill_member_num() const {
  return kill_member_num_;
}
inline void family_record_info::set_kill_member_num(::google::protobuf::uint32 value) {
  set_has_kill_member_num();
  kill_member_num_ = value;
}

// required uint32 dead_num = 8;
inline bool family_record_info::has_dead_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void family_record_info::set_has_dead_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void family_record_info::clear_has_dead_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void family_record_info::clear_dead_num() {
  dead_num_ = 0u;
  clear_has_dead_num();
}
inline ::google::protobuf::uint32 family_record_info::dead_num() const {
  return dead_num_;
}
inline void family_record_info::set_dead_num(::google::protobuf::uint32 value) {
  set_has_dead_num();
  dead_num_ = value;
}

// required uint32 be_kill = 9;
inline bool family_record_info::has_be_kill() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void family_record_info::set_has_be_kill() {
  _has_bits_[0] |= 0x00000100u;
}
inline void family_record_info::clear_has_be_kill() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void family_record_info::clear_be_kill() {
  be_kill_ = 0u;
  clear_has_be_kill();
}
inline ::google::protobuf::uint32 family_record_info::be_kill() const {
  return be_kill_;
}
inline void family_record_info::set_be_kill(::google::protobuf::uint32 value) {
  set_has_be_kill();
  be_kill_ = value;
}

// required uint32 be_kill_num = 10;
inline bool family_record_info::has_be_kill_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void family_record_info::set_has_be_kill_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void family_record_info::clear_has_be_kill_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void family_record_info::clear_be_kill_num() {
  be_kill_num_ = 0u;
  clear_has_be_kill_num();
}
inline ::google::protobuf::uint32 family_record_info::be_kill_num() const {
  return be_kill_num_;
}
inline void family_record_info::set_be_kill_num(::google::protobuf::uint32 value) {
  set_has_be_kill_num();
  be_kill_num_ = value;
}

// required uint32 type = 11;
inline bool family_record_info::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void family_record_info::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void family_record_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void family_record_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 family_record_info::type() const {
  return type_;
}
inline void family_record_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// family_record_rsp

// required uint32 family_id = 1;
inline bool family_record_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_record_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_record_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_record_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_record_rsp::family_id() const {
  return family_id_;
}
inline void family_record_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.family_record_info fri = 2;
inline int family_record_rsp::fri_size() const {
  return fri_.size();
}
inline void family_record_rsp::clear_fri() {
  fri_.Clear();
}
inline const ::client::family_record_info& family_record_rsp::fri(int index) const {
  return fri_.Get(index);
}
inline ::client::family_record_info* family_record_rsp::mutable_fri(int index) {
  return fri_.Mutable(index);
}
inline ::client::family_record_info* family_record_rsp::add_fri() {
  return fri_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_record_info >&
family_record_rsp::fri() const {
  return fri_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_record_info >*
family_record_rsp::mutable_fri() {
  return &fri_;
}

// -------------------------------------------------------------------

// family_record_update

// required uint32 type = 1;
inline bool family_record_update::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_record_update::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_record_update::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_record_update::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 family_record_update::type() const {
  return type_;
}
inline void family_record_update::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 killer_family = 2;
inline bool family_record_update::has_killer_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_record_update::set_has_killer_family() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_record_update::clear_has_killer_family() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_record_update::clear_killer_family() {
  killer_family_ = 0u;
  clear_has_killer_family();
}
inline ::google::protobuf::uint32 family_record_update::killer_family() const {
  return killer_family_;
}
inline void family_record_update::set_killer_family(::google::protobuf::uint32 value) {
  set_has_killer_family();
  killer_family_ = value;
}

// required uint32 killer = 3;
inline bool family_record_update::has_killer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_record_update::set_has_killer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_record_update::clear_has_killer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_record_update::clear_killer() {
  killer_ = 0u;
  clear_has_killer();
}
inline ::google::protobuf::uint32 family_record_update::killer() const {
  return killer_;
}
inline void family_record_update::set_killer(::google::protobuf::uint32 value) {
  set_has_killer();
  killer_ = value;
}

// required uint32 slain_family = 4;
inline bool family_record_update::has_slain_family() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_record_update::set_has_slain_family() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_record_update::clear_has_slain_family() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_record_update::clear_slain_family() {
  slain_family_ = 0u;
  clear_has_slain_family();
}
inline ::google::protobuf::uint32 family_record_update::slain_family() const {
  return slain_family_;
}
inline void family_record_update::set_slain_family(::google::protobuf::uint32 value) {
  set_has_slain_family();
  slain_family_ = value;
}

// required uint32 slain_title = 5;
inline bool family_record_update::has_slain_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_record_update::set_has_slain_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_record_update::clear_has_slain_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_record_update::clear_slain_title() {
  slain_title_ = 0u;
  clear_has_slain_title();
}
inline ::google::protobuf::uint32 family_record_update::slain_title() const {
  return slain_title_;
}
inline void family_record_update::set_slain_title(::google::protobuf::uint32 value) {
  set_has_slain_title();
  slain_title_ = value;
}

// required uint32 slain = 6;
inline bool family_record_update::has_slain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void family_record_update::set_has_slain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void family_record_update::clear_has_slain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void family_record_update::clear_slain() {
  slain_ = 0u;
  clear_has_slain();
}
inline ::google::protobuf::uint32 family_record_update::slain() const {
  return slain_;
}
inline void family_record_update::set_slain(::google::protobuf::uint32 value) {
  set_has_slain();
  slain_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool family_record_update::has_svr_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void family_record_update::set_has_svr_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void family_record_update::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void family_record_update::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& family_record_update::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* family_record_update::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* family_record_update::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void family_record_update::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// change_family_flag_id_req

// required uint32 family_id = 1;
inline bool change_family_flag_id_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_family_flag_id_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_family_flag_id_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_family_flag_id_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 change_family_flag_id_req::family_id() const {
  return family_id_;
}
inline void change_family_flag_id_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 flag_id = 2;
inline bool change_family_flag_id_req::has_flag_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_family_flag_id_req::set_has_flag_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_family_flag_id_req::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_family_flag_id_req::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 change_family_flag_id_req::flag_id() const {
  return flag_id_;
}
inline void change_family_flag_id_req::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool change_family_flag_id_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_family_flag_id_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_family_flag_id_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_family_flag_id_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& change_family_flag_id_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* change_family_flag_id_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* change_family_flag_id_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void change_family_flag_id_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// change_family_flag_id_rsp

// required uint32 result_type = 1;
inline bool change_family_flag_id_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_family_flag_id_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_family_flag_id_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_family_flag_id_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 change_family_flag_id_rsp::result_type() const {
  return result_type_;
}
inline void change_family_flag_id_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.family_info info = 2;
inline bool change_family_flag_id_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_family_flag_id_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_family_flag_id_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_family_flag_id_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& change_family_flag_id_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* change_family_flag_id_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* change_family_flag_id_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void change_family_flag_id_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// change_family_flag_name_req

// required uint32 family_id = 1;
inline bool change_family_flag_name_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_family_flag_name_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_family_flag_name_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_family_flag_name_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 change_family_flag_name_req::family_id() const {
  return family_id_;
}
inline void change_family_flag_name_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required string flag_name = 2;
inline bool change_family_flag_name_req::has_flag_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_family_flag_name_req::set_has_flag_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_family_flag_name_req::clear_has_flag_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_family_flag_name_req::clear_flag_name() {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    flag_name_->clear();
  }
  clear_has_flag_name();
}
inline const ::std::string& change_family_flag_name_req::flag_name() const {
  return *flag_name_;
}
inline void change_family_flag_name_req::set_flag_name(const ::std::string& value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void change_family_flag_name_req::set_flag_name(const char* value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void change_family_flag_name_req::set_flag_name(const char* value, size_t size) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* change_family_flag_name_req::mutable_flag_name() {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  return flag_name_;
}
inline ::std::string* change_family_flag_name_req::release_flag_name() {
  clear_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_name_;
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void change_family_flag_name_req::set_allocated_flag_name(::std::string* flag_name) {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (flag_name) {
    set_has_flag_name();
    flag_name_ = flag_name;
  } else {
    clear_has_flag_name();
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool change_family_flag_name_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_family_flag_name_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_family_flag_name_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_family_flag_name_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& change_family_flag_name_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* change_family_flag_name_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* change_family_flag_name_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void change_family_flag_name_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// change_family_flag_name_rsp

// required uint32 result_type = 1;
inline bool change_family_flag_name_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_family_flag_name_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_family_flag_name_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_family_flag_name_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 change_family_flag_name_rsp::result_type() const {
  return result_type_;
}
inline void change_family_flag_name_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.family_info info = 2;
inline bool change_family_flag_name_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_family_flag_name_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_family_flag_name_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_family_flag_name_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& change_family_flag_name_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* change_family_flag_name_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* change_family_flag_name_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void change_family_flag_name_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// impeach_chief_req

// required uint32 family_id = 1;
inline bool impeach_chief_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void impeach_chief_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void impeach_chief_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void impeach_chief_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 impeach_chief_req::family_id() const {
  return family_id_;
}
inline void impeach_chief_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool impeach_chief_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void impeach_chief_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void impeach_chief_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void impeach_chief_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& impeach_chief_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* impeach_chief_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* impeach_chief_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void impeach_chief_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// impeach_chief_rsp

// required uint32 result_type = 1;
inline bool impeach_chief_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void impeach_chief_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void impeach_chief_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void impeach_chief_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 impeach_chief_rsp::result_type() const {
  return result_type_;
}
inline void impeach_chief_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.family_info info = 2;
inline bool impeach_chief_rsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void impeach_chief_rsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void impeach_chief_rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void impeach_chief_rsp::clear_info() {
  if (info_ != NULL) info_->::client::family_info::Clear();
  clear_has_info();
}
inline const ::client::family_info& impeach_chief_rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::family_info* impeach_chief_rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::family_info;
  return info_;
}
inline ::client::family_info* impeach_chief_rsp::release_info() {
  clear_has_info();
  ::client::family_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void impeach_chief_rsp::set_allocated_info(::client::family_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ally_family_req

// required uint32 opt_type = 1;
inline bool ally_family_req::has_opt_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ally_family_req::set_has_opt_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ally_family_req::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ally_family_req::clear_opt_type() {
  opt_type_ = 0u;
  clear_has_opt_type();
}
inline ::google::protobuf::uint32 ally_family_req::opt_type() const {
  return opt_type_;
}
inline void ally_family_req::set_opt_type(::google::protobuf::uint32 value) {
  set_has_opt_type();
  opt_type_ = value;
}

// required uint32 family_id = 2;
inline bool ally_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ally_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ally_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ally_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 ally_family_req::family_id() const {
  return family_id_;
}
inline void ally_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 target_family_id = 3;
inline bool ally_family_req::has_target_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ally_family_req::set_has_target_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ally_family_req::clear_has_target_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ally_family_req::clear_target_family_id() {
  target_family_id_ = 0u;
  clear_has_target_family_id();
}
inline ::google::protobuf::uint32 ally_family_req::target_family_id() const {
  return target_family_id_;
}
inline void ally_family_req::set_target_family_id(::google::protobuf::uint32 value) {
  set_has_target_family_id();
  target_family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool ally_family_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ally_family_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ally_family_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ally_family_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& ally_family_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* ally_family_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* ally_family_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void ally_family_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// ally_family_rsp

// required uint32 result_type = 1;
inline bool ally_family_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ally_family_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ally_family_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ally_family_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 ally_family_rsp::result_type() const {
  return result_type_;
}
inline void ally_family_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// required uint32 opt_type = 2;
inline bool ally_family_rsp::has_opt_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ally_family_rsp::set_has_opt_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ally_family_rsp::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ally_family_rsp::clear_opt_type() {
  opt_type_ = 0u;
  clear_has_opt_type();
}
inline ::google::protobuf::uint32 ally_family_rsp::opt_type() const {
  return opt_type_;
}
inline void ally_family_rsp::set_opt_type(::google::protobuf::uint32 value) {
  set_has_opt_type();
  opt_type_ = value;
}

// optional uint32 target_family_id = 3;
inline bool ally_family_rsp::has_target_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ally_family_rsp::set_has_target_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ally_family_rsp::clear_has_target_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ally_family_rsp::clear_target_family_id() {
  target_family_id_ = 0u;
  clear_has_target_family_id();
}
inline ::google::protobuf::uint32 ally_family_rsp::target_family_id() const {
  return target_family_id_;
}
inline void ally_family_rsp::set_target_family_id(::google::protobuf::uint32 value) {
  set_has_target_family_id();
  target_family_id_ = value;
}

// -------------------------------------------------------------------

// remove_foreign_req

// required uint32 family_id = 1;
inline bool remove_foreign_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void remove_foreign_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void remove_foreign_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void remove_foreign_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 remove_foreign_req::family_id() const {
  return family_id_;
}
inline void remove_foreign_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 target_family_id = 2;
inline bool remove_foreign_req::has_target_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void remove_foreign_req::set_has_target_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void remove_foreign_req::clear_has_target_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void remove_foreign_req::clear_target_family_id() {
  target_family_id_ = 0u;
  clear_has_target_family_id();
}
inline ::google::protobuf::uint32 remove_foreign_req::target_family_id() const {
  return target_family_id_;
}
inline void remove_foreign_req::set_target_family_id(::google::protobuf::uint32 value) {
  set_has_target_family_id();
  target_family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool remove_foreign_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void remove_foreign_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void remove_foreign_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void remove_foreign_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& remove_foreign_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* remove_foreign_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* remove_foreign_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void remove_foreign_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// remove_foreign_rsp

// required uint32 result_type = 1;
inline bool remove_foreign_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void remove_foreign_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void remove_foreign_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void remove_foreign_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 remove_foreign_rsp::result_type() const {
  return result_type_;
}
inline void remove_foreign_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional uint32 src_family_id = 2;
inline bool remove_foreign_rsp::has_src_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void remove_foreign_rsp::set_has_src_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void remove_foreign_rsp::clear_has_src_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void remove_foreign_rsp::clear_src_family_id() {
  src_family_id_ = 0u;
  clear_has_src_family_id();
}
inline ::google::protobuf::uint32 remove_foreign_rsp::src_family_id() const {
  return src_family_id_;
}
inline void remove_foreign_rsp::set_src_family_id(::google::protobuf::uint32 value) {
  set_has_src_family_id();
  src_family_id_ = value;
}

// optional uint32 target_family_id = 3;
inline bool remove_foreign_rsp::has_target_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void remove_foreign_rsp::set_has_target_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void remove_foreign_rsp::clear_has_target_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void remove_foreign_rsp::clear_target_family_id() {
  target_family_id_ = 0u;
  clear_has_target_family_id();
}
inline ::google::protobuf::uint32 remove_foreign_rsp::target_family_id() const {
  return target_family_id_;
}
inline void remove_foreign_rsp::set_target_family_id(::google::protobuf::uint32 value) {
  set_has_target_family_id();
  target_family_id_ = value;
}

// -------------------------------------------------------------------

// ally_family_list_req

// required uint32 family_id = 1;
inline bool ally_family_list_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ally_family_list_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ally_family_list_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ally_family_list_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 ally_family_list_req::family_id() const {
  return family_id_;
}
inline void ally_family_list_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool ally_family_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ally_family_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ally_family_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ally_family_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& ally_family_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* ally_family_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* ally_family_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void ally_family_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// ally_info

// required uint32 camp_type = 1;
inline bool ally_info::has_camp_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ally_info::set_has_camp_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ally_info::clear_has_camp_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ally_info::clear_camp_type() {
  camp_type_ = 0u;
  clear_has_camp_type();
}
inline ::google::protobuf::uint32 ally_info::camp_type() const {
  return camp_type_;
}
inline void ally_info::set_camp_type(::google::protobuf::uint32 value) {
  set_has_camp_type();
  camp_type_ = value;
}

// required uint32 family_id = 2;
inline bool ally_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ally_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ally_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ally_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 ally_info::family_id() const {
  return family_id_;
}
inline void ally_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// ally_family_list_rsp

// required uint32 family_id = 1;
inline bool ally_family_list_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ally_family_list_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ally_family_list_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ally_family_list_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 ally_family_list_rsp::family_id() const {
  return family_id_;
}
inline void ally_family_list_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// repeated .client.ally_info info = 2;
inline int ally_family_list_rsp::info_size() const {
  return info_.size();
}
inline void ally_family_list_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::ally_info& ally_family_list_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::ally_info* ally_family_list_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::ally_info* ally_family_list_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::ally_info >&
ally_family_list_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::ally_info >*
ally_family_list_rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// activity_opt_rsp

// required uint32 result_type = 1;
inline bool activity_opt_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity_opt_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity_opt_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity_opt_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 activity_opt_rsp::result_type() const {
  return result_type_;
}
inline void activity_opt_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// load_friend_family_req

// required uint32 family_id = 1;
inline bool load_friend_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void load_friend_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void load_friend_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void load_friend_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 load_friend_family_req::family_id() const {
  return family_id_;
}
inline void load_friend_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 role_id = 2;
inline bool load_friend_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void load_friend_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void load_friend_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void load_friend_family_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 load_friend_family_req::role_id() const {
  return role_id_;
}
inline void load_friend_family_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// load_friend_family_rsp

// required uint32 role_id = 1;
inline bool load_friend_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void load_friend_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void load_friend_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void load_friend_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 load_friend_family_rsp::role_id() const {
  return role_id_;
}
inline void load_friend_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated uint32 id = 2;
inline int load_friend_family_rsp::id_size() const {
  return id_.size();
}
inline void load_friend_family_rsp::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 load_friend_family_rsp::id(int index) const {
  return id_.Get(index);
}
inline void load_friend_family_rsp::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void load_friend_family_rsp::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
load_friend_family_rsp::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
load_friend_family_rsp::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// update_friend_family_rsp

// required uint32 role_id = 1;
inline bool update_friend_family_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_friend_family_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_friend_family_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_friend_family_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_friend_family_rsp::role_id() const {
  return role_id_;
}
inline void update_friend_family_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 2;
inline bool update_friend_family_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_friend_family_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_friend_family_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_friend_family_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 update_friend_family_rsp::type() const {
  return type_;
}
inline void update_friend_family_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 family_id = 3;
inline bool update_friend_family_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_friend_family_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_friend_family_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_friend_family_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 update_friend_family_rsp::family_id() const {
  return family_id_;
}
inline void update_friend_family_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// family_relation_list

// repeated uint32 alliance = 1;
inline int family_relation_list::alliance_size() const {
  return alliance_.size();
}
inline void family_relation_list::clear_alliance() {
  alliance_.Clear();
}
inline ::google::protobuf::uint32 family_relation_list::alliance(int index) const {
  return alliance_.Get(index);
}
inline void family_relation_list::set_alliance(int index, ::google::protobuf::uint32 value) {
  alliance_.Set(index, value);
}
inline void family_relation_list::add_alliance(::google::protobuf::uint32 value) {
  alliance_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
family_relation_list::alliance() const {
  return alliance_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
family_relation_list::mutable_alliance() {
  return &alliance_;
}

// repeated uint32 enemy = 2;
inline int family_relation_list::enemy_size() const {
  return enemy_.size();
}
inline void family_relation_list::clear_enemy() {
  enemy_.Clear();
}
inline ::google::protobuf::uint32 family_relation_list::enemy(int index) const {
  return enemy_.Get(index);
}
inline void family_relation_list::set_enemy(int index, ::google::protobuf::uint32 value) {
  enemy_.Set(index, value);
}
inline void family_relation_list::add_enemy(::google::protobuf::uint32 value) {
  enemy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
family_relation_list::enemy() const {
  return enemy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
family_relation_list::mutable_enemy() {
  return &enemy_;
}

// -------------------------------------------------------------------

// update_family_relation

// required uint32 op_type = 1;
inline bool update_family_relation::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_family_relation::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_family_relation::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_family_relation::clear_op_type() {
  op_type_ = 0u;
  clear_has_op_type();
}
inline ::google::protobuf::uint32 update_family_relation::op_type() const {
  return op_type_;
}
inline void update_family_relation::set_op_type(::google::protobuf::uint32 value) {
  set_has_op_type();
  op_type_ = value;
}

// required uint32 re_type = 2;
inline bool update_family_relation::has_re_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_family_relation::set_has_re_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_family_relation::clear_has_re_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_family_relation::clear_re_type() {
  re_type_ = 0u;
  clear_has_re_type();
}
inline ::google::protobuf::uint32 update_family_relation::re_type() const {
  return re_type_;
}
inline void update_family_relation::set_re_type(::google::protobuf::uint32 value) {
  set_has_re_type();
  re_type_ = value;
}

// required uint32 id = 3;
inline bool update_family_relation::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_family_relation::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_family_relation::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_family_relation::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 update_family_relation::id() const {
  return id_;
}
inline void update_family_relation::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// family_title_info

// optional uint32 family_id = 1;
inline bool family_title_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_title_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_title_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_title_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 family_title_info::family_id() const {
  return family_id_;
}
inline void family_title_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string name = 2;
inline bool family_title_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_title_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_title_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_title_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& family_title_info::name() const {
  return *name_;
}
inline void family_title_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void family_title_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void family_title_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_title_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* family_title_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_title_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// family_title_list_rsp

// required uint32 type = 1;
inline bool family_title_list_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_title_list_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_title_list_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_title_list_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 family_title_list_rsp::type() const {
  return type_;
}
inline void family_title_list_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .client.family_title_info info = 2;
inline int family_title_list_rsp::info_size() const {
  return info_.size();
}
inline void family_title_list_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::family_title_info& family_title_list_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::family_title_info* family_title_list_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::family_title_info* family_title_list_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::family_title_info >&
family_title_list_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::family_title_info >*
family_title_list_rsp::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::set_create_famliy_consume_result>() {
  return ::client::set_create_famliy_consume_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::create_family_req_use>() {
  return ::client::create_family_req_use_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::create_family_rsp_result>() {
  return ::client::create_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::apply_family_rsp_result>() {
  return ::client::apply_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::approval_family_rsp_result>() {
  return ::client::approval_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::invite_family_rsp_result>() {
  return ::client::invite_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::agree_family_rsp_result>() {
  return ::client::agree_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::modify_family_post_rsp_result>() {
  return ::client::modify_family_post_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::disband_family_rsp_result>() {
  return ::client::disband_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::modify_family_member_rsp_result>() {
  return ::client::modify_family_member_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::upgrade_family_rsp_result>() {
  return ::client::upgrade_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::donate_family_rsp_result>() {
  return ::client::donate_family_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SECEDE_FAMILY_TYPE_E>() {
  return ::client::SECEDE_FAMILY_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::EXPEL_MEMBER_RESULT_E>() {
  return ::client::EXPEL_MEMBER_RESULT_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::DONATE_TYPE_E>() {
  return ::client::DONATE_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FAMILY_LOG_TYPE>() {
  return ::client::FAMILY_LOG_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::OPT_CHANGE_FLAG_NAME_RESULT>() {
  return ::client::OPT_CHANGE_FLAG_NAME_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::IMPEACH_RESULT_E>() {
  return ::client::IMPEACH_RESULT_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::OPT_FORIGN_TYPE>() {
  return ::client::OPT_FORIGN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::UPTATE_TYPE_E>() {
  return ::client::UPTATE_TYPE_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2efamily_2eproto__INCLUDED
