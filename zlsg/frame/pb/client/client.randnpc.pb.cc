// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.randnpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.randnpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* randnpc_postion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  randnpc_postion_reflection_ = NULL;
const ::google::protobuf::Descriptor* randnpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  randnpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* randnpc_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  randnpc_set_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erandnpc_2eproto() {
  protobuf_AddDesc_client_2erandnpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.randnpc.proto");
  GOOGLE_CHECK(file != NULL);
  randnpc_postion_descriptor_ = file->message_type(0);
  static const int randnpc_postion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_postion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_postion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_postion, z_),
  };
  randnpc_postion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      randnpc_postion_descriptor_,
      randnpc_postion::default_instance_,
      randnpc_postion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_postion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_postion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(randnpc_postion));
  randnpc_descriptor_ = file->message_type(1);
  static const int randnpc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, born_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, path_rule_),
  };
  randnpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      randnpc_descriptor_,
      randnpc::default_instance_,
      randnpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(randnpc));
  randnpc_set_descriptor_ = file->message_type(2);
  static const int randnpc_set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_set, rn_),
  };
  randnpc_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      randnpc_set_descriptor_,
      randnpc_set::default_instance_,
      randnpc_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(randnpc_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(randnpc_set));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erandnpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    randnpc_postion_descriptor_, &randnpc_postion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    randnpc_descriptor_, &randnpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    randnpc_set_descriptor_, &randnpc_set::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erandnpc_2eproto() {
  delete randnpc_postion::default_instance_;
  delete randnpc_postion_reflection_;
  delete randnpc::default_instance_;
  delete randnpc_reflection_;
  delete randnpc_set::default_instance_;
  delete randnpc_set_reflection_;
}

void protobuf_AddDesc_client_2erandnpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024client.randnpc.proto\022\006client\032\021client.c"
    "omm.proto\";\n\017randnpc_postion\022\014\n\001x\030\001 \002(\005:"
    "\0010\022\014\n\001y\030\002 \002(\005:\0010\022\014\n\001z\030\003 \002(\005:\0010\"\234\001\n\007randn"
    "pc\022\022\n\007role_id\030\001 \002(\r:\0010\022\021\n\006map_id\030\002 \002(\r:\001"
    "0\022\023\n\010scene_id\030\003 \002(\r:\0010\022)\n\010born_pos\030\004 \002(\013"
    "2\027.client.randnpc_postion\022*\n\tpath_rule\030\005"
    " \003(\0132\027.client.randnpc_postion\"*\n\013randnpc"
    "_set\022\033\n\002rn\030\001 \003(\0132\017.client.randnpc", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.randnpc.proto", &protobuf_RegisterTypes);
  randnpc_postion::default_instance_ = new randnpc_postion();
  randnpc::default_instance_ = new randnpc();
  randnpc_set::default_instance_ = new randnpc_set();
  randnpc_postion::default_instance_->InitAsDefaultInstance();
  randnpc::default_instance_->InitAsDefaultInstance();
  randnpc_set::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erandnpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erandnpc_2eproto {
  StaticDescriptorInitializer_client_2erandnpc_2eproto() {
    protobuf_AddDesc_client_2erandnpc_2eproto();
  }
} static_descriptor_initializer_client_2erandnpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int randnpc_postion::kXFieldNumber;
const int randnpc_postion::kYFieldNumber;
const int randnpc_postion::kZFieldNumber;
#endif  // !_MSC_VER

randnpc_postion::randnpc_postion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void randnpc_postion::InitAsDefaultInstance() {
}

randnpc_postion::randnpc_postion(const randnpc_postion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void randnpc_postion::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

randnpc_postion::~randnpc_postion() {
  SharedDtor();
}

void randnpc_postion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void randnpc_postion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* randnpc_postion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return randnpc_postion_descriptor_;
}

const randnpc_postion& randnpc_postion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erandnpc_2eproto();
  return *default_instance_;
}

randnpc_postion* randnpc_postion::default_instance_ = NULL;

randnpc_postion* randnpc_postion::New() const {
  return new randnpc_postion;
}

void randnpc_postion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool randnpc_postion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // required int32 z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void randnpc_postion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* randnpc_postion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int randnpc_postion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void randnpc_postion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const randnpc_postion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const randnpc_postion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void randnpc_postion::MergeFrom(const randnpc_postion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void randnpc_postion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void randnpc_postion::CopyFrom(const randnpc_postion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool randnpc_postion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void randnpc_postion::Swap(randnpc_postion* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata randnpc_postion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = randnpc_postion_descriptor_;
  metadata.reflection = randnpc_postion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int randnpc::kRoleIdFieldNumber;
const int randnpc::kMapIdFieldNumber;
const int randnpc::kSceneIdFieldNumber;
const int randnpc::kBornPosFieldNumber;
const int randnpc::kPathRuleFieldNumber;
#endif  // !_MSC_VER

randnpc::randnpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void randnpc::InitAsDefaultInstance() {
  born_pos_ = const_cast< ::client::randnpc_postion*>(&::client::randnpc_postion::default_instance());
}

randnpc::randnpc(const randnpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void randnpc::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  map_id_ = 0u;
  scene_id_ = 0u;
  born_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

randnpc::~randnpc() {
  SharedDtor();
}

void randnpc::SharedDtor() {
  if (this != default_instance_) {
    delete born_pos_;
  }
}

void randnpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* randnpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return randnpc_descriptor_;
}

const randnpc& randnpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erandnpc_2eproto();
  return *default_instance_;
}

randnpc* randnpc::default_instance_ = NULL;

randnpc* randnpc::New() const {
  return new randnpc;
}

void randnpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    map_id_ = 0u;
    scene_id_ = 0u;
    if (has_born_pos()) {
      if (born_pos_ != NULL) born_pos_->::client::randnpc_postion::Clear();
    }
  }
  path_rule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool randnpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_born_pos;
        break;
      }

      // required .client.randnpc_postion born_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_born_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_born_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_path_rule;
        break;
      }

      // repeated .client.randnpc_postion path_rule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_path_rule;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void randnpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 map_id = 2 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  // required uint32 scene_id = 3 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // required .client.randnpc_postion born_pos = 4;
  if (has_born_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->born_pos(), output);
  }

  // repeated .client.randnpc_postion path_rule = 5;
  for (int i = 0; i < this->path_rule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->path_rule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* randnpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 map_id = 2 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  // required uint32 scene_id = 3 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // required .client.randnpc_postion born_pos = 4;
  if (has_born_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->born_pos(), target);
  }

  // repeated .client.randnpc_postion path_rule = 5;
  for (int i = 0; i < this->path_rule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->path_rule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int randnpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 map_id = 2 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 scene_id = 3 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required .client.randnpc_postion born_pos = 4;
    if (has_born_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->born_pos());
    }

  }
  // repeated .client.randnpc_postion path_rule = 5;
  total_size += 1 * this->path_rule_size();
  for (int i = 0; i < this->path_rule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_rule(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void randnpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const randnpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const randnpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void randnpc::MergeFrom(const randnpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_rule_.MergeFrom(from.path_rule_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_born_pos()) {
      mutable_born_pos()->::client::randnpc_postion::MergeFrom(from.born_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void randnpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void randnpc::CopyFrom(const randnpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool randnpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_born_pos()) {
    if (!this->born_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < path_rule_size(); i++) {
    if (!this->path_rule(i).IsInitialized()) return false;
  }
  return true;
}

void randnpc::Swap(randnpc* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(born_pos_, other->born_pos_);
    path_rule_.Swap(&other->path_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata randnpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = randnpc_descriptor_;
  metadata.reflection = randnpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int randnpc_set::kRnFieldNumber;
#endif  // !_MSC_VER

randnpc_set::randnpc_set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void randnpc_set::InitAsDefaultInstance() {
}

randnpc_set::randnpc_set(const randnpc_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void randnpc_set::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

randnpc_set::~randnpc_set() {
  SharedDtor();
}

void randnpc_set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void randnpc_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* randnpc_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return randnpc_set_descriptor_;
}

const randnpc_set& randnpc_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erandnpc_2eproto();
  return *default_instance_;
}

randnpc_set* randnpc_set::default_instance_ = NULL;

randnpc_set* randnpc_set::New() const {
  return new randnpc_set;
}

void randnpc_set::Clear() {
  rn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool randnpc_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.randnpc rn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rn;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void randnpc_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.randnpc rn = 1;
  for (int i = 0; i < this->rn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* randnpc_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.randnpc rn = 1;
  for (int i = 0; i < this->rn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int randnpc_set::ByteSize() const {
  int total_size = 0;

  // repeated .client.randnpc rn = 1;
  total_size += 1 * this->rn_size();
  for (int i = 0; i < this->rn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void randnpc_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const randnpc_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const randnpc_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void randnpc_set::MergeFrom(const randnpc_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  rn_.MergeFrom(from.rn_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void randnpc_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void randnpc_set::CopyFrom(const randnpc_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool randnpc_set::IsInitialized() const {

  for (int i = 0; i < rn_size(); i++) {
    if (!this->rn(i).IsInitialized()) return false;
  }
  return true;
}

void randnpc_set::Swap(randnpc_set* other) {
  if (other != this) {
    rn_.Swap(&other->rn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata randnpc_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = randnpc_set_descriptor_;
  metadata.reflection = randnpc_set_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
