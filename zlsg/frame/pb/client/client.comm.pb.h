// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.comm.proto

#ifndef PROTOBUF_client_2ecomm_2eproto__INCLUDED
#define PROTOBUF_client_2ecomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2ecomm_2eproto();
void protobuf_AssignDesc_client_2ecomm_2eproto();
void protobuf_ShutdownFile_client_2ecomm_2eproto();

class role_data;
class role_name;
class client_map_pos;
class server_head;
class time_check;
class attribute;
class attribute_change;

enum role_data_TYPE {
  role_data_TYPE_USER = 0,
  role_data_TYPE_NPC = 1,
  role_data_TYPE_PET = 2
};
bool role_data_TYPE_IsValid(int value);
const role_data_TYPE role_data_TYPE_TYPE_MIN = role_data_TYPE_USER;
const role_data_TYPE role_data_TYPE_TYPE_MAX = role_data_TYPE_PET;
const int role_data_TYPE_TYPE_ARRAYSIZE = role_data_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* role_data_TYPE_descriptor();
inline const ::std::string& role_data_TYPE_Name(role_data_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    role_data_TYPE_descriptor(), value);
}
inline bool role_data_TYPE_Parse(
    const ::std::string& name, role_data_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<role_data_TYPE>(
    role_data_TYPE_descriptor(), name, value);
}
// ===================================================================

class role_data : public ::google::protobuf::Message {
 public:
  role_data();
  virtual ~role_data();

  role_data(const role_data& from);

  inline role_data& operator=(const role_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_data& default_instance();

  void Swap(role_data* other);

  // implements Message ----------------------------------------------

  role_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_data& from);
  void MergeFrom(const role_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef role_data_TYPE TYPE;
  static const TYPE USER = role_data_TYPE_USER;
  static const TYPE NPC = role_data_TYPE_NPC;
  static const TYPE PET = role_data_TYPE_PET;
  static inline bool TYPE_IsValid(int value) {
    return role_data_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    role_data_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    role_data_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    role_data_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return role_data_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return role_data_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return role_data_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint64 inst_id = 2;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  inline ::google::protobuf::uint64 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint64 value);

  // required .client.role_data.TYPE role_typ = 3;
  inline bool has_role_typ() const;
  inline void clear_role_typ();
  static const int kRoleTypFieldNumber = 3;
  inline ::client::role_data_TYPE role_typ() const;
  inline void set_role_typ(::client::role_data_TYPE value);

  // optional uint64 pet_id = 4;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:client.role_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();
  inline void set_has_role_typ();
  inline void clear_has_role_typ();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 inst_id_;
  ::google::protobuf::uint32 role_id_;
  int role_typ_;
  ::google::protobuf::uint64 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static role_data* default_instance_;
};
// -------------------------------------------------------------------

class role_name : public ::google::protobuf::Message {
 public:
  role_name();
  virtual ~role_name();

  role_name(const role_name& from);

  inline role_name& operator=(const role_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_name& default_instance();

  void Swap(role_name* other);

  // implements Message ----------------------------------------------

  role_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_name& from);
  void MergeFrom(const role_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 1;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 1;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:client.role_name)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static role_name* default_instance_;
};
// -------------------------------------------------------------------

class client_map_pos : public ::google::protobuf::Message {
 public:
  client_map_pos();
  virtual ~client_map_pos();

  client_map_pos(const client_map_pos& from);

  inline client_map_pos& operator=(const client_map_pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_map_pos& default_instance();

  void Swap(client_map_pos* other);

  // implements Message ----------------------------------------------

  client_map_pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_map_pos& from);
  void MergeFrom(const client_map_pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // optional int32 t = 4 [default = 0];
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 4;
  inline ::google::protobuf::int32 t() const;
  inline void set_t(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.client_map_pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_t();
  inline void clear_has_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static client_map_pos* default_instance_;
};
// -------------------------------------------------------------------

class server_head : public ::google::protobuf::Message {
 public:
  server_head();
  virtual ~server_head();

  server_head(const server_head& from);

  inline server_head& operator=(const server_head& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_head& default_instance();

  void Swap(server_head* other);

  // implements Message ----------------------------------------------

  server_head* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_head& from);
  void MergeFrom(const server_head& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svr_id = 1 [default = 0];
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_id() const;
  inline void set_svr_id(::google::protobuf::uint32 value);

  // optional uint32 user_id = 2 [default = 0];
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 role_id = 3 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 agent_id = 4 [default = 0];
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 4;
  inline ::google::protobuf::uint32 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint32 value);

  // optional uint32 client_id = 5 [default = 0];
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // optional uint32 scenesvr_id = 6 [default = 0];
  inline bool has_scenesvr_id() const;
  inline void clear_scenesvr_id();
  static const int kScenesvrIdFieldNumber = 6;
  inline ::google::protobuf::uint32 scenesvr_id() const;
  inline void set_scenesvr_id(::google::protobuf::uint32 value);

  // optional string client_ip = 7;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 7;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const char* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  inline void set_allocated_client_ip(::std::string* client_ip);

  // optional string user_name = 8;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 8;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:client.server_head)
 private:
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_scenesvr_id();
  inline void clear_has_scenesvr_id();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svr_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 agent_id_;
  ::google::protobuf::uint32 client_id_;
  ::google::protobuf::uint32 scenesvr_id_;
  ::std::string* client_ip_;
  ::std::string* user_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static server_head* default_instance_;
};
// -------------------------------------------------------------------

class time_check : public ::google::protobuf::Message {
 public:
  time_check();
  virtual ~time_check();

  time_check(const time_check& from);

  inline time_check& operator=(const time_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const time_check& default_instance();

  void Swap(time_check* other);

  // implements Message ----------------------------------------------

  time_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const time_check& from);
  void MergeFrom(const time_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timestamp = 1 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional bool need_check = 2 [default = false];
  inline bool has_need_check() const;
  inline void clear_need_check();
  static const int kNeedCheckFieldNumber = 2;
  inline bool need_check() const;
  inline void set_need_check(bool value);

  // @@protoc_insertion_point(class_scope:client.time_check)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_need_check();
  inline void clear_has_need_check();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 timestamp_;
  bool need_check_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static time_check* default_instance_;
};
// -------------------------------------------------------------------

class attribute : public ::google::protobuf::Message {
 public:
  attribute();
  virtual ~attribute();

  attribute(const attribute& from);

  inline attribute& operator=(const attribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attribute& default_instance();

  void Swap(attribute* other);

  // implements Message ----------------------------------------------

  attribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attribute& from);
  void MergeFrom(const attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.attribute)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static attribute* default_instance_;
};
// -------------------------------------------------------------------

class attribute_change : public ::google::protobuf::Message {
 public:
  attribute_change();
  virtual ~attribute_change();

  attribute_change(const attribute_change& from);

  inline attribute_change& operator=(const attribute_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attribute_change& default_instance();

  void Swap(attribute_change* other);

  // implements Message ----------------------------------------------

  attribute_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attribute_change& from);
  void MergeFrom(const attribute_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.attribute_change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecomm_2eproto();
  friend void protobuf_AssignDesc_client_2ecomm_2eproto();
  friend void protobuf_ShutdownFile_client_2ecomm_2eproto();

  void InitAsDefaultInstance();
  static attribute_change* default_instance_;
};
// ===================================================================


// ===================================================================

// role_data

// required uint32 role_id = 1;
inline bool role_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_data::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_data::role_id() const {
  return role_id_;
}
inline void role_data::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint64 inst_id = 2;
inline bool role_data::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_data::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_data::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_data::clear_inst_id() {
  inst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_inst_id();
}
inline ::google::protobuf::uint64 role_data::inst_id() const {
  return inst_id_;
}
inline void role_data::set_inst_id(::google::protobuf::uint64 value) {
  set_has_inst_id();
  inst_id_ = value;
}

// required .client.role_data.TYPE role_typ = 3;
inline bool role_data::has_role_typ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_data::set_has_role_typ() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_data::clear_has_role_typ() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_data::clear_role_typ() {
  role_typ_ = 0;
  clear_has_role_typ();
}
inline ::client::role_data_TYPE role_data::role_typ() const {
  return static_cast< ::client::role_data_TYPE >(role_typ_);
}
inline void role_data::set_role_typ(::client::role_data_TYPE value) {
  assert(::client::role_data_TYPE_IsValid(value));
  set_has_role_typ();
  role_typ_ = value;
}

// optional uint64 pet_id = 4;
inline bool role_data::has_pet_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_data::set_has_pet_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_data::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_data::clear_pet_id() {
  pet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pet_id();
}
inline ::google::protobuf::uint64 role_data::pet_id() const {
  return pet_id_;
}
inline void role_data::set_pet_id(::google::protobuf::uint64 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// role_name

// required .client.role_data rd = 1;
inline bool role_name::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_name::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_name::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_name::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& role_name::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* role_name::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* role_name::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void role_name::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// required string name = 2;
inline bool role_name::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_name::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_name::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& role_name::name() const {
  return *name_;
}
inline void role_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_name::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* role_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// client_map_pos

// required int32 x = 1;
inline bool client_map_pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_map_pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_map_pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_map_pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 client_map_pos::x() const {
  return x_;
}
inline void client_map_pos::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool client_map_pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_map_pos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_map_pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_map_pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 client_map_pos::y() const {
  return y_;
}
inline void client_map_pos::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool client_map_pos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client_map_pos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client_map_pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client_map_pos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 client_map_pos::z() const {
  return z_;
}
inline void client_map_pos::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// optional int32 t = 4 [default = 0];
inline bool client_map_pos::has_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void client_map_pos::set_has_t() {
  _has_bits_[0] |= 0x00000008u;
}
inline void client_map_pos::clear_has_t() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void client_map_pos::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline ::google::protobuf::int32 client_map_pos::t() const {
  return t_;
}
inline void client_map_pos::set_t(::google::protobuf::int32 value) {
  set_has_t();
  t_ = value;
}

// -------------------------------------------------------------------

// server_head

// optional uint32 svr_id = 1 [default = 0];
inline bool server_head::has_svr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_head::set_has_svr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_head::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_head::clear_svr_id() {
  svr_id_ = 0u;
  clear_has_svr_id();
}
inline ::google::protobuf::uint32 server_head::svr_id() const {
  return svr_id_;
}
inline void server_head::set_svr_id(::google::protobuf::uint32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// optional uint32 user_id = 2 [default = 0];
inline bool server_head::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void server_head::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void server_head::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void server_head::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 server_head::user_id() const {
  return user_id_;
}
inline void server_head::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 role_id = 3 [default = 0];
inline bool server_head::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server_head::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server_head::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server_head::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 server_head::role_id() const {
  return role_id_;
}
inline void server_head::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 agent_id = 4 [default = 0];
inline bool server_head::has_agent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server_head::set_has_agent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server_head::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server_head::clear_agent_id() {
  agent_id_ = 0u;
  clear_has_agent_id();
}
inline ::google::protobuf::uint32 server_head::agent_id() const {
  return agent_id_;
}
inline void server_head::set_agent_id(::google::protobuf::uint32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional uint32 client_id = 5 [default = 0];
inline bool server_head::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void server_head::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void server_head::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void server_head::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 server_head::client_id() const {
  return client_id_;
}
inline void server_head::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional uint32 scenesvr_id = 6 [default = 0];
inline bool server_head::has_scenesvr_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void server_head::set_has_scenesvr_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void server_head::clear_has_scenesvr_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void server_head::clear_scenesvr_id() {
  scenesvr_id_ = 0u;
  clear_has_scenesvr_id();
}
inline ::google::protobuf::uint32 server_head::scenesvr_id() const {
  return scenesvr_id_;
}
inline void server_head::set_scenesvr_id(::google::protobuf::uint32 value) {
  set_has_scenesvr_id();
  scenesvr_id_ = value;
}

// optional string client_ip = 7;
inline bool server_head::has_client_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void server_head::set_has_client_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void server_head::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void server_head::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& server_head::client_ip() const {
  return *client_ip_;
}
inline void server_head::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void server_head::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void server_head::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server_head::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  return client_ip_;
}
inline ::std::string* server_head::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server_head::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (client_ip) {
    set_has_client_ip();
    client_ip_ = client_ip;
  } else {
    clear_has_client_ip();
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_name = 8;
inline bool server_head::has_user_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void server_head::set_has_user_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void server_head::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void server_head::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& server_head::user_name() const {
  return *user_name_;
}
inline void server_head::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void server_head::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void server_head::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server_head::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* server_head::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server_head::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// time_check

// required uint32 timestamp = 1 [default = 0];
inline bool time_check::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void time_check::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void time_check::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void time_check::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 time_check::timestamp() const {
  return timestamp_;
}
inline void time_check::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bool need_check = 2 [default = false];
inline bool time_check::has_need_check() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void time_check::set_has_need_check() {
  _has_bits_[0] |= 0x00000002u;
}
inline void time_check::clear_has_need_check() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void time_check::clear_need_check() {
  need_check_ = false;
  clear_has_need_check();
}
inline bool time_check::need_check() const {
  return need_check_;
}
inline void time_check::set_need_check(bool value) {
  set_has_need_check();
  need_check_ = value;
}

// -------------------------------------------------------------------

// attribute

// required uint32 type = 1;
inline bool attribute::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attribute::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attribute::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attribute::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 attribute::type() const {
  return type_;
}
inline void attribute::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 value = 2;
inline bool attribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attribute::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 attribute::value() const {
  return value_;
}
inline void attribute::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// attribute_change

// required uint32 type = 1;
inline bool attribute_change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attribute_change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attribute_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attribute_change::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 attribute_change::type() const {
  return type_;
}
inline void attribute_change::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required int32 value = 2;
inline bool attribute_change::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attribute_change::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attribute_change::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attribute_change::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 attribute_change::value() const {
  return value_;
}
inline void attribute_change::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::role_data_TYPE>() {
  return ::client::role_data_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2ecomm_2eproto__INCLUDED
