// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* member_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  member_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* team_info_status_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* team_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* join_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  join_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* join_team_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  join_team_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* fire_member_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fire_member_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fire_member_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fire_member_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_team_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_team_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_ready_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_ready_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_enter_raid_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_enter_raid_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_enter_prepare_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_enter_prepare_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_enter_prepare_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_enter_prepare_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_enter_raid_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_enter_raid_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_add_robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_add_robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_kill_statistics_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_kill_statistics_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_join_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_join_check_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eteam_2eproto() {
  protobuf_AddDesc_client_2eteam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.team.proto");
  GOOGLE_CHECK(file != NULL);
  member_info_descriptor_ = file->message_type(0);
  static const int member_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_info, ready_),
  };
  member_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      member_info_descriptor_,
      member_info::default_instance_,
      member_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(member_info));
  team_info_descriptor_ = file->message_type(1);
  static const int team_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, captain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, status_),
  };
  team_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_info_descriptor_,
      team_info::default_instance_,
      team_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_info));
  team_info_status_e_descriptor_ = team_info_descriptor_->enum_type(0);
  team_notify_descriptor_ = file->message_type(2);
  static const int team_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_notify, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_notify, type_),
  };
  team_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_notify_descriptor_,
      team_notify::default_instance_,
      team_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_notify));
  team_member_descriptor_ = file->message_type(3);
  static const int team_member_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, captain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, vip_lv_),
  };
  team_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_member_descriptor_,
      team_member::default_instance_,
      team_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_member));
  team_info_rsp_descriptor_ = file->message_type(4);
  static const int team_info_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info_rsp, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info_rsp, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info_rsp, tm_),
  };
  team_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_info_rsp_descriptor_,
      team_info_rsp::default_instance_,
      team_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_info_rsp));
  join_team_req_descriptor_ = file->message_type(5);
  static const int join_team_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_req, svr_head_),
  };
  join_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      join_team_req_descriptor_,
      join_team_req::default_instance_,
      join_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(join_team_req));
  join_team_rsp_descriptor_ = file->message_type(6);
  static const int join_team_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_rsp, raid_id_),
  };
  join_team_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      join_team_rsp_descriptor_,
      join_team_rsp::default_instance_,
      join_team_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(join_team_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(join_team_rsp));
  fire_member_req_descriptor_ = file->message_type(7);
  static const int fire_member_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_req, svr_head_),
  };
  fire_member_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fire_member_req_descriptor_,
      fire_member_req::default_instance_,
      fire_member_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fire_member_req));
  fire_member_rsp_descriptor_ = file->message_type(8);
  static const int fire_member_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_rsp, type_),
  };
  fire_member_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fire_member_rsp_descriptor_,
      fire_member_rsp::default_instance_,
      fire_member_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_member_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fire_member_rsp));
  create_team_req_descriptor_ = file->message_type(9);
  static const int create_team_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, svr_head_),
  };
  create_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_team_req_descriptor_,
      create_team_req::default_instance_,
      create_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_team_req));
  create_team_rsp_descriptor_ = file->message_type(10);
  static const int create_team_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_rsp, ret_),
  };
  create_team_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_team_rsp_descriptor_,
      create_team_rsp::default_instance_,
      create_team_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_team_rsp));
  team_ready_req_descriptor_ = file->message_type(11);
  static const int team_ready_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_ready_req, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_ready_req, svr_head_),
  };
  team_ready_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_ready_req_descriptor_,
      team_ready_req::default_instance_,
      team_ready_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_ready_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_ready_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_ready_req));
  team_enter_raid_req_descriptor_ = file->message_type(12);
  static const int team_enter_raid_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_req, svr_head_),
  };
  team_enter_raid_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_enter_raid_req_descriptor_,
      team_enter_raid_req::default_instance_,
      team_enter_raid_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_enter_raid_req));
  team_enter_prepare_req_descriptor_ = file->message_type(13);
  static const int team_enter_prepare_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_req, svr_head_),
  };
  team_enter_prepare_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_enter_prepare_req_descriptor_,
      team_enter_prepare_req::default_instance_,
      team_enter_prepare_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_enter_prepare_req));
  team_enter_prepare_rsp_descriptor_ = file->message_type(14);
  static const int team_enter_prepare_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_rsp, ret_),
  };
  team_enter_prepare_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_enter_prepare_rsp_descriptor_,
      team_enter_prepare_rsp::default_instance_,
      team_enter_prepare_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_prepare_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_enter_prepare_rsp));
  team_enter_raid_rsp_descriptor_ = file->message_type(15);
  static const int team_enter_raid_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_rsp, ret_),
  };
  team_enter_raid_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_enter_raid_rsp_descriptor_,
      team_enter_raid_rsp::default_instance_,
      team_enter_raid_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_enter_raid_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_enter_raid_rsp));
  team_add_robot_descriptor_ = file->message_type(16);
  static const int team_add_robot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_add_robot, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_add_robot, robot_),
  };
  team_add_robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_add_robot_descriptor_,
      team_add_robot::default_instance_,
      team_add_robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_add_robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_add_robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_add_robot));
  team_kill_statistics_rsp_descriptor_ = file->message_type(17);
  static const int team_kill_statistics_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_kill_statistics_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_kill_statistics_rsp, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_kill_statistics_rsp, num_),
  };
  team_kill_statistics_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_kill_statistics_rsp_descriptor_,
      team_kill_statistics_rsp::default_instance_,
      team_kill_statistics_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_kill_statistics_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_kill_statistics_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_kill_statistics_rsp));
  team_join_check_descriptor_ = file->message_type(18);
  static const int team_join_check_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_join_check, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_join_check, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_join_check, team_id_),
  };
  team_join_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_join_check_descriptor_,
      team_join_check::default_instance_,
      team_join_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_join_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_join_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_join_check));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eteam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    member_info_descriptor_, &member_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_info_descriptor_, &team_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_notify_descriptor_, &team_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_member_descriptor_, &team_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_info_rsp_descriptor_, &team_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    join_team_req_descriptor_, &join_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    join_team_rsp_descriptor_, &join_team_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fire_member_req_descriptor_, &fire_member_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fire_member_rsp_descriptor_, &fire_member_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_team_req_descriptor_, &create_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_team_rsp_descriptor_, &create_team_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_ready_req_descriptor_, &team_ready_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_enter_raid_req_descriptor_, &team_enter_raid_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_enter_prepare_req_descriptor_, &team_enter_prepare_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_enter_prepare_rsp_descriptor_, &team_enter_prepare_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_enter_raid_rsp_descriptor_, &team_enter_raid_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_add_robot_descriptor_, &team_add_robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_kill_statistics_rsp_descriptor_, &team_kill_statistics_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_join_check_descriptor_, &team_join_check::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eteam_2eproto() {
  delete member_info::default_instance_;
  delete member_info_reflection_;
  delete team_info::default_instance_;
  delete team_info_reflection_;
  delete team_notify::default_instance_;
  delete team_notify_reflection_;
  delete team_member::default_instance_;
  delete team_member_reflection_;
  delete team_info_rsp::default_instance_;
  delete team_info_rsp_reflection_;
  delete join_team_req::default_instance_;
  delete join_team_req_reflection_;
  delete join_team_rsp::default_instance_;
  delete join_team_rsp_reflection_;
  delete fire_member_req::default_instance_;
  delete fire_member_req_reflection_;
  delete fire_member_rsp::default_instance_;
  delete fire_member_rsp_reflection_;
  delete create_team_req::default_instance_;
  delete create_team_req_reflection_;
  delete create_team_rsp::default_instance_;
  delete create_team_rsp_reflection_;
  delete team_ready_req::default_instance_;
  delete team_ready_req_reflection_;
  delete team_enter_raid_req::default_instance_;
  delete team_enter_raid_req_reflection_;
  delete team_enter_prepare_req::default_instance_;
  delete team_enter_prepare_req_reflection_;
  delete team_enter_prepare_rsp::default_instance_;
  delete team_enter_prepare_rsp_reflection_;
  delete team_enter_raid_rsp::default_instance_;
  delete team_enter_raid_rsp_reflection_;
  delete team_add_robot::default_instance_;
  delete team_add_robot_reflection_;
  delete team_kill_statistics_rsp::default_instance_;
  delete team_kill_statistics_rsp_reflection_;
  delete team_join_check::default_instance_;
  delete team_join_check_reflection_;
}

void protobuf_AddDesc_client_2eteam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.team.proto\022\006client\032\021client.comm"
    ".proto\"7\n\013member_info\022\022\n\007role_id\030\001 \002(\r:\001"
    "0\022\024\n\005ready\030\002 \002(\010:\005false\"\262\001\n\tteam_info\022\017\n"
    "\007team_id\030\001 \002(\r\022\017\n\007raid_id\030\002 \002(\r\022\017\n\007capta"
    "in\030\003 \002(\r\022#\n\006member\030\004 \003(\0132\023.client.member"
    "_info\022*\n\006status\030\005 \002(\0162\032.client.team_info"
    ".status_e\"!\n\010status_e\022\n\n\006normal\020\001\022\t\n\005rea"
    "dy\020\002\",\n\013team_notify\022\017\n\007role_id\030\001 \002(\r\022\014\n\004"
    "type\030\002 \002(\r\"\216\001\n\013team_member\022\017\n\007role_id\030\001 "
    "\002(\r\022\r\n\005level\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\022\n\nprof"
    "ession\030\004 \002(\r\022\r\n\005power\030\005 \002(\r\022\017\n\007captain\030\006"
    " \002(\010\022\r\n\005ready\030\007 \002(\010\022\016\n\006vip_lv\030\010 \001(\r\"R\n\rt"
    "eam_info_rsp\022\017\n\007team_id\030\001 \002(\r\022\017\n\007raid_id"
    "\030\002 \002(\r\022\037\n\002tm\030\003 \003(\0132\023.client.team_member\""
    "H\n\rjoin_team_req\022\017\n\007team_id\030\001 \002(\r\022&\n\010svr"
    "_head\030\350\007 \001(\0132\023.client.server_head\"-\n\rjoi"
    "n_team_rsp\022\013\n\003ret\030\001 \002(\r\022\017\n\007raid_id\030\002 \001(\r"
    "\"J\n\017fire_member_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"\037\n\017"
    "fire_member_rsp\022\014\n\004type\030\001 \002(\r\"J\n\017create_"
    "team_req\022\017\n\007raid_id\030\001 \002(\r\022&\n\010svr_head\030\350\007"
    " \001(\0132\023.client.server_head\"\036\n\017create_team"
    "_rsp\022\013\n\003ret\030\001 \002(\r\"H\n\016team_ready_req\022\016\n\006s"
    "tatus\030\001 \002(\010\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"N\n\023team_enter_raid_req\022\017\n\007te"
    "am_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"N\n\026team_enter_prepare_req\022\014\n"
    "\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"%\n\026team_enter_prepare_rsp\022\013\n"
    "\003ret\030\001 \002(\r\"\"\n\023team_enter_raid_rsp\022\013\n\003ret"
    "\030\001 \002(\r\"0\n\016team_add_robot\022\017\n\007role_id\030\001 \002("
    "\r\022\r\n\005robot\030\002 \003(\r\"K\n\030team_kill_statistics"
    "_rsp\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_name\030\002 \002(\t"
    "\022\013\n\003num\030\003 \002(\r\"D\n\017team_join_check\022\017\n\007role"
    "_id\030\001 \002(\r\022\017\n\007raid_id\030\002 \002(\r\022\017\n\007team_id\030\003 "
    "\002(\r", 1403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.team.proto", &protobuf_RegisterTypes);
  member_info::default_instance_ = new member_info();
  team_info::default_instance_ = new team_info();
  team_notify::default_instance_ = new team_notify();
  team_member::default_instance_ = new team_member();
  team_info_rsp::default_instance_ = new team_info_rsp();
  join_team_req::default_instance_ = new join_team_req();
  join_team_rsp::default_instance_ = new join_team_rsp();
  fire_member_req::default_instance_ = new fire_member_req();
  fire_member_rsp::default_instance_ = new fire_member_rsp();
  create_team_req::default_instance_ = new create_team_req();
  create_team_rsp::default_instance_ = new create_team_rsp();
  team_ready_req::default_instance_ = new team_ready_req();
  team_enter_raid_req::default_instance_ = new team_enter_raid_req();
  team_enter_prepare_req::default_instance_ = new team_enter_prepare_req();
  team_enter_prepare_rsp::default_instance_ = new team_enter_prepare_rsp();
  team_enter_raid_rsp::default_instance_ = new team_enter_raid_rsp();
  team_add_robot::default_instance_ = new team_add_robot();
  team_kill_statistics_rsp::default_instance_ = new team_kill_statistics_rsp();
  team_join_check::default_instance_ = new team_join_check();
  member_info::default_instance_->InitAsDefaultInstance();
  team_info::default_instance_->InitAsDefaultInstance();
  team_notify::default_instance_->InitAsDefaultInstance();
  team_member::default_instance_->InitAsDefaultInstance();
  team_info_rsp::default_instance_->InitAsDefaultInstance();
  join_team_req::default_instance_->InitAsDefaultInstance();
  join_team_rsp::default_instance_->InitAsDefaultInstance();
  fire_member_req::default_instance_->InitAsDefaultInstance();
  fire_member_rsp::default_instance_->InitAsDefaultInstance();
  create_team_req::default_instance_->InitAsDefaultInstance();
  create_team_rsp::default_instance_->InitAsDefaultInstance();
  team_ready_req::default_instance_->InitAsDefaultInstance();
  team_enter_raid_req::default_instance_->InitAsDefaultInstance();
  team_enter_prepare_req::default_instance_->InitAsDefaultInstance();
  team_enter_prepare_rsp::default_instance_->InitAsDefaultInstance();
  team_enter_raid_rsp::default_instance_->InitAsDefaultInstance();
  team_add_robot::default_instance_->InitAsDefaultInstance();
  team_kill_statistics_rsp::default_instance_->InitAsDefaultInstance();
  team_join_check::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eteam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eteam_2eproto {
  StaticDescriptorInitializer_client_2eteam_2eproto() {
    protobuf_AddDesc_client_2eteam_2eproto();
  }
} static_descriptor_initializer_client_2eteam_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int member_info::kRoleIdFieldNumber;
const int member_info::kReadyFieldNumber;
#endif  // !_MSC_VER

member_info::member_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void member_info::InitAsDefaultInstance() {
}

member_info::member_info(const member_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void member_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

member_info::~member_info() {
  SharedDtor();
}

void member_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* member_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return member_info_descriptor_;
}

const member_info& member_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

member_info* member_info::default_instance_ = NULL;

member_info* member_info::New() const {
  return new member_info;
}

void member_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready;
        break;
      }

      // required bool ready = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required bool ready = 2 [default = false];
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* member_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required bool ready = 2 [default = false];
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int member_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required bool ready = 2 [default = false];
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void member_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const member_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const member_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void member_info::MergeFrom(const member_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void member_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void member_info::CopyFrom(const member_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void member_info::Swap(member_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata member_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = member_info_descriptor_;
  metadata.reflection = member_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* team_info_status_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_info_status_e_descriptor_;
}
bool team_info_status_e_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const team_info_status_e team_info::normal;
const team_info_status_e team_info::ready;
const team_info_status_e team_info::status_e_MIN;
const team_info_status_e team_info::status_e_MAX;
const int team_info::status_e_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int team_info::kTeamIdFieldNumber;
const int team_info::kRaidIdFieldNumber;
const int team_info::kCaptainFieldNumber;
const int team_info::kMemberFieldNumber;
const int team_info::kStatusFieldNumber;
#endif  // !_MSC_VER

team_info::team_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_info::InitAsDefaultInstance() {
}

team_info::team_info(const team_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_info::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  raid_id_ = 0u;
  captain_ = 0u;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_info::~team_info() {
  SharedDtor();
}

void team_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_info_descriptor_;
}

const team_info& team_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_info* team_info::default_instance_ = NULL;

team_info* team_info::New() const {
  return new team_info;
}

void team_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0u;
    raid_id_ = 0u;
    captain_ = 0u;
    status_ = 1;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_captain;
        break;
      }

      // required uint32 captain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captain_)));
          set_has_captain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }

      // repeated .client.member_info member = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .client.team_info.status_e status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::team_info_status_e_IsValid(value)) {
            set_status(static_cast< ::client::team_info_status_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // required uint32 captain = 3;
  if (has_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->captain(), output);
  }

  // repeated .client.member_info member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }

  // required .client.team_info.status_e status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // required uint32 captain = 3;
  if (has_captain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->captain(), target);
  }

  // repeated .client.member_info member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(i), target);
  }

  // required .client.team_info.status_e status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 captain = 3;
    if (has_captain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captain());
    }

    // required .client.team_info.status_e status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .client.member_info member = 4;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_info::MergeFrom(const team_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_captain()) {
      set_captain(from.captain());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_info::CopyFrom(const team_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  return true;
}

void team_info::Swap(team_info* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(captain_, other->captain_);
    member_.Swap(&other->member_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_info_descriptor_;
  metadata.reflection = team_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_notify::kRoleIdFieldNumber;
const int team_notify::kTypeFieldNumber;
#endif  // !_MSC_VER

team_notify::team_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_notify::InitAsDefaultInstance() {
}

team_notify::team_notify(const team_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_notify::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_notify::~team_notify() {
  SharedDtor();
}

void team_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_notify_descriptor_;
}

const team_notify& team_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_notify* team_notify::default_instance_ = NULL;

team_notify* team_notify::New() const {
  return new team_notify;
}

void team_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_notify::MergeFrom(const team_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_notify::CopyFrom(const team_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void team_notify::Swap(team_notify* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_notify_descriptor_;
  metadata.reflection = team_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_member::kRoleIdFieldNumber;
const int team_member::kLevelFieldNumber;
const int team_member::kNameFieldNumber;
const int team_member::kProfessionFieldNumber;
const int team_member::kPowerFieldNumber;
const int team_member::kCaptainFieldNumber;
const int team_member::kReadyFieldNumber;
const int team_member::kVipLvFieldNumber;
#endif  // !_MSC_VER

team_member::team_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_member::InitAsDefaultInstance() {
}

team_member::team_member(const team_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_member::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0u;
  power_ = 0u;
  captain_ = false;
  ready_ = false;
  vip_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_member::~team_member() {
  SharedDtor();
}

void team_member::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void team_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_member_descriptor_;
}

const team_member& team_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_member* team_member::default_instance_ = NULL;

team_member* team_member::New() const {
  return new team_member;
}

void team_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0u;
    power_ = 0u;
    captain_ = false;
    ready_ = false;
    vip_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // required uint32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_captain;
        break;
      }

      // required bool captain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &captain_)));
          set_has_captain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ready;
        break;
      }

      // required bool ready = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // required uint32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power(), output);
  }

  // required bool captain = 6;
  if (has_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->captain(), output);
  }

  // required bool ready = 7;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ready(), output);
  }

  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // required uint32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power(), target);
  }

  // required bool captain = 6;
  if (has_captain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->captain(), target);
  }

  // required bool ready = 7;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ready(), target);
  }

  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // required uint32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required bool captain = 6;
    if (has_captain()) {
      total_size += 1 + 1;
    }

    // required bool ready = 7;
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // optional uint32 vip_lv = 8;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_member::MergeFrom(const team_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_captain()) {
      set_captain(from.captain());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_member::CopyFrom(const team_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void team_member::Swap(team_member* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(power_, other->power_);
    std::swap(captain_, other->captain_);
    std::swap(ready_, other->ready_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_member_descriptor_;
  metadata.reflection = team_member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_info_rsp::kTeamIdFieldNumber;
const int team_info_rsp::kRaidIdFieldNumber;
const int team_info_rsp::kTmFieldNumber;
#endif  // !_MSC_VER

team_info_rsp::team_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_info_rsp::InitAsDefaultInstance() {
}

team_info_rsp::team_info_rsp(const team_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_info_rsp::~team_info_rsp() {
  SharedDtor();
}

void team_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_info_rsp_descriptor_;
}

const team_info_rsp& team_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_info_rsp* team_info_rsp::default_instance_ = NULL;

team_info_rsp* team_info_rsp::New() const {
  return new team_info_rsp;
}

void team_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0u;
    raid_id_ = 0u;
  }
  tm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tm;
        break;
      }

      // repeated .client.team_member tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tm;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // repeated .client.team_member tm = 3;
  for (int i = 0; i < this->tm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // repeated .client.team_member tm = 3;
  for (int i = 0; i < this->tm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

  }
  // repeated .client.team_member tm = 3;
  total_size += 1 * this->tm_size();
  for (int i = 0; i < this->tm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_info_rsp::MergeFrom(const team_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tm_.MergeFrom(from.tm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_info_rsp::CopyFrom(const team_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < tm_size(); i++) {
    if (!this->tm(i).IsInitialized()) return false;
  }
  return true;
}

void team_info_rsp::Swap(team_info_rsp* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(raid_id_, other->raid_id_);
    tm_.Swap(&other->tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_info_rsp_descriptor_;
  metadata.reflection = team_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int join_team_req::kTeamIdFieldNumber;
const int join_team_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

join_team_req::join_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void join_team_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

join_team_req::join_team_req(const join_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void join_team_req::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

join_team_req::~join_team_req() {
  SharedDtor();
}

void join_team_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void join_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* join_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return join_team_req_descriptor_;
}

const join_team_req& join_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

join_team_req* join_team_req::default_instance_ = NULL;

join_team_req* join_team_req::New() const {
  return new join_team_req;
}

void join_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool join_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void join_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* join_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int join_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void join_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const join_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const join_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void join_team_req::MergeFrom(const join_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void join_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_team_req::CopyFrom(const join_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_team_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void join_team_req::Swap(join_team_req* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata join_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = join_team_req_descriptor_;
  metadata.reflection = join_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int join_team_rsp::kRetFieldNumber;
const int join_team_rsp::kRaidIdFieldNumber;
#endif  // !_MSC_VER

join_team_rsp::join_team_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void join_team_rsp::InitAsDefaultInstance() {
}

join_team_rsp::join_team_rsp(const join_team_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void join_team_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

join_team_rsp::~join_team_rsp() {
  SharedDtor();
}

void join_team_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void join_team_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* join_team_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return join_team_rsp_descriptor_;
}

const join_team_rsp& join_team_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

join_team_rsp* join_team_rsp::default_instance_ = NULL;

join_team_rsp* join_team_rsp::New() const {
  return new join_team_rsp;
}

void join_team_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool join_team_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // optional uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void join_team_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* join_team_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int join_team_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void join_team_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const join_team_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const join_team_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void join_team_rsp::MergeFrom(const join_team_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void join_team_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_team_rsp::CopyFrom(const join_team_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_team_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void join_team_rsp::Swap(join_team_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata join_team_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = join_team_rsp_descriptor_;
  metadata.reflection = join_team_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fire_member_req::kRoleIdFieldNumber;
const int fire_member_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

fire_member_req::fire_member_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fire_member_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

fire_member_req::fire_member_req(const fire_member_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fire_member_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fire_member_req::~fire_member_req() {
  SharedDtor();
}

void fire_member_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void fire_member_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fire_member_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fire_member_req_descriptor_;
}

const fire_member_req& fire_member_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

fire_member_req* fire_member_req::default_instance_ = NULL;

fire_member_req* fire_member_req::New() const {
  return new fire_member_req;
}

void fire_member_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fire_member_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fire_member_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fire_member_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fire_member_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fire_member_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fire_member_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fire_member_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fire_member_req::MergeFrom(const fire_member_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fire_member_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fire_member_req::CopyFrom(const fire_member_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fire_member_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fire_member_req::Swap(fire_member_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fire_member_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fire_member_req_descriptor_;
  metadata.reflection = fire_member_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fire_member_rsp::kTypeFieldNumber;
#endif  // !_MSC_VER

fire_member_rsp::fire_member_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fire_member_rsp::InitAsDefaultInstance() {
}

fire_member_rsp::fire_member_rsp(const fire_member_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fire_member_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fire_member_rsp::~fire_member_rsp() {
  SharedDtor();
}

void fire_member_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fire_member_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fire_member_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fire_member_rsp_descriptor_;
}

const fire_member_rsp& fire_member_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

fire_member_rsp* fire_member_rsp::default_instance_ = NULL;

fire_member_rsp* fire_member_rsp::New() const {
  return new fire_member_rsp;
}

void fire_member_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fire_member_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fire_member_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fire_member_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fire_member_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fire_member_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fire_member_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fire_member_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fire_member_rsp::MergeFrom(const fire_member_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fire_member_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fire_member_rsp::CopyFrom(const fire_member_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fire_member_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fire_member_rsp::Swap(fire_member_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fire_member_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fire_member_rsp_descriptor_;
  metadata.reflection = fire_member_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_team_req::kRaidIdFieldNumber;
const int create_team_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

create_team_req::create_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_team_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

create_team_req::create_team_req(const create_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_team_req::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_team_req::~create_team_req() {
  SharedDtor();
}

void create_team_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void create_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_team_req_descriptor_;
}

const create_team_req& create_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

create_team_req* create_team_req::default_instance_ = NULL;

create_team_req* create_team_req::New() const {
  return new create_team_req;
}

void create_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_team_req::MergeFrom(const create_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_team_req::CopyFrom(const create_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_team_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void create_team_req::Swap(create_team_req* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_team_req_descriptor_;
  metadata.reflection = create_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_team_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

create_team_rsp::create_team_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_team_rsp::InitAsDefaultInstance() {
}

create_team_rsp::create_team_rsp(const create_team_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_team_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_team_rsp::~create_team_rsp() {
  SharedDtor();
}

void create_team_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_team_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_team_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_team_rsp_descriptor_;
}

const create_team_rsp& create_team_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

create_team_rsp* create_team_rsp::default_instance_ = NULL;

create_team_rsp* create_team_rsp::New() const {
  return new create_team_rsp;
}

void create_team_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_team_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_team_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_team_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_team_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_team_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_team_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_team_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_team_rsp::MergeFrom(const create_team_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_team_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_team_rsp::CopyFrom(const create_team_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_team_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void create_team_rsp::Swap(create_team_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_team_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_team_rsp_descriptor_;
  metadata.reflection = create_team_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_ready_req::kStatusFieldNumber;
const int team_ready_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

team_ready_req::team_ready_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_ready_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

team_ready_req::team_ready_req(const team_ready_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_ready_req::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_ready_req::~team_ready_req() {
  SharedDtor();
}

void team_ready_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void team_ready_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_ready_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_ready_req_descriptor_;
}

const team_ready_req& team_ready_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_ready_req* team_ready_req::default_instance_ = NULL;

team_ready_req* team_ready_req::New() const {
  return new team_ready_req;
}

void team_ready_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_ready_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_ready_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_ready_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_ready_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_ready_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_ready_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_ready_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_ready_req::MergeFrom(const team_ready_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_ready_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_ready_req::CopyFrom(const team_ready_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_ready_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_ready_req::Swap(team_ready_req* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_ready_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_ready_req_descriptor_;
  metadata.reflection = team_ready_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_enter_raid_req::kTeamIdFieldNumber;
const int team_enter_raid_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

team_enter_raid_req::team_enter_raid_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_enter_raid_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

team_enter_raid_req::team_enter_raid_req(const team_enter_raid_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_enter_raid_req::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_enter_raid_req::~team_enter_raid_req() {
  SharedDtor();
}

void team_enter_raid_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void team_enter_raid_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_enter_raid_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_enter_raid_req_descriptor_;
}

const team_enter_raid_req& team_enter_raid_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_enter_raid_req* team_enter_raid_req::default_instance_ = NULL;

team_enter_raid_req* team_enter_raid_req::New() const {
  return new team_enter_raid_req;
}

void team_enter_raid_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_enter_raid_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_enter_raid_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_enter_raid_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_enter_raid_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_enter_raid_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_enter_raid_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_enter_raid_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_enter_raid_req::MergeFrom(const team_enter_raid_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_enter_raid_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_enter_raid_req::CopyFrom(const team_enter_raid_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_enter_raid_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_enter_raid_req::Swap(team_enter_raid_req* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_enter_raid_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_enter_raid_req_descriptor_;
  metadata.reflection = team_enter_raid_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_enter_prepare_req::kTimeFieldNumber;
const int team_enter_prepare_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

team_enter_prepare_req::team_enter_prepare_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_enter_prepare_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

team_enter_prepare_req::team_enter_prepare_req(const team_enter_prepare_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_enter_prepare_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_enter_prepare_req::~team_enter_prepare_req() {
  SharedDtor();
}

void team_enter_prepare_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void team_enter_prepare_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_enter_prepare_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_enter_prepare_req_descriptor_;
}

const team_enter_prepare_req& team_enter_prepare_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_enter_prepare_req* team_enter_prepare_req::default_instance_ = NULL;

team_enter_prepare_req* team_enter_prepare_req::New() const {
  return new team_enter_prepare_req;
}

void team_enter_prepare_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_enter_prepare_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_enter_prepare_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_enter_prepare_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_enter_prepare_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_enter_prepare_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_enter_prepare_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_enter_prepare_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_enter_prepare_req::MergeFrom(const team_enter_prepare_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_enter_prepare_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_enter_prepare_req::CopyFrom(const team_enter_prepare_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_enter_prepare_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_enter_prepare_req::Swap(team_enter_prepare_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_enter_prepare_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_enter_prepare_req_descriptor_;
  metadata.reflection = team_enter_prepare_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_enter_prepare_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

team_enter_prepare_rsp::team_enter_prepare_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_enter_prepare_rsp::InitAsDefaultInstance() {
}

team_enter_prepare_rsp::team_enter_prepare_rsp(const team_enter_prepare_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_enter_prepare_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_enter_prepare_rsp::~team_enter_prepare_rsp() {
  SharedDtor();
}

void team_enter_prepare_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_enter_prepare_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_enter_prepare_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_enter_prepare_rsp_descriptor_;
}

const team_enter_prepare_rsp& team_enter_prepare_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_enter_prepare_rsp* team_enter_prepare_rsp::default_instance_ = NULL;

team_enter_prepare_rsp* team_enter_prepare_rsp::New() const {
  return new team_enter_prepare_rsp;
}

void team_enter_prepare_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_enter_prepare_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_enter_prepare_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_enter_prepare_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_enter_prepare_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_enter_prepare_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_enter_prepare_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_enter_prepare_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_enter_prepare_rsp::MergeFrom(const team_enter_prepare_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_enter_prepare_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_enter_prepare_rsp::CopyFrom(const team_enter_prepare_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_enter_prepare_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_enter_prepare_rsp::Swap(team_enter_prepare_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_enter_prepare_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_enter_prepare_rsp_descriptor_;
  metadata.reflection = team_enter_prepare_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_enter_raid_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

team_enter_raid_rsp::team_enter_raid_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_enter_raid_rsp::InitAsDefaultInstance() {
}

team_enter_raid_rsp::team_enter_raid_rsp(const team_enter_raid_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_enter_raid_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_enter_raid_rsp::~team_enter_raid_rsp() {
  SharedDtor();
}

void team_enter_raid_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_enter_raid_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_enter_raid_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_enter_raid_rsp_descriptor_;
}

const team_enter_raid_rsp& team_enter_raid_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_enter_raid_rsp* team_enter_raid_rsp::default_instance_ = NULL;

team_enter_raid_rsp* team_enter_raid_rsp::New() const {
  return new team_enter_raid_rsp;
}

void team_enter_raid_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_enter_raid_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_enter_raid_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_enter_raid_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_enter_raid_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_enter_raid_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_enter_raid_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_enter_raid_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_enter_raid_rsp::MergeFrom(const team_enter_raid_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_enter_raid_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_enter_raid_rsp::CopyFrom(const team_enter_raid_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_enter_raid_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_enter_raid_rsp::Swap(team_enter_raid_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_enter_raid_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_enter_raid_rsp_descriptor_;
  metadata.reflection = team_enter_raid_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_add_robot::kRoleIdFieldNumber;
const int team_add_robot::kRobotFieldNumber;
#endif  // !_MSC_VER

team_add_robot::team_add_robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_add_robot::InitAsDefaultInstance() {
}

team_add_robot::team_add_robot(const team_add_robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_add_robot::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_add_robot::~team_add_robot() {
  SharedDtor();
}

void team_add_robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_add_robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_add_robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_add_robot_descriptor_;
}

const team_add_robot& team_add_robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_add_robot* team_add_robot::default_instance_ = NULL;

team_add_robot* team_add_robot::New() const {
  return new team_add_robot;
}

void team_add_robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  robot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_add_robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robot;
        break;
      }

      // repeated uint32 robot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_robot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_robot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_add_robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated uint32 robot = 2;
  for (int i = 0; i < this->robot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->robot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_add_robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated uint32 robot = 2;
  for (int i = 0; i < this->robot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->robot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_add_robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated uint32 robot = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->robot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->robot(i));
    }
    total_size += 1 * this->robot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_add_robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_add_robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_add_robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_add_robot::MergeFrom(const team_add_robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  robot_.MergeFrom(from.robot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_add_robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_add_robot::CopyFrom(const team_add_robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_add_robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_add_robot::Swap(team_add_robot* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    robot_.Swap(&other->robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_add_robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_add_robot_descriptor_;
  metadata.reflection = team_add_robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_kill_statistics_rsp::kRoleIdFieldNumber;
const int team_kill_statistics_rsp::kRoleNameFieldNumber;
const int team_kill_statistics_rsp::kNumFieldNumber;
#endif  // !_MSC_VER

team_kill_statistics_rsp::team_kill_statistics_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_kill_statistics_rsp::InitAsDefaultInstance() {
}

team_kill_statistics_rsp::team_kill_statistics_rsp(const team_kill_statistics_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_kill_statistics_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_kill_statistics_rsp::~team_kill_statistics_rsp() {
  SharedDtor();
}

void team_kill_statistics_rsp::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void team_kill_statistics_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_kill_statistics_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_kill_statistics_rsp_descriptor_;
}

const team_kill_statistics_rsp& team_kill_statistics_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_kill_statistics_rsp* team_kill_statistics_rsp::default_instance_ = NULL;

team_kill_statistics_rsp* team_kill_statistics_rsp::New() const {
  return new team_kill_statistics_rsp;
}

void team_kill_statistics_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_kill_statistics_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_kill_statistics_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_kill_statistics_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_kill_statistics_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_kill_statistics_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_kill_statistics_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_kill_statistics_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_kill_statistics_rsp::MergeFrom(const team_kill_statistics_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_kill_statistics_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_kill_statistics_rsp::CopyFrom(const team_kill_statistics_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_kill_statistics_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void team_kill_statistics_rsp::Swap(team_kill_statistics_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_kill_statistics_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_kill_statistics_rsp_descriptor_;
  metadata.reflection = team_kill_statistics_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_join_check::kRoleIdFieldNumber;
const int team_join_check::kRaidIdFieldNumber;
const int team_join_check::kTeamIdFieldNumber;
#endif  // !_MSC_VER

team_join_check::team_join_check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_join_check::InitAsDefaultInstance() {
}

team_join_check::team_join_check(const team_join_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_join_check::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  raid_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_join_check::~team_join_check() {
  SharedDtor();
}

void team_join_check::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_join_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_join_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_join_check_descriptor_;
}

const team_join_check& team_join_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_2eproto();
  return *default_instance_;
}

team_join_check* team_join_check::default_instance_ = NULL;

team_join_check* team_join_check::New() const {
  return new team_join_check;
}

void team_join_check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    raid_id_ = 0u;
    team_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_join_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // required uint32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_join_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // required uint32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_join_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // required uint32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_join_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_join_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_join_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_join_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_join_check::MergeFrom(const team_join_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_join_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_join_check::CopyFrom(const team_join_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_join_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void team_join_check::Swap(team_join_check* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_join_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_join_check_descriptor_;
  metadata.reflection = team_join_check_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
