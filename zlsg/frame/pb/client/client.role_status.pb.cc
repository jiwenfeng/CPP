// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* role_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* role_status_pvp_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* role_status_attack_mode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* role_status_alive_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* role_status_riding_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* change_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* notify_kill_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notify_kill_event_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_relive_type_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_relive_type_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* select_relive_type_req_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* select_relive_type_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_relive_type_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* select_relive_type_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dark_zero_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dark_zero_time_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ROLE_STATUS_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fstatus_2eproto() {
  protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_status.proto");
  GOOGLE_CHECK(file != NULL);
  role_status_descriptor_ = file->message_type(0);
  static const int role_status_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, meditate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, autopath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, atk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, riding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, furious_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, hurted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, giddy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, faint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, fired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, posion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, injury_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, cursed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, blind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, maimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, silent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, disarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, slowly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, dec_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, rej_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, streanth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, comm_practice_),
  };
  role_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_status_descriptor_,
      role_status::default_instance_,
      role_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_status));
  role_status_pvp_status_descriptor_ = role_status_descriptor_->enum_type(0);
  role_status_attack_mode_descriptor_ = role_status_descriptor_->enum_type(1);
  role_status_alive_status_descriptor_ = role_status_descriptor_->enum_type(2);
  role_status_riding_status_descriptor_ = role_status_descriptor_->enum_type(3);
  change_status_descriptor_ = file->message_type(1);
  static const int change_status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_status, rs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_status, svr_head_),
  };
  change_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_status_descriptor_,
      change_status::default_instance_,
      change_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_status));
  notify_kill_event_descriptor_ = file->message_type(2);
  static const int notify_kill_event_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, dead_lose_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, killer_got_factor_),
  };
  notify_kill_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notify_kill_event_descriptor_,
      notify_kill_event::default_instance_,
      notify_kill_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kill_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notify_kill_event));
  select_relive_type_req_descriptor_ = file->message_type(3);
  static const int select_relive_type_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_req, auto_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_req, svr_head_),
  };
  select_relive_type_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_relive_type_req_descriptor_,
      select_relive_type_req::default_instance_,
      select_relive_type_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_relive_type_req));
  select_relive_type_req_TYPE_descriptor_ = select_relive_type_req_descriptor_->enum_type(0);
  select_relive_type_rsp_descriptor_ = file->message_type(4);
  static const int select_relive_type_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_rsp, ret_),
  };
  select_relive_type_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_relive_type_rsp_descriptor_,
      select_relive_type_rsp::default_instance_,
      select_relive_type_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_relive_type_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_relive_type_rsp));
  select_relive_type_rsp_RET_descriptor_ = select_relive_type_rsp_descriptor_->enum_type(0);
  dark_zero_time_descriptor_ = file->message_type(5);
  static const int dark_zero_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dark_zero_time, unixtime_),
  };
  dark_zero_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dark_zero_time_descriptor_,
      dark_zero_time::default_instance_,
      dark_zero_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dark_zero_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dark_zero_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dark_zero_time));
  ROLE_STATUS_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_status_descriptor_, &role_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_status_descriptor_, &change_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notify_kill_event_descriptor_, &notify_kill_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_relive_type_req_descriptor_, &select_relive_type_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_relive_type_rsp_descriptor_, &select_relive_type_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dark_zero_time_descriptor_, &dark_zero_time::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fstatus_2eproto() {
  delete role_status::default_instance_;
  delete role_status_reflection_;
  delete change_status::default_instance_;
  delete change_status_reflection_;
  delete notify_kill_event::default_instance_;
  delete notify_kill_event_reflection_;
  delete select_relive_type_req::default_instance_;
  delete select_relive_type_req_reflection_;
  delete select_relive_type_rsp::default_instance_;
  delete select_relive_type_rsp_reflection_;
  delete dark_zero_time::default_instance_;
  delete dark_zero_time_reflection_;
}

void protobuf_AddDesc_client_2erole_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client.role_status.proto\022\006client\032\021clie"
    "nt.comm.proto\"\253\t\n\013role_status\022\027\n\010meditat"
    "e\030\001 \001(\010:\005false\022\027\n\010autopath\030\002 \001(\010:\005false\022"
    "\024\n\005fight\030\003 \001(\010:\005false\022\024\n\005robot\030\004 \001(\010:\005fa"
    "lse\0226\n\003pvp\030\005 \001(\0162\036.client.role_status.pv"
    "p_status:\tpvp_prote\022\025\n\006online\030\006 \001(\010:\005fal"
    "se\022B\n\010atk_mode\030\007 \001(\0162\037.client.role_statu"
    "s.attack_mode:\017attack_mod_null\022=\n\005alive\030"
    "\010 \001(\0162 .client.role_status.alive_status:"
    "\014status_alive\022>\n\006riding\030\t \001(\0162!.client.r"
    "ole_status.riding_status:\013status_walk\022\026\n"
    "\007furious\030\n \001(\010:\005false\022\025\n\006hurted\030\013 \001(\010:\005f"
    "alse\022\023\n\004week\030\014 \001(\010:\005false\022\024\n\005giddy\030\r \001(\010"
    ":\005false\022\024\n\005faint\030\016 \001(\010:\005false\022\024\n\005fired\030\017"
    " \001(\010:\005false\022\025\n\006posion\030\020 \001(\010:\005false\022\024\n\005bl"
    "ood\030\021 \001(\010:\005false\022\025\n\006injury\030\022 \001(\010:\005false\022"
    "\025\n\006cursed\030\023 \001(\010:\005false\022\024\n\005blind\030\024 \001(\010:\005f"
    "alse\022\025\n\006maimed\030\025 \001(\010:\005false\022\025\n\006silent\030\026 "
    "\001(\010:\005false\022\025\n\006disarm\030\027 \001(\010:\005false\022\025\n\006slo"
    "wly\030\030 \001(\010:\005false\022\027\n\010dec_harm\030\031 \001(\010:\005fals"
    "e\022\027\n\010rej_harm\030\032 \001(\010:\005false\022\027\n\010streanth\030\033"
    " \001(\010:\005false\022\023\n\004body\030\034 \001(\010:\005false\022\020\n\005guar"
    "d\030\035 \001(\r:\0010\022\034\n\rcomm_practice\030\036 \001(\010:\005false"
    "\")\n\npvp_status\022\014\n\010pvp_kill\020\000\022\r\n\tpvp_prot"
    "e\020\001\"\245\001\n\013attack_mode\022\023\n\017attack_mod_null\020\000"
    "\022\024\n\020attack_mod_peace\020\001\022\023\n\017attack_mod_tea"
    "m\020\002\022\025\n\021attack_mod_family\020\003\022\022\n\016attack_mod"
    "_all\020\004\022\023\n\017attack_mod_camp\020\005\022\026\n\022attack_mo"
    "d_invalid\020\006\"1\n\014alive_status\022\020\n\014status_al"
    "ive\020\001\022\017\n\013status_dead\020\002\"C\n\rriding_status\022"
    "\017\n\013status_walk\020\000\022\021\n\rstatus_riding\020\001\022\016\n\ns"
    "tatus_fly\020\002\"X\n\rchange_status\022\037\n\002rs\030\001 \002(\013"
    "2\023.client.role_status\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"\214\001\n\021notify_kill_ev"
    "ent\022\037\n\004dead\030\001 \002(\0132\021.client.role_data\022!\n\006"
    "killer\030\002 \002(\0132\021.client.role_data\022\030\n\020dead_"
    "lose_factor\030\003 \001(\r\022\031\n\021killer_got_factor\030\004"
    " \001(\r\"\327\001\n\026select_relive_type_req\0221\n\004type\030"
    "\001 \002(\0162#.client.select_relive_type_req.TY"
    "PE\022\020\n\010auto_buy\030\002 \001(\010\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"P\n\004TYPE\022\010\n\004SITU\020\000\022\017"
    "\n\013CHECK_POINT\020\001\022\r\n\tMAIN_CITY\020\002\022\017\n\013BIRTH_"
    "POINT\020\003\022\r\n\tSAFE_ZONE\020\004\"\221\001\n\026select_relive"
    "_type_rsp\022/\n\003ret\030\001 \002(\0162\".client.select_r"
    "elive_type_rsp.RET\"F\n\003RET\022\013\n\007SUCCESS\020\000\022\017"
    "\n\013PROPS_LIMIT\020\001\022\017\n\013MONEY_LIMIT\020\002\022\020\n\014CONF"
    "IG_ERROR\020\003\"\"\n\016dark_zero_time\022\020\n\010unixtime"
    "\030\001 \002(\r*\331\005\n\rROLE_STATUS_E\022\027\n\023RSE_STATUS_M"
    "EDITATE\020\000\022\027\n\023RSE_STATUS_AUTOPATH\020\001\022\024\n\020RS"
    "E_STATUS_FIGHT\020\002\022\024\n\020RSE_STATUS_ROBOT\020\003\022\022"
    "\n\016RSE_STATUS_PVP\020\004\022\025\n\021RSE_STATUS_ONLINE\020"
    "\005\022\027\n\023RSE_STATUS_ATTKMODE\020\006\022\024\n\020RSE_STATUS"
    "_ALIVE\020\007\022\025\n\021RSE_STATUS_RIDING\020\010\022\026\n\022RSE_S"
    "TATUS_FURIOUS\020\t\022\025\n\021RSE_STATUS_HURTED\020\n\022\023"
    "\n\017RSE_STATUS_WEEK\020\013\022\024\n\020RSE_STATUS_GIDDY\020"
    "\014\022\024\n\020RSE_STATUS_FAINT\020\r\022\024\n\020RSE_STATUS_FI"
    "RED\020\016\022\025\n\021RSE_STATUS_POSION\020\017\022\024\n\020RSE_STAT"
    "US_BLOOD\020\020\022\025\n\021RSE_STATUS_INJURY\020\021\022\025\n\021RSE"
    "_STATUS_CURSED\020\022\022\024\n\020RSE_STATUS_BLIND\020\023\022\025"
    "\n\021RSE_STATUS_MAIMED\020\024\022\025\n\021RSE_STATUS_SILE"
    "NT\020\025\022\025\n\021RSE_STATUS_DISARM\020\026\022\025\n\021RSE_STATU"
    "S_SLOWLY\020\027\022\027\n\023RSE_STATUS_DEC_HARM\020\030\022\027\n\023R"
    "SE_STATUS_REJ_HARM\020\031\022\027\n\023RSE_STATUS_STREA"
    "NTH\020\032\022\023\n\017RSE_STATUS_BODY\020\033\022\024\n\020RSE_STATUS"
    "_GUARD\020\034\022\034\n\030RSE_STATUS_COMM_PRACTICE\020\035\022\022"
    "\n\016RSE_STATUS_MAX\020\036", 2618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_status.proto", &protobuf_RegisterTypes);
  role_status::default_instance_ = new role_status();
  change_status::default_instance_ = new change_status();
  notify_kill_event::default_instance_ = new notify_kill_event();
  select_relive_type_req::default_instance_ = new select_relive_type_req();
  select_relive_type_rsp::default_instance_ = new select_relive_type_rsp();
  dark_zero_time::default_instance_ = new dark_zero_time();
  role_status::default_instance_->InitAsDefaultInstance();
  change_status::default_instance_->InitAsDefaultInstance();
  notify_kill_event::default_instance_->InitAsDefaultInstance();
  select_relive_type_req::default_instance_->InitAsDefaultInstance();
  select_relive_type_rsp::default_instance_->InitAsDefaultInstance();
  dark_zero_time::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fstatus_2eproto {
  StaticDescriptorInitializer_client_2erole_5fstatus_2eproto() {
    protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fstatus_2eproto_;
const ::google::protobuf::EnumDescriptor* ROLE_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROLE_STATUS_E_descriptor_;
}
bool ROLE_STATUS_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* role_status_pvp_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_status_pvp_status_descriptor_;
}
bool role_status_pvp_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const role_status_pvp_status role_status::pvp_kill;
const role_status_pvp_status role_status::pvp_prote;
const role_status_pvp_status role_status::pvp_status_MIN;
const role_status_pvp_status role_status::pvp_status_MAX;
const int role_status::pvp_status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* role_status_attack_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_status_attack_mode_descriptor_;
}
bool role_status_attack_mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const role_status_attack_mode role_status::attack_mod_null;
const role_status_attack_mode role_status::attack_mod_peace;
const role_status_attack_mode role_status::attack_mod_team;
const role_status_attack_mode role_status::attack_mod_family;
const role_status_attack_mode role_status::attack_mod_all;
const role_status_attack_mode role_status::attack_mod_camp;
const role_status_attack_mode role_status::attack_mod_invalid;
const role_status_attack_mode role_status::attack_mode_MIN;
const role_status_attack_mode role_status::attack_mode_MAX;
const int role_status::attack_mode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* role_status_alive_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_status_alive_status_descriptor_;
}
bool role_status_alive_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const role_status_alive_status role_status::status_alive;
const role_status_alive_status role_status::status_dead;
const role_status_alive_status role_status::alive_status_MIN;
const role_status_alive_status role_status::alive_status_MAX;
const int role_status::alive_status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* role_status_riding_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_status_riding_status_descriptor_;
}
bool role_status_riding_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const role_status_riding_status role_status::status_walk;
const role_status_riding_status role_status::status_riding;
const role_status_riding_status role_status::status_fly;
const role_status_riding_status role_status::riding_status_MIN;
const role_status_riding_status role_status::riding_status_MAX;
const int role_status::riding_status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int role_status::kMeditateFieldNumber;
const int role_status::kAutopathFieldNumber;
const int role_status::kFightFieldNumber;
const int role_status::kRobotFieldNumber;
const int role_status::kPvpFieldNumber;
const int role_status::kOnlineFieldNumber;
const int role_status::kAtkModeFieldNumber;
const int role_status::kAliveFieldNumber;
const int role_status::kRidingFieldNumber;
const int role_status::kFuriousFieldNumber;
const int role_status::kHurtedFieldNumber;
const int role_status::kWeekFieldNumber;
const int role_status::kGiddyFieldNumber;
const int role_status::kFaintFieldNumber;
const int role_status::kFiredFieldNumber;
const int role_status::kPosionFieldNumber;
const int role_status::kBloodFieldNumber;
const int role_status::kInjuryFieldNumber;
const int role_status::kCursedFieldNumber;
const int role_status::kBlindFieldNumber;
const int role_status::kMaimedFieldNumber;
const int role_status::kSilentFieldNumber;
const int role_status::kDisarmFieldNumber;
const int role_status::kSlowlyFieldNumber;
const int role_status::kDecHarmFieldNumber;
const int role_status::kRejHarmFieldNumber;
const int role_status::kStreanthFieldNumber;
const int role_status::kBodyFieldNumber;
const int role_status::kGuardFieldNumber;
const int role_status::kCommPracticeFieldNumber;
#endif  // !_MSC_VER

role_status::role_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_status::InitAsDefaultInstance() {
}

role_status::role_status(const role_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_status::SharedCtor() {
  _cached_size_ = 0;
  meditate_ = false;
  autopath_ = false;
  fight_ = false;
  robot_ = false;
  pvp_ = 1;
  online_ = false;
  atk_mode_ = 0;
  alive_ = 1;
  riding_ = 0;
  furious_ = false;
  hurted_ = false;
  week_ = false;
  giddy_ = false;
  faint_ = false;
  fired_ = false;
  posion_ = false;
  blood_ = false;
  injury_ = false;
  cursed_ = false;
  blind_ = false;
  maimed_ = false;
  silent_ = false;
  disarm_ = false;
  slowly_ = false;
  dec_harm_ = false;
  rej_harm_ = false;
  streanth_ = false;
  body_ = false;
  guard_ = 0u;
  comm_practice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_status::~role_status() {
  SharedDtor();
}

void role_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_status_descriptor_;
}

const role_status& role_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

role_status* role_status::default_instance_ = NULL;

role_status* role_status::New() const {
  return new role_status;
}

void role_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    meditate_ = false;
    autopath_ = false;
    fight_ = false;
    robot_ = false;
    pvp_ = 1;
    online_ = false;
    atk_mode_ = 0;
    alive_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    riding_ = 0;
    furious_ = false;
    hurted_ = false;
    week_ = false;
    giddy_ = false;
    faint_ = false;
    fired_ = false;
    posion_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    blood_ = false;
    injury_ = false;
    cursed_ = false;
    blind_ = false;
    maimed_ = false;
    silent_ = false;
    disarm_ = false;
    slowly_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    dec_harm_ = false;
    rej_harm_ = false;
    streanth_ = false;
    body_ = false;
    guard_ = 0u;
    comm_practice_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool meditate = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meditate_)));
          set_has_meditate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autopath;
        break;
      }

      // optional bool autopath = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autopath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autopath_)));
          set_has_autopath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional bool fight = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_robot;
        break;
      }

      // optional bool robot = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pvp;
        break;
      }

      // optional .client.role_status.pvp_status pvp = 5 [default = pvp_prote];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::role_status_pvp_status_IsValid(value)) {
            set_pvp(static_cast< ::client::role_status_pvp_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }

      // optional bool online = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_atk_mode;
        break;
      }

      // optional .client.role_status.attack_mode atk_mode = 7 [default = attack_mod_null];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::role_status_attack_mode_IsValid(value)) {
            set_atk_mode(static_cast< ::client::role_status_attack_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alive;
        break;
      }

      // optional .client.role_status.alive_status alive = 8 [default = status_alive];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::role_status_alive_status_IsValid(value)) {
            set_alive(static_cast< ::client::role_status_alive_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_riding;
        break;
      }

      // optional .client.role_status.riding_status riding = 9 [default = status_walk];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::role_status_riding_status_IsValid(value)) {
            set_riding(static_cast< ::client::role_status_riding_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_furious;
        break;
      }

      // optional bool furious = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_furious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &furious_)));
          set_has_furious();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hurted;
        break;
      }

      // optional bool hurted = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurted_)));
          set_has_hurted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_week;
        break;
      }

      // optional bool week = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_giddy;
        break;
      }

      // optional bool giddy = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giddy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &giddy_)));
          set_has_giddy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_faint;
        break;
      }

      // optional bool faint = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &faint_)));
          set_has_faint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fired;
        break;
      }

      // optional bool fired = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fired_)));
          set_has_fired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_posion;
        break;
      }

      // optional bool posion = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &posion_)));
          set_has_posion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blood;
        break;
      }

      // optional bool blood = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_injury;
        break;
      }

      // optional bool injury = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_injury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injury_)));
          set_has_injury();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cursed;
        break;
      }

      // optional bool cursed = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cursed_)));
          set_has_cursed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_blind;
        break;
      }

      // optional bool blind = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_)));
          set_has_blind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_maimed;
        break;
      }

      // optional bool maimed = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maimed_)));
          set_has_maimed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_silent;
        break;
      }

      // optional bool silent = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silent_)));
          set_has_silent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_disarm;
        break;
      }

      // optional bool disarm = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disarm_)));
          set_has_disarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_slowly;
        break;
      }

      // optional bool slowly = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slowly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slowly_)));
          set_has_slowly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_dec_harm;
        break;
      }

      // optional bool dec_harm = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dec_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dec_harm_)));
          set_has_dec_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_rej_harm;
        break;
      }

      // optional bool rej_harm = 26 [default = false];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rej_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rej_harm_)));
          set_has_rej_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_streanth;
        break;
      }

      // optional bool streanth = 27 [default = false];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streanth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streanth_)));
          set_has_streanth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_body;
        break;
      }

      // optional bool body = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_guard;
        break;
      }

      // optional uint32 guard = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guard_)));
          set_has_guard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_comm_practice;
        break;
      }

      // optional bool comm_practice = 30 [default = false];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comm_practice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comm_practice_)));
          set_has_comm_practice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool meditate = 1 [default = false];
  if (has_meditate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->meditate(), output);
  }

  // optional bool autopath = 2 [default = false];
  if (has_autopath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autopath(), output);
  }

  // optional bool fight = 3 [default = false];
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fight(), output);
  }

  // optional bool robot = 4 [default = false];
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->robot(), output);
  }

  // optional .client.role_status.pvp_status pvp = 5 [default = pvp_prote];
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pvp(), output);
  }

  // optional bool online = 6 [default = false];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->online(), output);
  }

  // optional .client.role_status.attack_mode atk_mode = 7 [default = attack_mod_null];
  if (has_atk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->atk_mode(), output);
  }

  // optional .client.role_status.alive_status alive = 8 [default = status_alive];
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->alive(), output);
  }

  // optional .client.role_status.riding_status riding = 9 [default = status_walk];
  if (has_riding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->riding(), output);
  }

  // optional bool furious = 10 [default = false];
  if (has_furious()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->furious(), output);
  }

  // optional bool hurted = 11 [default = false];
  if (has_hurted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->hurted(), output);
  }

  // optional bool week = 12 [default = false];
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->week(), output);
  }

  // optional bool giddy = 13 [default = false];
  if (has_giddy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->giddy(), output);
  }

  // optional bool faint = 14 [default = false];
  if (has_faint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->faint(), output);
  }

  // optional bool fired = 15 [default = false];
  if (has_fired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fired(), output);
  }

  // optional bool posion = 16 [default = false];
  if (has_posion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->posion(), output);
  }

  // optional bool blood = 17 [default = false];
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->blood(), output);
  }

  // optional bool injury = 18 [default = false];
  if (has_injury()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->injury(), output);
  }

  // optional bool cursed = 19 [default = false];
  if (has_cursed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->cursed(), output);
  }

  // optional bool blind = 20 [default = false];
  if (has_blind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->blind(), output);
  }

  // optional bool maimed = 21 [default = false];
  if (has_maimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->maimed(), output);
  }

  // optional bool silent = 22 [default = false];
  if (has_silent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->silent(), output);
  }

  // optional bool disarm = 23 [default = false];
  if (has_disarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->disarm(), output);
  }

  // optional bool slowly = 24 [default = false];
  if (has_slowly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->slowly(), output);
  }

  // optional bool dec_harm = 25 [default = false];
  if (has_dec_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->dec_harm(), output);
  }

  // optional bool rej_harm = 26 [default = false];
  if (has_rej_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->rej_harm(), output);
  }

  // optional bool streanth = 27 [default = false];
  if (has_streanth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->streanth(), output);
  }

  // optional bool body = 28 [default = false];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->body(), output);
  }

  // optional uint32 guard = 29 [default = 0];
  if (has_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->guard(), output);
  }

  // optional bool comm_practice = 30 [default = false];
  if (has_comm_practice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->comm_practice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool meditate = 1 [default = false];
  if (has_meditate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->meditate(), target);
  }

  // optional bool autopath = 2 [default = false];
  if (has_autopath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autopath(), target);
  }

  // optional bool fight = 3 [default = false];
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fight(), target);
  }

  // optional bool robot = 4 [default = false];
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->robot(), target);
  }

  // optional .client.role_status.pvp_status pvp = 5 [default = pvp_prote];
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pvp(), target);
  }

  // optional bool online = 6 [default = false];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->online(), target);
  }

  // optional .client.role_status.attack_mode atk_mode = 7 [default = attack_mod_null];
  if (has_atk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->atk_mode(), target);
  }

  // optional .client.role_status.alive_status alive = 8 [default = status_alive];
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->alive(), target);
  }

  // optional .client.role_status.riding_status riding = 9 [default = status_walk];
  if (has_riding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->riding(), target);
  }

  // optional bool furious = 10 [default = false];
  if (has_furious()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->furious(), target);
  }

  // optional bool hurted = 11 [default = false];
  if (has_hurted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->hurted(), target);
  }

  // optional bool week = 12 [default = false];
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->week(), target);
  }

  // optional bool giddy = 13 [default = false];
  if (has_giddy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->giddy(), target);
  }

  // optional bool faint = 14 [default = false];
  if (has_faint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->faint(), target);
  }

  // optional bool fired = 15 [default = false];
  if (has_fired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fired(), target);
  }

  // optional bool posion = 16 [default = false];
  if (has_posion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->posion(), target);
  }

  // optional bool blood = 17 [default = false];
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->blood(), target);
  }

  // optional bool injury = 18 [default = false];
  if (has_injury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->injury(), target);
  }

  // optional bool cursed = 19 [default = false];
  if (has_cursed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->cursed(), target);
  }

  // optional bool blind = 20 [default = false];
  if (has_blind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->blind(), target);
  }

  // optional bool maimed = 21 [default = false];
  if (has_maimed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->maimed(), target);
  }

  // optional bool silent = 22 [default = false];
  if (has_silent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->silent(), target);
  }

  // optional bool disarm = 23 [default = false];
  if (has_disarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->disarm(), target);
  }

  // optional bool slowly = 24 [default = false];
  if (has_slowly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->slowly(), target);
  }

  // optional bool dec_harm = 25 [default = false];
  if (has_dec_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->dec_harm(), target);
  }

  // optional bool rej_harm = 26 [default = false];
  if (has_rej_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->rej_harm(), target);
  }

  // optional bool streanth = 27 [default = false];
  if (has_streanth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->streanth(), target);
  }

  // optional bool body = 28 [default = false];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->body(), target);
  }

  // optional uint32 guard = 29 [default = 0];
  if (has_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->guard(), target);
  }

  // optional bool comm_practice = 30 [default = false];
  if (has_comm_practice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->comm_practice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool meditate = 1 [default = false];
    if (has_meditate()) {
      total_size += 1 + 1;
    }

    // optional bool autopath = 2 [default = false];
    if (has_autopath()) {
      total_size += 1 + 1;
    }

    // optional bool fight = 3 [default = false];
    if (has_fight()) {
      total_size += 1 + 1;
    }

    // optional bool robot = 4 [default = false];
    if (has_robot()) {
      total_size += 1 + 1;
    }

    // optional .client.role_status.pvp_status pvp = 5 [default = pvp_prote];
    if (has_pvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pvp());
    }

    // optional bool online = 6 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional .client.role_status.attack_mode atk_mode = 7 [default = attack_mod_null];
    if (has_atk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atk_mode());
    }

    // optional .client.role_status.alive_status alive = 8 [default = status_alive];
    if (has_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alive());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client.role_status.riding_status riding = 9 [default = status_walk];
    if (has_riding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->riding());
    }

    // optional bool furious = 10 [default = false];
    if (has_furious()) {
      total_size += 1 + 1;
    }

    // optional bool hurted = 11 [default = false];
    if (has_hurted()) {
      total_size += 1 + 1;
    }

    // optional bool week = 12 [default = false];
    if (has_week()) {
      total_size += 1 + 1;
    }

    // optional bool giddy = 13 [default = false];
    if (has_giddy()) {
      total_size += 1 + 1;
    }

    // optional bool faint = 14 [default = false];
    if (has_faint()) {
      total_size += 1 + 1;
    }

    // optional bool fired = 15 [default = false];
    if (has_fired()) {
      total_size += 1 + 1;
    }

    // optional bool posion = 16 [default = false];
    if (has_posion()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool blood = 17 [default = false];
    if (has_blood()) {
      total_size += 2 + 1;
    }

    // optional bool injury = 18 [default = false];
    if (has_injury()) {
      total_size += 2 + 1;
    }

    // optional bool cursed = 19 [default = false];
    if (has_cursed()) {
      total_size += 2 + 1;
    }

    // optional bool blind = 20 [default = false];
    if (has_blind()) {
      total_size += 2 + 1;
    }

    // optional bool maimed = 21 [default = false];
    if (has_maimed()) {
      total_size += 2 + 1;
    }

    // optional bool silent = 22 [default = false];
    if (has_silent()) {
      total_size += 2 + 1;
    }

    // optional bool disarm = 23 [default = false];
    if (has_disarm()) {
      total_size += 2 + 1;
    }

    // optional bool slowly = 24 [default = false];
    if (has_slowly()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool dec_harm = 25 [default = false];
    if (has_dec_harm()) {
      total_size += 2 + 1;
    }

    // optional bool rej_harm = 26 [default = false];
    if (has_rej_harm()) {
      total_size += 2 + 1;
    }

    // optional bool streanth = 27 [default = false];
    if (has_streanth()) {
      total_size += 2 + 1;
    }

    // optional bool body = 28 [default = false];
    if (has_body()) {
      total_size += 2 + 1;
    }

    // optional uint32 guard = 29 [default = 0];
    if (has_guard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guard());
    }

    // optional bool comm_practice = 30 [default = false];
    if (has_comm_practice()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_status::MergeFrom(const role_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meditate()) {
      set_meditate(from.meditate());
    }
    if (from.has_autopath()) {
      set_autopath(from.autopath());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_pvp()) {
      set_pvp(from.pvp());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_atk_mode()) {
      set_atk_mode(from.atk_mode());
    }
    if (from.has_alive()) {
      set_alive(from.alive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_riding()) {
      set_riding(from.riding());
    }
    if (from.has_furious()) {
      set_furious(from.furious());
    }
    if (from.has_hurted()) {
      set_hurted(from.hurted());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_giddy()) {
      set_giddy(from.giddy());
    }
    if (from.has_faint()) {
      set_faint(from.faint());
    }
    if (from.has_fired()) {
      set_fired(from.fired());
    }
    if (from.has_posion()) {
      set_posion(from.posion());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_injury()) {
      set_injury(from.injury());
    }
    if (from.has_cursed()) {
      set_cursed(from.cursed());
    }
    if (from.has_blind()) {
      set_blind(from.blind());
    }
    if (from.has_maimed()) {
      set_maimed(from.maimed());
    }
    if (from.has_silent()) {
      set_silent(from.silent());
    }
    if (from.has_disarm()) {
      set_disarm(from.disarm());
    }
    if (from.has_slowly()) {
      set_slowly(from.slowly());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dec_harm()) {
      set_dec_harm(from.dec_harm());
    }
    if (from.has_rej_harm()) {
      set_rej_harm(from.rej_harm());
    }
    if (from.has_streanth()) {
      set_streanth(from.streanth());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_guard()) {
      set_guard(from.guard());
    }
    if (from.has_comm_practice()) {
      set_comm_practice(from.comm_practice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_status::CopyFrom(const role_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_status::IsInitialized() const {

  return true;
}

void role_status::Swap(role_status* other) {
  if (other != this) {
    std::swap(meditate_, other->meditate_);
    std::swap(autopath_, other->autopath_);
    std::swap(fight_, other->fight_);
    std::swap(robot_, other->robot_);
    std::swap(pvp_, other->pvp_);
    std::swap(online_, other->online_);
    std::swap(atk_mode_, other->atk_mode_);
    std::swap(alive_, other->alive_);
    std::swap(riding_, other->riding_);
    std::swap(furious_, other->furious_);
    std::swap(hurted_, other->hurted_);
    std::swap(week_, other->week_);
    std::swap(giddy_, other->giddy_);
    std::swap(faint_, other->faint_);
    std::swap(fired_, other->fired_);
    std::swap(posion_, other->posion_);
    std::swap(blood_, other->blood_);
    std::swap(injury_, other->injury_);
    std::swap(cursed_, other->cursed_);
    std::swap(blind_, other->blind_);
    std::swap(maimed_, other->maimed_);
    std::swap(silent_, other->silent_);
    std::swap(disarm_, other->disarm_);
    std::swap(slowly_, other->slowly_);
    std::swap(dec_harm_, other->dec_harm_);
    std::swap(rej_harm_, other->rej_harm_);
    std::swap(streanth_, other->streanth_);
    std::swap(body_, other->body_);
    std::swap(guard_, other->guard_);
    std::swap(comm_practice_, other->comm_practice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_status_descriptor_;
  metadata.reflection = role_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_status::kRsFieldNumber;
const int change_status::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

change_status::change_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_status::InitAsDefaultInstance() {
  rs_ = const_cast< ::client::role_status*>(&::client::role_status::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

change_status::change_status(const change_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_status::SharedCtor() {
  _cached_size_ = 0;
  rs_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_status::~change_status() {
  SharedDtor();
}

void change_status::SharedDtor() {
  if (this != default_instance_) {
    delete rs_;
    delete svr_head_;
  }
}

void change_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_status_descriptor_;
}

const change_status& change_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

change_status* change_status::default_instance_ = NULL;

change_status* change_status::New() const {
  return new change_status;
}

void change_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rs()) {
      if (rs_ != NULL) rs_->::client::role_status::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_status rs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_status rs = 1;
  if (has_rs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rs(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_status rs = 1;
  if (has_rs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rs(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_status rs = 1;
    if (has_rs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rs());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_status::MergeFrom(const change_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rs()) {
      mutable_rs()->::client::role_status::MergeFrom(from.rs());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_status::CopyFrom(const change_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void change_status::Swap(change_status* other) {
  if (other != this) {
    std::swap(rs_, other->rs_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_status_descriptor_;
  metadata.reflection = change_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notify_kill_event::kDeadFieldNumber;
const int notify_kill_event::kKillerFieldNumber;
const int notify_kill_event::kDeadLoseFactorFieldNumber;
const int notify_kill_event::kKillerGotFactorFieldNumber;
#endif  // !_MSC_VER

notify_kill_event::notify_kill_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void notify_kill_event::InitAsDefaultInstance() {
  dead_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  killer_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

notify_kill_event::notify_kill_event(const notify_kill_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void notify_kill_event::SharedCtor() {
  _cached_size_ = 0;
  dead_ = NULL;
  killer_ = NULL;
  dead_lose_factor_ = 0u;
  killer_got_factor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notify_kill_event::~notify_kill_event() {
  SharedDtor();
}

void notify_kill_event::SharedDtor() {
  if (this != default_instance_) {
    delete dead_;
    delete killer_;
  }
}

void notify_kill_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notify_kill_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notify_kill_event_descriptor_;
}

const notify_kill_event& notify_kill_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

notify_kill_event* notify_kill_event::default_instance_ = NULL;

notify_kill_event* notify_kill_event::New() const {
  return new notify_kill_event;
}

void notify_kill_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dead()) {
      if (dead_ != NULL) dead_->::client::role_data::Clear();
    }
    if (has_killer()) {
      if (killer_ != NULL) killer_->::client::role_data::Clear();
    }
    dead_lose_factor_ = 0u;
    killer_got_factor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notify_kill_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data dead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_killer;
        break;
      }

      // required .client.role_data killer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_lose_factor;
        break;
      }

      // optional uint32 dead_lose_factor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_lose_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_lose_factor_)));
          set_has_dead_lose_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killer_got_factor;
        break;
      }

      // optional uint32 killer_got_factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_got_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_got_factor_)));
          set_has_killer_got_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void notify_kill_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data dead = 1;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dead(), output);
  }

  // required .client.role_data killer = 2;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->killer(), output);
  }

  // optional uint32 dead_lose_factor = 3;
  if (has_dead_lose_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_lose_factor(), output);
  }

  // optional uint32 killer_got_factor = 4;
  if (has_killer_got_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killer_got_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* notify_kill_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data dead = 1;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dead(), target);
  }

  // required .client.role_data killer = 2;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->killer(), target);
  }

  // optional uint32 dead_lose_factor = 3;
  if (has_dead_lose_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_lose_factor(), target);
  }

  // optional uint32 killer_got_factor = 4;
  if (has_killer_got_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killer_got_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int notify_kill_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data dead = 1;
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead());
    }

    // required .client.role_data killer = 2;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killer());
    }

    // optional uint32 dead_lose_factor = 3;
    if (has_dead_lose_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_lose_factor());
    }

    // optional uint32 killer_got_factor = 4;
    if (has_killer_got_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_got_factor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notify_kill_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notify_kill_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notify_kill_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notify_kill_event::MergeFrom(const notify_kill_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dead()) {
      mutable_dead()->::client::role_data::MergeFrom(from.dead());
    }
    if (from.has_killer()) {
      mutable_killer()->::client::role_data::MergeFrom(from.killer());
    }
    if (from.has_dead_lose_factor()) {
      set_dead_lose_factor(from.dead_lose_factor());
    }
    if (from.has_killer_got_factor()) {
      set_killer_got_factor(from.killer_got_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notify_kill_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notify_kill_event::CopyFrom(const notify_kill_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_kill_event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dead()) {
    if (!this->dead().IsInitialized()) return false;
  }
  if (has_killer()) {
    if (!this->killer().IsInitialized()) return false;
  }
  return true;
}

void notify_kill_event::Swap(notify_kill_event* other) {
  if (other != this) {
    std::swap(dead_, other->dead_);
    std::swap(killer_, other->killer_);
    std::swap(dead_lose_factor_, other->dead_lose_factor_);
    std::swap(killer_got_factor_, other->killer_got_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notify_kill_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notify_kill_event_descriptor_;
  metadata.reflection = notify_kill_event_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* select_relive_type_req_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_relive_type_req_TYPE_descriptor_;
}
bool select_relive_type_req_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const select_relive_type_req_TYPE select_relive_type_req::SITU;
const select_relive_type_req_TYPE select_relive_type_req::CHECK_POINT;
const select_relive_type_req_TYPE select_relive_type_req::MAIN_CITY;
const select_relive_type_req_TYPE select_relive_type_req::BIRTH_POINT;
const select_relive_type_req_TYPE select_relive_type_req::SAFE_ZONE;
const select_relive_type_req_TYPE select_relive_type_req::TYPE_MIN;
const select_relive_type_req_TYPE select_relive_type_req::TYPE_MAX;
const int select_relive_type_req::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int select_relive_type_req::kTypeFieldNumber;
const int select_relive_type_req::kAutoBuyFieldNumber;
const int select_relive_type_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

select_relive_type_req::select_relive_type_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_relive_type_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

select_relive_type_req::select_relive_type_req(const select_relive_type_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_relive_type_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  auto_buy_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_relive_type_req::~select_relive_type_req() {
  SharedDtor();
}

void select_relive_type_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void select_relive_type_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_relive_type_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_relive_type_req_descriptor_;
}

const select_relive_type_req& select_relive_type_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

select_relive_type_req* select_relive_type_req::default_instance_ = NULL;

select_relive_type_req* select_relive_type_req::New() const {
  return new select_relive_type_req;
}

void select_relive_type_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    auto_buy_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_relive_type_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.select_relive_type_req.TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::select_relive_type_req_TYPE_IsValid(value)) {
            set_type(static_cast< ::client::select_relive_type_req_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_buy;
        break;
      }

      // optional bool auto_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_buy_)));
          set_has_auto_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_relive_type_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.select_relive_type_req.TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool auto_buy = 2;
  if (has_auto_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_buy(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_relive_type_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.select_relive_type_req.TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool auto_buy = 2;
  if (has_auto_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_buy(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_relive_type_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.select_relive_type_req.TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool auto_buy = 2;
    if (has_auto_buy()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_relive_type_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_relive_type_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_relive_type_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_relive_type_req::MergeFrom(const select_relive_type_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_auto_buy()) {
      set_auto_buy(from.auto_buy());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_relive_type_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_relive_type_req::CopyFrom(const select_relive_type_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_relive_type_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_relive_type_req::Swap(select_relive_type_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(auto_buy_, other->auto_buy_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_relive_type_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_relive_type_req_descriptor_;
  metadata.reflection = select_relive_type_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* select_relive_type_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_relive_type_rsp_RET_descriptor_;
}
bool select_relive_type_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const select_relive_type_rsp_RET select_relive_type_rsp::SUCCESS;
const select_relive_type_rsp_RET select_relive_type_rsp::PROPS_LIMIT;
const select_relive_type_rsp_RET select_relive_type_rsp::MONEY_LIMIT;
const select_relive_type_rsp_RET select_relive_type_rsp::CONFIG_ERROR;
const select_relive_type_rsp_RET select_relive_type_rsp::RET_MIN;
const select_relive_type_rsp_RET select_relive_type_rsp::RET_MAX;
const int select_relive_type_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int select_relive_type_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

select_relive_type_rsp::select_relive_type_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_relive_type_rsp::InitAsDefaultInstance() {
}

select_relive_type_rsp::select_relive_type_rsp(const select_relive_type_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_relive_type_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_relive_type_rsp::~select_relive_type_rsp() {
  SharedDtor();
}

void select_relive_type_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_relive_type_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_relive_type_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_relive_type_rsp_descriptor_;
}

const select_relive_type_rsp& select_relive_type_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

select_relive_type_rsp* select_relive_type_rsp::default_instance_ = NULL;

select_relive_type_rsp* select_relive_type_rsp::New() const {
  return new select_relive_type_rsp;
}

void select_relive_type_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_relive_type_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.select_relive_type_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::select_relive_type_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::select_relive_type_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_relive_type_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.select_relive_type_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_relive_type_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.select_relive_type_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_relive_type_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.select_relive_type_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_relive_type_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_relive_type_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_relive_type_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_relive_type_rsp::MergeFrom(const select_relive_type_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_relive_type_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_relive_type_rsp::CopyFrom(const select_relive_type_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_relive_type_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_relive_type_rsp::Swap(select_relive_type_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_relive_type_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_relive_type_rsp_descriptor_;
  metadata.reflection = select_relive_type_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dark_zero_time::kUnixtimeFieldNumber;
#endif  // !_MSC_VER

dark_zero_time::dark_zero_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dark_zero_time::InitAsDefaultInstance() {
}

dark_zero_time::dark_zero_time(const dark_zero_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dark_zero_time::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dark_zero_time::~dark_zero_time() {
  SharedDtor();
}

void dark_zero_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dark_zero_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dark_zero_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dark_zero_time_descriptor_;
}

const dark_zero_time& dark_zero_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  return *default_instance_;
}

dark_zero_time* dark_zero_time::default_instance_ = NULL;

dark_zero_time* dark_zero_time::New() const {
  return new dark_zero_time;
}

void dark_zero_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dark_zero_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dark_zero_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dark_zero_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dark_zero_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dark_zero_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dark_zero_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dark_zero_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dark_zero_time::MergeFrom(const dark_zero_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dark_zero_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dark_zero_time::CopyFrom(const dark_zero_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dark_zero_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dark_zero_time::Swap(dark_zero_time* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dark_zero_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dark_zero_time_descriptor_;
  metadata.reflection = dark_zero_time_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
