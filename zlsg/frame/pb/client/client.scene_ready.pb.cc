// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.scene_ready.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.scene_ready.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* scene_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scene_ready_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* scene_ready_READY_OCCASION_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2escene_5fready_2eproto() {
  protobuf_AddDesc_client_2escene_5fready_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.scene_ready.proto");
  GOOGLE_CHECK(file != NULL);
  scene_ready_descriptor_ = file->message_type(0);
  static const int scene_ready_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, time_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, ro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, svr_head_),
  };
  scene_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scene_ready_descriptor_,
      scene_ready::default_instance_,
      scene_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scene_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scene_ready));
  scene_ready_READY_OCCASION_descriptor_ = scene_ready_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2escene_5fready_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scene_ready_descriptor_, &scene_ready::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2escene_5fready_2eproto() {
  delete scene_ready::default_instance_;
  delete scene_ready_reflection_;
}

void protobuf_AddDesc_client_2escene_5fready_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client.scene_ready.proto\022\006client\032\021clie"
    "nt.comm.proto\"\236\001\n\013scene_ready\022\020\n\010time_no"
    "w\030\001 \002(\r\022.\n\002ro\030\002 \001(\0162\".client.scene_ready"
    ".READY_OCCASION\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"%\n\016READY_OCCASION\022\t\n\005LOG"
    "IN\020\000\022\010\n\004JUMP\020\001", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.scene_ready.proto", &protobuf_RegisterTypes);
  scene_ready::default_instance_ = new scene_ready();
  scene_ready::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2escene_5fready_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2escene_5fready_2eproto {
  StaticDescriptorInitializer_client_2escene_5fready_2eproto() {
    protobuf_AddDesc_client_2escene_5fready_2eproto();
  }
} static_descriptor_initializer_client_2escene_5fready_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* scene_ready_READY_OCCASION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_ready_READY_OCCASION_descriptor_;
}
bool scene_ready_READY_OCCASION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const scene_ready_READY_OCCASION scene_ready::LOGIN;
const scene_ready_READY_OCCASION scene_ready::JUMP;
const scene_ready_READY_OCCASION scene_ready::READY_OCCASION_MIN;
const scene_ready_READY_OCCASION scene_ready::READY_OCCASION_MAX;
const int scene_ready::READY_OCCASION_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int scene_ready::kTimeNowFieldNumber;
const int scene_ready::kRoFieldNumber;
const int scene_ready::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

scene_ready::scene_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scene_ready::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

scene_ready::scene_ready(const scene_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scene_ready::SharedCtor() {
  _cached_size_ = 0;
  time_now_ = 0u;
  ro_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scene_ready::~scene_ready() {
  SharedDtor();
}

void scene_ready::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void scene_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scene_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_ready_descriptor_;
}

const scene_ready& scene_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2escene_5fready_2eproto();
  return *default_instance_;
}

scene_ready* scene_ready::default_instance_ = NULL;

scene_ready* scene_ready::New() const {
  return new scene_ready;
}

void scene_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_now_ = 0u;
    ro_ = 0;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scene_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_now_)));
          set_has_time_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ro;
        break;
      }

      // optional .client.scene_ready.READY_OCCASION ro = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ro:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::scene_ready_READY_OCCASION_IsValid(value)) {
            set_ro(static_cast< ::client::scene_ready_READY_OCCASION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scene_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time_now = 1;
  if (has_time_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_now(), output);
  }

  // optional .client.scene_ready.READY_OCCASION ro = 2;
  if (has_ro()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ro(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scene_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time_now = 1;
  if (has_time_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_now(), target);
  }

  // optional .client.scene_ready.READY_OCCASION ro = 2;
  if (has_ro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ro(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scene_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_now = 1;
    if (has_time_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_now());
    }

    // optional .client.scene_ready.READY_OCCASION ro = 2;
    if (has_ro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ro());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scene_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scene_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scene_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scene_ready::MergeFrom(const scene_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_now()) {
      set_time_now(from.time_now());
    }
    if (from.has_ro()) {
      set_ro(from.ro());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scene_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scene_ready::CopyFrom(const scene_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scene_ready::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scene_ready::Swap(scene_ready* other) {
  if (other != this) {
    std::swap(time_now_, other->time_now_);
    std::swap(ro_, other->ro_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scene_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scene_ready_descriptor_;
  metadata.reflection = scene_ready_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
