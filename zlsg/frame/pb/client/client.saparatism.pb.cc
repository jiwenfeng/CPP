// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.saparatism.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.saparatism.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* saparatism_region_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_region_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_region_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_region_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_region_award_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_award_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_region_award_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_region_award_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* saparatism_open_pop_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  saparatism_open_pop_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SAPARATISM_AWARD_OPERATOR_RET_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2esaparatism_2eproto() {
  protobuf_AddDesc_client_2esaparatism_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.saparatism.proto");
  GOOGLE_CHECK(file != NULL);
  saparatism_region_info_req_descriptor_ = file->message_type(0);
  static const int saparatism_region_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_req, svr_head_),
  };
  saparatism_region_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_info_req_descriptor_,
      saparatism_region_info_req::default_instance_,
      saparatism_region_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_info_req));
  saparatism_region_info_descriptor_ = file->message_type(1);
  static const int saparatism_region_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, region_occuption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, family_occuption_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, family_),
  };
  saparatism_region_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_info_descriptor_,
      saparatism_region_info::default_instance_,
      saparatism_region_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_info));
  saparatism_region_info_rsp_descriptor_ = file->message_type(2);
  static const int saparatism_region_info_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, isleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, ri_),
  };
  saparatism_region_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_info_rsp_descriptor_,
      saparatism_region_info_rsp::default_instance_,
      saparatism_region_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_info_rsp));
  saparatism_region_award_req_descriptor_ = file->message_type(3);
  static const int saparatism_region_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_req, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_req, svr_head_),
  };
  saparatism_region_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_award_req_descriptor_,
      saparatism_region_award_req::default_instance_,
      saparatism_region_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_award_req));
  saparatism_region_award_check_descriptor_ = file->message_type(4);
  static const int saparatism_region_award_check_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_check, req_),
  };
  saparatism_region_award_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_award_check_descriptor_,
      saparatism_region_award_check::default_instance_,
      saparatism_region_award_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_award_check));
  saparatism_region_award_rsp_descriptor_ = file->message_type(5);
  static const int saparatism_region_award_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_rsp, ret_),
  };
  saparatism_region_award_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_region_award_rsp_descriptor_,
      saparatism_region_award_rsp::default_instance_,
      saparatism_region_award_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_region_award_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_region_award_rsp));
  saparatism_open_pop_rsp_descriptor_ = file->message_type(6);
  static const int saparatism_open_pop_rsp_offsets_[1] = {
  };
  saparatism_open_pop_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      saparatism_open_pop_rsp_descriptor_,
      saparatism_open_pop_rsp::default_instance_,
      saparatism_open_pop_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_open_pop_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(saparatism_open_pop_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(saparatism_open_pop_rsp));
  SAPARATISM_AWARD_OPERATOR_RET_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2esaparatism_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_info_req_descriptor_, &saparatism_region_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_info_descriptor_, &saparatism_region_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_info_rsp_descriptor_, &saparatism_region_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_award_req_descriptor_, &saparatism_region_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_award_check_descriptor_, &saparatism_region_award_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_region_award_rsp_descriptor_, &saparatism_region_award_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    saparatism_open_pop_rsp_descriptor_, &saparatism_open_pop_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2esaparatism_2eproto() {
  delete saparatism_region_info_req::default_instance_;
  delete saparatism_region_info_req_reflection_;
  delete saparatism_region_info::default_instance_;
  delete saparatism_region_info_reflection_;
  delete saparatism_region_info_rsp::default_instance_;
  delete saparatism_region_info_rsp_reflection_;
  delete saparatism_region_award_req::default_instance_;
  delete saparatism_region_award_req_reflection_;
  delete saparatism_region_award_check::default_instance_;
  delete saparatism_region_award_check_reflection_;
  delete saparatism_region_award_rsp::default_instance_;
  delete saparatism_region_award_rsp_reflection_;
  delete saparatism_open_pop_rsp::default_instance_;
  delete saparatism_open_pop_rsp_reflection_;
}

void protobuf_AddDesc_client_2esaparatism_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2efamily_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.saparatism.proto\022\006client\032\021clien"
    "t.comm.proto\032\023client.family.proto\"D\n\032sap"
    "aratism_region_info_req\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"\234\001\n\026saparatism_r"
    "egion_info\022\021\n\tregion_id\030\001 \002(\r\022\030\n\020region_"
    "occuption\030\002 \002(\r\022\021\n\tfamily_id\030\003 \001(\r\022\035\n\025fa"
    "mily_occuption_days\030\004 \001(\r\022#\n\006family\030\005 \001("
    "\0132\023.client.family_info\"\211\001\n\032saparatism_re"
    "gion_info_rsp\022\016\n\006isopen\030\002 \002(\010\022\014\n\004time\030\003 "
    "\002(\r\022\020\n\010isleader\030\004 \002(\010\022\017\n\007sceneid\030\005 \002(\r\022*"
    "\n\002ri\030\001 \003(\0132\036.client.saparatism_region_in"
    "fo\"X\n\033saparatism_region_award_req\022\021\n\treg"
    "ion_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"Q\n\035saparatism_region_award_"
    "check\0220\n\003req\030\001 \002(\0132#.client.saparatism_r"
    "egion_award_req\"Q\n\033saparatism_region_awa"
    "rd_rsp\0222\n\003ret\030\001 \002(\0162%.client.SAPARATISM_"
    "AWARD_OPERATOR_RET\"\031\n\027saparatism_open_po"
    "p_rsp*\223\001\n\035SAPARATISM_AWARD_OPERATOR_RET\022"
    "\020\n\014SAOR_SUCCESS\020\000\022\023\n\017SAOR_TIME_LIMIT\020\001\022\031"
    "\n\025SAOR_NOT_FAMILY_LIMIT\020\002\022\034\n\030SAOR_NOT_OC"
    "CUPTION_LIMIT\020\003\022\022\n\016SAOR_GET_LIMIT\020\004", 875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.saparatism.proto", &protobuf_RegisterTypes);
  saparatism_region_info_req::default_instance_ = new saparatism_region_info_req();
  saparatism_region_info::default_instance_ = new saparatism_region_info();
  saparatism_region_info_rsp::default_instance_ = new saparatism_region_info_rsp();
  saparatism_region_award_req::default_instance_ = new saparatism_region_award_req();
  saparatism_region_award_check::default_instance_ = new saparatism_region_award_check();
  saparatism_region_award_rsp::default_instance_ = new saparatism_region_award_rsp();
  saparatism_open_pop_rsp::default_instance_ = new saparatism_open_pop_rsp();
  saparatism_region_info_req::default_instance_->InitAsDefaultInstance();
  saparatism_region_info::default_instance_->InitAsDefaultInstance();
  saparatism_region_info_rsp::default_instance_->InitAsDefaultInstance();
  saparatism_region_award_req::default_instance_->InitAsDefaultInstance();
  saparatism_region_award_check::default_instance_->InitAsDefaultInstance();
  saparatism_region_award_rsp::default_instance_->InitAsDefaultInstance();
  saparatism_open_pop_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2esaparatism_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2esaparatism_2eproto {
  StaticDescriptorInitializer_client_2esaparatism_2eproto() {
    protobuf_AddDesc_client_2esaparatism_2eproto();
  }
} static_descriptor_initializer_client_2esaparatism_2eproto_;
const ::google::protobuf::EnumDescriptor* SAPARATISM_AWARD_OPERATOR_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SAPARATISM_AWARD_OPERATOR_RET_descriptor_;
}
bool SAPARATISM_AWARD_OPERATOR_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

saparatism_region_info_req::saparatism_region_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

saparatism_region_info_req::saparatism_region_info_req(const saparatism_region_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_info_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_info_req::~saparatism_region_info_req() {
  SharedDtor();
}

void saparatism_region_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void saparatism_region_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_info_req_descriptor_;
}

const saparatism_region_info_req& saparatism_region_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_info_req* saparatism_region_info_req::default_instance_ = NULL;

saparatism_region_info_req* saparatism_region_info_req::New() const {
  return new saparatism_region_info_req;
}

void saparatism_region_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_info_req::MergeFrom(const saparatism_region_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_info_req::CopyFrom(const saparatism_region_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_info_req::IsInitialized() const {

  return true;
}

void saparatism_region_info_req::Swap(saparatism_region_info_req* other) {
  if (other != this) {
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_info_req_descriptor_;
  metadata.reflection = saparatism_region_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_info::kRegionIdFieldNumber;
const int saparatism_region_info::kRegionOccuptionFieldNumber;
const int saparatism_region_info::kFamilyIdFieldNumber;
const int saparatism_region_info::kFamilyOccuptionDaysFieldNumber;
const int saparatism_region_info::kFamilyFieldNumber;
#endif  // !_MSC_VER

saparatism_region_info::saparatism_region_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_info::InitAsDefaultInstance() {
  family_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

saparatism_region_info::saparatism_region_info(const saparatism_region_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_info::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  region_occuption_ = 0u;
  family_id_ = 0u;
  family_occuption_days_ = 0u;
  family_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_info::~saparatism_region_info() {
  SharedDtor();
}

void saparatism_region_info::SharedDtor() {
  if (this != default_instance_) {
    delete family_;
  }
}

void saparatism_region_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_info_descriptor_;
}

const saparatism_region_info& saparatism_region_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_info* saparatism_region_info::default_instance_ = NULL;

saparatism_region_info* saparatism_region_info::New() const {
  return new saparatism_region_info;
}

void saparatism_region_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    region_occuption_ = 0u;
    family_id_ = 0u;
    family_occuption_days_ = 0u;
    if (has_family()) {
      if (family_ != NULL) family_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_occuption;
        break;
      }

      // required uint32 region_occuption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_occuption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_occuption_)));
          set_has_region_occuption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_family_occuption_days;
        break;
      }

      // optional uint32 family_occuption_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_occuption_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_occuption_days_)));
          set_has_family_occuption_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_family;
        break;
      }

      // optional .client.family_info family = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // required uint32 region_occuption = 2;
  if (has_region_occuption()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_occuption(), output);
  }

  // optional uint32 family_id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  // optional uint32 family_occuption_days = 4;
  if (has_family_occuption_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->family_occuption_days(), output);
  }

  // optional .client.family_info family = 5;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->family(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // required uint32 region_occuption = 2;
  if (has_region_occuption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_occuption(), target);
  }

  // optional uint32 family_id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  // optional uint32 family_occuption_days = 4;
  if (has_family_occuption_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->family_occuption_days(), target);
  }

  // optional .client.family_info family = 5;
  if (has_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->family(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // required uint32 region_occuption = 2;
    if (has_region_occuption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_occuption());
    }

    // optional uint32 family_id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional uint32 family_occuption_days = 4;
    if (has_family_occuption_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_occuption_days());
    }

    // optional .client.family_info family = 5;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->family());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_info::MergeFrom(const saparatism_region_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_region_occuption()) {
      set_region_occuption(from.region_occuption());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_occuption_days()) {
      set_family_occuption_days(from.family_occuption_days());
    }
    if (from.has_family()) {
      mutable_family()->::client::family_info::MergeFrom(from.family());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_info::CopyFrom(const saparatism_region_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_family()) {
    if (!this->family().IsInitialized()) return false;
  }
  return true;
}

void saparatism_region_info::Swap(saparatism_region_info* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(region_occuption_, other->region_occuption_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_occuption_days_, other->family_occuption_days_);
    std::swap(family_, other->family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_info_descriptor_;
  metadata.reflection = saparatism_region_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_info_rsp::kIsopenFieldNumber;
const int saparatism_region_info_rsp::kTimeFieldNumber;
const int saparatism_region_info_rsp::kIsleaderFieldNumber;
const int saparatism_region_info_rsp::kSceneidFieldNumber;
const int saparatism_region_info_rsp::kRiFieldNumber;
#endif  // !_MSC_VER

saparatism_region_info_rsp::saparatism_region_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_info_rsp::InitAsDefaultInstance() {
}

saparatism_region_info_rsp::saparatism_region_info_rsp(const saparatism_region_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  time_ = 0u;
  isleader_ = false;
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_info_rsp::~saparatism_region_info_rsp() {
  SharedDtor();
}

void saparatism_region_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void saparatism_region_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_info_rsp_descriptor_;
}

const saparatism_region_info_rsp& saparatism_region_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_info_rsp* saparatism_region_info_rsp::default_instance_ = NULL;

saparatism_region_info_rsp* saparatism_region_info_rsp::New() const {
  return new saparatism_region_info_rsp;
}

void saparatism_region_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
    time_ = 0u;
    isleader_ = false;
    sceneid_ = 0u;
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.saparatism_region_info ri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ri;
        if (input->ExpectTag(16)) goto parse_isopen;
        break;
      }

      // required bool isopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isleader;
        break;
      }

      // required bool isleader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isleader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleader_)));
          set_has_isleader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }

      // required uint32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.saparatism_region_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ri(i), output);
  }

  // required bool isopen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required bool isleader = 4;
  if (has_isleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isleader(), output);
  }

  // required uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.saparatism_region_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ri(i), target);
  }

  // required bool isopen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required bool isleader = 4;
  if (has_isleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isleader(), target);
  }

  // required uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isopen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required bool isleader = 4;
    if (has_isleader()) {
      total_size += 1 + 1;
    }

    // required uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

  }
  // repeated .client.saparatism_region_info ri = 1;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_info_rsp::MergeFrom(const saparatism_region_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isleader()) {
      set_isleader(from.isleader());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_info_rsp::CopyFrom(const saparatism_region_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void saparatism_region_info_rsp::Swap(saparatism_region_info_rsp* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(time_, other->time_);
    std::swap(isleader_, other->isleader_);
    std::swap(sceneid_, other->sceneid_);
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_info_rsp_descriptor_;
  metadata.reflection = saparatism_region_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_award_req::kRegionIdFieldNumber;
const int saparatism_region_award_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

saparatism_region_award_req::saparatism_region_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_award_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

saparatism_region_award_req::saparatism_region_award_req(const saparatism_region_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_award_req::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_award_req::~saparatism_region_award_req() {
  SharedDtor();
}

void saparatism_region_award_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void saparatism_region_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_award_req_descriptor_;
}

const saparatism_region_award_req& saparatism_region_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_award_req* saparatism_region_award_req::default_instance_ = NULL;

saparatism_region_award_req* saparatism_region_award_req::New() const {
  return new saparatism_region_award_req;
}

void saparatism_region_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_award_req::MergeFrom(const saparatism_region_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_award_req::CopyFrom(const saparatism_region_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void saparatism_region_award_req::Swap(saparatism_region_award_req* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_award_req_descriptor_;
  metadata.reflection = saparatism_region_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_award_check::kReqFieldNumber;
#endif  // !_MSC_VER

saparatism_region_award_check::saparatism_region_award_check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_award_check::InitAsDefaultInstance() {
  req_ = const_cast< ::client::saparatism_region_award_req*>(&::client::saparatism_region_award_req::default_instance());
}

saparatism_region_award_check::saparatism_region_award_check(const saparatism_region_award_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_award_check::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_award_check::~saparatism_region_award_check() {
  SharedDtor();
}

void saparatism_region_award_check::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void saparatism_region_award_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_award_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_award_check_descriptor_;
}

const saparatism_region_award_check& saparatism_region_award_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_award_check* saparatism_region_award_check::default_instance_ = NULL;

saparatism_region_award_check* saparatism_region_award_check::New() const {
  return new saparatism_region_award_check;
}

void saparatism_region_award_check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::client::saparatism_region_award_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_award_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.saparatism_region_award_req req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_award_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.saparatism_region_award_req req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_award_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.saparatism_region_award_req req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_award_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.saparatism_region_award_req req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_award_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_award_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_award_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_award_check::MergeFrom(const saparatism_region_award_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::client::saparatism_region_award_req::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_award_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_award_check::CopyFrom(const saparatism_region_award_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_award_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void saparatism_region_award_check::Swap(saparatism_region_award_check* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_award_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_award_check_descriptor_;
  metadata.reflection = saparatism_region_award_check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int saparatism_region_award_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

saparatism_region_award_rsp::saparatism_region_award_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_region_award_rsp::InitAsDefaultInstance() {
}

saparatism_region_award_rsp::saparatism_region_award_rsp(const saparatism_region_award_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_region_award_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_region_award_rsp::~saparatism_region_award_rsp() {
  SharedDtor();
}

void saparatism_region_award_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void saparatism_region_award_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_region_award_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_region_award_rsp_descriptor_;
}

const saparatism_region_award_rsp& saparatism_region_award_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_region_award_rsp* saparatism_region_award_rsp::default_instance_ = NULL;

saparatism_region_award_rsp* saparatism_region_award_rsp::New() const {
  return new saparatism_region_award_rsp;
}

void saparatism_region_award_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_region_award_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SAPARATISM_AWARD_OPERATOR_RET_IsValid(value)) {
            set_ret(static_cast< ::client::SAPARATISM_AWARD_OPERATOR_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void saparatism_region_award_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_region_award_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_region_award_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_region_award_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_region_award_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_region_award_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_region_award_rsp::MergeFrom(const saparatism_region_award_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_region_award_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_region_award_rsp::CopyFrom(const saparatism_region_award_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_region_award_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void saparatism_region_award_rsp::Swap(saparatism_region_award_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_region_award_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_region_award_rsp_descriptor_;
  metadata.reflection = saparatism_region_award_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

saparatism_open_pop_rsp::saparatism_open_pop_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void saparatism_open_pop_rsp::InitAsDefaultInstance() {
}

saparatism_open_pop_rsp::saparatism_open_pop_rsp(const saparatism_open_pop_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void saparatism_open_pop_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

saparatism_open_pop_rsp::~saparatism_open_pop_rsp() {
  SharedDtor();
}

void saparatism_open_pop_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void saparatism_open_pop_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* saparatism_open_pop_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return saparatism_open_pop_rsp_descriptor_;
}

const saparatism_open_pop_rsp& saparatism_open_pop_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_2eproto();
  return *default_instance_;
}

saparatism_open_pop_rsp* saparatism_open_pop_rsp::default_instance_ = NULL;

saparatism_open_pop_rsp* saparatism_open_pop_rsp::New() const {
  return new saparatism_open_pop_rsp;
}

void saparatism_open_pop_rsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool saparatism_open_pop_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void saparatism_open_pop_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* saparatism_open_pop_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int saparatism_open_pop_rsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void saparatism_open_pop_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const saparatism_open_pop_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const saparatism_open_pop_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void saparatism_open_pop_rsp::MergeFrom(const saparatism_open_pop_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void saparatism_open_pop_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void saparatism_open_pop_rsp::CopyFrom(const saparatism_open_pop_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool saparatism_open_pop_rsp::IsInitialized() const {

  return true;
}

void saparatism_open_pop_rsp::Swap(saparatism_open_pop_rsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata saparatism_open_pop_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = saparatism_open_pop_rsp_descriptor_;
  metadata.reflection = saparatism_open_pop_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
