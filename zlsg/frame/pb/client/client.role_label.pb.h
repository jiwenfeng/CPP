// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_label.proto

#ifndef PROTOBUF_client_2erole_5flabel_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5flabel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

class label_list_req;
class label_info;
class label_list_rsp;
class operate_label_req;
class operate_label_rsp;
class get_role_label_info_req;
class get_role_label_info_rsp;
class honor_label_list_req;
class honor_label_info;
class honor_label_list_rsp;
class set_role_label;
class use_honor_label;
class use_honor_label_ret;

enum operate_label_req_OPERATE_TYPE {
  operate_label_req_OPERATE_TYPE_ADD = 0,
  operate_label_req_OPERATE_TYPE_REMOVE = 1,
  operate_label_req_OPERATE_TYPE_REPLACE = 2
};
bool operate_label_req_OPERATE_TYPE_IsValid(int value);
const operate_label_req_OPERATE_TYPE operate_label_req_OPERATE_TYPE_OPERATE_TYPE_MIN = operate_label_req_OPERATE_TYPE_ADD;
const operate_label_req_OPERATE_TYPE operate_label_req_OPERATE_TYPE_OPERATE_TYPE_MAX = operate_label_req_OPERATE_TYPE_REPLACE;
const int operate_label_req_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE = operate_label_req_OPERATE_TYPE_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* operate_label_req_OPERATE_TYPE_descriptor();
inline const ::std::string& operate_label_req_OPERATE_TYPE_Name(operate_label_req_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    operate_label_req_OPERATE_TYPE_descriptor(), value);
}
inline bool operate_label_req_OPERATE_TYPE_Parse(
    const ::std::string& name, operate_label_req_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<operate_label_req_OPERATE_TYPE>(
    operate_label_req_OPERATE_TYPE_descriptor(), name, value);
}
enum operate_label_rsp_OPERATE_TYPE {
  operate_label_rsp_OPERATE_TYPE_ADD = 0,
  operate_label_rsp_OPERATE_TYPE_REMOVE = 1,
  operate_label_rsp_OPERATE_TYPE_REPLACE = 2
};
bool operate_label_rsp_OPERATE_TYPE_IsValid(int value);
const operate_label_rsp_OPERATE_TYPE operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_MIN = operate_label_rsp_OPERATE_TYPE_ADD;
const operate_label_rsp_OPERATE_TYPE operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_MAX = operate_label_rsp_OPERATE_TYPE_REPLACE;
const int operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE = operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_TYPE_descriptor();
inline const ::std::string& operate_label_rsp_OPERATE_TYPE_Name(operate_label_rsp_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    operate_label_rsp_OPERATE_TYPE_descriptor(), value);
}
inline bool operate_label_rsp_OPERATE_TYPE_Parse(
    const ::std::string& name, operate_label_rsp_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<operate_label_rsp_OPERATE_TYPE>(
    operate_label_rsp_OPERATE_TYPE_descriptor(), name, value);
}
enum operate_label_rsp_OPERATE_RESULT {
  operate_label_rsp_OPERATE_RESULT_SUCCESS = 0,
  operate_label_rsp_OPERATE_RESULT_FAILURE = 1
};
bool operate_label_rsp_OPERATE_RESULT_IsValid(int value);
const operate_label_rsp_OPERATE_RESULT operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_MIN = operate_label_rsp_OPERATE_RESULT_SUCCESS;
const operate_label_rsp_OPERATE_RESULT operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_MAX = operate_label_rsp_OPERATE_RESULT_FAILURE;
const int operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_ARRAYSIZE = operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_RESULT_descriptor();
inline const ::std::string& operate_label_rsp_OPERATE_RESULT_Name(operate_label_rsp_OPERATE_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    operate_label_rsp_OPERATE_RESULT_descriptor(), value);
}
inline bool operate_label_rsp_OPERATE_RESULT_Parse(
    const ::std::string& name, operate_label_rsp_OPERATE_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<operate_label_rsp_OPERATE_RESULT>(
    operate_label_rsp_OPERATE_RESULT_descriptor(), name, value);
}
// ===================================================================

class label_list_req : public ::google::protobuf::Message {
 public:
  label_list_req();
  virtual ~label_list_req();

  label_list_req(const label_list_req& from);

  inline label_list_req& operator=(const label_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_list_req& default_instance();

  void Swap(label_list_req* other);

  // implements Message ----------------------------------------------

  label_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_list_req& from);
  void MergeFrom(const label_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.label_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static label_list_req* default_instance_;
};
// -------------------------------------------------------------------

class label_info : public ::google::protobuf::Message {
 public:
  label_info();
  virtual ~label_info();

  label_info(const label_info& from);

  inline label_info& operator=(const label_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_info& default_instance();

  void Swap(label_info* other);

  // implements Message ----------------------------------------------

  label_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_info& from);
  void MergeFrom(const label_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 label_code = 1;
  inline bool has_label_code() const;
  inline void clear_label_code();
  static const int kLabelCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 label_code() const;
  inline void set_label_code(::google::protobuf::uint32 value);

  // required uint32 use_state = 2;
  inline bool has_use_state() const;
  inline void clear_use_state();
  static const int kUseStateFieldNumber = 2;
  inline ::google::protobuf::uint32 use_state() const;
  inline void set_use_state(::google::protobuf::uint32 value);

  // required uint32 effective_state = 3;
  inline bool has_effective_state() const;
  inline void clear_effective_state();
  static const int kEffectiveStateFieldNumber = 3;
  inline ::google::protobuf::uint32 effective_state() const;
  inline void set_effective_state(::google::protobuf::uint32 value);

  // required uint32 end_date = 4;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 4;
  inline ::google::protobuf::uint32 end_date() const;
  inline void set_end_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.label_info)
 private:
  inline void set_has_label_code();
  inline void clear_has_label_code();
  inline void set_has_use_state();
  inline void clear_has_use_state();
  inline void set_has_effective_state();
  inline void clear_has_effective_state();
  inline void set_has_end_date();
  inline void clear_has_end_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 label_code_;
  ::google::protobuf::uint32 use_state_;
  ::google::protobuf::uint32 effective_state_;
  ::google::protobuf::uint32 end_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static label_info* default_instance_;
};
// -------------------------------------------------------------------

class label_list_rsp : public ::google::protobuf::Message {
 public:
  label_list_rsp();
  virtual ~label_list_rsp();

  label_list_rsp(const label_list_rsp& from);

  inline label_list_rsp& operator=(const label_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_list_rsp& default_instance();

  void Swap(label_list_rsp* other);

  // implements Message ----------------------------------------------

  label_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_list_rsp& from);
  void MergeFrom(const label_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.label_info li = 1;
  inline int li_size() const;
  inline void clear_li();
  static const int kLiFieldNumber = 1;
  inline const ::client::label_info& li(int index) const;
  inline ::client::label_info* mutable_li(int index);
  inline ::client::label_info* add_li();
  inline const ::google::protobuf::RepeatedPtrField< ::client::label_info >&
      li() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::label_info >*
      mutable_li();

  // @@protoc_insertion_point(class_scope:client.label_list_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::label_info > li_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static label_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class operate_label_req : public ::google::protobuf::Message {
 public:
  operate_label_req();
  virtual ~operate_label_req();

  operate_label_req(const operate_label_req& from);

  inline operate_label_req& operator=(const operate_label_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operate_label_req& default_instance();

  void Swap(operate_label_req* other);

  // implements Message ----------------------------------------------

  operate_label_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operate_label_req& from);
  void MergeFrom(const operate_label_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef operate_label_req_OPERATE_TYPE OPERATE_TYPE;
  static const OPERATE_TYPE ADD = operate_label_req_OPERATE_TYPE_ADD;
  static const OPERATE_TYPE REMOVE = operate_label_req_OPERATE_TYPE_REMOVE;
  static const OPERATE_TYPE REPLACE = operate_label_req_OPERATE_TYPE_REPLACE;
  static inline bool OPERATE_TYPE_IsValid(int value) {
    return operate_label_req_OPERATE_TYPE_IsValid(value);
  }
  static const OPERATE_TYPE OPERATE_TYPE_MIN =
    operate_label_req_OPERATE_TYPE_OPERATE_TYPE_MIN;
  static const OPERATE_TYPE OPERATE_TYPE_MAX =
    operate_label_req_OPERATE_TYPE_OPERATE_TYPE_MAX;
  static const int OPERATE_TYPE_ARRAYSIZE =
    operate_label_req_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_TYPE_descriptor() {
    return operate_label_req_OPERATE_TYPE_descriptor();
  }
  static inline const ::std::string& OPERATE_TYPE_Name(OPERATE_TYPE value) {
    return operate_label_req_OPERATE_TYPE_Name(value);
  }
  static inline bool OPERATE_TYPE_Parse(const ::std::string& name,
      OPERATE_TYPE* value) {
    return operate_label_req_OPERATE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 label_code = 1;
  inline bool has_label_code() const;
  inline void clear_label_code();
  static const int kLabelCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 label_code() const;
  inline void set_label_code(::google::protobuf::uint32 value);

  // required .client.operate_label_req.OPERATE_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::client::operate_label_req_OPERATE_TYPE type() const;
  inline void set_type(::client::operate_label_req_OPERATE_TYPE value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.operate_label_req)
 private:
  inline void set_has_label_code();
  inline void clear_has_label_code();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 label_code_;
  int type_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static operate_label_req* default_instance_;
};
// -------------------------------------------------------------------

class operate_label_rsp : public ::google::protobuf::Message {
 public:
  operate_label_rsp();
  virtual ~operate_label_rsp();

  operate_label_rsp(const operate_label_rsp& from);

  inline operate_label_rsp& operator=(const operate_label_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operate_label_rsp& default_instance();

  void Swap(operate_label_rsp* other);

  // implements Message ----------------------------------------------

  operate_label_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operate_label_rsp& from);
  void MergeFrom(const operate_label_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef operate_label_rsp_OPERATE_TYPE OPERATE_TYPE;
  static const OPERATE_TYPE ADD = operate_label_rsp_OPERATE_TYPE_ADD;
  static const OPERATE_TYPE REMOVE = operate_label_rsp_OPERATE_TYPE_REMOVE;
  static const OPERATE_TYPE REPLACE = operate_label_rsp_OPERATE_TYPE_REPLACE;
  static inline bool OPERATE_TYPE_IsValid(int value) {
    return operate_label_rsp_OPERATE_TYPE_IsValid(value);
  }
  static const OPERATE_TYPE OPERATE_TYPE_MIN =
    operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_MIN;
  static const OPERATE_TYPE OPERATE_TYPE_MAX =
    operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_MAX;
  static const int OPERATE_TYPE_ARRAYSIZE =
    operate_label_rsp_OPERATE_TYPE_OPERATE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_TYPE_descriptor() {
    return operate_label_rsp_OPERATE_TYPE_descriptor();
  }
  static inline const ::std::string& OPERATE_TYPE_Name(OPERATE_TYPE value) {
    return operate_label_rsp_OPERATE_TYPE_Name(value);
  }
  static inline bool OPERATE_TYPE_Parse(const ::std::string& name,
      OPERATE_TYPE* value) {
    return operate_label_rsp_OPERATE_TYPE_Parse(name, value);
  }

  typedef operate_label_rsp_OPERATE_RESULT OPERATE_RESULT;
  static const OPERATE_RESULT SUCCESS = operate_label_rsp_OPERATE_RESULT_SUCCESS;
  static const OPERATE_RESULT FAILURE = operate_label_rsp_OPERATE_RESULT_FAILURE;
  static inline bool OPERATE_RESULT_IsValid(int value) {
    return operate_label_rsp_OPERATE_RESULT_IsValid(value);
  }
  static const OPERATE_RESULT OPERATE_RESULT_MIN =
    operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_MIN;
  static const OPERATE_RESULT OPERATE_RESULT_MAX =
    operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_MAX;
  static const int OPERATE_RESULT_ARRAYSIZE =
    operate_label_rsp_OPERATE_RESULT_OPERATE_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPERATE_RESULT_descriptor() {
    return operate_label_rsp_OPERATE_RESULT_descriptor();
  }
  static inline const ::std::string& OPERATE_RESULT_Name(OPERATE_RESULT value) {
    return operate_label_rsp_OPERATE_RESULT_Name(value);
  }
  static inline bool OPERATE_RESULT_Parse(const ::std::string& name,
      OPERATE_RESULT* value) {
    return operate_label_rsp_OPERATE_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 lobel_code = 1;
  inline bool has_lobel_code() const;
  inline void clear_lobel_code();
  static const int kLobelCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 lobel_code() const;
  inline void set_lobel_code(::google::protobuf::uint32 value);

  // required .client.operate_label_rsp.OPERATE_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::client::operate_label_rsp_OPERATE_TYPE type() const;
  inline void set_type(::client::operate_label_rsp_OPERATE_TYPE value);

  // required .client.operate_label_rsp.OPERATE_RESULT result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::client::operate_label_rsp_OPERATE_RESULT result() const;
  inline void set_result(::client::operate_label_rsp_OPERATE_RESULT value);

  // @@protoc_insertion_point(class_scope:client.operate_label_rsp)
 private:
  inline void set_has_lobel_code();
  inline void clear_has_lobel_code();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lobel_code_;
  int type_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static operate_label_rsp* default_instance_;
};
// -------------------------------------------------------------------

class get_role_label_info_req : public ::google::protobuf::Message {
 public:
  get_role_label_info_req();
  virtual ~get_role_label_info_req();

  get_role_label_info_req(const get_role_label_info_req& from);

  inline get_role_label_info_req& operator=(const get_role_label_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_label_info_req& default_instance();

  void Swap(get_role_label_info_req* other);

  // implements Message ----------------------------------------------

  get_role_label_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_label_info_req& from);
  void MergeFrom(const get_role_label_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.get_role_label_info_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static get_role_label_info_req* default_instance_;
};
// -------------------------------------------------------------------

class get_role_label_info_rsp : public ::google::protobuf::Message {
 public:
  get_role_label_info_rsp();
  virtual ~get_role_label_info_rsp();

  get_role_label_info_rsp(const get_role_label_info_rsp& from);

  inline get_role_label_info_rsp& operator=(const get_role_label_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_label_info_rsp& default_instance();

  void Swap(get_role_label_info_rsp* other);

  // implements Message ----------------------------------------------

  get_role_label_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_label_info_rsp& from);
  void MergeFrom(const get_role_label_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // repeated .client.label_info li = 2;
  inline int li_size() const;
  inline void clear_li();
  static const int kLiFieldNumber = 2;
  inline const ::client::label_info& li(int index) const;
  inline ::client::label_info* mutable_li(int index);
  inline ::client::label_info* add_li();
  inline const ::google::protobuf::RepeatedPtrField< ::client::label_info >&
      li() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::label_info >*
      mutable_li();

  // @@protoc_insertion_point(class_scope:client.get_role_label_info_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::label_info > li_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static get_role_label_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class honor_label_list_req : public ::google::protobuf::Message {
 public:
  honor_label_list_req();
  virtual ~honor_label_list_req();

  honor_label_list_req(const honor_label_list_req& from);

  inline honor_label_list_req& operator=(const honor_label_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const honor_label_list_req& default_instance();

  void Swap(honor_label_list_req* other);

  // implements Message ----------------------------------------------

  honor_label_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const honor_label_list_req& from);
  void MergeFrom(const honor_label_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.honor_label_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static honor_label_list_req* default_instance_;
};
// -------------------------------------------------------------------

class honor_label_info : public ::google::protobuf::Message {
 public:
  honor_label_info();
  virtual ~honor_label_info();

  honor_label_info(const honor_label_info& from);

  inline honor_label_info& operator=(const honor_label_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const honor_label_info& default_instance();

  void Swap(honor_label_info* other);

  // implements Message ----------------------------------------------

  honor_label_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const honor_label_info& from);
  void MergeFrom(const honor_label_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 label_code = 1;
  inline bool has_label_code() const;
  inline void clear_label_code();
  static const int kLabelCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 label_code() const;
  inline void set_label_code(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.honor_label_info)
 private:
  inline void set_has_label_code();
  inline void clear_has_label_code();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 label_code_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static honor_label_info* default_instance_;
};
// -------------------------------------------------------------------

class honor_label_list_rsp : public ::google::protobuf::Message {
 public:
  honor_label_list_rsp();
  virtual ~honor_label_list_rsp();

  honor_label_list_rsp(const honor_label_list_rsp& from);

  inline honor_label_list_rsp& operator=(const honor_label_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const honor_label_list_rsp& default_instance();

  void Swap(honor_label_list_rsp* other);

  // implements Message ----------------------------------------------

  honor_label_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const honor_label_list_rsp& from);
  void MergeFrom(const honor_label_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.honor_label_info li = 1;
  inline int li_size() const;
  inline void clear_li();
  static const int kLiFieldNumber = 1;
  inline const ::client::honor_label_info& li(int index) const;
  inline ::client::honor_label_info* mutable_li(int index);
  inline ::client::honor_label_info* add_li();
  inline const ::google::protobuf::RepeatedPtrField< ::client::honor_label_info >&
      li() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::honor_label_info >*
      mutable_li();

  // @@protoc_insertion_point(class_scope:client.honor_label_list_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::honor_label_info > li_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static honor_label_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class set_role_label : public ::google::protobuf::Message {
 public:
  set_role_label();
  virtual ~set_role_label();

  set_role_label(const set_role_label& from);

  inline set_role_label& operator=(const set_role_label& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_role_label& default_instance();

  void Swap(set_role_label* other);

  // implements Message ----------------------------------------------

  set_role_label* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_role_label& from);
  void MergeFrom(const set_role_label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 label_code = 3;
  inline bool has_label_code() const;
  inline void clear_label_code();
  static const int kLabelCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 label_code() const;
  inline void set_label_code(::google::protobuf::uint32 value);

  // required uint32 end_date = 4;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 4;
  inline ::google::protobuf::uint32 end_date() const;
  inline void set_end_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_role_label)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_label_code();
  inline void clear_has_label_code();
  inline void set_has_end_date();
  inline void clear_has_end_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 label_code_;
  ::google::protobuf::uint32 end_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static set_role_label* default_instance_;
};
// -------------------------------------------------------------------

class use_honor_label : public ::google::protobuf::Message {
 public:
  use_honor_label();
  virtual ~use_honor_label();

  use_honor_label(const use_honor_label& from);

  inline use_honor_label& operator=(const use_honor_label& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_honor_label& default_instance();

  void Swap(use_honor_label* other);

  // implements Message ----------------------------------------------

  use_honor_label* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_honor_label& from);
  void MergeFrom(const use_honor_label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 label_code = 2;
  inline bool has_label_code() const;
  inline void clear_label_code();
  static const int kLabelCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 label_code() const;
  inline void set_label_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.use_honor_label)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_label_code();
  inline void clear_has_label_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 label_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static use_honor_label* default_instance_;
};
// -------------------------------------------------------------------

class use_honor_label_ret : public ::google::protobuf::Message {
 public:
  use_honor_label_ret();
  virtual ~use_honor_label_ret();

  use_honor_label_ret(const use_honor_label_ret& from);

  inline use_honor_label_ret& operator=(const use_honor_label_ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_honor_label_ret& default_instance();

  void Swap(use_honor_label_ret* other);

  // implements Message ----------------------------------------------

  use_honor_label_ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_honor_label_ret& from);
  void MergeFrom(const use_honor_label_ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.use_honor_label_ret)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5flabel_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5flabel_2eproto();

  void InitAsDefaultInstance();
  static use_honor_label_ret* default_instance_;
};
// ===================================================================


// ===================================================================

// label_list_req

// required uint32 unixtime = 1;
inline bool label_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 label_list_req::unixtime() const {
  return unixtime_;
}
inline void label_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool label_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& label_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* label_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* label_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void label_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// label_info

// required uint32 label_code = 1;
inline bool label_info::has_label_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_info::set_has_label_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_info::clear_has_label_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_info::clear_label_code() {
  label_code_ = 0u;
  clear_has_label_code();
}
inline ::google::protobuf::uint32 label_info::label_code() const {
  return label_code_;
}
inline void label_info::set_label_code(::google::protobuf::uint32 value) {
  set_has_label_code();
  label_code_ = value;
}

// required uint32 use_state = 2;
inline bool label_info::has_use_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_info::set_has_use_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_info::clear_has_use_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_info::clear_use_state() {
  use_state_ = 0u;
  clear_has_use_state();
}
inline ::google::protobuf::uint32 label_info::use_state() const {
  return use_state_;
}
inline void label_info::set_use_state(::google::protobuf::uint32 value) {
  set_has_use_state();
  use_state_ = value;
}

// required uint32 effective_state = 3;
inline bool label_info::has_effective_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_info::set_has_effective_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_info::clear_has_effective_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_info::clear_effective_state() {
  effective_state_ = 0u;
  clear_has_effective_state();
}
inline ::google::protobuf::uint32 label_info::effective_state() const {
  return effective_state_;
}
inline void label_info::set_effective_state(::google::protobuf::uint32 value) {
  set_has_effective_state();
  effective_state_ = value;
}

// required uint32 end_date = 4;
inline bool label_info::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label_info::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label_info::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label_info::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 label_info::end_date() const {
  return end_date_;
}
inline void label_info::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
}

// -------------------------------------------------------------------

// label_list_rsp

// repeated .client.label_info li = 1;
inline int label_list_rsp::li_size() const {
  return li_.size();
}
inline void label_list_rsp::clear_li() {
  li_.Clear();
}
inline const ::client::label_info& label_list_rsp::li(int index) const {
  return li_.Get(index);
}
inline ::client::label_info* label_list_rsp::mutable_li(int index) {
  return li_.Mutable(index);
}
inline ::client::label_info* label_list_rsp::add_li() {
  return li_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::label_info >&
label_list_rsp::li() const {
  return li_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::label_info >*
label_list_rsp::mutable_li() {
  return &li_;
}

// -------------------------------------------------------------------

// operate_label_req

// required uint32 label_code = 1;
inline bool operate_label_req::has_label_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operate_label_req::set_has_label_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operate_label_req::clear_has_label_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operate_label_req::clear_label_code() {
  label_code_ = 0u;
  clear_has_label_code();
}
inline ::google::protobuf::uint32 operate_label_req::label_code() const {
  return label_code_;
}
inline void operate_label_req::set_label_code(::google::protobuf::uint32 value) {
  set_has_label_code();
  label_code_ = value;
}

// required .client.operate_label_req.OPERATE_TYPE type = 2;
inline bool operate_label_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operate_label_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operate_label_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operate_label_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::operate_label_req_OPERATE_TYPE operate_label_req::type() const {
  return static_cast< ::client::operate_label_req_OPERATE_TYPE >(type_);
}
inline void operate_label_req::set_type(::client::operate_label_req_OPERATE_TYPE value) {
  assert(::client::operate_label_req_OPERATE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool operate_label_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operate_label_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operate_label_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operate_label_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& operate_label_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* operate_label_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* operate_label_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void operate_label_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// operate_label_rsp

// required uint32 lobel_code = 1;
inline bool operate_label_rsp::has_lobel_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operate_label_rsp::set_has_lobel_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operate_label_rsp::clear_has_lobel_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operate_label_rsp::clear_lobel_code() {
  lobel_code_ = 0u;
  clear_has_lobel_code();
}
inline ::google::protobuf::uint32 operate_label_rsp::lobel_code() const {
  return lobel_code_;
}
inline void operate_label_rsp::set_lobel_code(::google::protobuf::uint32 value) {
  set_has_lobel_code();
  lobel_code_ = value;
}

// required .client.operate_label_rsp.OPERATE_TYPE type = 2;
inline bool operate_label_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operate_label_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operate_label_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operate_label_rsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::operate_label_rsp_OPERATE_TYPE operate_label_rsp::type() const {
  return static_cast< ::client::operate_label_rsp_OPERATE_TYPE >(type_);
}
inline void operate_label_rsp::set_type(::client::operate_label_rsp_OPERATE_TYPE value) {
  assert(::client::operate_label_rsp_OPERATE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .client.operate_label_rsp.OPERATE_RESULT result = 3;
inline bool operate_label_rsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operate_label_rsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operate_label_rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operate_label_rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::client::operate_label_rsp_OPERATE_RESULT operate_label_rsp::result() const {
  return static_cast< ::client::operate_label_rsp_OPERATE_RESULT >(result_);
}
inline void operate_label_rsp::set_result(::client::operate_label_rsp_OPERATE_RESULT value) {
  assert(::client::operate_label_rsp_OPERATE_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// get_role_label_info_req

// repeated uint32 role_id = 1;
inline int get_role_label_info_req::role_id_size() const {
  return role_id_.size();
}
inline void get_role_label_info_req::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 get_role_label_info_req::role_id(int index) const {
  return role_id_.Get(index);
}
inline void get_role_label_info_req::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void get_role_label_info_req::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
get_role_label_info_req::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
get_role_label_info_req::mutable_role_id() {
  return &role_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool get_role_label_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_role_label_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_role_label_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_role_label_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& get_role_label_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* get_role_label_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* get_role_label_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void get_role_label_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// get_role_label_info_rsp

// required uint32 role_id = 1;
inline bool get_role_label_info_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_role_label_info_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_role_label_info_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_role_label_info_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 get_role_label_info_rsp::role_id() const {
  return role_id_;
}
inline void get_role_label_info_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .client.label_info li = 2;
inline int get_role_label_info_rsp::li_size() const {
  return li_.size();
}
inline void get_role_label_info_rsp::clear_li() {
  li_.Clear();
}
inline const ::client::label_info& get_role_label_info_rsp::li(int index) const {
  return li_.Get(index);
}
inline ::client::label_info* get_role_label_info_rsp::mutable_li(int index) {
  return li_.Mutable(index);
}
inline ::client::label_info* get_role_label_info_rsp::add_li() {
  return li_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::label_info >&
get_role_label_info_rsp::li() const {
  return li_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::label_info >*
get_role_label_info_rsp::mutable_li() {
  return &li_;
}

// -------------------------------------------------------------------

// honor_label_list_req

// required uint32 unixtime = 1;
inline bool honor_label_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void honor_label_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void honor_label_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void honor_label_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 honor_label_list_req::unixtime() const {
  return unixtime_;
}
inline void honor_label_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool honor_label_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void honor_label_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void honor_label_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void honor_label_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& honor_label_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* honor_label_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* honor_label_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void honor_label_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// honor_label_info

// required uint32 label_code = 1;
inline bool honor_label_info::has_label_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void honor_label_info::set_has_label_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void honor_label_info::clear_has_label_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void honor_label_info::clear_label_code() {
  label_code_ = 0u;
  clear_has_label_code();
}
inline ::google::protobuf::uint32 honor_label_info::label_code() const {
  return label_code_;
}
inline void honor_label_info::set_label_code(::google::protobuf::uint32 value) {
  set_has_label_code();
  label_code_ = value;
}

// required uint32 role_id = 2;
inline bool honor_label_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void honor_label_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void honor_label_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void honor_label_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 honor_label_info::role_id() const {
  return role_id_;
}
inline void honor_label_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// honor_label_list_rsp

// repeated .client.honor_label_info li = 1;
inline int honor_label_list_rsp::li_size() const {
  return li_.size();
}
inline void honor_label_list_rsp::clear_li() {
  li_.Clear();
}
inline const ::client::honor_label_info& honor_label_list_rsp::li(int index) const {
  return li_.Get(index);
}
inline ::client::honor_label_info* honor_label_list_rsp::mutable_li(int index) {
  return li_.Mutable(index);
}
inline ::client::honor_label_info* honor_label_list_rsp::add_li() {
  return li_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::honor_label_info >&
honor_label_list_rsp::li() const {
  return li_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::honor_label_info >*
honor_label_list_rsp::mutable_li() {
  return &li_;
}

// -------------------------------------------------------------------

// set_role_label

// required uint32 type = 1;
inline bool set_role_label::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_role_label::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_role_label::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_role_label::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 set_role_label::type() const {
  return type_;
}
inline void set_role_label::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 role_id = 2;
inline bool set_role_label::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_role_label::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_role_label::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_role_label::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 set_role_label::role_id() const {
  return role_id_;
}
inline void set_role_label::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 label_code = 3;
inline bool set_role_label::has_label_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void set_role_label::set_has_label_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void set_role_label::clear_has_label_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void set_role_label::clear_label_code() {
  label_code_ = 0u;
  clear_has_label_code();
}
inline ::google::protobuf::uint32 set_role_label::label_code() const {
  return label_code_;
}
inline void set_role_label::set_label_code(::google::protobuf::uint32 value) {
  set_has_label_code();
  label_code_ = value;
}

// required uint32 end_date = 4;
inline bool set_role_label::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void set_role_label::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void set_role_label::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void set_role_label::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 set_role_label::end_date() const {
  return end_date_;
}
inline void set_role_label::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
}

// -------------------------------------------------------------------

// use_honor_label

// required uint32 role_id = 1;
inline bool use_honor_label::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_honor_label::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_honor_label::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_honor_label::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 use_honor_label::role_id() const {
  return role_id_;
}
inline void use_honor_label::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 label_code = 2;
inline bool use_honor_label::has_label_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void use_honor_label::set_has_label_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void use_honor_label::clear_has_label_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void use_honor_label::clear_label_code() {
  label_code_ = 0u;
  clear_has_label_code();
}
inline ::google::protobuf::uint32 use_honor_label::label_code() const {
  return label_code_;
}
inline void use_honor_label::set_label_code(::google::protobuf::uint32 value) {
  set_has_label_code();
  label_code_ = value;
}

// -------------------------------------------------------------------

// use_honor_label_ret

// required uint32 role_id = 1;
inline bool use_honor_label_ret::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_honor_label_ret::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_honor_label_ret::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_honor_label_ret::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 use_honor_label_ret::role_id() const {
  return role_id_;
}
inline void use_honor_label_ret::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 ret = 2;
inline bool use_honor_label_ret::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void use_honor_label_ret::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void use_honor_label_ret::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void use_honor_label_ret::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 use_honor_label_ret::ret() const {
  return ret_;
}
inline void use_honor_label_ret::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::operate_label_req_OPERATE_TYPE>() {
  return ::client::operate_label_req_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::operate_label_rsp_OPERATE_TYPE>() {
  return ::client::operate_label_rsp_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::operate_label_rsp_OPERATE_RESULT>() {
  return ::client::operate_label_rsp_OPERATE_RESULT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5flabel_2eproto__INCLUDED
