// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.world_boss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.world_boss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* boss_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boss_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* boss_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boss_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* boss_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boss_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* boss_refresh_msg_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boss_refresh_msg_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* boss_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boss_status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eworld_5fboss_2eproto() {
  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.world_boss.proto");
  GOOGLE_CHECK(file != NULL);
  boss_refresh_req_descriptor_ = file->message_type(0);
  static const int boss_refresh_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_req, time_),
  };
  boss_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boss_refresh_req_descriptor_,
      boss_refresh_req::default_instance_,
      boss_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boss_refresh_req));
  boss_info_req_descriptor_ = file->message_type(1);
  static const int boss_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_req, bs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_req, svr_head_),
  };
  boss_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boss_info_req_descriptor_,
      boss_info_req::default_instance_,
      boss_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boss_info_req));
  boss_info_rsp_descriptor_ = file->message_type(2);
  static const int boss_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_rsp, timelong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_rsp, bs_),
  };
  boss_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boss_info_rsp_descriptor_,
      boss_info_rsp::default_instance_,
      boss_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boss_info_rsp));
  boss_refresh_msg_rsp_descriptor_ = file->message_type(3);
  static const int boss_refresh_msg_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_msg_rsp, time_),
  };
  boss_refresh_msg_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boss_refresh_msg_rsp_descriptor_,
      boss_refresh_msg_rsp::default_instance_,
      boss_refresh_msg_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_msg_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_refresh_msg_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boss_refresh_msg_rsp));
  boss_status_descriptor_ = file->message_type(4);
  static const int boss_status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_status, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_status, status_),
  };
  boss_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boss_status_descriptor_,
      boss_status::default_instance_,
      boss_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boss_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boss_status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eworld_5fboss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boss_refresh_req_descriptor_, &boss_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boss_info_req_descriptor_, &boss_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boss_info_rsp_descriptor_, &boss_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boss_refresh_msg_rsp_descriptor_, &boss_refresh_msg_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boss_status_descriptor_, &boss_status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto() {
  delete boss_refresh_req::default_instance_;
  delete boss_refresh_req_reflection_;
  delete boss_info_req::default_instance_;
  delete boss_info_req_reflection_;
  delete boss_info_rsp::default_instance_;
  delete boss_info_rsp_reflection_;
  delete boss_refresh_msg_rsp::default_instance_;
  delete boss_refresh_msg_rsp_reflection_;
  delete boss_status::default_instance_;
  delete boss_status_reflection_;
}

void protobuf_AddDesc_client_2eworld_5fboss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.world_boss.proto\022\006client\032\021clien"
    "t.comm.proto\" \n\020boss_refresh_req\022\014\n\004time"
    "\030\001 \002(\r\"f\n\rboss_info_req\022\014\n\004time\030\001 \002(\r\022\037\n"
    "\002bs\030\002 \003(\0132\023.client.boss_status\022&\n\010svr_he"
    "ad\030\350\007 \001(\0132\023.client.server_head\"B\n\rboss_i"
    "nfo_rsp\022\020\n\010timelong\030\001 \002(\r\022\037\n\002bs\030\002 \003(\0132\023."
    "client.boss_status\"$\n\024boss_refresh_msg_r"
    "sp\022\014\n\004time\030\001 \002(\r\".\n\013boss_status\022\017\n\007raid_"
    "id\030\001 \002(\r\022\016\n\006status\030\002 \001(\r", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.world_boss.proto", &protobuf_RegisterTypes);
  boss_refresh_req::default_instance_ = new boss_refresh_req();
  boss_info_req::default_instance_ = new boss_info_req();
  boss_info_rsp::default_instance_ = new boss_info_rsp();
  boss_refresh_msg_rsp::default_instance_ = new boss_refresh_msg_rsp();
  boss_status::default_instance_ = new boss_status();
  boss_refresh_req::default_instance_->InitAsDefaultInstance();
  boss_info_req::default_instance_->InitAsDefaultInstance();
  boss_info_rsp::default_instance_->InitAsDefaultInstance();
  boss_refresh_msg_rsp::default_instance_->InitAsDefaultInstance();
  boss_status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eworld_5fboss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eworld_5fboss_2eproto {
  StaticDescriptorInitializer_client_2eworld_5fboss_2eproto() {
    protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  }
} static_descriptor_initializer_client_2eworld_5fboss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int boss_refresh_req::kTimeFieldNumber;
#endif  // !_MSC_VER

boss_refresh_req::boss_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boss_refresh_req::InitAsDefaultInstance() {
}

boss_refresh_req::boss_refresh_req(const boss_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boss_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boss_refresh_req::~boss_refresh_req() {
  SharedDtor();
}

void boss_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void boss_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boss_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boss_refresh_req_descriptor_;
}

const boss_refresh_req& boss_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  return *default_instance_;
}

boss_refresh_req* boss_refresh_req::default_instance_ = NULL;

boss_refresh_req* boss_refresh_req::New() const {
  return new boss_refresh_req;
}

void boss_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boss_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boss_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boss_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boss_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boss_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boss_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boss_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boss_refresh_req::MergeFrom(const boss_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boss_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_refresh_req::CopyFrom(const boss_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_refresh_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void boss_refresh_req::Swap(boss_refresh_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boss_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boss_refresh_req_descriptor_;
  metadata.reflection = boss_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boss_info_req::kTimeFieldNumber;
const int boss_info_req::kBsFieldNumber;
const int boss_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

boss_info_req::boss_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boss_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

boss_info_req::boss_info_req(const boss_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boss_info_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boss_info_req::~boss_info_req() {
  SharedDtor();
}

void boss_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void boss_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boss_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boss_info_req_descriptor_;
}

const boss_info_req& boss_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  return *default_instance_;
}

boss_info_req* boss_info_req::default_instance_ = NULL;

boss_info_req* boss_info_req::New() const {
  return new boss_info_req;
}

void boss_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  bs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boss_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bs;
        break;
      }

      // repeated .client.boss_status bs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bs;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boss_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // repeated .client.boss_status bs = 2;
  for (int i = 0; i < this->bs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bs(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boss_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // repeated .client.boss_status bs = 2;
  for (int i = 0; i < this->bs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bs(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boss_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.boss_status bs = 2;
  total_size += 1 * this->bs_size();
  for (int i = 0; i < this->bs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boss_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boss_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boss_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boss_info_req::MergeFrom(const boss_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  bs_.MergeFrom(from.bs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boss_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_info_req::CopyFrom(const boss_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bs_size(); i++) {
    if (!this->bs(i).IsInitialized()) return false;
  }
  return true;
}

void boss_info_req::Swap(boss_info_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    bs_.Swap(&other->bs_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boss_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boss_info_req_descriptor_;
  metadata.reflection = boss_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boss_info_rsp::kTimelongFieldNumber;
const int boss_info_rsp::kBsFieldNumber;
#endif  // !_MSC_VER

boss_info_rsp::boss_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boss_info_rsp::InitAsDefaultInstance() {
}

boss_info_rsp::boss_info_rsp(const boss_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boss_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  timelong_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boss_info_rsp::~boss_info_rsp() {
  SharedDtor();
}

void boss_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void boss_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boss_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boss_info_rsp_descriptor_;
}

const boss_info_rsp& boss_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  return *default_instance_;
}

boss_info_rsp* boss_info_rsp::default_instance_ = NULL;

boss_info_rsp* boss_info_rsp::New() const {
  return new boss_info_rsp;
}

void boss_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timelong_ = 0u;
  }
  bs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boss_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timelong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelong_)));
          set_has_timelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bs;
        break;
      }

      // repeated .client.boss_status bs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boss_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timelong = 1;
  if (has_timelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timelong(), output);
  }

  // repeated .client.boss_status bs = 2;
  for (int i = 0; i < this->bs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boss_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timelong = 1;
  if (has_timelong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timelong(), target);
  }

  // repeated .client.boss_status bs = 2;
  for (int i = 0; i < this->bs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boss_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timelong = 1;
    if (has_timelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelong());
    }

  }
  // repeated .client.boss_status bs = 2;
  total_size += 1 * this->bs_size();
  for (int i = 0; i < this->bs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boss_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boss_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boss_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boss_info_rsp::MergeFrom(const boss_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bs_.MergeFrom(from.bs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timelong()) {
      set_timelong(from.timelong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boss_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_info_rsp::CopyFrom(const boss_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bs_size(); i++) {
    if (!this->bs(i).IsInitialized()) return false;
  }
  return true;
}

void boss_info_rsp::Swap(boss_info_rsp* other) {
  if (other != this) {
    std::swap(timelong_, other->timelong_);
    bs_.Swap(&other->bs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boss_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boss_info_rsp_descriptor_;
  metadata.reflection = boss_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boss_refresh_msg_rsp::kTimeFieldNumber;
#endif  // !_MSC_VER

boss_refresh_msg_rsp::boss_refresh_msg_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boss_refresh_msg_rsp::InitAsDefaultInstance() {
}

boss_refresh_msg_rsp::boss_refresh_msg_rsp(const boss_refresh_msg_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boss_refresh_msg_rsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boss_refresh_msg_rsp::~boss_refresh_msg_rsp() {
  SharedDtor();
}

void boss_refresh_msg_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void boss_refresh_msg_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boss_refresh_msg_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boss_refresh_msg_rsp_descriptor_;
}

const boss_refresh_msg_rsp& boss_refresh_msg_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  return *default_instance_;
}

boss_refresh_msg_rsp* boss_refresh_msg_rsp::default_instance_ = NULL;

boss_refresh_msg_rsp* boss_refresh_msg_rsp::New() const {
  return new boss_refresh_msg_rsp;
}

void boss_refresh_msg_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boss_refresh_msg_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boss_refresh_msg_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boss_refresh_msg_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boss_refresh_msg_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boss_refresh_msg_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boss_refresh_msg_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boss_refresh_msg_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boss_refresh_msg_rsp::MergeFrom(const boss_refresh_msg_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boss_refresh_msg_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_refresh_msg_rsp::CopyFrom(const boss_refresh_msg_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_refresh_msg_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void boss_refresh_msg_rsp::Swap(boss_refresh_msg_rsp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boss_refresh_msg_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boss_refresh_msg_rsp_descriptor_;
  metadata.reflection = boss_refresh_msg_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boss_status::kRaidIdFieldNumber;
const int boss_status::kStatusFieldNumber;
#endif  // !_MSC_VER

boss_status::boss_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boss_status::InitAsDefaultInstance() {
}

boss_status::boss_status(const boss_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boss_status::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boss_status::~boss_status() {
  SharedDtor();
}

void boss_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void boss_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boss_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boss_status_descriptor_;
}

const boss_status& boss_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  return *default_instance_;
}

boss_status* boss_status::default_instance_ = NULL;

boss_status* boss_status::New() const {
  return new boss_status;
}

void boss_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boss_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boss_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boss_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boss_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boss_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boss_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boss_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boss_status::MergeFrom(const boss_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boss_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_status::CopyFrom(const boss_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void boss_status::Swap(boss_status* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boss_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boss_status_descriptor_;
  metadata.reflection = boss_status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
