// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* query_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_smy_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_smy_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_smy_role_lvl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_smy_role_lvl_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_smy_role_fight_power_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_smy_role_fight_power_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_smy_mount_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_smy_mount_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_smy_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_smy_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mount_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mount_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* potential_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  potential_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_query_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_query_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_to_center_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_to_center_query_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CLIENT_QUERY_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UPDATE_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPEN_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2equery_2eproto() {
  protobuf_AddDesc_client_2equery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.query.proto");
  GOOGLE_CHECK(file != NULL);
  query_req_descriptor_ = file->message_type(0);
  static const int query_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, role_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, opt_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, svr_head_),
  };
  query_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_req_descriptor_,
      query_req::default_instance_,
      query_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_req));
  role_smy_info_descriptor_ = file->message_type(1);
  static const int role_smy_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, family_postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, mount_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, armor_id_),
  };
  role_smy_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_smy_info_descriptor_,
      role_smy_info::default_instance_,
      role_smy_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_smy_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_smy_info));
  update_smy_role_lvl_descriptor_ = file->message_type(2);
  static const int update_smy_role_lvl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_lvl, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_lvl, level_),
  };
  update_smy_role_lvl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_smy_role_lvl_descriptor_,
      update_smy_role_lvl::default_instance_,
      update_smy_role_lvl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_lvl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_lvl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_smy_role_lvl));
  update_smy_role_fight_power_descriptor_ = file->message_type(3);
  static const int update_smy_role_fight_power_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_fight_power, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_fight_power, fight_power_),
  };
  update_smy_role_fight_power_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_smy_role_fight_power_descriptor_,
      update_smy_role_fight_power::default_instance_,
      update_smy_role_fight_power_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_fight_power, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_role_fight_power, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_smy_role_fight_power));
  update_smy_mount_data_descriptor_ = file->message_type(4);
  static const int update_smy_mount_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_mount_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_mount_data, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_mount_data, mount_power_),
  };
  update_smy_mount_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_smy_mount_data_descriptor_,
      update_smy_mount_data::default_instance_,
      update_smy_mount_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_mount_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_mount_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_smy_mount_data));
  update_smy_info_descriptor_ = file->message_type(5);
  static const int update_smy_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, val1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, val2_),
  };
  update_smy_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_smy_info_descriptor_,
      update_smy_info::default_instance_,
      update_smy_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_smy_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_smy_info));
  role_query_info_descriptor_ = file->message_type(6);
  static const int role_query_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, family_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, equip_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, open_type_),
  };
  role_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_query_info_descriptor_,
      role_query_info::default_instance_,
      role_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_query_info));
  mount_query_info_descriptor_ = file->message_type(7);
  static const int mount_query_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mount_query_info, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mount_query_info, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mount_query_info, mount_power_),
  };
  mount_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mount_query_info_descriptor_,
      mount_query_info::default_instance_,
      mount_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mount_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mount_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mount_query_info));
  pet_query_info_descriptor_ = file->message_type(8);
  static const int pet_query_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, pet_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, magic_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, equip_info_),
  };
  pet_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_query_info_descriptor_,
      pet_query_info::default_instance_,
      pet_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_query_info));
  potential_query_info_descriptor_ = file->message_type(9);
  static const int potential_query_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_query_info, point_info_),
  };
  potential_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      potential_query_info_descriptor_,
      potential_query_info::default_instance_,
      potential_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(potential_query_info));
  bows_query_info_descriptor_ = file->message_type(10);
  static const int bows_query_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_query_info, bow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_query_info, bow_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_query_info, bow_power_),
  };
  bows_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_query_info_descriptor_,
      bows_query_info::default_instance_,
      bows_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_query_info));
  gem_query_info_descriptor_ = file->message_type(11);
  static const int gem_query_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_query_info, total_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_query_info, power_),
  };
  gem_query_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_query_info_descriptor_,
      gem_query_info::default_instance_,
      gem_query_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_query_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_query_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_query_info));
  query_rsp_descriptor_ = file->message_type(12);
  static const int query_rsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, opt_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, rsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, mount_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, pet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, potential_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, bow_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, gem_info_),
  };
  query_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_rsp_descriptor_,
      query_rsp::default_instance_,
      query_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_rsp));
  game_to_center_query_descriptor_ = file->message_type(13);
  static const int game_to_center_query_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_to_center_query, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_to_center_query, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_to_center_query, query_info_),
  };
  game_to_center_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_to_center_query_descriptor_,
      game_to_center_query::default_instance_,
      game_to_center_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_to_center_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_to_center_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_to_center_query));
  CLIENT_QUERY_TYPE_E_descriptor_ = file->enum_type(0);
  UPDATE_TYPE_E_descriptor_ = file->enum_type(1);
  OPEN_TYPE_E_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2equery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_req_descriptor_, &query_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_smy_info_descriptor_, &role_smy_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_smy_role_lvl_descriptor_, &update_smy_role_lvl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_smy_role_fight_power_descriptor_, &update_smy_role_fight_power::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_smy_mount_data_descriptor_, &update_smy_mount_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_smy_info_descriptor_, &update_smy_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_query_info_descriptor_, &role_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mount_query_info_descriptor_, &mount_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_query_info_descriptor_, &pet_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    potential_query_info_descriptor_, &potential_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_query_info_descriptor_, &bows_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_query_info_descriptor_, &gem_query_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_rsp_descriptor_, &query_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_to_center_query_descriptor_, &game_to_center_query::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2equery_2eproto() {
  delete query_req::default_instance_;
  delete query_req_reflection_;
  delete role_smy_info::default_instance_;
  delete role_smy_info_reflection_;
  delete update_smy_role_lvl::default_instance_;
  delete update_smy_role_lvl_reflection_;
  delete update_smy_role_fight_power::default_instance_;
  delete update_smy_role_fight_power_reflection_;
  delete update_smy_mount_data::default_instance_;
  delete update_smy_mount_data_reflection_;
  delete update_smy_info::default_instance_;
  delete update_smy_info_reflection_;
  delete role_query_info::default_instance_;
  delete role_query_info_reflection_;
  delete mount_query_info::default_instance_;
  delete mount_query_info_reflection_;
  delete pet_query_info::default_instance_;
  delete pet_query_info_reflection_;
  delete potential_query_info::default_instance_;
  delete potential_query_info_reflection_;
  delete bows_query_info::default_instance_;
  delete bows_query_info_reflection_;
  delete gem_query_info::default_instance_;
  delete gem_query_info_reflection_;
  delete query_rsp::default_instance_;
  delete query_rsp_reflection_;
  delete game_to_center_query::default_instance_;
  delete game_to_center_query_reflection_;
}

void protobuf_AddDesc_client_2equery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client.query.proto\022\006client\032\021client.com"
    "m.proto\032\032client.role_attr_msg.proto\032\027cli"
    "ent.role_props.proto\032\033client.role_skill_"
    "msg.proto\032\033client.role_potential.proto\"\226"
    "\001\n\tquery_req\022)\n\004type\030\001 \002(\0162\033.client.CLIE"
    "NT_QUERY_TYPE_E\022\020\n\010role_ids\030\002 \003(\r\022\022\n\nrol"
    "e_names\030\003 \003(\t\022\020\n\010opt_flag\030\004 \001(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"\235\002\n\rrole"
    "_smy_info\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_name\030"
    "\002 \002(\t\022\023\n\013fight_power\030\003 \002(\r\022\022\n\nprofession"
    "\030\004 \002(\r\022\016\n\006online\030\005 \001(\010\022\r\n\005level\030\006 \001(\r\022\021\n"
    "\tfamily_id\030\007 \001(\r\022\023\n\013family_name\030\010 \001(\t\022\026\n"
    "\016family_postion\030\t \001(\r\022\021\n\tvip_level\030\n \001(\r"
    "\022\023\n\013mount_level\030\013 \001(\r\022\023\n\013mount_power\030\014 \001"
    "(\r\022\021\n\tweapon_id\030\r \001(\r\022\020\n\010armor_id\030\016 \001(\r\""
    "5\n\023update_smy_role_lvl\022\017\n\007role_id\030\001 \002(\r\022"
    "\r\n\005level\030\002 \002(\r\"C\n\033update_smy_role_fight_"
    "power\022\017\n\007role_id\030\001 \002(\r\022\023\n\013fight_power\030\002 "
    "\002(\r\"R\n\025update_smy_mount_data\022\017\n\007role_id\030"
    "\001 \002(\r\022\023\n\013mount_level\030\002 \002(\r\022\023\n\013mount_powe"
    "r\030\003 \002(\r\"c\n\017update_smy_info\022#\n\004type\030\001 \002(\016"
    "2\025.client.UPDATE_TYPE_E\022\017\n\007role_id\030\002 \001(\r"
    "\022\014\n\004val1\030\003 \001(\r\022\014\n\004val2\030\004 \001(\r\"\241\002\n\017role_qu"
    "ery_info\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_name\030\002"
    " \002(\t\022\023\n\013fight_power\030\003 \002(\r\022\022\n\nprofession\030"
    "\004 \002(\r\022\r\n\005level\030\005 \001(\r\022\021\n\tweapon_id\030\006 \001(\r\022"
    "\020\n\010armor_id\030\007 \001(\r\022\021\n\tvip_level\030\010 \001(\r\022\021\n\t"
    "family_id\030\t \001(\r\022\023\n\013family_name\030\n \001(\t\022\027\n\017"
    "family_position\030\013 \001(\r\022&\n\nequip_info\030\014 \003("
    "\0132\022.client.props_info\022\021\n\topen_type\030\r \001(\r"
    "\"N\n\020mount_query_info\022\020\n\010mount_id\030\001 \001(\r\022\023"
    "\n\013mount_level\030\002 \001(\r\022\023\n\013mount_power\030\003 \001(\r"
    "\"\253\001\n\016pet_query_info\022\016\n\006pet_id\030\001 \001(\r\022\021\n\tp"
    "et_level\030\002 \001(\r\022\022\n\nmagic_star\030\003 \001(\r\022\022\n\nmo"
    "ve_speed\030\004 \001(\r\022&\n\nskill_info\030\005 \003(\0132\022.cli"
    "ent.skill_data\022&\n\nequip_info\030\006 \003(\0132\022.cli"
    "ent.props_info\"E\n\024potential_query_info\022-"
    "\n\npoint_info\030\001 \003(\0132\031.client.client_point"
    "_info\"G\n\017bows_query_info\022\016\n\006bow_id\030\001 \001(\r"
    "\022\021\n\tbow_level\030\002 \001(\r\022\021\n\tbow_power\030\003 \001(\r\"4"
    "\n\016gem_query_info\022\023\n\013total_level\030\001 \001(\r\022\r\n"
    "\005power\030\002 \001(\r\"\214\003\n\tquery_rsp\022)\n\004type\030\001 \002(\016"
    "2\033.client.CLIENT_QUERY_TYPE_E\022\020\n\010opt_fla"
    "g\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\"\n\003rsi\030\004 \003(\0132\025."
    "client.role_smy_info\022*\n\trole_info\030\005 \003(\0132"
    "\027.client.role_query_info\022,\n\nmount_info\030\006"
    " \001(\0132\030.client.mount_query_info\022(\n\010pet_in"
    "fo\030\007 \001(\0132\026.client.pet_query_info\0224\n\016pote"
    "ntial_info\030\010 \003(\0132\034.client.potential_quer"
    "y_info\022)\n\010bow_info\030\t \001(\0132\027.client.bows_q"
    "uery_info\022(\n\010gem_info\030\n \001(\0132\026.client.gem"
    "_query_info\"`\n\024game_to_center_query\022\017\n\007r"
    "ole_id\030\001 \002(\r\022\020\n\010query_id\030\002 \002(\r\022%\n\nquery_"
    "info\030\003 \001(\0132\021.client.query_rsp*\314\001\n\023CLIENT"
    "_QUERY_TYPE_E\022\014\n\010CQTE_SMY\020\001\022\022\n\016CQTE_ROLE"
    "_ATTR\020\002\022\023\n\017CQTE_ROLE_MOUNT\020\003\022\021\n\rCQTE_ROL"
    "E_PET\020\004\022\024\n\020CQTE_SMY_BY_NAME\020\005\022\027\n\023CQTE_RO"
    "LE_POTENTIAL\020\006\022\026\n\022CQTE_ROLE_AIRCRAFT\020\007\022\021"
    "\n\rCQTE_ROLE_BOW\020\010\022\021\n\rCQTE_ROLE_GEM\020\t*\222\001\n"
    "\rUPDATE_TYPE_E\022\022\n\016SMY_ROLE_LEVEL\020\001\022\030\n\024SM"
    "Y_ROLE_FIGHT_POWER\020\002\022\022\n\016SMY_MOUNT_DATA\020\003"
    "\022\020\n\014SMY_ROLE_VIP\020\004\022\026\n\022SMY_ROLE_WEAPON_ID"
    "\020\005\022\025\n\021SMY_ROLE_ARMOR_ID\020\006*[\n\013OPEN_TYPE_E"
    "\022\016\n\nROLE_MOUNT\020\001\022\014\n\010ROLE_PET\020\002\022\022\n\016ROLE_P"
    "OTENTIAL\020\004\022\014\n\010ROLE_BOW\020\010\022\014\n\010ROLE_GEM\020\020", 2598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.query.proto", &protobuf_RegisterTypes);
  query_req::default_instance_ = new query_req();
  role_smy_info::default_instance_ = new role_smy_info();
  update_smy_role_lvl::default_instance_ = new update_smy_role_lvl();
  update_smy_role_fight_power::default_instance_ = new update_smy_role_fight_power();
  update_smy_mount_data::default_instance_ = new update_smy_mount_data();
  update_smy_info::default_instance_ = new update_smy_info();
  role_query_info::default_instance_ = new role_query_info();
  mount_query_info::default_instance_ = new mount_query_info();
  pet_query_info::default_instance_ = new pet_query_info();
  potential_query_info::default_instance_ = new potential_query_info();
  bows_query_info::default_instance_ = new bows_query_info();
  gem_query_info::default_instance_ = new gem_query_info();
  query_rsp::default_instance_ = new query_rsp();
  game_to_center_query::default_instance_ = new game_to_center_query();
  query_req::default_instance_->InitAsDefaultInstance();
  role_smy_info::default_instance_->InitAsDefaultInstance();
  update_smy_role_lvl::default_instance_->InitAsDefaultInstance();
  update_smy_role_fight_power::default_instance_->InitAsDefaultInstance();
  update_smy_mount_data::default_instance_->InitAsDefaultInstance();
  update_smy_info::default_instance_->InitAsDefaultInstance();
  role_query_info::default_instance_->InitAsDefaultInstance();
  mount_query_info::default_instance_->InitAsDefaultInstance();
  pet_query_info::default_instance_->InitAsDefaultInstance();
  potential_query_info::default_instance_->InitAsDefaultInstance();
  bows_query_info::default_instance_->InitAsDefaultInstance();
  gem_query_info::default_instance_->InitAsDefaultInstance();
  query_rsp::default_instance_->InitAsDefaultInstance();
  game_to_center_query::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2equery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2equery_2eproto {
  StaticDescriptorInitializer_client_2equery_2eproto() {
    protobuf_AddDesc_client_2equery_2eproto();
  }
} static_descriptor_initializer_client_2equery_2eproto_;
const ::google::protobuf::EnumDescriptor* CLIENT_QUERY_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLIENT_QUERY_TYPE_E_descriptor_;
}
bool CLIENT_QUERY_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UPDATE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPDATE_TYPE_E_descriptor_;
}
bool UPDATE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPEN_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPEN_TYPE_E_descriptor_;
}
bool OPEN_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int query_req::kTypeFieldNumber;
const int query_req::kRoleIdsFieldNumber;
const int query_req::kRoleNamesFieldNumber;
const int query_req::kOptFlagFieldNumber;
const int query_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

query_req::query_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

query_req::query_req(const query_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  opt_flag_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_req::~query_req() {
  SharedDtor();
}

void query_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void query_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_req_descriptor_;
}

const query_req& query_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

query_req* query_req::default_instance_ = NULL;

query_req* query_req::New() const {
  return new query_req;
}

void query_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    opt_flag_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_ids_.Clear();
  role_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.CLIENT_QUERY_TYPE_E type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::CLIENT_QUERY_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::CLIENT_QUERY_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        break;
      }

      // repeated uint32 role_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        if (input->ExpectTag(26)) goto parse_role_names;
        break;
      }

      // repeated string role_names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_role_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_names(this->role_names_size() - 1).data(),
            this->role_names(this->role_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_names;
        if (input->ExpectTag(32)) goto parse_opt_flag;
        break;
      }

      // optional uint32 opt_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_flag_)));
          set_has_opt_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role_ids(i), output);
  }

  // repeated string role_names = 3;
  for (int i = 0; i < this->role_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->role_names(i).data(), this->role_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_names(i), output);
  }

  // optional uint32 opt_flag = 4;
  if (has_opt_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opt_flag(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role_ids(i), target);
  }

  // repeated string role_names = 3;
  for (int i = 0; i < this->role_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_names(i).data(), this->role_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->role_names(i), target);
  }

  // optional uint32 opt_flag = 4;
  if (has_opt_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opt_flag(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.CLIENT_QUERY_TYPE_E type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 opt_flag = 4;
    if (has_opt_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_flag());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  // repeated string role_names = 3;
  total_size += 1 * this->role_names_size();
  for (int i = 0; i < this->role_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->role_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_req::MergeFrom(const query_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_ids_.MergeFrom(from.role_ids_);
  role_names_.MergeFrom(from.role_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt_flag()) {
      set_opt_flag(from.opt_flag());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_req::CopyFrom(const query_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_req::Swap(query_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    role_ids_.Swap(&other->role_ids_);
    role_names_.Swap(&other->role_names_);
    std::swap(opt_flag_, other->opt_flag_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_req_descriptor_;
  metadata.reflection = query_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_smy_info::kRoleIdFieldNumber;
const int role_smy_info::kRoleNameFieldNumber;
const int role_smy_info::kFightPowerFieldNumber;
const int role_smy_info::kProfessionFieldNumber;
const int role_smy_info::kOnlineFieldNumber;
const int role_smy_info::kLevelFieldNumber;
const int role_smy_info::kFamilyIdFieldNumber;
const int role_smy_info::kFamilyNameFieldNumber;
const int role_smy_info::kFamilyPostionFieldNumber;
const int role_smy_info::kVipLevelFieldNumber;
const int role_smy_info::kMountLevelFieldNumber;
const int role_smy_info::kMountPowerFieldNumber;
const int role_smy_info::kWeaponIdFieldNumber;
const int role_smy_info::kArmorIdFieldNumber;
#endif  // !_MSC_VER

role_smy_info::role_smy_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_smy_info::InitAsDefaultInstance() {
}

role_smy_info::role_smy_info(const role_smy_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_smy_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = 0u;
  profession_ = 0u;
  online_ = false;
  level_ = 0u;
  family_id_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_postion_ = 0u;
  vip_level_ = 0u;
  mount_level_ = 0u;
  mount_power_ = 0u;
  weapon_id_ = 0u;
  armor_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_smy_info::~role_smy_info() {
  SharedDtor();
}

void role_smy_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void role_smy_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_smy_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_smy_info_descriptor_;
}

const role_smy_info& role_smy_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

role_smy_info* role_smy_info::default_instance_ = NULL;

role_smy_info* role_smy_info::New() const {
  return new role_smy_info;
}

void role_smy_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    fight_power_ = 0u;
    profession_ = 0u;
    online_ = false;
    level_ = 0u;
    family_id_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    family_postion_ = 0u;
    vip_level_ = 0u;
    mount_level_ = 0u;
    mount_power_ = 0u;
    weapon_id_ = 0u;
    armor_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_smy_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_online;
        break;
      }

      // optional bool online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_family_name;
        break;
      }

      // optional string family_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_family_postion;
        break;
      }

      // optional uint32 family_postion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_postion_)));
          set_has_family_postion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mount_level;
        break;
      }

      // optional uint32 mount_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mount_power;
        break;
      }

      // optional uint32 mount_power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_power_)));
          set_has_mount_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_armor_id;
        break;
      }

      // optional uint32 armor_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_smy_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 fight_power = 3;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fight_power(), output);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // optional bool online = 5;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->online(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 family_id = 7;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->family_id(), output);
  }

  // optional string family_name = 8;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->family_name(), output);
  }

  // optional uint32 family_postion = 9;
  if (has_family_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->family_postion(), output);
  }

  // optional uint32 vip_level = 10;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vip_level(), output);
  }

  // optional uint32 mount_level = 11;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mount_level(), output);
  }

  // optional uint32 mount_power = 12;
  if (has_mount_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mount_power(), output);
  }

  // optional uint32 weapon_id = 13;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weapon_id(), output);
  }

  // optional uint32 armor_id = 14;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->armor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_smy_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 fight_power = 3;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fight_power(), target);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // optional bool online = 5;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->online(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 family_id = 7;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->family_id(), target);
  }

  // optional string family_name = 8;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->family_name(), target);
  }

  // optional uint32 family_postion = 9;
  if (has_family_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->family_postion(), target);
  }

  // optional uint32 vip_level = 10;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vip_level(), target);
  }

  // optional uint32 mount_level = 11;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mount_level(), target);
  }

  // optional uint32 mount_power = 12;
  if (has_mount_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mount_power(), target);
  }

  // optional uint32 weapon_id = 13;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weapon_id(), target);
  }

  // optional uint32 armor_id = 14;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->armor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_smy_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 fight_power = 3;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional bool online = 5;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 family_id = 7;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string family_name = 8;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 family_postion = 9;
    if (has_family_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_postion());
    }

    // optional uint32 vip_level = 10;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 mount_level = 11;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_level());
    }

    // optional uint32 mount_power = 12;
    if (has_mount_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_power());
    }

    // optional uint32 weapon_id = 13;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 armor_id = 14;
    if (has_armor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_smy_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_smy_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_smy_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_smy_info::MergeFrom(const role_smy_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_family_postion()) {
      set_family_postion(from.family_postion());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_mount_power()) {
      set_mount_power(from.mount_power());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_smy_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_smy_info::CopyFrom(const role_smy_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_smy_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void role_smy_info::Swap(role_smy_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(profession_, other->profession_);
    std::swap(online_, other->online_);
    std::swap(level_, other->level_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(family_postion_, other->family_postion_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(mount_power_, other->mount_power_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_smy_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_smy_info_descriptor_;
  metadata.reflection = role_smy_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_smy_role_lvl::kRoleIdFieldNumber;
const int update_smy_role_lvl::kLevelFieldNumber;
#endif  // !_MSC_VER

update_smy_role_lvl::update_smy_role_lvl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_smy_role_lvl::InitAsDefaultInstance() {
}

update_smy_role_lvl::update_smy_role_lvl(const update_smy_role_lvl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_smy_role_lvl::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_smy_role_lvl::~update_smy_role_lvl() {
  SharedDtor();
}

void update_smy_role_lvl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_smy_role_lvl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_smy_role_lvl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_smy_role_lvl_descriptor_;
}

const update_smy_role_lvl& update_smy_role_lvl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

update_smy_role_lvl* update_smy_role_lvl::default_instance_ = NULL;

update_smy_role_lvl* update_smy_role_lvl::New() const {
  return new update_smy_role_lvl;
}

void update_smy_role_lvl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_smy_role_lvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_smy_role_lvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_smy_role_lvl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_smy_role_lvl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_smy_role_lvl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_smy_role_lvl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_smy_role_lvl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_smy_role_lvl::MergeFrom(const update_smy_role_lvl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_smy_role_lvl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_smy_role_lvl::CopyFrom(const update_smy_role_lvl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_smy_role_lvl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void update_smy_role_lvl::Swap(update_smy_role_lvl* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_smy_role_lvl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_smy_role_lvl_descriptor_;
  metadata.reflection = update_smy_role_lvl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_smy_role_fight_power::kRoleIdFieldNumber;
const int update_smy_role_fight_power::kFightPowerFieldNumber;
#endif  // !_MSC_VER

update_smy_role_fight_power::update_smy_role_fight_power()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_smy_role_fight_power::InitAsDefaultInstance() {
}

update_smy_role_fight_power::update_smy_role_fight_power(const update_smy_role_fight_power& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_smy_role_fight_power::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_smy_role_fight_power::~update_smy_role_fight_power() {
  SharedDtor();
}

void update_smy_role_fight_power::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_smy_role_fight_power::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_smy_role_fight_power::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_smy_role_fight_power_descriptor_;
}

const update_smy_role_fight_power& update_smy_role_fight_power::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

update_smy_role_fight_power* update_smy_role_fight_power::default_instance_ = NULL;

update_smy_role_fight_power* update_smy_role_fight_power::New() const {
  return new update_smy_role_fight_power;
}

void update_smy_role_fight_power::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_smy_role_fight_power::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_smy_role_fight_power::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 fight_power = 2;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_smy_role_fight_power::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 fight_power = 2;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_smy_role_fight_power::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 fight_power = 2;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_smy_role_fight_power::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_smy_role_fight_power* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_smy_role_fight_power*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_smy_role_fight_power::MergeFrom(const update_smy_role_fight_power& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_smy_role_fight_power::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_smy_role_fight_power::CopyFrom(const update_smy_role_fight_power& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_smy_role_fight_power::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void update_smy_role_fight_power::Swap(update_smy_role_fight_power* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_smy_role_fight_power::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_smy_role_fight_power_descriptor_;
  metadata.reflection = update_smy_role_fight_power_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_smy_mount_data::kRoleIdFieldNumber;
const int update_smy_mount_data::kMountLevelFieldNumber;
const int update_smy_mount_data::kMountPowerFieldNumber;
#endif  // !_MSC_VER

update_smy_mount_data::update_smy_mount_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_smy_mount_data::InitAsDefaultInstance() {
}

update_smy_mount_data::update_smy_mount_data(const update_smy_mount_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_smy_mount_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  mount_level_ = 0u;
  mount_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_smy_mount_data::~update_smy_mount_data() {
  SharedDtor();
}

void update_smy_mount_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_smy_mount_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_smy_mount_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_smy_mount_data_descriptor_;
}

const update_smy_mount_data& update_smy_mount_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

update_smy_mount_data* update_smy_mount_data::default_instance_ = NULL;

update_smy_mount_data* update_smy_mount_data::New() const {
  return new update_smy_mount_data;
}

void update_smy_mount_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    mount_level_ = 0u;
    mount_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_smy_mount_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_level;
        break;
      }

      // required uint32 mount_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mount_power;
        break;
      }

      // required uint32 mount_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_power_)));
          set_has_mount_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_smy_mount_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 mount_level = 2;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mount_level(), output);
  }

  // required uint32 mount_power = 3;
  if (has_mount_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mount_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_smy_mount_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 mount_level = 2;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mount_level(), target);
  }

  // required uint32 mount_power = 3;
  if (has_mount_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mount_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_smy_mount_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 mount_level = 2;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_level());
    }

    // required uint32 mount_power = 3;
    if (has_mount_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_smy_mount_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_smy_mount_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_smy_mount_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_smy_mount_data::MergeFrom(const update_smy_mount_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_mount_power()) {
      set_mount_power(from.mount_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_smy_mount_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_smy_mount_data::CopyFrom(const update_smy_mount_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_smy_mount_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void update_smy_mount_data::Swap(update_smy_mount_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(mount_power_, other->mount_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_smy_mount_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_smy_mount_data_descriptor_;
  metadata.reflection = update_smy_mount_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_smy_info::kTypeFieldNumber;
const int update_smy_info::kRoleIdFieldNumber;
const int update_smy_info::kVal1FieldNumber;
const int update_smy_info::kVal2FieldNumber;
#endif  // !_MSC_VER

update_smy_info::update_smy_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_smy_info::InitAsDefaultInstance() {
}

update_smy_info::update_smy_info(const update_smy_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_smy_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  role_id_ = 0u;
  val1_ = 0u;
  val2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_smy_info::~update_smy_info() {
  SharedDtor();
}

void update_smy_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_smy_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_smy_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_smy_info_descriptor_;
}

const update_smy_info& update_smy_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

update_smy_info* update_smy_info::default_instance_ = NULL;

update_smy_info* update_smy_info::New() const {
  return new update_smy_info;
}

void update_smy_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    role_id_ = 0u;
    val1_ = 0u;
    val2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_smy_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.UPDATE_TYPE_E type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::UPDATE_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::UPDATE_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val1;
        break;
      }

      // optional uint32 val1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val1_)));
          set_has_val1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val2;
        break;
      }

      // optional uint32 val2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val2_)));
          set_has_val2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_smy_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.UPDATE_TYPE_E type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional uint32 val1 = 3;
  if (has_val1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val1(), output);
  }

  // optional uint32 val2 = 4;
  if (has_val2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->val2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_smy_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.UPDATE_TYPE_E type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional uint32 val1 = 3;
  if (has_val1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val1(), target);
  }

  // optional uint32 val2 = 4;
  if (has_val2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->val2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_smy_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.UPDATE_TYPE_E type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 val1 = 3;
    if (has_val1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val1());
    }

    // optional uint32 val2 = 4;
    if (has_val2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_smy_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_smy_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_smy_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_smy_info::MergeFrom(const update_smy_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_val1()) {
      set_val1(from.val1());
    }
    if (from.has_val2()) {
      set_val2(from.val2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_smy_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_smy_info::CopyFrom(const update_smy_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_smy_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void update_smy_info::Swap(update_smy_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(val1_, other->val1_);
    std::swap(val2_, other->val2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_smy_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_smy_info_descriptor_;
  metadata.reflection = update_smy_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_query_info::kRoleIdFieldNumber;
const int role_query_info::kRoleNameFieldNumber;
const int role_query_info::kFightPowerFieldNumber;
const int role_query_info::kProfessionFieldNumber;
const int role_query_info::kLevelFieldNumber;
const int role_query_info::kWeaponIdFieldNumber;
const int role_query_info::kArmorIdFieldNumber;
const int role_query_info::kVipLevelFieldNumber;
const int role_query_info::kFamilyIdFieldNumber;
const int role_query_info::kFamilyNameFieldNumber;
const int role_query_info::kFamilyPositionFieldNumber;
const int role_query_info::kEquipInfoFieldNumber;
const int role_query_info::kOpenTypeFieldNumber;
#endif  // !_MSC_VER

role_query_info::role_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_query_info::InitAsDefaultInstance() {
}

role_query_info::role_query_info(const role_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_query_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = 0u;
  profession_ = 0u;
  level_ = 0u;
  weapon_id_ = 0u;
  armor_id_ = 0u;
  vip_level_ = 0u;
  family_id_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_position_ = 0u;
  open_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_query_info::~role_query_info() {
  SharedDtor();
}

void role_query_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void role_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_query_info_descriptor_;
}

const role_query_info& role_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

role_query_info* role_query_info::default_instance_ = NULL;

role_query_info* role_query_info::New() const {
  return new role_query_info;
}

void role_query_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    fight_power_ = 0u;
    profession_ = 0u;
    level_ = 0u;
    weapon_id_ = 0u;
    armor_id_ = 0u;
    vip_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    family_id_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    family_position_ = 0u;
    open_type_ = 0u;
  }
  equip_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_armor_id;
        break;
      }

      // optional uint32 armor_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_family_name;
        break;
      }

      // optional string family_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_family_position;
        break;
      }

      // optional uint32 family_position = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_position_)));
          set_has_family_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_equip_info;
        break;
      }

      // repeated .client.props_info equip_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_equip_info;
        if (input->ExpectTag(104)) goto parse_open_type;
        break;
      }

      // optional uint32 open_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_type_)));
          set_has_open_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 fight_power = 3;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fight_power(), output);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 weapon_id = 6;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weapon_id(), output);
  }

  // optional uint32 armor_id = 7;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->armor_id(), output);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_level(), output);
  }

  // optional uint32 family_id = 9;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->family_id(), output);
  }

  // optional string family_name = 10;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->family_name(), output);
  }

  // optional uint32 family_position = 11;
  if (has_family_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->family_position(), output);
  }

  // repeated .client.props_info equip_info = 12;
  for (int i = 0; i < this->equip_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->equip_info(i), output);
  }

  // optional uint32 open_type = 13;
  if (has_open_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->open_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 fight_power = 3;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fight_power(), target);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 weapon_id = 6;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->weapon_id(), target);
  }

  // optional uint32 armor_id = 7;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->armor_id(), target);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_level(), target);
  }

  // optional uint32 family_id = 9;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->family_id(), target);
  }

  // optional string family_name = 10;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->family_name(), target);
  }

  // optional uint32 family_position = 11;
  if (has_family_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->family_position(), target);
  }

  // repeated .client.props_info equip_info = 12;
  for (int i = 0; i < this->equip_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->equip_info(i), target);
  }

  // optional uint32 open_type = 13;
  if (has_open_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->open_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_query_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 fight_power = 3;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 weapon_id = 6;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 armor_id = 7;
    if (has_armor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

    // optional uint32 vip_level = 8;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 family_id = 9;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string family_name = 10;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional uint32 family_position = 11;
    if (has_family_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_position());
    }

    // optional uint32 open_type = 13;
    if (has_open_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_type());
    }

  }
  // repeated .client.props_info equip_info = 12;
  total_size += 1 * this->equip_info_size();
  for (int i = 0; i < this->equip_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_query_info::MergeFrom(const role_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_info_.MergeFrom(from.equip_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_family_position()) {
      set_family_position(from.family_position());
    }
    if (from.has_open_type()) {
      set_open_type(from.open_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_query_info::CopyFrom(const role_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_query_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < equip_info_size(); i++) {
    if (!this->equip_info(i).IsInitialized()) return false;
  }
  return true;
}

void role_query_info::Swap(role_query_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(family_position_, other->family_position_);
    equip_info_.Swap(&other->equip_info_);
    std::swap(open_type_, other->open_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_query_info_descriptor_;
  metadata.reflection = role_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mount_query_info::kMountIdFieldNumber;
const int mount_query_info::kMountLevelFieldNumber;
const int mount_query_info::kMountPowerFieldNumber;
#endif  // !_MSC_VER

mount_query_info::mount_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mount_query_info::InitAsDefaultInstance() {
}

mount_query_info::mount_query_info(const mount_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mount_query_info::SharedCtor() {
  _cached_size_ = 0;
  mount_id_ = 0u;
  mount_level_ = 0u;
  mount_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mount_query_info::~mount_query_info() {
  SharedDtor();
}

void mount_query_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mount_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mount_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mount_query_info_descriptor_;
}

const mount_query_info& mount_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

mount_query_info* mount_query_info::default_instance_ = NULL;

mount_query_info* mount_query_info::New() const {
  return new mount_query_info;
}

void mount_query_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_id_ = 0u;
    mount_level_ = 0u;
    mount_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mount_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_level;
        break;
      }

      // optional uint32 mount_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mount_power;
        break;
      }

      // optional uint32 mount_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_power_)));
          set_has_mount_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mount_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mount_id = 1;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mount_id(), output);
  }

  // optional uint32 mount_level = 2;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mount_level(), output);
  }

  // optional uint32 mount_power = 3;
  if (has_mount_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mount_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mount_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mount_id = 1;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mount_id(), target);
  }

  // optional uint32 mount_level = 2;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mount_level(), target);
  }

  // optional uint32 mount_power = 3;
  if (has_mount_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mount_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mount_query_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mount_id = 1;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

    // optional uint32 mount_level = 2;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_level());
    }

    // optional uint32 mount_power = 3;
    if (has_mount_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mount_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mount_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mount_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mount_query_info::MergeFrom(const mount_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_mount_power()) {
      set_mount_power(from.mount_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mount_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mount_query_info::CopyFrom(const mount_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mount_query_info::IsInitialized() const {

  return true;
}

void mount_query_info::Swap(mount_query_info* other) {
  if (other != this) {
    std::swap(mount_id_, other->mount_id_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(mount_power_, other->mount_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mount_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mount_query_info_descriptor_;
  metadata.reflection = mount_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_query_info::kPetIdFieldNumber;
const int pet_query_info::kPetLevelFieldNumber;
const int pet_query_info::kMagicStarFieldNumber;
const int pet_query_info::kMoveSpeedFieldNumber;
const int pet_query_info::kSkillInfoFieldNumber;
const int pet_query_info::kEquipInfoFieldNumber;
#endif  // !_MSC_VER

pet_query_info::pet_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_query_info::InitAsDefaultInstance() {
}

pet_query_info::pet_query_info(const pet_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_query_info::SharedCtor() {
  _cached_size_ = 0;
  pet_id_ = 0u;
  pet_level_ = 0u;
  magic_star_ = 0u;
  move_speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_query_info::~pet_query_info() {
  SharedDtor();
}

void pet_query_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_query_info_descriptor_;
}

const pet_query_info& pet_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

pet_query_info* pet_query_info::default_instance_ = NULL;

pet_query_info* pet_query_info::New() const {
  return new pet_query_info;
}

void pet_query_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pet_id_ = 0u;
    pet_level_ = 0u;
    magic_star_ = 0u;
    move_speed_ = 0u;
  }
  skill_info_.Clear();
  equip_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_level;
        break;
      }

      // optional uint32 pet_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_level_)));
          set_has_pet_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magic_star;
        break;
      }

      // optional uint32 magic_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_star_)));
          set_has_magic_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_speed;
        break;
      }

      // optional uint32 move_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_info;
        break;
      }

      // repeated .client.skill_data skill_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_info;
        if (input->ExpectTag(50)) goto parse_equip_info;
        break;
      }

      // repeated .client.props_info equip_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pet_id(), output);
  }

  // optional uint32 pet_level = 2;
  if (has_pet_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_level(), output);
  }

  // optional uint32 magic_star = 3;
  if (has_magic_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->magic_star(), output);
  }

  // optional uint32 move_speed = 4;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->move_speed(), output);
  }

  // repeated .client.skill_data skill_info = 5;
  for (int i = 0; i < this->skill_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_info(i), output);
  }

  // repeated .client.props_info equip_info = 6;
  for (int i = 0; i < this->equip_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pet_id = 1;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pet_id(), target);
  }

  // optional uint32 pet_level = 2;
  if (has_pet_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_level(), target);
  }

  // optional uint32 magic_star = 3;
  if (has_magic_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->magic_star(), target);
  }

  // optional uint32 move_speed = 4;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->move_speed(), target);
  }

  // repeated .client.skill_data skill_info = 5;
  for (int i = 0; i < this->skill_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_info(i), target);
  }

  // repeated .client.props_info equip_info = 6;
  for (int i = 0; i < this->equip_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_query_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pet_id = 1;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional uint32 pet_level = 2;
    if (has_pet_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_level());
    }

    // optional uint32 magic_star = 3;
    if (has_magic_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_star());
    }

    // optional uint32 move_speed = 4;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed());
    }

  }
  // repeated .client.skill_data skill_info = 5;
  total_size += 1 * this->skill_info_size();
  for (int i = 0; i < this->skill_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_info(i));
  }

  // repeated .client.props_info equip_info = 6;
  total_size += 1 * this->equip_info_size();
  for (int i = 0; i < this->equip_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_query_info::MergeFrom(const pet_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_info_.MergeFrom(from.skill_info_);
  equip_info_.MergeFrom(from.equip_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_level()) {
      set_pet_level(from.pet_level());
    }
    if (from.has_magic_star()) {
      set_magic_star(from.magic_star());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_query_info::CopyFrom(const pet_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_query_info::IsInitialized() const {

  for (int i = 0; i < skill_info_size(); i++) {
    if (!this->skill_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equip_info_size(); i++) {
    if (!this->equip_info(i).IsInitialized()) return false;
  }
  return true;
}

void pet_query_info::Swap(pet_query_info* other) {
  if (other != this) {
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_level_, other->pet_level_);
    std::swap(magic_star_, other->magic_star_);
    std::swap(move_speed_, other->move_speed_);
    skill_info_.Swap(&other->skill_info_);
    equip_info_.Swap(&other->equip_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_query_info_descriptor_;
  metadata.reflection = pet_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int potential_query_info::kPointInfoFieldNumber;
#endif  // !_MSC_VER

potential_query_info::potential_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void potential_query_info::InitAsDefaultInstance() {
}

potential_query_info::potential_query_info(const potential_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void potential_query_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

potential_query_info::~potential_query_info() {
  SharedDtor();
}

void potential_query_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void potential_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* potential_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return potential_query_info_descriptor_;
}

const potential_query_info& potential_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

potential_query_info* potential_query_info::default_instance_ = NULL;

potential_query_info* potential_query_info::New() const {
  return new potential_query_info;
}

void potential_query_info::Clear() {
  point_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool potential_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.client_point_info point_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_point_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void potential_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.client_point_info point_info = 1;
  for (int i = 0; i < this->point_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* potential_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.client_point_info point_info = 1;
  for (int i = 0; i < this->point_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int potential_query_info::ByteSize() const {
  int total_size = 0;

  // repeated .client.client_point_info point_info = 1;
  total_size += 1 * this->point_info_size();
  for (int i = 0; i < this->point_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void potential_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const potential_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const potential_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void potential_query_info::MergeFrom(const potential_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_info_.MergeFrom(from.point_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void potential_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void potential_query_info::CopyFrom(const potential_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool potential_query_info::IsInitialized() const {

  for (int i = 0; i < point_info_size(); i++) {
    if (!this->point_info(i).IsInitialized()) return false;
  }
  return true;
}

void potential_query_info::Swap(potential_query_info* other) {
  if (other != this) {
    point_info_.Swap(&other->point_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata potential_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = potential_query_info_descriptor_;
  metadata.reflection = potential_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_query_info::kBowIdFieldNumber;
const int bows_query_info::kBowLevelFieldNumber;
const int bows_query_info::kBowPowerFieldNumber;
#endif  // !_MSC_VER

bows_query_info::bows_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_query_info::InitAsDefaultInstance() {
}

bows_query_info::bows_query_info(const bows_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_query_info::SharedCtor() {
  _cached_size_ = 0;
  bow_id_ = 0u;
  bow_level_ = 0u;
  bow_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_query_info::~bows_query_info() {
  SharedDtor();
}

void bows_query_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bows_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_query_info_descriptor_;
}

const bows_query_info& bows_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

bows_query_info* bows_query_info::default_instance_ = NULL;

bows_query_info* bows_query_info::New() const {
  return new bows_query_info;
}

void bows_query_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bow_id_ = 0u;
    bow_level_ = 0u;
    bow_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bow_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_id_)));
          set_has_bow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bow_level;
        break;
      }

      // optional uint32 bow_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_level_)));
          set_has_bow_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bow_power;
        break;
      }

      // optional uint32 bow_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_power_)));
          set_has_bow_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bow_id = 1;
  if (has_bow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bow_id(), output);
  }

  // optional uint32 bow_level = 2;
  if (has_bow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bow_level(), output);
  }

  // optional uint32 bow_power = 3;
  if (has_bow_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bow_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bow_id = 1;
  if (has_bow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bow_id(), target);
  }

  // optional uint32 bow_level = 2;
  if (has_bow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bow_level(), target);
  }

  // optional uint32 bow_power = 3;
  if (has_bow_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bow_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_query_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bow_id = 1;
    if (has_bow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_id());
    }

    // optional uint32 bow_level = 2;
    if (has_bow_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_level());
    }

    // optional uint32 bow_power = 3;
    if (has_bow_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_query_info::MergeFrom(const bows_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bow_id()) {
      set_bow_id(from.bow_id());
    }
    if (from.has_bow_level()) {
      set_bow_level(from.bow_level());
    }
    if (from.has_bow_power()) {
      set_bow_power(from.bow_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_query_info::CopyFrom(const bows_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_query_info::IsInitialized() const {

  return true;
}

void bows_query_info::Swap(bows_query_info* other) {
  if (other != this) {
    std::swap(bow_id_, other->bow_id_);
    std::swap(bow_level_, other->bow_level_);
    std::swap(bow_power_, other->bow_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_query_info_descriptor_;
  metadata.reflection = bows_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_query_info::kTotalLevelFieldNumber;
const int gem_query_info::kPowerFieldNumber;
#endif  // !_MSC_VER

gem_query_info::gem_query_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_query_info::InitAsDefaultInstance() {
}

gem_query_info::gem_query_info(const gem_query_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_query_info::SharedCtor() {
  _cached_size_ = 0;
  total_level_ = 0u;
  power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_query_info::~gem_query_info() {
  SharedDtor();
}

void gem_query_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gem_query_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_query_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_query_info_descriptor_;
}

const gem_query_info& gem_query_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

gem_query_info* gem_query_info::default_instance_ = NULL;

gem_query_info* gem_query_info::New() const {
  return new gem_query_info;
}

void gem_query_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_level_ = 0u;
    power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_query_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_level_)));
          set_has_total_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // optional uint32 power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_query_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total_level = 1;
  if (has_total_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_level(), output);
  }

  // optional uint32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_query_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 total_level = 1;
  if (has_total_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_level(), target);
  }

  // optional uint32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_query_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total_level = 1;
    if (has_total_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_level());
    }

    // optional uint32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_query_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_query_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_query_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_query_info::MergeFrom(const gem_query_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_level()) {
      set_total_level(from.total_level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_query_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_query_info::CopyFrom(const gem_query_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_query_info::IsInitialized() const {

  return true;
}

void gem_query_info::Swap(gem_query_info* other) {
  if (other != this) {
    std::swap(total_level_, other->total_level_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_query_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_query_info_descriptor_;
  metadata.reflection = gem_query_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_rsp::kTypeFieldNumber;
const int query_rsp::kOptFlagFieldNumber;
const int query_rsp::kRoleIdFieldNumber;
const int query_rsp::kRsiFieldNumber;
const int query_rsp::kRoleInfoFieldNumber;
const int query_rsp::kMountInfoFieldNumber;
const int query_rsp::kPetInfoFieldNumber;
const int query_rsp::kPotentialInfoFieldNumber;
const int query_rsp::kBowInfoFieldNumber;
const int query_rsp::kGemInfoFieldNumber;
#endif  // !_MSC_VER

query_rsp::query_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_rsp::InitAsDefaultInstance() {
  mount_info_ = const_cast< ::client::mount_query_info*>(&::client::mount_query_info::default_instance());
  pet_info_ = const_cast< ::client::pet_query_info*>(&::client::pet_query_info::default_instance());
  bow_info_ = const_cast< ::client::bows_query_info*>(&::client::bows_query_info::default_instance());
  gem_info_ = const_cast< ::client::gem_query_info*>(&::client::gem_query_info::default_instance());
}

query_rsp::query_rsp(const query_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  opt_flag_ = 0u;
  role_id_ = 0u;
  mount_info_ = NULL;
  pet_info_ = NULL;
  bow_info_ = NULL;
  gem_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_rsp::~query_rsp() {
  SharedDtor();
}

void query_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete mount_info_;
    delete pet_info_;
    delete bow_info_;
    delete gem_info_;
  }
}

void query_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_rsp_descriptor_;
}

const query_rsp& query_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

query_rsp* query_rsp::default_instance_ = NULL;

query_rsp* query_rsp::New() const {
  return new query_rsp;
}

void query_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    opt_flag_ = 0u;
    role_id_ = 0u;
    if (has_mount_info()) {
      if (mount_info_ != NULL) mount_info_->::client::mount_query_info::Clear();
    }
    if (has_pet_info()) {
      if (pet_info_ != NULL) pet_info_->::client::pet_query_info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bow_info()) {
      if (bow_info_ != NULL) bow_info_->::client::bows_query_info::Clear();
    }
    if (has_gem_info()) {
      if (gem_info_ != NULL) gem_info_->::client::gem_query_info::Clear();
    }
  }
  rsi_.Clear();
  role_info_.Clear();
  potential_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.CLIENT_QUERY_TYPE_E type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::CLIENT_QUERY_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::CLIENT_QUERY_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt_flag;
        break;
      }

      // optional uint32 opt_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_flag_)));
          set_has_opt_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rsi;
        break;
      }

      // repeated .client.role_smy_info rsi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rsi;
        if (input->ExpectTag(42)) goto parse_role_info;
        break;
      }

      // repeated .client.role_query_info role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_info;
        if (input->ExpectTag(50)) goto parse_mount_info;
        break;
      }

      // optional .client.mount_query_info mount_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pet_info;
        break;
      }

      // optional .client.pet_query_info pet_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_potential_info;
        break;
      }

      // repeated .client.potential_query_info potential_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_potential_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_potential_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_potential_info;
        if (input->ExpectTag(74)) goto parse_bow_info;
        break;
      }

      // optional .client.bows_query_info bow_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bow_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bow_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gem_info;
        break;
      }

      // optional .client.gem_query_info gem_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gem_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 opt_flag = 2;
  if (has_opt_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt_flag(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // repeated .client.role_smy_info rsi = 4;
  for (int i = 0; i < this->rsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rsi(i), output);
  }

  // repeated .client.role_query_info role_info = 5;
  for (int i = 0; i < this->role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_info(i), output);
  }

  // optional .client.mount_query_info mount_info = 6;
  if (has_mount_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mount_info(), output);
  }

  // optional .client.pet_query_info pet_info = 7;
  if (has_pet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pet_info(), output);
  }

  // repeated .client.potential_query_info potential_info = 8;
  for (int i = 0; i < this->potential_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->potential_info(i), output);
  }

  // optional .client.bows_query_info bow_info = 9;
  if (has_bow_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bow_info(), output);
  }

  // optional .client.gem_query_info gem_info = 10;
  if (has_gem_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gem_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 opt_flag = 2;
  if (has_opt_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt_flag(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // repeated .client.role_smy_info rsi = 4;
  for (int i = 0; i < this->rsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rsi(i), target);
  }

  // repeated .client.role_query_info role_info = 5;
  for (int i = 0; i < this->role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->role_info(i), target);
  }

  // optional .client.mount_query_info mount_info = 6;
  if (has_mount_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mount_info(), target);
  }

  // optional .client.pet_query_info pet_info = 7;
  if (has_pet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pet_info(), target);
  }

  // repeated .client.potential_query_info potential_info = 8;
  for (int i = 0; i < this->potential_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->potential_info(i), target);
  }

  // optional .client.bows_query_info bow_info = 9;
  if (has_bow_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bow_info(), target);
  }

  // optional .client.gem_query_info gem_info = 10;
  if (has_gem_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gem_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.CLIENT_QUERY_TYPE_E type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 opt_flag = 2;
    if (has_opt_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_flag());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.mount_query_info mount_info = 6;
    if (has_mount_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount_info());
    }

    // optional .client.pet_query_info pet_info = 7;
    if (has_pet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client.bows_query_info bow_info = 9;
    if (has_bow_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bow_info());
    }

    // optional .client.gem_query_info gem_info = 10;
    if (has_gem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gem_info());
    }

  }
  // repeated .client.role_smy_info rsi = 4;
  total_size += 1 * this->rsi_size();
  for (int i = 0; i < this->rsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rsi(i));
  }

  // repeated .client.role_query_info role_info = 5;
  total_size += 1 * this->role_info_size();
  for (int i = 0; i < this->role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_info(i));
  }

  // repeated .client.potential_query_info potential_info = 8;
  total_size += 1 * this->potential_info_size();
  for (int i = 0; i < this->potential_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->potential_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_rsp::MergeFrom(const query_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rsi_.MergeFrom(from.rsi_);
  role_info_.MergeFrom(from.role_info_);
  potential_info_.MergeFrom(from.potential_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt_flag()) {
      set_opt_flag(from.opt_flag());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_mount_info()) {
      mutable_mount_info()->::client::mount_query_info::MergeFrom(from.mount_info());
    }
    if (from.has_pet_info()) {
      mutable_pet_info()->::client::pet_query_info::MergeFrom(from.pet_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bow_info()) {
      mutable_bow_info()->::client::bows_query_info::MergeFrom(from.bow_info());
    }
    if (from.has_gem_info()) {
      mutable_gem_info()->::client::gem_query_info::MergeFrom(from.gem_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_rsp::CopyFrom(const query_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rsi_size(); i++) {
    if (!this->rsi(i).IsInitialized()) return false;
  }
  for (int i = 0; i < role_info_size(); i++) {
    if (!this->role_info(i).IsInitialized()) return false;
  }
  if (has_pet_info()) {
    if (!this->pet_info().IsInitialized()) return false;
  }
  for (int i = 0; i < potential_info_size(); i++) {
    if (!this->potential_info(i).IsInitialized()) return false;
  }
  return true;
}

void query_rsp::Swap(query_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(opt_flag_, other->opt_flag_);
    std::swap(role_id_, other->role_id_);
    rsi_.Swap(&other->rsi_);
    role_info_.Swap(&other->role_info_);
    std::swap(mount_info_, other->mount_info_);
    std::swap(pet_info_, other->pet_info_);
    potential_info_.Swap(&other->potential_info_);
    std::swap(bow_info_, other->bow_info_);
    std::swap(gem_info_, other->gem_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_rsp_descriptor_;
  metadata.reflection = query_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_to_center_query::kRoleIdFieldNumber;
const int game_to_center_query::kQueryIdFieldNumber;
const int game_to_center_query::kQueryInfoFieldNumber;
#endif  // !_MSC_VER

game_to_center_query::game_to_center_query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_to_center_query::InitAsDefaultInstance() {
  query_info_ = const_cast< ::client::query_rsp*>(&::client::query_rsp::default_instance());
}

game_to_center_query::game_to_center_query(const game_to_center_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_to_center_query::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  query_id_ = 0u;
  query_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_to_center_query::~game_to_center_query() {
  SharedDtor();
}

void game_to_center_query::SharedDtor() {
  if (this != default_instance_) {
    delete query_info_;
  }
}

void game_to_center_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_to_center_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_to_center_query_descriptor_;
}

const game_to_center_query& game_to_center_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2equery_2eproto();
  return *default_instance_;
}

game_to_center_query* game_to_center_query::default_instance_ = NULL;

game_to_center_query* game_to_center_query::New() const {
  return new game_to_center_query;
}

void game_to_center_query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    query_id_ = 0u;
    if (has_query_info()) {
      if (query_info_ != NULL) query_info_->::client::query_rsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_to_center_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_id;
        break;
      }

      // required uint32 query_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_id_)));
          set_has_query_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query_info;
        break;
      }

      // optional .client.query_rsp query_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_to_center_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 query_id = 2;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->query_id(), output);
  }

  // optional .client.query_rsp query_info = 3;
  if (has_query_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->query_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_to_center_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 query_id = 2;
  if (has_query_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->query_id(), target);
  }

  // optional .client.query_rsp query_info = 3;
  if (has_query_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->query_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_to_center_query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 query_id = 2;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_id());
    }

    // optional .client.query_rsp query_info = 3;
    if (has_query_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_to_center_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_to_center_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_to_center_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_to_center_query::MergeFrom(const game_to_center_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
    if (from.has_query_info()) {
      mutable_query_info()->::client::query_rsp::MergeFrom(from.query_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_to_center_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_to_center_query::CopyFrom(const game_to_center_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_to_center_query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_query_info()) {
    if (!this->query_info().IsInitialized()) return false;
  }
  return true;
}

void game_to_center_query::Swap(game_to_center_query* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(query_id_, other->query_id_);
    std::swap(query_info_, other->query_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_to_center_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_to_center_query_descriptor_;
  metadata.reflection = game_to_center_query_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
