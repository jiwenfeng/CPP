// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_skill_msg.proto

#ifndef PROTOBUF_client_2erole_5fskill_5fmsg_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5fskill_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

class skill_data;
class role_skill_effect_upgrade_req;
class role_skill_effect_upgrade_rsp;
class role_skill_msg;
class skills;
class role_skill_upgrade_req;
class role_skill_upgrade_rsp;
class set_default_skill_req;
class set_default_skill_rsp;
class skill_point_time_req;
class skill_point_time_rsp;
class gem_skill_study_req;
class gem_skill_study_rsp;
class gem_skill_replace_req;
class gem_skill_replace_rsp;
class bows_skill_studt_rsp;

enum role_skill_upgrade_rsp_RET {
  role_skill_upgrade_rsp_RET_SUCCESS = 0,
  role_skill_upgrade_rsp_RET_LIMIT_MONEY = 1,
  role_skill_upgrade_rsp_RET_LIMIT_SKILL = 2,
  role_skill_upgrade_rsp_RET_LIMIT_MAX = 3,
  role_skill_upgrade_rsp_RET_LIMIT_LVL = 4,
  role_skill_upgrade_rsp_RET_LIMIT_BOOK = 5,
  role_skill_upgrade_rsp_RET_LIMIT_YUNLI = 6,
  role_skill_upgrade_rsp_RET_LIMIT_ITEM = 7,
  role_skill_upgrade_rsp_RET_LIMIT_CONF = 8
};
bool role_skill_upgrade_rsp_RET_IsValid(int value);
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp_RET_RET_MIN = role_skill_upgrade_rsp_RET_SUCCESS;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp_RET_RET_MAX = role_skill_upgrade_rsp_RET_LIMIT_CONF;
const int role_skill_upgrade_rsp_RET_RET_ARRAYSIZE = role_skill_upgrade_rsp_RET_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* role_skill_upgrade_rsp_RET_descriptor();
inline const ::std::string& role_skill_upgrade_rsp_RET_Name(role_skill_upgrade_rsp_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    role_skill_upgrade_rsp_RET_descriptor(), value);
}
inline bool role_skill_upgrade_rsp_RET_Parse(
    const ::std::string& name, role_skill_upgrade_rsp_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<role_skill_upgrade_rsp_RET>(
    role_skill_upgrade_rsp_RET_descriptor(), name, value);
}
enum set_default_skill_rsp_RET {
  set_default_skill_rsp_RET_SUCCESS = 0,
  set_default_skill_rsp_RET_ERROR_SKILL = 1,
  set_default_skill_rsp_RET_ERROR_RESET = 2,
  set_default_skill_rsp_RET_ERROR_LIMIT = 3
};
bool set_default_skill_rsp_RET_IsValid(int value);
const set_default_skill_rsp_RET set_default_skill_rsp_RET_RET_MIN = set_default_skill_rsp_RET_SUCCESS;
const set_default_skill_rsp_RET set_default_skill_rsp_RET_RET_MAX = set_default_skill_rsp_RET_ERROR_LIMIT;
const int set_default_skill_rsp_RET_RET_ARRAYSIZE = set_default_skill_rsp_RET_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* set_default_skill_rsp_RET_descriptor();
inline const ::std::string& set_default_skill_rsp_RET_Name(set_default_skill_rsp_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    set_default_skill_rsp_RET_descriptor(), value);
}
inline bool set_default_skill_rsp_RET_Parse(
    const ::std::string& name, set_default_skill_rsp_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<set_default_skill_rsp_RET>(
    set_default_skill_rsp_RET_descriptor(), name, value);
}
// ===================================================================

class skill_data : public ::google::protobuf::Message {
 public:
  skill_data();
  virtual ~skill_data();

  skill_data(const skill_data& from);

  inline skill_data& operator=(const skill_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_data& default_instance();

  void Swap(skill_data* other);

  // implements Message ----------------------------------------------

  skill_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_data& from);
  void MergeFrom(const skill_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::uint32 cd() const;
  inline void set_cd(::google::protobuf::uint32 value);

  // required uint32 mas = 3;
  inline bool has_mas() const;
  inline void clear_mas();
  static const int kMasFieldNumber = 3;
  inline ::google::protobuf::uint32 mas() const;
  inline void set_mas(::google::protobuf::uint32 value);

  // required uint32 serial = 4;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 4;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 effect_id = 6;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 6;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.skill_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_mas();
  inline void clear_has_mas();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cd_;
  ::google::protobuf::uint32 mas_;
  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 effect_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static skill_data* default_instance_;
};
// -------------------------------------------------------------------

class role_skill_effect_upgrade_req : public ::google::protobuf::Message {
 public:
  role_skill_effect_upgrade_req();
  virtual ~role_skill_effect_upgrade_req();

  role_skill_effect_upgrade_req(const role_skill_effect_upgrade_req& from);

  inline role_skill_effect_upgrade_req& operator=(const role_skill_effect_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_skill_effect_upgrade_req& default_instance();

  void Swap(role_skill_effect_upgrade_req* other);

  // implements Message ----------------------------------------------

  role_skill_effect_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_skill_effect_upgrade_req& from);
  void MergeFrom(const role_skill_effect_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional uint32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.role_skill_effect_upgrade_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 pet_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_skill_effect_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class role_skill_effect_upgrade_rsp : public ::google::protobuf::Message {
 public:
  role_skill_effect_upgrade_rsp();
  virtual ~role_skill_effect_upgrade_rsp();

  role_skill_effect_upgrade_rsp(const role_skill_effect_upgrade_rsp& from);

  inline role_skill_effect_upgrade_rsp& operator=(const role_skill_effect_upgrade_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_skill_effect_upgrade_rsp& default_instance();

  void Swap(role_skill_effect_upgrade_rsp* other);

  // implements Message ----------------------------------------------

  role_skill_effect_upgrade_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_skill_effect_upgrade_rsp& from);
  void MergeFrom(const role_skill_effect_upgrade_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.skill_data old_skill = 2;
  inline bool has_old_skill() const;
  inline void clear_old_skill();
  static const int kOldSkillFieldNumber = 2;
  inline const ::client::skill_data& old_skill() const;
  inline ::client::skill_data* mutable_old_skill();
  inline ::client::skill_data* release_old_skill();
  inline void set_allocated_old_skill(::client::skill_data* old_skill);

  // optional .client.skill_data new_skill = 3;
  inline bool has_new_skill() const;
  inline void clear_new_skill();
  static const int kNewSkillFieldNumber = 3;
  inline const ::client::skill_data& new_skill() const;
  inline ::client::skill_data* mutable_new_skill();
  inline ::client::skill_data* release_new_skill();
  inline void set_allocated_new_skill(::client::skill_data* new_skill);

  // @@protoc_insertion_point(class_scope:client.role_skill_effect_upgrade_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_old_skill();
  inline void clear_has_old_skill();
  inline void set_has_new_skill();
  inline void clear_has_new_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::skill_data* old_skill_;
  ::client::skill_data* new_skill_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_skill_effect_upgrade_rsp* default_instance_;
};
// -------------------------------------------------------------------

class role_skill_msg : public ::google::protobuf::Message {
 public:
  role_skill_msg();
  virtual ~role_skill_msg();

  role_skill_msg(const role_skill_msg& from);

  inline role_skill_msg& operator=(const role_skill_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_skill_msg& default_instance();

  void Swap(role_skill_msg* other);

  // implements Message ----------------------------------------------

  role_skill_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_skill_msg& from);
  void MergeFrom(const role_skill_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 1;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 1;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated .client.skill_data sk = 2;
  inline int sk_size() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 2;
  inline const ::client::skill_data& sk(int index) const;
  inline ::client::skill_data* mutable_sk(int index);
  inline ::client::skill_data* add_sk();
  inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
      sk() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
      mutable_sk();

  // @@protoc_insertion_point(class_scope:client.role_skill_msg)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::google::protobuf::RepeatedPtrField< ::client::skill_data > sk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_skill_msg* default_instance_;
};
// -------------------------------------------------------------------

class skills : public ::google::protobuf::Message {
 public:
  skills();
  virtual ~skills();

  skills(const skills& from);

  inline skills& operator=(const skills& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skills& default_instance();

  void Swap(skills* other);

  // implements Message ----------------------------------------------

  skills* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skills& from);
  void MergeFrom(const skills& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.skill_data sk = 1;
  inline int sk_size() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 1;
  inline const ::client::skill_data& sk(int index) const;
  inline ::client::skill_data* mutable_sk(int index);
  inline ::client::skill_data* add_sk();
  inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
      sk() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
      mutable_sk();

  // @@protoc_insertion_point(class_scope:client.skills)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::skill_data > sk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static skills* default_instance_;
};
// -------------------------------------------------------------------

class role_skill_upgrade_req : public ::google::protobuf::Message {
 public:
  role_skill_upgrade_req();
  virtual ~role_skill_upgrade_req();

  role_skill_upgrade_req(const role_skill_upgrade_req& from);

  inline role_skill_upgrade_req& operator=(const role_skill_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_skill_upgrade_req& default_instance();

  void Swap(role_skill_upgrade_req* other);

  // implements Message ----------------------------------------------

  role_skill_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_skill_upgrade_req& from);
  void MergeFrom(const role_skill_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional uint32 ser_index = 2;
  inline bool has_ser_index() const;
  inline void clear_ser_index();
  static const int kSerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 ser_index() const;
  inline void set_ser_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.role_skill_upgrade_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_ser_index();
  inline void clear_has_ser_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 ser_index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_skill_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class role_skill_upgrade_rsp : public ::google::protobuf::Message {
 public:
  role_skill_upgrade_rsp();
  virtual ~role_skill_upgrade_rsp();

  role_skill_upgrade_rsp(const role_skill_upgrade_rsp& from);

  inline role_skill_upgrade_rsp& operator=(const role_skill_upgrade_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_skill_upgrade_rsp& default_instance();

  void Swap(role_skill_upgrade_rsp* other);

  // implements Message ----------------------------------------------

  role_skill_upgrade_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_skill_upgrade_rsp& from);
  void MergeFrom(const role_skill_upgrade_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef role_skill_upgrade_rsp_RET RET;
  static const RET SUCCESS = role_skill_upgrade_rsp_RET_SUCCESS;
  static const RET LIMIT_MONEY = role_skill_upgrade_rsp_RET_LIMIT_MONEY;
  static const RET LIMIT_SKILL = role_skill_upgrade_rsp_RET_LIMIT_SKILL;
  static const RET LIMIT_MAX = role_skill_upgrade_rsp_RET_LIMIT_MAX;
  static const RET LIMIT_LVL = role_skill_upgrade_rsp_RET_LIMIT_LVL;
  static const RET LIMIT_BOOK = role_skill_upgrade_rsp_RET_LIMIT_BOOK;
  static const RET LIMIT_YUNLI = role_skill_upgrade_rsp_RET_LIMIT_YUNLI;
  static const RET LIMIT_ITEM = role_skill_upgrade_rsp_RET_LIMIT_ITEM;
  static const RET LIMIT_CONF = role_skill_upgrade_rsp_RET_LIMIT_CONF;
  static inline bool RET_IsValid(int value) {
    return role_skill_upgrade_rsp_RET_IsValid(value);
  }
  static const RET RET_MIN =
    role_skill_upgrade_rsp_RET_RET_MIN;
  static const RET RET_MAX =
    role_skill_upgrade_rsp_RET_RET_MAX;
  static const int RET_ARRAYSIZE =
    role_skill_upgrade_rsp_RET_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RET_descriptor() {
    return role_skill_upgrade_rsp_RET_descriptor();
  }
  static inline const ::std::string& RET_Name(RET value) {
    return role_skill_upgrade_rsp_RET_Name(value);
  }
  static inline bool RET_Parse(const ::std::string& name,
      RET* value) {
    return role_skill_upgrade_rsp_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.role_skill_upgrade_rsp.RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::role_skill_upgrade_rsp_RET ret() const;
  inline void set_ret(::client::role_skill_upgrade_rsp_RET value);

  // optional .client.skill_data old_skill = 2;
  inline bool has_old_skill() const;
  inline void clear_old_skill();
  static const int kOldSkillFieldNumber = 2;
  inline const ::client::skill_data& old_skill() const;
  inline ::client::skill_data* mutable_old_skill();
  inline ::client::skill_data* release_old_skill();
  inline void set_allocated_old_skill(::client::skill_data* old_skill);

  // optional .client.skill_data new_skill = 3;
  inline bool has_new_skill() const;
  inline void clear_new_skill();
  static const int kNewSkillFieldNumber = 3;
  inline const ::client::skill_data& new_skill() const;
  inline ::client::skill_data* mutable_new_skill();
  inline ::client::skill_data* release_new_skill();
  inline void set_allocated_new_skill(::client::skill_data* new_skill);

  // @@protoc_insertion_point(class_scope:client.role_skill_upgrade_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_old_skill();
  inline void clear_has_old_skill();
  inline void set_has_new_skill();
  inline void clear_has_new_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::skill_data* old_skill_;
  ::client::skill_data* new_skill_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_skill_upgrade_rsp* default_instance_;
};
// -------------------------------------------------------------------

class set_default_skill_req : public ::google::protobuf::Message {
 public:
  set_default_skill_req();
  virtual ~set_default_skill_req();

  set_default_skill_req(const set_default_skill_req& from);

  inline set_default_skill_req& operator=(const set_default_skill_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_default_skill_req& default_instance();

  void Swap(set_default_skill_req* other);

  // implements Message ----------------------------------------------

  set_default_skill_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_default_skill_req& from);
  void MergeFrom(const set_default_skill_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.set_default_skill_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static set_default_skill_req* default_instance_;
};
// -------------------------------------------------------------------

class set_default_skill_rsp : public ::google::protobuf::Message {
 public:
  set_default_skill_rsp();
  virtual ~set_default_skill_rsp();

  set_default_skill_rsp(const set_default_skill_rsp& from);

  inline set_default_skill_rsp& operator=(const set_default_skill_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_default_skill_rsp& default_instance();

  void Swap(set_default_skill_rsp* other);

  // implements Message ----------------------------------------------

  set_default_skill_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_default_skill_rsp& from);
  void MergeFrom(const set_default_skill_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef set_default_skill_rsp_RET RET;
  static const RET SUCCESS = set_default_skill_rsp_RET_SUCCESS;
  static const RET ERROR_SKILL = set_default_skill_rsp_RET_ERROR_SKILL;
  static const RET ERROR_RESET = set_default_skill_rsp_RET_ERROR_RESET;
  static const RET ERROR_LIMIT = set_default_skill_rsp_RET_ERROR_LIMIT;
  static inline bool RET_IsValid(int value) {
    return set_default_skill_rsp_RET_IsValid(value);
  }
  static const RET RET_MIN =
    set_default_skill_rsp_RET_RET_MIN;
  static const RET RET_MAX =
    set_default_skill_rsp_RET_RET_MAX;
  static const int RET_ARRAYSIZE =
    set_default_skill_rsp_RET_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RET_descriptor() {
    return set_default_skill_rsp_RET_descriptor();
  }
  static inline const ::std::string& RET_Name(RET value) {
    return set_default_skill_rsp_RET_Name(value);
  }
  static inline bool RET_Parse(const ::std::string& name,
      RET* value) {
    return set_default_skill_rsp_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.set_default_skill_rsp.RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::set_default_skill_rsp_RET ret() const;
  inline void set_ret(::client::set_default_skill_rsp_RET value);

  // optional uint32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_default_skill_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static set_default_skill_rsp* default_instance_;
};
// -------------------------------------------------------------------

class skill_point_time_req : public ::google::protobuf::Message {
 public:
  skill_point_time_req();
  virtual ~skill_point_time_req();

  skill_point_time_req(const skill_point_time_req& from);

  inline skill_point_time_req& operator=(const skill_point_time_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_point_time_req& default_instance();

  void Swap(skill_point_time_req* other);

  // implements Message ----------------------------------------------

  skill_point_time_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_point_time_req& from);
  void MergeFrom(const skill_point_time_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.skill_point_time_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static skill_point_time_req* default_instance_;
};
// -------------------------------------------------------------------

class skill_point_time_rsp : public ::google::protobuf::Message {
 public:
  skill_point_time_rsp();
  virtual ~skill_point_time_rsp();

  skill_point_time_rsp(const skill_point_time_rsp& from);

  inline skill_point_time_rsp& operator=(const skill_point_time_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_point_time_rsp& default_instance();

  void Swap(skill_point_time_rsp* other);

  // implements Message ----------------------------------------------

  skill_point_time_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_point_time_rsp& from);
  void MergeFrom(const skill_point_time_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 remain_time = 1;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remain_time() const;
  inline void set_remain_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.skill_point_time_rsp)
 private:
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static skill_point_time_rsp* default_instance_;
};
// -------------------------------------------------------------------

class gem_skill_study_req : public ::google::protobuf::Message {
 public:
  gem_skill_study_req();
  virtual ~gem_skill_study_req();

  gem_skill_study_req(const gem_skill_study_req& from);

  inline gem_skill_study_req& operator=(const gem_skill_study_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gem_skill_study_req& default_instance();

  void Swap(gem_skill_study_req* other);

  // implements Message ----------------------------------------------

  gem_skill_study_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gem_skill_study_req& from);
  void MergeFrom(const gem_skill_study_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // required uint32 ser_index = 2;
  inline bool has_ser_index() const;
  inline void clear_ser_index();
  static const int kSerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 ser_index() const;
  inline void set_ser_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.gem_skill_study_req)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_ser_index();
  inline void clear_has_ser_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 ser_index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gem_skill_study_req* default_instance_;
};
// -------------------------------------------------------------------

class gem_skill_study_rsp : public ::google::protobuf::Message {
 public:
  gem_skill_study_rsp();
  virtual ~gem_skill_study_rsp();

  gem_skill_study_rsp(const gem_skill_study_rsp& from);

  inline gem_skill_study_rsp& operator=(const gem_skill_study_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gem_skill_study_rsp& default_instance();

  void Swap(gem_skill_study_rsp* other);

  // implements Message ----------------------------------------------

  gem_skill_study_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gem_skill_study_rsp& from);
  void MergeFrom(const gem_skill_study_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional uint32 ser_index = 2;
  inline bool has_ser_index() const;
  inline void clear_ser_index();
  static const int kSerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 ser_index() const;
  inline void set_ser_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.gem_skill_study_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_ser_index();
  inline void clear_has_ser_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 ser_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gem_skill_study_rsp* default_instance_;
};
// -------------------------------------------------------------------

class gem_skill_replace_req : public ::google::protobuf::Message {
 public:
  gem_skill_replace_req();
  virtual ~gem_skill_replace_req();

  gem_skill_replace_req(const gem_skill_replace_req& from);

  inline gem_skill_replace_req& operator=(const gem_skill_replace_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gem_skill_replace_req& default_instance();

  void Swap(gem_skill_replace_req* other);

  // implements Message ----------------------------------------------

  gem_skill_replace_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gem_skill_replace_req& from);
  void MergeFrom(const gem_skill_replace_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // required uint32 ser_index = 2;
  inline bool has_ser_index() const;
  inline void clear_ser_index();
  static const int kSerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 ser_index() const;
  inline void set_ser_index(::google::protobuf::uint32 value);

  // required uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.gem_skill_replace_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_ser_index();
  inline void clear_has_ser_index();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 ser_index_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gem_skill_replace_req* default_instance_;
};
// -------------------------------------------------------------------

class gem_skill_replace_rsp : public ::google::protobuf::Message {
 public:
  gem_skill_replace_rsp();
  virtual ~gem_skill_replace_rsp();

  gem_skill_replace_rsp(const gem_skill_replace_rsp& from);

  inline gem_skill_replace_rsp& operator=(const gem_skill_replace_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gem_skill_replace_rsp& default_instance();

  void Swap(gem_skill_replace_rsp* other);

  // implements Message ----------------------------------------------

  gem_skill_replace_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gem_skill_replace_rsp& from);
  void MergeFrom(const gem_skill_replace_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.skill_data old_skill = 2;
  inline bool has_old_skill() const;
  inline void clear_old_skill();
  static const int kOldSkillFieldNumber = 2;
  inline const ::client::skill_data& old_skill() const;
  inline ::client::skill_data* mutable_old_skill();
  inline ::client::skill_data* release_old_skill();
  inline void set_allocated_old_skill(::client::skill_data* old_skill);

  // optional .client.skill_data new_skill = 3;
  inline bool has_new_skill() const;
  inline void clear_new_skill();
  static const int kNewSkillFieldNumber = 3;
  inline const ::client::skill_data& new_skill() const;
  inline ::client::skill_data* mutable_new_skill();
  inline ::client::skill_data* release_new_skill();
  inline void set_allocated_new_skill(::client::skill_data* new_skill);

  // @@protoc_insertion_point(class_scope:client.gem_skill_replace_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_old_skill();
  inline void clear_has_old_skill();
  inline void set_has_new_skill();
  inline void clear_has_new_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::skill_data* old_skill_;
  ::client::skill_data* new_skill_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gem_skill_replace_rsp* default_instance_;
};
// -------------------------------------------------------------------

class bows_skill_studt_rsp : public ::google::protobuf::Message {
 public:
  bows_skill_studt_rsp();
  virtual ~bows_skill_studt_rsp();

  bows_skill_studt_rsp(const bows_skill_studt_rsp& from);

  inline bows_skill_studt_rsp& operator=(const bows_skill_studt_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bows_skill_studt_rsp& default_instance();

  void Swap(bows_skill_studt_rsp* other);

  // implements Message ----------------------------------------------

  bows_skill_studt_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bows_skill_studt_rsp& from);
  void MergeFrom(const bows_skill_studt_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional .client.skill_data old_skill = 2;
  inline bool has_old_skill() const;
  inline void clear_old_skill();
  static const int kOldSkillFieldNumber = 2;
  inline const ::client::skill_data& old_skill() const;
  inline ::client::skill_data* mutable_old_skill();
  inline ::client::skill_data* release_old_skill();
  inline void set_allocated_old_skill(::client::skill_data* old_skill);

  // optional .client.skill_data new_skill = 3;
  inline bool has_new_skill() const;
  inline void clear_new_skill();
  static const int kNewSkillFieldNumber = 3;
  inline const ::client::skill_data& new_skill() const;
  inline ::client::skill_data* mutable_new_skill();
  inline ::client::skill_data* release_new_skill();
  inline void set_allocated_new_skill(::client::skill_data* new_skill);

  // @@protoc_insertion_point(class_scope:client.bows_skill_studt_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_old_skill();
  inline void clear_has_old_skill();
  inline void set_has_new_skill();
  inline void clear_has_new_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::skill_data* old_skill_;
  ::client::skill_data* new_skill_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static bows_skill_studt_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// skill_data

// required uint32 id = 1;
inline bool skill_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skill_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skill_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skill_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 skill_data::id() const {
  return id_;
}
inline void skill_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 cd = 2;
inline bool skill_data::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skill_data::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skill_data::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skill_data::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
inline ::google::protobuf::uint32 skill_data::cd() const {
  return cd_;
}
inline void skill_data::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
}

// required uint32 mas = 3;
inline bool skill_data::has_mas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void skill_data::set_has_mas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void skill_data::clear_has_mas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void skill_data::clear_mas() {
  mas_ = 0u;
  clear_has_mas();
}
inline ::google::protobuf::uint32 skill_data::mas() const {
  return mas_;
}
inline void skill_data::set_mas(::google::protobuf::uint32 value) {
  set_has_mas();
  mas_ = value;
}

// required uint32 serial = 4;
inline bool skill_data::has_serial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void skill_data::set_has_serial() {
  _has_bits_[0] |= 0x00000008u;
}
inline void skill_data::clear_has_serial() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void skill_data::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 skill_data::serial() const {
  return serial_;
}
inline void skill_data::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 level = 5;
inline bool skill_data::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void skill_data::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void skill_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void skill_data::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 skill_data::level() const {
  return level_;
}
inline void skill_data::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 effect_id = 6;
inline bool skill_data::has_effect_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void skill_data::set_has_effect_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void skill_data::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void skill_data::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 skill_data::effect_id() const {
  return effect_id_;
}
inline void skill_data::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// -------------------------------------------------------------------

// role_skill_effect_upgrade_req

// required uint32 skill_id = 1;
inline bool role_skill_effect_upgrade_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_skill_effect_upgrade_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_skill_effect_upgrade_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_skill_effect_upgrade_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 role_skill_effect_upgrade_req::skill_id() const {
  return skill_id_;
}
inline void role_skill_effect_upgrade_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 pet_id = 2;
inline bool role_skill_effect_upgrade_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_skill_effect_upgrade_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_skill_effect_upgrade_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_skill_effect_upgrade_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 role_skill_effect_upgrade_req::pet_id() const {
  return pet_id_;
}
inline void role_skill_effect_upgrade_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool role_skill_effect_upgrade_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_skill_effect_upgrade_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_skill_effect_upgrade_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_skill_effect_upgrade_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& role_skill_effect_upgrade_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* role_skill_effect_upgrade_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* role_skill_effect_upgrade_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void role_skill_effect_upgrade_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_skill_effect_upgrade_rsp

// required uint32 result_type = 1;
inline bool role_skill_effect_upgrade_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_skill_effect_upgrade_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_skill_effect_upgrade_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_skill_effect_upgrade_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 role_skill_effect_upgrade_rsp::result_type() const {
  return result_type_;
}
inline void role_skill_effect_upgrade_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.skill_data old_skill = 2;
inline bool role_skill_effect_upgrade_rsp::has_old_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_skill_effect_upgrade_rsp::set_has_old_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_skill_effect_upgrade_rsp::clear_has_old_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_skill_effect_upgrade_rsp::clear_old_skill() {
  if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
  clear_has_old_skill();
}
inline const ::client::skill_data& role_skill_effect_upgrade_rsp::old_skill() const {
  return old_skill_ != NULL ? *old_skill_ : *default_instance_->old_skill_;
}
inline ::client::skill_data* role_skill_effect_upgrade_rsp::mutable_old_skill() {
  set_has_old_skill();
  if (old_skill_ == NULL) old_skill_ = new ::client::skill_data;
  return old_skill_;
}
inline ::client::skill_data* role_skill_effect_upgrade_rsp::release_old_skill() {
  clear_has_old_skill();
  ::client::skill_data* temp = old_skill_;
  old_skill_ = NULL;
  return temp;
}
inline void role_skill_effect_upgrade_rsp::set_allocated_old_skill(::client::skill_data* old_skill) {
  delete old_skill_;
  old_skill_ = old_skill;
  if (old_skill) {
    set_has_old_skill();
  } else {
    clear_has_old_skill();
  }
}

// optional .client.skill_data new_skill = 3;
inline bool role_skill_effect_upgrade_rsp::has_new_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_skill_effect_upgrade_rsp::set_has_new_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_skill_effect_upgrade_rsp::clear_has_new_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_skill_effect_upgrade_rsp::clear_new_skill() {
  if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
  clear_has_new_skill();
}
inline const ::client::skill_data& role_skill_effect_upgrade_rsp::new_skill() const {
  return new_skill_ != NULL ? *new_skill_ : *default_instance_->new_skill_;
}
inline ::client::skill_data* role_skill_effect_upgrade_rsp::mutable_new_skill() {
  set_has_new_skill();
  if (new_skill_ == NULL) new_skill_ = new ::client::skill_data;
  return new_skill_;
}
inline ::client::skill_data* role_skill_effect_upgrade_rsp::release_new_skill() {
  clear_has_new_skill();
  ::client::skill_data* temp = new_skill_;
  new_skill_ = NULL;
  return temp;
}
inline void role_skill_effect_upgrade_rsp::set_allocated_new_skill(::client::skill_data* new_skill) {
  delete new_skill_;
  new_skill_ = new_skill;
  if (new_skill) {
    set_has_new_skill();
  } else {
    clear_has_new_skill();
  }
}

// -------------------------------------------------------------------

// role_skill_msg

// required .client.role_data rd = 1;
inline bool role_skill_msg::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_skill_msg::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_skill_msg::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_skill_msg::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& role_skill_msg::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* role_skill_msg::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* role_skill_msg::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void role_skill_msg::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated .client.skill_data sk = 2;
inline int role_skill_msg::sk_size() const {
  return sk_.size();
}
inline void role_skill_msg::clear_sk() {
  sk_.Clear();
}
inline const ::client::skill_data& role_skill_msg::sk(int index) const {
  return sk_.Get(index);
}
inline ::client::skill_data* role_skill_msg::mutable_sk(int index) {
  return sk_.Mutable(index);
}
inline ::client::skill_data* role_skill_msg::add_sk() {
  return sk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
role_skill_msg::sk() const {
  return sk_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
role_skill_msg::mutable_sk() {
  return &sk_;
}

// -------------------------------------------------------------------

// skills

// repeated .client.skill_data sk = 1;
inline int skills::sk_size() const {
  return sk_.size();
}
inline void skills::clear_sk() {
  sk_.Clear();
}
inline const ::client::skill_data& skills::sk(int index) const {
  return sk_.Get(index);
}
inline ::client::skill_data* skills::mutable_sk(int index) {
  return sk_.Mutable(index);
}
inline ::client::skill_data* skills::add_sk() {
  return sk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
skills::sk() const {
  return sk_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
skills::mutable_sk() {
  return &sk_;
}

// -------------------------------------------------------------------

// role_skill_upgrade_req

// required uint32 skill_id = 1;
inline bool role_skill_upgrade_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_skill_upgrade_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_skill_upgrade_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_skill_upgrade_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 role_skill_upgrade_req::skill_id() const {
  return skill_id_;
}
inline void role_skill_upgrade_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 ser_index = 2;
inline bool role_skill_upgrade_req::has_ser_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_skill_upgrade_req::set_has_ser_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_skill_upgrade_req::clear_has_ser_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_skill_upgrade_req::clear_ser_index() {
  ser_index_ = 0u;
  clear_has_ser_index();
}
inline ::google::protobuf::uint32 role_skill_upgrade_req::ser_index() const {
  return ser_index_;
}
inline void role_skill_upgrade_req::set_ser_index(::google::protobuf::uint32 value) {
  set_has_ser_index();
  ser_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool role_skill_upgrade_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_skill_upgrade_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_skill_upgrade_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_skill_upgrade_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& role_skill_upgrade_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* role_skill_upgrade_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* role_skill_upgrade_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void role_skill_upgrade_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_skill_upgrade_rsp

// required .client.role_skill_upgrade_rsp.RET ret = 1;
inline bool role_skill_upgrade_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_skill_upgrade_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_skill_upgrade_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_skill_upgrade_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::ret() const {
  return static_cast< ::client::role_skill_upgrade_rsp_RET >(ret_);
}
inline void role_skill_upgrade_rsp::set_ret(::client::role_skill_upgrade_rsp_RET value) {
  assert(::client::role_skill_upgrade_rsp_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .client.skill_data old_skill = 2;
inline bool role_skill_upgrade_rsp::has_old_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_skill_upgrade_rsp::set_has_old_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_skill_upgrade_rsp::clear_has_old_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_skill_upgrade_rsp::clear_old_skill() {
  if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
  clear_has_old_skill();
}
inline const ::client::skill_data& role_skill_upgrade_rsp::old_skill() const {
  return old_skill_ != NULL ? *old_skill_ : *default_instance_->old_skill_;
}
inline ::client::skill_data* role_skill_upgrade_rsp::mutable_old_skill() {
  set_has_old_skill();
  if (old_skill_ == NULL) old_skill_ = new ::client::skill_data;
  return old_skill_;
}
inline ::client::skill_data* role_skill_upgrade_rsp::release_old_skill() {
  clear_has_old_skill();
  ::client::skill_data* temp = old_skill_;
  old_skill_ = NULL;
  return temp;
}
inline void role_skill_upgrade_rsp::set_allocated_old_skill(::client::skill_data* old_skill) {
  delete old_skill_;
  old_skill_ = old_skill;
  if (old_skill) {
    set_has_old_skill();
  } else {
    clear_has_old_skill();
  }
}

// optional .client.skill_data new_skill = 3;
inline bool role_skill_upgrade_rsp::has_new_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_skill_upgrade_rsp::set_has_new_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_skill_upgrade_rsp::clear_has_new_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_skill_upgrade_rsp::clear_new_skill() {
  if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
  clear_has_new_skill();
}
inline const ::client::skill_data& role_skill_upgrade_rsp::new_skill() const {
  return new_skill_ != NULL ? *new_skill_ : *default_instance_->new_skill_;
}
inline ::client::skill_data* role_skill_upgrade_rsp::mutable_new_skill() {
  set_has_new_skill();
  if (new_skill_ == NULL) new_skill_ = new ::client::skill_data;
  return new_skill_;
}
inline ::client::skill_data* role_skill_upgrade_rsp::release_new_skill() {
  clear_has_new_skill();
  ::client::skill_data* temp = new_skill_;
  new_skill_ = NULL;
  return temp;
}
inline void role_skill_upgrade_rsp::set_allocated_new_skill(::client::skill_data* new_skill) {
  delete new_skill_;
  new_skill_ = new_skill;
  if (new_skill) {
    set_has_new_skill();
  } else {
    clear_has_new_skill();
  }
}

// -------------------------------------------------------------------

// set_default_skill_req

// required uint32 skill_id = 1;
inline bool set_default_skill_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_default_skill_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_default_skill_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_default_skill_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 set_default_skill_req::skill_id() const {
  return skill_id_;
}
inline void set_default_skill_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool set_default_skill_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_default_skill_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_default_skill_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_default_skill_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& set_default_skill_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* set_default_skill_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* set_default_skill_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void set_default_skill_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// set_default_skill_rsp

// required .client.set_default_skill_rsp.RET ret = 1;
inline bool set_default_skill_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_default_skill_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_default_skill_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_default_skill_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::set_default_skill_rsp_RET set_default_skill_rsp::ret() const {
  return static_cast< ::client::set_default_skill_rsp_RET >(ret_);
}
inline void set_default_skill_rsp::set_ret(::client::set_default_skill_rsp_RET value) {
  assert(::client::set_default_skill_rsp_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 skill_id = 2;
inline bool set_default_skill_rsp::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_default_skill_rsp::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_default_skill_rsp::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_default_skill_rsp::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 set_default_skill_rsp::skill_id() const {
  return skill_id_;
}
inline void set_default_skill_rsp::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// skill_point_time_req

// required uint32 unixtime = 1;
inline bool skill_point_time_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skill_point_time_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skill_point_time_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skill_point_time_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 skill_point_time_req::unixtime() const {
  return unixtime_;
}
inline void skill_point_time_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool skill_point_time_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skill_point_time_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skill_point_time_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skill_point_time_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& skill_point_time_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* skill_point_time_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* skill_point_time_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void skill_point_time_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// skill_point_time_rsp

// required uint32 remain_time = 1;
inline bool skill_point_time_rsp::has_remain_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skill_point_time_rsp::set_has_remain_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skill_point_time_rsp::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skill_point_time_rsp::clear_remain_time() {
  remain_time_ = 0u;
  clear_has_remain_time();
}
inline ::google::protobuf::uint32 skill_point_time_rsp::remain_time() const {
  return remain_time_;
}
inline void skill_point_time_rsp::set_remain_time(::google::protobuf::uint32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// -------------------------------------------------------------------

// gem_skill_study_req

// required uint32 item_id = 1;
inline bool gem_skill_study_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gem_skill_study_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gem_skill_study_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gem_skill_study_req::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 gem_skill_study_req::item_id() const {
  return item_id_;
}
inline void gem_skill_study_req::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 ser_index = 2;
inline bool gem_skill_study_req::has_ser_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gem_skill_study_req::set_has_ser_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gem_skill_study_req::clear_has_ser_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gem_skill_study_req::clear_ser_index() {
  ser_index_ = 0u;
  clear_has_ser_index();
}
inline ::google::protobuf::uint32 gem_skill_study_req::ser_index() const {
  return ser_index_;
}
inline void gem_skill_study_req::set_ser_index(::google::protobuf::uint32 value) {
  set_has_ser_index();
  ser_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool gem_skill_study_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gem_skill_study_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gem_skill_study_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gem_skill_study_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& gem_skill_study_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* gem_skill_study_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* gem_skill_study_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void gem_skill_study_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// gem_skill_study_rsp

// required uint32 result_type = 1;
inline bool gem_skill_study_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gem_skill_study_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gem_skill_study_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gem_skill_study_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 gem_skill_study_rsp::result_type() const {
  return result_type_;
}
inline void gem_skill_study_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional uint32 ser_index = 2;
inline bool gem_skill_study_rsp::has_ser_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gem_skill_study_rsp::set_has_ser_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gem_skill_study_rsp::clear_has_ser_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gem_skill_study_rsp::clear_ser_index() {
  ser_index_ = 0u;
  clear_has_ser_index();
}
inline ::google::protobuf::uint32 gem_skill_study_rsp::ser_index() const {
  return ser_index_;
}
inline void gem_skill_study_rsp::set_ser_index(::google::protobuf::uint32 value) {
  set_has_ser_index();
  ser_index_ = value;
}

// -------------------------------------------------------------------

// gem_skill_replace_req

// required uint32 skill_id = 1;
inline bool gem_skill_replace_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gem_skill_replace_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gem_skill_replace_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gem_skill_replace_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 gem_skill_replace_req::skill_id() const {
  return skill_id_;
}
inline void gem_skill_replace_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 ser_index = 2;
inline bool gem_skill_replace_req::has_ser_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gem_skill_replace_req::set_has_ser_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gem_skill_replace_req::clear_has_ser_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gem_skill_replace_req::clear_ser_index() {
  ser_index_ = 0u;
  clear_has_ser_index();
}
inline ::google::protobuf::uint32 gem_skill_replace_req::ser_index() const {
  return ser_index_;
}
inline void gem_skill_replace_req::set_ser_index(::google::protobuf::uint32 value) {
  set_has_ser_index();
  ser_index_ = value;
}

// required uint32 item_id = 3;
inline bool gem_skill_replace_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gem_skill_replace_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gem_skill_replace_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gem_skill_replace_req::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 gem_skill_replace_req::item_id() const {
  return item_id_;
}
inline void gem_skill_replace_req::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool gem_skill_replace_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gem_skill_replace_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gem_skill_replace_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gem_skill_replace_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& gem_skill_replace_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* gem_skill_replace_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* gem_skill_replace_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void gem_skill_replace_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// gem_skill_replace_rsp

// required uint32 result_type = 1;
inline bool gem_skill_replace_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gem_skill_replace_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gem_skill_replace_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gem_skill_replace_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 gem_skill_replace_rsp::result_type() const {
  return result_type_;
}
inline void gem_skill_replace_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.skill_data old_skill = 2;
inline bool gem_skill_replace_rsp::has_old_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gem_skill_replace_rsp::set_has_old_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gem_skill_replace_rsp::clear_has_old_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gem_skill_replace_rsp::clear_old_skill() {
  if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
  clear_has_old_skill();
}
inline const ::client::skill_data& gem_skill_replace_rsp::old_skill() const {
  return old_skill_ != NULL ? *old_skill_ : *default_instance_->old_skill_;
}
inline ::client::skill_data* gem_skill_replace_rsp::mutable_old_skill() {
  set_has_old_skill();
  if (old_skill_ == NULL) old_skill_ = new ::client::skill_data;
  return old_skill_;
}
inline ::client::skill_data* gem_skill_replace_rsp::release_old_skill() {
  clear_has_old_skill();
  ::client::skill_data* temp = old_skill_;
  old_skill_ = NULL;
  return temp;
}
inline void gem_skill_replace_rsp::set_allocated_old_skill(::client::skill_data* old_skill) {
  delete old_skill_;
  old_skill_ = old_skill;
  if (old_skill) {
    set_has_old_skill();
  } else {
    clear_has_old_skill();
  }
}

// optional .client.skill_data new_skill = 3;
inline bool gem_skill_replace_rsp::has_new_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gem_skill_replace_rsp::set_has_new_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gem_skill_replace_rsp::clear_has_new_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gem_skill_replace_rsp::clear_new_skill() {
  if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
  clear_has_new_skill();
}
inline const ::client::skill_data& gem_skill_replace_rsp::new_skill() const {
  return new_skill_ != NULL ? *new_skill_ : *default_instance_->new_skill_;
}
inline ::client::skill_data* gem_skill_replace_rsp::mutable_new_skill() {
  set_has_new_skill();
  if (new_skill_ == NULL) new_skill_ = new ::client::skill_data;
  return new_skill_;
}
inline ::client::skill_data* gem_skill_replace_rsp::release_new_skill() {
  clear_has_new_skill();
  ::client::skill_data* temp = new_skill_;
  new_skill_ = NULL;
  return temp;
}
inline void gem_skill_replace_rsp::set_allocated_new_skill(::client::skill_data* new_skill) {
  delete new_skill_;
  new_skill_ = new_skill;
  if (new_skill) {
    set_has_new_skill();
  } else {
    clear_has_new_skill();
  }
}

// -------------------------------------------------------------------

// bows_skill_studt_rsp

// required uint32 result_type = 1;
inline bool bows_skill_studt_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bows_skill_studt_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bows_skill_studt_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bows_skill_studt_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 bows_skill_studt_rsp::result_type() const {
  return result_type_;
}
inline void bows_skill_studt_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional .client.skill_data old_skill = 2;
inline bool bows_skill_studt_rsp::has_old_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bows_skill_studt_rsp::set_has_old_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bows_skill_studt_rsp::clear_has_old_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bows_skill_studt_rsp::clear_old_skill() {
  if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
  clear_has_old_skill();
}
inline const ::client::skill_data& bows_skill_studt_rsp::old_skill() const {
  return old_skill_ != NULL ? *old_skill_ : *default_instance_->old_skill_;
}
inline ::client::skill_data* bows_skill_studt_rsp::mutable_old_skill() {
  set_has_old_skill();
  if (old_skill_ == NULL) old_skill_ = new ::client::skill_data;
  return old_skill_;
}
inline ::client::skill_data* bows_skill_studt_rsp::release_old_skill() {
  clear_has_old_skill();
  ::client::skill_data* temp = old_skill_;
  old_skill_ = NULL;
  return temp;
}
inline void bows_skill_studt_rsp::set_allocated_old_skill(::client::skill_data* old_skill) {
  delete old_skill_;
  old_skill_ = old_skill;
  if (old_skill) {
    set_has_old_skill();
  } else {
    clear_has_old_skill();
  }
}

// optional .client.skill_data new_skill = 3;
inline bool bows_skill_studt_rsp::has_new_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bows_skill_studt_rsp::set_has_new_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bows_skill_studt_rsp::clear_has_new_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bows_skill_studt_rsp::clear_new_skill() {
  if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
  clear_has_new_skill();
}
inline const ::client::skill_data& bows_skill_studt_rsp::new_skill() const {
  return new_skill_ != NULL ? *new_skill_ : *default_instance_->new_skill_;
}
inline ::client::skill_data* bows_skill_studt_rsp::mutable_new_skill() {
  set_has_new_skill();
  if (new_skill_ == NULL) new_skill_ = new ::client::skill_data;
  return new_skill_;
}
inline ::client::skill_data* bows_skill_studt_rsp::release_new_skill() {
  clear_has_new_skill();
  ::client::skill_data* temp = new_skill_;
  new_skill_ = NULL;
  return temp;
}
inline void bows_skill_studt_rsp::set_allocated_new_skill(::client::skill_data* new_skill) {
  delete new_skill_;
  new_skill_ = new_skill;
  if (new_skill) {
    set_has_new_skill();
  } else {
    clear_has_new_skill();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::role_skill_upgrade_rsp_RET>() {
  return ::client::role_skill_upgrade_rsp_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::set_default_skill_rsp_RET>() {
  return ::client::set_default_skill_rsp_RET_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5fskill_5fmsg_2eproto__INCLUDED
