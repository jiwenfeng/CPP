// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* buy_vip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_vip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_vip_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_vip_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* buy_vip_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* vip_day_premiums_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_day_premiums_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_day_premiums_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_day_premiums_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fvip_2eproto() {
  protobuf_AddDesc_client_2erole_5fvip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_vip.proto");
  GOOGLE_CHECK(file != NULL);
  buy_vip_req_descriptor_ = file->message_type(0);
  static const int buy_vip_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_req, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_req, svr_head_),
  };
  buy_vip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_vip_req_descriptor_,
      buy_vip_req::default_instance_,
      buy_vip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_vip_req));
  buy_vip_rsp_descriptor_ = file->message_type(1);
  static const int buy_vip_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_rsp, lvl_),
  };
  buy_vip_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_vip_rsp_descriptor_,
      buy_vip_rsp::default_instance_,
      buy_vip_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vip_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_vip_rsp));
  buy_vip_rsp_RET_descriptor_ = buy_vip_rsp_descriptor_->enum_type(0);
  vip_day_premiums_req_descriptor_ = file->message_type(2);
  static const int vip_day_premiums_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_req, svr_head_),
  };
  vip_day_premiums_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_day_premiums_req_descriptor_,
      vip_day_premiums_req::default_instance_,
      vip_day_premiums_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_day_premiums_req));
  vip_day_premiums_rsp_descriptor_ = file->message_type(3);
  static const int vip_day_premiums_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_rsp, ret_),
  };
  vip_day_premiums_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_day_premiums_rsp_descriptor_,
      vip_day_premiums_rsp::default_instance_,
      vip_day_premiums_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_day_premiums_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_day_premiums_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fvip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_vip_req_descriptor_, &buy_vip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_vip_rsp_descriptor_, &buy_vip_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_day_premiums_req_descriptor_, &vip_day_premiums_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_day_premiums_rsp_descriptor_, &vip_day_premiums_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fvip_2eproto() {
  delete buy_vip_req::default_instance_;
  delete buy_vip_req_reflection_;
  delete buy_vip_rsp::default_instance_;
  delete buy_vip_rsp_reflection_;
  delete vip_day_premiums_req::default_instance_;
  delete vip_day_premiums_req_reflection_;
  delete vip_day_premiums_rsp::default_instance_;
  delete vip_day_premiums_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fvip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025client.role_vip.proto\022\006client\032\021client."
    "comm.proto\"B\n\013buy_vip_req\022\013\n\003lvl\030\001 \002(\r\022&"
    "\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\"a"
    "\n\013buy_vip_rsp\022$\n\003ret\030\001 \002(\0162\027.client.buy_"
    "vip_rsp.RET\022\013\n\003lvl\030\002 \002(\r\"\037\n\003RET\022\013\n\007SUCCE"
    "SS\020\000\022\013\n\007FAILURE\020\001\"P\n\024vip_day_premiums_re"
    "q\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"#\n\024vip_day_premiums_"
    "rsp\022\013\n\003ret\030\001 \002(\r", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_vip.proto", &protobuf_RegisterTypes);
  buy_vip_req::default_instance_ = new buy_vip_req();
  buy_vip_rsp::default_instance_ = new buy_vip_rsp();
  vip_day_premiums_req::default_instance_ = new vip_day_premiums_req();
  vip_day_premiums_rsp::default_instance_ = new vip_day_premiums_rsp();
  buy_vip_req::default_instance_->InitAsDefaultInstance();
  buy_vip_rsp::default_instance_->InitAsDefaultInstance();
  vip_day_premiums_req::default_instance_->InitAsDefaultInstance();
  vip_day_premiums_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fvip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fvip_2eproto {
  StaticDescriptorInitializer_client_2erole_5fvip_2eproto() {
    protobuf_AddDesc_client_2erole_5fvip_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fvip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int buy_vip_req::kLvlFieldNumber;
const int buy_vip_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

buy_vip_req::buy_vip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_vip_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

buy_vip_req::buy_vip_req(const buy_vip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_vip_req::SharedCtor() {
  _cached_size_ = 0;
  lvl_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_vip_req::~buy_vip_req() {
  SharedDtor();
}

void buy_vip_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void buy_vip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_vip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_vip_req_descriptor_;
}

const buy_vip_req& buy_vip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fvip_2eproto();
  return *default_instance_;
}

buy_vip_req* buy_vip_req::default_instance_ = NULL;

buy_vip_req* buy_vip_req::New() const {
  return new buy_vip_req;
}

void buy_vip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lvl_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_vip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_vip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lvl = 1;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lvl(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_vip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lvl = 1;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lvl(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_vip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lvl = 1;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_vip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_vip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_vip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_vip_req::MergeFrom(const buy_vip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_vip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_vip_req::CopyFrom(const buy_vip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_vip_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void buy_vip_req::Swap(buy_vip_req* other) {
  if (other != this) {
    std::swap(lvl_, other->lvl_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_vip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_vip_req_descriptor_;
  metadata.reflection = buy_vip_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* buy_vip_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_vip_rsp_RET_descriptor_;
}
bool buy_vip_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const buy_vip_rsp_RET buy_vip_rsp::SUCCESS;
const buy_vip_rsp_RET buy_vip_rsp::FAILURE;
const buy_vip_rsp_RET buy_vip_rsp::RET_MIN;
const buy_vip_rsp_RET buy_vip_rsp::RET_MAX;
const int buy_vip_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int buy_vip_rsp::kRetFieldNumber;
const int buy_vip_rsp::kLvlFieldNumber;
#endif  // !_MSC_VER

buy_vip_rsp::buy_vip_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_vip_rsp::InitAsDefaultInstance() {
}

buy_vip_rsp::buy_vip_rsp(const buy_vip_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_vip_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_vip_rsp::~buy_vip_rsp() {
  SharedDtor();
}

void buy_vip_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_vip_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_vip_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_vip_rsp_descriptor_;
}

const buy_vip_rsp& buy_vip_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fvip_2eproto();
  return *default_instance_;
}

buy_vip_rsp* buy_vip_rsp::default_instance_ = NULL;

buy_vip_rsp* buy_vip_rsp::New() const {
  return new buy_vip_rsp;
}

void buy_vip_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_vip_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.buy_vip_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::buy_vip_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::buy_vip_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_vip_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.buy_vip_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_vip_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.buy_vip_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_vip_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.buy_vip_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_vip_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_vip_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_vip_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_vip_rsp::MergeFrom(const buy_vip_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_vip_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_vip_rsp::CopyFrom(const buy_vip_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_vip_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void buy_vip_rsp::Swap(buy_vip_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lvl_, other->lvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_vip_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_vip_rsp_descriptor_;
  metadata.reflection = buy_vip_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_day_premiums_req::kUnixtimeFieldNumber;
const int vip_day_premiums_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

vip_day_premiums_req::vip_day_premiums_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_day_premiums_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

vip_day_premiums_req::vip_day_premiums_req(const vip_day_premiums_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_day_premiums_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_day_premiums_req::~vip_day_premiums_req() {
  SharedDtor();
}

void vip_day_premiums_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void vip_day_premiums_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_day_premiums_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_day_premiums_req_descriptor_;
}

const vip_day_premiums_req& vip_day_premiums_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fvip_2eproto();
  return *default_instance_;
}

vip_day_premiums_req* vip_day_premiums_req::default_instance_ = NULL;

vip_day_premiums_req* vip_day_premiums_req::New() const {
  return new vip_day_premiums_req;
}

void vip_day_premiums_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_day_premiums_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_day_premiums_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_day_premiums_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_day_premiums_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_day_premiums_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_day_premiums_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_day_premiums_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_day_premiums_req::MergeFrom(const vip_day_premiums_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_day_premiums_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_day_premiums_req::CopyFrom(const vip_day_premiums_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_day_premiums_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_day_premiums_req::Swap(vip_day_premiums_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_day_premiums_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_day_premiums_req_descriptor_;
  metadata.reflection = vip_day_premiums_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_day_premiums_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

vip_day_premiums_rsp::vip_day_premiums_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_day_premiums_rsp::InitAsDefaultInstance() {
}

vip_day_premiums_rsp::vip_day_premiums_rsp(const vip_day_premiums_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_day_premiums_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_day_premiums_rsp::~vip_day_premiums_rsp() {
  SharedDtor();
}

void vip_day_premiums_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_day_premiums_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_day_premiums_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_day_premiums_rsp_descriptor_;
}

const vip_day_premiums_rsp& vip_day_premiums_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fvip_2eproto();
  return *default_instance_;
}

vip_day_premiums_rsp* vip_day_premiums_rsp::default_instance_ = NULL;

vip_day_premiums_rsp* vip_day_premiums_rsp::New() const {
  return new vip_day_premiums_rsp;
}

void vip_day_premiums_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_day_premiums_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_day_premiums_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_day_premiums_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_day_premiums_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_day_premiums_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_day_premiums_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_day_premiums_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_day_premiums_rsp::MergeFrom(const vip_day_premiums_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_day_premiums_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_day_premiums_rsp::CopyFrom(const vip_day_premiums_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_day_premiums_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_day_premiums_rsp::Swap(vip_day_premiums_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_day_premiums_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_day_premiums_rsp_descriptor_;
  metadata.reflection = vip_day_premiums_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
