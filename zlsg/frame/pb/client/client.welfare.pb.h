// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.welfare.proto

#ifndef PROTOBUF_client_2ewelfare_2eproto__INCLUDED
#define PROTOBUF_client_2ewelfare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2ewelfare_2eproto();
void protobuf_AssignDesc_client_2ewelfare_2eproto();
void protobuf_ShutdownFile_client_2ewelfare_2eproto();

class welfare_online_req;
class welfare_online_rsp;
class welfare_gifts_req;
class welfare_gifts_rsp;
class welfare_yellow_vip_req;
class welfare_yellow_vip_rsp;
class online_gifts_req;
class online_gifts_rsp;
class get_gifts_req;
class get_gifts_rsp;

// ===================================================================

class welfare_online_req : public ::google::protobuf::Message {
 public:
  welfare_online_req();
  virtual ~welfare_online_req();

  welfare_online_req(const welfare_online_req& from);

  inline welfare_online_req& operator=(const welfare_online_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_online_req& default_instance();

  void Swap(welfare_online_req* other);

  // implements Message ----------------------------------------------

  welfare_online_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_online_req& from);
  void MergeFrom(const welfare_online_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional bool week = 2;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 2;
  inline bool week() const;
  inline void set_week(bool value);

  // optional bool sod = 3;
  inline bool has_sod() const;
  inline void clear_sod();
  static const int kSodFieldNumber = 3;
  inline bool sod() const;
  inline void set_sod(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.welfare_online_req)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_sod();
  inline void clear_has_sod();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;
  bool week_;
  bool sod_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_online_req* default_instance_;
};
// -------------------------------------------------------------------

class welfare_online_rsp : public ::google::protobuf::Message {
 public:
  welfare_online_rsp();
  virtual ~welfare_online_rsp();

  welfare_online_rsp(const welfare_online_rsp& from);

  inline welfare_online_rsp& operator=(const welfare_online_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_online_rsp& default_instance();

  void Swap(welfare_online_rsp* other);

  // implements Message ----------------------------------------------

  welfare_online_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_online_rsp& from);
  void MergeFrom(const welfare_online_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional bool week = 2;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 2;
  inline bool week() const;
  inline void set_week(bool value);

  // optional bool sod = 3;
  inline bool has_sod() const;
  inline void clear_sod();
  static const int kSodFieldNumber = 3;
  inline bool sod() const;
  inline void set_sod(bool value);

  // required uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.welfare_online_rsp)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_sod();
  inline void clear_has_sod();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;
  bool week_;
  bool sod_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_online_rsp* default_instance_;
};
// -------------------------------------------------------------------

class welfare_gifts_req : public ::google::protobuf::Message {
 public:
  welfare_gifts_req();
  virtual ~welfare_gifts_req();

  welfare_gifts_req(const welfare_gifts_req& from);

  inline welfare_gifts_req& operator=(const welfare_gifts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_gifts_req& default_instance();

  void Swap(welfare_gifts_req* other);

  // implements Message ----------------------------------------------

  welfare_gifts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_gifts_req& from);
  void MergeFrom(const welfare_gifts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool first_0 = 1;
  inline bool has_first_0() const;
  inline void clear_first_0();
  static const int kFirst0FieldNumber = 1;
  inline bool first_0() const;
  inline void set_first_0(bool value);

  // optional string novice_code = 2;
  inline bool has_novice_code() const;
  inline void clear_novice_code();
  static const int kNoviceCodeFieldNumber = 2;
  inline const ::std::string& novice_code() const;
  inline void set_novice_code(const ::std::string& value);
  inline void set_novice_code(const char* value);
  inline void set_novice_code(const char* value, size_t size);
  inline ::std::string* mutable_novice_code();
  inline ::std::string* release_novice_code();
  inline void set_allocated_novice_code(::std::string* novice_code);

  // optional string spread_code = 3;
  inline bool has_spread_code() const;
  inline void clear_spread_code();
  static const int kSpreadCodeFieldNumber = 3;
  inline const ::std::string& spread_code() const;
  inline void set_spread_code(const ::std::string& value);
  inline void set_spread_code(const char* value);
  inline void set_spread_code(const char* value, size_t size);
  inline ::std::string* mutable_spread_code();
  inline ::std::string* release_spread_code();
  inline void set_allocated_spread_code(::std::string* spread_code);

  // optional uint32 pack_type = 4;
  inline bool has_pack_type() const;
  inline void clear_pack_type();
  static const int kPackTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 pack_type() const;
  inline void set_pack_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.welfare_gifts_req)
 private:
  inline void set_has_first_0();
  inline void clear_has_first_0();
  inline void set_has_novice_code();
  inline void clear_has_novice_code();
  inline void set_has_spread_code();
  inline void clear_has_spread_code();
  inline void set_has_pack_type();
  inline void clear_has_pack_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* novice_code_;
  bool first_0_;
  ::google::protobuf::uint32 pack_type_;
  ::std::string* spread_code_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_gifts_req* default_instance_;
};
// -------------------------------------------------------------------

class welfare_gifts_rsp : public ::google::protobuf::Message {
 public:
  welfare_gifts_rsp();
  virtual ~welfare_gifts_rsp();

  welfare_gifts_rsp(const welfare_gifts_rsp& from);

  inline welfare_gifts_rsp& operator=(const welfare_gifts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_gifts_rsp& default_instance();

  void Swap(welfare_gifts_rsp* other);

  // implements Message ----------------------------------------------

  welfare_gifts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_gifts_rsp& from);
  void MergeFrom(const welfare_gifts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool first_0 = 1;
  inline bool has_first_0() const;
  inline void clear_first_0();
  static const int kFirst0FieldNumber = 1;
  inline bool first_0() const;
  inline void set_first_0(bool value);

  // optional string novice_code = 2;
  inline bool has_novice_code() const;
  inline void clear_novice_code();
  static const int kNoviceCodeFieldNumber = 2;
  inline const ::std::string& novice_code() const;
  inline void set_novice_code(const ::std::string& value);
  inline void set_novice_code(const char* value);
  inline void set_novice_code(const char* value, size_t size);
  inline ::std::string* mutable_novice_code();
  inline ::std::string* release_novice_code();
  inline void set_allocated_novice_code(::std::string* novice_code);

  // optional string spread_code = 3;
  inline bool has_spread_code() const;
  inline void clear_spread_code();
  static const int kSpreadCodeFieldNumber = 3;
  inline const ::std::string& spread_code() const;
  inline void set_spread_code(const ::std::string& value);
  inline void set_spread_code(const char* value);
  inline void set_spread_code(const char* value, size_t size);
  inline ::std::string* mutable_spread_code();
  inline ::std::string* release_spread_code();
  inline void set_allocated_spread_code(::std::string* spread_code);

  // optional uint32 pack_type = 4;
  inline bool has_pack_type() const;
  inline void clear_pack_type();
  static const int kPackTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 pack_type() const;
  inline void set_pack_type(::google::protobuf::uint32 value);

  // required uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.welfare_gifts_rsp)
 private:
  inline void set_has_first_0();
  inline void clear_has_first_0();
  inline void set_has_novice_code();
  inline void clear_has_novice_code();
  inline void set_has_spread_code();
  inline void clear_has_spread_code();
  inline void set_has_pack_type();
  inline void clear_has_pack_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* novice_code_;
  bool first_0_;
  ::google::protobuf::uint32 pack_type_;
  ::std::string* spread_code_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_gifts_rsp* default_instance_;
};
// -------------------------------------------------------------------

class welfare_yellow_vip_req : public ::google::protobuf::Message {
 public:
  welfare_yellow_vip_req();
  virtual ~welfare_yellow_vip_req();

  welfare_yellow_vip_req(const welfare_yellow_vip_req& from);

  inline welfare_yellow_vip_req& operator=(const welfare_yellow_vip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_yellow_vip_req& default_instance();

  void Swap(welfare_yellow_vip_req* other);

  // implements Message ----------------------------------------------

  welfare_yellow_vip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_yellow_vip_req& from);
  void MergeFrom(const welfare_yellow_vip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 every_day = 1;
  inline bool has_every_day() const;
  inline void clear_every_day();
  static const int kEveryDayFieldNumber = 1;
  inline ::google::protobuf::uint32 every_day() const;
  inline void set_every_day(::google::protobuf::uint32 value);

  // optional uint32 grow_up = 2;
  inline bool has_grow_up() const;
  inline void clear_grow_up();
  static const int kGrowUpFieldNumber = 2;
  inline ::google::protobuf::uint32 grow_up() const;
  inline void set_grow_up(::google::protobuf::uint32 value);

  // optional bool ever_day_year = 3;
  inline bool has_ever_day_year() const;
  inline void clear_ever_day_year();
  static const int kEverDayYearFieldNumber = 3;
  inline bool ever_day_year() const;
  inline void set_ever_day_year(bool value);

  // optional bool novice = 4;
  inline bool has_novice() const;
  inline void clear_novice();
  static const int kNoviceFieldNumber = 4;
  inline bool novice() const;
  inline void set_novice(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.welfare_yellow_vip_req)
 private:
  inline void set_has_every_day();
  inline void clear_has_every_day();
  inline void set_has_grow_up();
  inline void clear_has_grow_up();
  inline void set_has_ever_day_year();
  inline void clear_has_ever_day_year();
  inline void set_has_novice();
  inline void clear_has_novice();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 every_day_;
  ::google::protobuf::uint32 grow_up_;
  ::client::server_head* svr_head_;
  bool ever_day_year_;
  bool novice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_yellow_vip_req* default_instance_;
};
// -------------------------------------------------------------------

class welfare_yellow_vip_rsp : public ::google::protobuf::Message {
 public:
  welfare_yellow_vip_rsp();
  virtual ~welfare_yellow_vip_rsp();

  welfare_yellow_vip_rsp(const welfare_yellow_vip_rsp& from);

  inline welfare_yellow_vip_rsp& operator=(const welfare_yellow_vip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const welfare_yellow_vip_rsp& default_instance();

  void Swap(welfare_yellow_vip_rsp* other);

  // implements Message ----------------------------------------------

  welfare_yellow_vip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const welfare_yellow_vip_rsp& from);
  void MergeFrom(const welfare_yellow_vip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 every_day = 1;
  inline bool has_every_day() const;
  inline void clear_every_day();
  static const int kEveryDayFieldNumber = 1;
  inline ::google::protobuf::uint32 every_day() const;
  inline void set_every_day(::google::protobuf::uint32 value);

  // optional uint32 grow_up = 2;
  inline bool has_grow_up() const;
  inline void clear_grow_up();
  static const int kGrowUpFieldNumber = 2;
  inline ::google::protobuf::uint32 grow_up() const;
  inline void set_grow_up(::google::protobuf::uint32 value);

  // optional bool ever_day_year = 3;
  inline bool has_ever_day_year() const;
  inline void clear_ever_day_year();
  static const int kEverDayYearFieldNumber = 3;
  inline bool ever_day_year() const;
  inline void set_ever_day_year(bool value);

  // optional bool novice = 4;
  inline bool has_novice() const;
  inline void clear_novice();
  static const int kNoviceFieldNumber = 4;
  inline bool novice() const;
  inline void set_novice(bool value);

  // required uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.welfare_yellow_vip_rsp)
 private:
  inline void set_has_every_day();
  inline void clear_has_every_day();
  inline void set_has_grow_up();
  inline void clear_has_grow_up();
  inline void set_has_ever_day_year();
  inline void clear_has_ever_day_year();
  inline void set_has_novice();
  inline void clear_has_novice();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 every_day_;
  ::google::protobuf::uint32 grow_up_;
  bool ever_day_year_;
  bool novice_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static welfare_yellow_vip_rsp* default_instance_;
};
// -------------------------------------------------------------------

class online_gifts_req : public ::google::protobuf::Message {
 public:
  online_gifts_req();
  virtual ~online_gifts_req();

  online_gifts_req(const online_gifts_req& from);

  inline online_gifts_req& operator=(const online_gifts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const online_gifts_req& default_instance();

  void Swap(online_gifts_req* other);

  // implements Message ----------------------------------------------

  online_gifts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const online_gifts_req& from);
  void MergeFrom(const online_gifts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 online_time = 1;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 online_time() const;
  inline void set_online_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.online_gifts_req)
 private:
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 online_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static online_gifts_req* default_instance_;
};
// -------------------------------------------------------------------

class online_gifts_rsp : public ::google::protobuf::Message {
 public:
  online_gifts_rsp();
  virtual ~online_gifts_rsp();

  online_gifts_rsp(const online_gifts_rsp& from);

  inline online_gifts_rsp& operator=(const online_gifts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const online_gifts_rsp& default_instance();

  void Swap(online_gifts_rsp* other);

  // implements Message ----------------------------------------------

  online_gifts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const online_gifts_rsp& from);
  void MergeFrom(const online_gifts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 online_time = 1;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 online_time() const;
  inline void set_online_time(::google::protobuf::uint32 value);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.online_gifts_rsp)
 private:
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 online_time_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static online_gifts_rsp* default_instance_;
};
// -------------------------------------------------------------------

class get_gifts_req : public ::google::protobuf::Message {
 public:
  get_gifts_req();
  virtual ~get_gifts_req();

  get_gifts_req(const get_gifts_req& from);

  inline get_gifts_req& operator=(const get_gifts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_gifts_req& default_instance();

  void Swap(get_gifts_req* other);

  // implements Message ----------------------------------------------

  get_gifts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_gifts_req& from);
  void MergeFrom(const get_gifts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reward_id = 1;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reward_id() const;
  inline void set_reward_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.get_gifts_req)
 private:
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 reward_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static get_gifts_req* default_instance_;
};
// -------------------------------------------------------------------

class get_gifts_rsp : public ::google::protobuf::Message {
 public:
  get_gifts_rsp();
  virtual ~get_gifts_rsp();

  get_gifts_rsp(const get_gifts_rsp& from);

  inline get_gifts_rsp& operator=(const get_gifts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_gifts_rsp& default_instance();

  void Swap(get_gifts_rsp* other);

  // implements Message ----------------------------------------------

  get_gifts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_gifts_rsp& from);
  void MergeFrom(const get_gifts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reward_id = 1;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reward_id() const;
  inline void set_reward_id(::google::protobuf::uint32 value);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.get_gifts_rsp)
 private:
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reward_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ewelfare_2eproto();
  friend void protobuf_AssignDesc_client_2ewelfare_2eproto();
  friend void protobuf_ShutdownFile_client_2ewelfare_2eproto();

  void InitAsDefaultInstance();
  static get_gifts_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// welfare_online_req

// optional uint32 day = 1;
inline bool welfare_online_req::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_online_req::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_online_req::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_online_req::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 welfare_online_req::day() const {
  return day_;
}
inline void welfare_online_req::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional bool week = 2;
inline bool welfare_online_req::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_online_req::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_online_req::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_online_req::clear_week() {
  week_ = false;
  clear_has_week();
}
inline bool welfare_online_req::week() const {
  return week_;
}
inline void welfare_online_req::set_week(bool value) {
  set_has_week();
  week_ = value;
}

// optional bool sod = 3;
inline bool welfare_online_req::has_sod() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_online_req::set_has_sod() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_online_req::clear_has_sod() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_online_req::clear_sod() {
  sod_ = false;
  clear_has_sod();
}
inline bool welfare_online_req::sod() const {
  return sod_;
}
inline void welfare_online_req::set_sod(bool value) {
  set_has_sod();
  sod_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool welfare_online_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_online_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_online_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_online_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& welfare_online_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* welfare_online_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* welfare_online_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void welfare_online_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// welfare_online_rsp

// optional uint32 day = 1;
inline bool welfare_online_rsp::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_online_rsp::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_online_rsp::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_online_rsp::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 welfare_online_rsp::day() const {
  return day_;
}
inline void welfare_online_rsp::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional bool week = 2;
inline bool welfare_online_rsp::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_online_rsp::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_online_rsp::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_online_rsp::clear_week() {
  week_ = false;
  clear_has_week();
}
inline bool welfare_online_rsp::week() const {
  return week_;
}
inline void welfare_online_rsp::set_week(bool value) {
  set_has_week();
  week_ = value;
}

// optional bool sod = 3;
inline bool welfare_online_rsp::has_sod() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_online_rsp::set_has_sod() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_online_rsp::clear_has_sod() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_online_rsp::clear_sod() {
  sod_ = false;
  clear_has_sod();
}
inline bool welfare_online_rsp::sod() const {
  return sod_;
}
inline void welfare_online_rsp::set_sod(bool value) {
  set_has_sod();
  sod_ = value;
}

// required uint32 ret = 4;
inline bool welfare_online_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_online_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_online_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_online_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 welfare_online_rsp::ret() const {
  return ret_;
}
inline void welfare_online_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// welfare_gifts_req

// optional bool first_0 = 1;
inline bool welfare_gifts_req::has_first_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_gifts_req::set_has_first_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_gifts_req::clear_has_first_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_gifts_req::clear_first_0() {
  first_0_ = false;
  clear_has_first_0();
}
inline bool welfare_gifts_req::first_0() const {
  return first_0_;
}
inline void welfare_gifts_req::set_first_0(bool value) {
  set_has_first_0();
  first_0_ = value;
}

// optional string novice_code = 2;
inline bool welfare_gifts_req::has_novice_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_gifts_req::set_has_novice_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_gifts_req::clear_has_novice_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_gifts_req::clear_novice_code() {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    novice_code_->clear();
  }
  clear_has_novice_code();
}
inline const ::std::string& welfare_gifts_req::novice_code() const {
  return *novice_code_;
}
inline void welfare_gifts_req::set_novice_code(const ::std::string& value) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(value);
}
inline void welfare_gifts_req::set_novice_code(const char* value) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(value);
}
inline void welfare_gifts_req::set_novice_code(const char* value, size_t size) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* welfare_gifts_req::mutable_novice_code() {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  return novice_code_;
}
inline ::std::string* welfare_gifts_req::release_novice_code() {
  clear_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = novice_code_;
    novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void welfare_gifts_req::set_allocated_novice_code(::std::string* novice_code) {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    delete novice_code_;
  }
  if (novice_code) {
    set_has_novice_code();
    novice_code_ = novice_code;
  } else {
    clear_has_novice_code();
    novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string spread_code = 3;
inline bool welfare_gifts_req::has_spread_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_gifts_req::set_has_spread_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_gifts_req::clear_has_spread_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_gifts_req::clear_spread_code() {
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    spread_code_->clear();
  }
  clear_has_spread_code();
}
inline const ::std::string& welfare_gifts_req::spread_code() const {
  return *spread_code_;
}
inline void welfare_gifts_req::set_spread_code(const ::std::string& value) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(value);
}
inline void welfare_gifts_req::set_spread_code(const char* value) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(value);
}
inline void welfare_gifts_req::set_spread_code(const char* value, size_t size) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* welfare_gifts_req::mutable_spread_code() {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  return spread_code_;
}
inline ::std::string* welfare_gifts_req::release_spread_code() {
  clear_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spread_code_;
    spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void welfare_gifts_req::set_allocated_spread_code(::std::string* spread_code) {
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    delete spread_code_;
  }
  if (spread_code) {
    set_has_spread_code();
    spread_code_ = spread_code;
  } else {
    clear_has_spread_code();
    spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pack_type = 4;
inline bool welfare_gifts_req::has_pack_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_gifts_req::set_has_pack_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_gifts_req::clear_has_pack_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_gifts_req::clear_pack_type() {
  pack_type_ = 0u;
  clear_has_pack_type();
}
inline ::google::protobuf::uint32 welfare_gifts_req::pack_type() const {
  return pack_type_;
}
inline void welfare_gifts_req::set_pack_type(::google::protobuf::uint32 value) {
  set_has_pack_type();
  pack_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool welfare_gifts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void welfare_gifts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void welfare_gifts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void welfare_gifts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& welfare_gifts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* welfare_gifts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* welfare_gifts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void welfare_gifts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// welfare_gifts_rsp

// optional bool first_0 = 1;
inline bool welfare_gifts_rsp::has_first_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_gifts_rsp::set_has_first_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_gifts_rsp::clear_has_first_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_gifts_rsp::clear_first_0() {
  first_0_ = false;
  clear_has_first_0();
}
inline bool welfare_gifts_rsp::first_0() const {
  return first_0_;
}
inline void welfare_gifts_rsp::set_first_0(bool value) {
  set_has_first_0();
  first_0_ = value;
}

// optional string novice_code = 2;
inline bool welfare_gifts_rsp::has_novice_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_gifts_rsp::set_has_novice_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_gifts_rsp::clear_has_novice_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_gifts_rsp::clear_novice_code() {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    novice_code_->clear();
  }
  clear_has_novice_code();
}
inline const ::std::string& welfare_gifts_rsp::novice_code() const {
  return *novice_code_;
}
inline void welfare_gifts_rsp::set_novice_code(const ::std::string& value) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(value);
}
inline void welfare_gifts_rsp::set_novice_code(const char* value) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(value);
}
inline void welfare_gifts_rsp::set_novice_code(const char* value, size_t size) {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  novice_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* welfare_gifts_rsp::mutable_novice_code() {
  set_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    novice_code_ = new ::std::string;
  }
  return novice_code_;
}
inline ::std::string* welfare_gifts_rsp::release_novice_code() {
  clear_has_novice_code();
  if (novice_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = novice_code_;
    novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void welfare_gifts_rsp::set_allocated_novice_code(::std::string* novice_code) {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    delete novice_code_;
  }
  if (novice_code) {
    set_has_novice_code();
    novice_code_ = novice_code;
  } else {
    clear_has_novice_code();
    novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string spread_code = 3;
inline bool welfare_gifts_rsp::has_spread_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_gifts_rsp::set_has_spread_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_gifts_rsp::clear_has_spread_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_gifts_rsp::clear_spread_code() {
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    spread_code_->clear();
  }
  clear_has_spread_code();
}
inline const ::std::string& welfare_gifts_rsp::spread_code() const {
  return *spread_code_;
}
inline void welfare_gifts_rsp::set_spread_code(const ::std::string& value) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(value);
}
inline void welfare_gifts_rsp::set_spread_code(const char* value) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(value);
}
inline void welfare_gifts_rsp::set_spread_code(const char* value, size_t size) {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  spread_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* welfare_gifts_rsp::mutable_spread_code() {
  set_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    spread_code_ = new ::std::string;
  }
  return spread_code_;
}
inline ::std::string* welfare_gifts_rsp::release_spread_code() {
  clear_has_spread_code();
  if (spread_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spread_code_;
    spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void welfare_gifts_rsp::set_allocated_spread_code(::std::string* spread_code) {
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    delete spread_code_;
  }
  if (spread_code) {
    set_has_spread_code();
    spread_code_ = spread_code;
  } else {
    clear_has_spread_code();
    spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pack_type = 4;
inline bool welfare_gifts_rsp::has_pack_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_gifts_rsp::set_has_pack_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_gifts_rsp::clear_has_pack_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_gifts_rsp::clear_pack_type() {
  pack_type_ = 0u;
  clear_has_pack_type();
}
inline ::google::protobuf::uint32 welfare_gifts_rsp::pack_type() const {
  return pack_type_;
}
inline void welfare_gifts_rsp::set_pack_type(::google::protobuf::uint32 value) {
  set_has_pack_type();
  pack_type_ = value;
}

// required uint32 ret = 5;
inline bool welfare_gifts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void welfare_gifts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void welfare_gifts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void welfare_gifts_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 welfare_gifts_rsp::ret() const {
  return ret_;
}
inline void welfare_gifts_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// welfare_yellow_vip_req

// optional uint32 every_day = 1;
inline bool welfare_yellow_vip_req::has_every_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_yellow_vip_req::set_has_every_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_yellow_vip_req::clear_has_every_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_yellow_vip_req::clear_every_day() {
  every_day_ = 0u;
  clear_has_every_day();
}
inline ::google::protobuf::uint32 welfare_yellow_vip_req::every_day() const {
  return every_day_;
}
inline void welfare_yellow_vip_req::set_every_day(::google::protobuf::uint32 value) {
  set_has_every_day();
  every_day_ = value;
}

// optional uint32 grow_up = 2;
inline bool welfare_yellow_vip_req::has_grow_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_yellow_vip_req::set_has_grow_up() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_yellow_vip_req::clear_has_grow_up() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_yellow_vip_req::clear_grow_up() {
  grow_up_ = 0u;
  clear_has_grow_up();
}
inline ::google::protobuf::uint32 welfare_yellow_vip_req::grow_up() const {
  return grow_up_;
}
inline void welfare_yellow_vip_req::set_grow_up(::google::protobuf::uint32 value) {
  set_has_grow_up();
  grow_up_ = value;
}

// optional bool ever_day_year = 3;
inline bool welfare_yellow_vip_req::has_ever_day_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_yellow_vip_req::set_has_ever_day_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_yellow_vip_req::clear_has_ever_day_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_yellow_vip_req::clear_ever_day_year() {
  ever_day_year_ = false;
  clear_has_ever_day_year();
}
inline bool welfare_yellow_vip_req::ever_day_year() const {
  return ever_day_year_;
}
inline void welfare_yellow_vip_req::set_ever_day_year(bool value) {
  set_has_ever_day_year();
  ever_day_year_ = value;
}

// optional bool novice = 4;
inline bool welfare_yellow_vip_req::has_novice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_yellow_vip_req::set_has_novice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_yellow_vip_req::clear_has_novice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_yellow_vip_req::clear_novice() {
  novice_ = false;
  clear_has_novice();
}
inline bool welfare_yellow_vip_req::novice() const {
  return novice_;
}
inline void welfare_yellow_vip_req::set_novice(bool value) {
  set_has_novice();
  novice_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool welfare_yellow_vip_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void welfare_yellow_vip_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void welfare_yellow_vip_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void welfare_yellow_vip_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& welfare_yellow_vip_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* welfare_yellow_vip_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* welfare_yellow_vip_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void welfare_yellow_vip_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// welfare_yellow_vip_rsp

// optional uint32 every_day = 1;
inline bool welfare_yellow_vip_rsp::has_every_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void welfare_yellow_vip_rsp::set_has_every_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void welfare_yellow_vip_rsp::clear_has_every_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void welfare_yellow_vip_rsp::clear_every_day() {
  every_day_ = 0u;
  clear_has_every_day();
}
inline ::google::protobuf::uint32 welfare_yellow_vip_rsp::every_day() const {
  return every_day_;
}
inline void welfare_yellow_vip_rsp::set_every_day(::google::protobuf::uint32 value) {
  set_has_every_day();
  every_day_ = value;
}

// optional uint32 grow_up = 2;
inline bool welfare_yellow_vip_rsp::has_grow_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void welfare_yellow_vip_rsp::set_has_grow_up() {
  _has_bits_[0] |= 0x00000002u;
}
inline void welfare_yellow_vip_rsp::clear_has_grow_up() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void welfare_yellow_vip_rsp::clear_grow_up() {
  grow_up_ = 0u;
  clear_has_grow_up();
}
inline ::google::protobuf::uint32 welfare_yellow_vip_rsp::grow_up() const {
  return grow_up_;
}
inline void welfare_yellow_vip_rsp::set_grow_up(::google::protobuf::uint32 value) {
  set_has_grow_up();
  grow_up_ = value;
}

// optional bool ever_day_year = 3;
inline bool welfare_yellow_vip_rsp::has_ever_day_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void welfare_yellow_vip_rsp::set_has_ever_day_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void welfare_yellow_vip_rsp::clear_has_ever_day_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void welfare_yellow_vip_rsp::clear_ever_day_year() {
  ever_day_year_ = false;
  clear_has_ever_day_year();
}
inline bool welfare_yellow_vip_rsp::ever_day_year() const {
  return ever_day_year_;
}
inline void welfare_yellow_vip_rsp::set_ever_day_year(bool value) {
  set_has_ever_day_year();
  ever_day_year_ = value;
}

// optional bool novice = 4;
inline bool welfare_yellow_vip_rsp::has_novice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void welfare_yellow_vip_rsp::set_has_novice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void welfare_yellow_vip_rsp::clear_has_novice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void welfare_yellow_vip_rsp::clear_novice() {
  novice_ = false;
  clear_has_novice();
}
inline bool welfare_yellow_vip_rsp::novice() const {
  return novice_;
}
inline void welfare_yellow_vip_rsp::set_novice(bool value) {
  set_has_novice();
  novice_ = value;
}

// required uint32 ret = 5;
inline bool welfare_yellow_vip_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void welfare_yellow_vip_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void welfare_yellow_vip_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void welfare_yellow_vip_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 welfare_yellow_vip_rsp::ret() const {
  return ret_;
}
inline void welfare_yellow_vip_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// online_gifts_req

// required uint32 online_time = 1;
inline bool online_gifts_req::has_online_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void online_gifts_req::set_has_online_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void online_gifts_req::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void online_gifts_req::clear_online_time() {
  online_time_ = 0u;
  clear_has_online_time();
}
inline ::google::protobuf::uint32 online_gifts_req::online_time() const {
  return online_time_;
}
inline void online_gifts_req::set_online_time(::google::protobuf::uint32 value) {
  set_has_online_time();
  online_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool online_gifts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void online_gifts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void online_gifts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void online_gifts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& online_gifts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* online_gifts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* online_gifts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void online_gifts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// online_gifts_rsp

// required uint32 online_time = 1;
inline bool online_gifts_rsp::has_online_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void online_gifts_rsp::set_has_online_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void online_gifts_rsp::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void online_gifts_rsp::clear_online_time() {
  online_time_ = 0u;
  clear_has_online_time();
}
inline ::google::protobuf::uint32 online_gifts_rsp::online_time() const {
  return online_time_;
}
inline void online_gifts_rsp::set_online_time(::google::protobuf::uint32 value) {
  set_has_online_time();
  online_time_ = value;
}

// required uint32 ret = 2;
inline bool online_gifts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void online_gifts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void online_gifts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void online_gifts_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 online_gifts_rsp::ret() const {
  return ret_;
}
inline void online_gifts_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// get_gifts_req

// required uint32 reward_id = 1;
inline bool get_gifts_req::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_gifts_req::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_gifts_req::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_gifts_req::clear_reward_id() {
  reward_id_ = 0u;
  clear_has_reward_id();
}
inline ::google::protobuf::uint32 get_gifts_req::reward_id() const {
  return reward_id_;
}
inline void get_gifts_req::set_reward_id(::google::protobuf::uint32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool get_gifts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_gifts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_gifts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_gifts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& get_gifts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* get_gifts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* get_gifts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void get_gifts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// get_gifts_rsp

// required uint32 reward_id = 1;
inline bool get_gifts_rsp::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_gifts_rsp::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_gifts_rsp::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_gifts_rsp::clear_reward_id() {
  reward_id_ = 0u;
  clear_has_reward_id();
}
inline ::google::protobuf::uint32 get_gifts_rsp::reward_id() const {
  return reward_id_;
}
inline void get_gifts_rsp::set_reward_id(::google::protobuf::uint32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// required uint32 ret = 2;
inline bool get_gifts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_gifts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_gifts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_gifts_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_gifts_rsp::ret() const {
  return ret_;
}
inline void get_gifts_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2ewelfare_2eproto__INCLUDED
