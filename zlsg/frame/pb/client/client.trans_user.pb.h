// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.trans_user.proto

#ifndef PROTOBUF_client_2etrans_5fuser_2eproto__INCLUDED
#define PROTOBUF_client_2etrans_5fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2etrans_5fuser_2eproto();
void protobuf_AssignDesc_client_2etrans_5fuser_2eproto();
void protobuf_ShutdownFile_client_2etrans_5fuser_2eproto();

class trans_user;
class jump_user;

// ===================================================================

class trans_user : public ::google::protobuf::Message {
 public:
  trans_user();
  virtual ~trans_user();

  trans_user(const trans_user& from);

  inline trans_user& operator=(const trans_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const trans_user& default_instance();

  void Swap(trans_user* other);

  // implements Message ----------------------------------------------

  trans_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const trans_user& from);
  void MergeFrom(const trans_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // optional uint32 map_id = 2 [default = 0];
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 scene_id = 3 [default = 0];
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_inst_id = 4 [default = 0];
  inline bool has_scene_inst_id() const;
  inline void clear_scene_inst_id();
  static const int kSceneInstIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_inst_id() const;
  inline void set_scene_inst_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.trans_user)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_inst_id();
  inline void clear_has_scene_inst_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 scene_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 scene_inst_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  friend void protobuf_AssignDesc_client_2etrans_5fuser_2eproto();
  friend void protobuf_ShutdownFile_client_2etrans_5fuser_2eproto();

  void InitAsDefaultInstance();
  static trans_user* default_instance_;
};
// -------------------------------------------------------------------

class jump_user : public ::google::protobuf::Message {
 public:
  jump_user();
  virtual ~jump_user();

  jump_user(const jump_user& from);

  inline jump_user& operator=(const jump_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const jump_user& default_instance();

  void Swap(jump_user* other);

  // implements Message ----------------------------------------------

  jump_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const jump_user& from);
  void MergeFrom(const jump_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // required uint32 trans_id = 2;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 2;
  inline ::google::protobuf::uint32 trans_id() const;
  inline void set_trans_id(::google::protobuf::uint32 value);

  // required uint32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // required uint32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // required int32 x = 5;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 5;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 6;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 6;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 7;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 7;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // optional uint32 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional bool same_scene = 9;
  inline bool has_same_scene() const;
  inline void clear_same_scene();
  static const int kSameSceneFieldNumber = 9;
  inline bool same_scene() const;
  inline void set_same_scene(bool value);

  // @@protoc_insertion_point(class_scope:client.jump_user)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_trans_id();
  inline void clear_has_trans_id();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_same_scene();
  inline void clear_has_same_scene();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::uint32 trans_id_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::uint32 role_id_;
  bool same_scene_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  friend void protobuf_AssignDesc_client_2etrans_5fuser_2eproto();
  friend void protobuf_ShutdownFile_client_2etrans_5fuser_2eproto();

  void InitAsDefaultInstance();
  static jump_user* default_instance_;
};
// ===================================================================


// ===================================================================

// trans_user

// required uint64 ptr = 1;
inline bool trans_user::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trans_user::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void trans_user::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void trans_user::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 trans_user::ptr() const {
  return ptr_;
}
inline void trans_user::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
}

// optional uint32 map_id = 2 [default = 0];
inline bool trans_user::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void trans_user::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void trans_user::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void trans_user::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 trans_user::map_id() const {
  return map_id_;
}
inline void trans_user::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 scene_id = 3 [default = 0];
inline bool trans_user::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void trans_user::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void trans_user::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void trans_user::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 trans_user::scene_id() const {
  return scene_id_;
}
inline void trans_user::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_inst_id = 4 [default = 0];
inline bool trans_user::has_scene_inst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void trans_user::set_has_scene_inst_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void trans_user::clear_has_scene_inst_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void trans_user::clear_scene_inst_id() {
  scene_inst_id_ = 0u;
  clear_has_scene_inst_id();
}
inline ::google::protobuf::uint32 trans_user::scene_inst_id() const {
  return scene_inst_id_;
}
inline void trans_user::set_scene_inst_id(::google::protobuf::uint32 value) {
  set_has_scene_inst_id();
  scene_inst_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool trans_user::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void trans_user::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void trans_user::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void trans_user::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& trans_user::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* trans_user::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* trans_user::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void trans_user::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// jump_user

// required uint64 ptr = 1;
inline bool jump_user::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void jump_user::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void jump_user::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void jump_user::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 jump_user::ptr() const {
  return ptr_;
}
inline void jump_user::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
}

// required uint32 trans_id = 2;
inline bool jump_user::has_trans_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void jump_user::set_has_trans_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void jump_user::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void jump_user::clear_trans_id() {
  trans_id_ = 0u;
  clear_has_trans_id();
}
inline ::google::protobuf::uint32 jump_user::trans_id() const {
  return trans_id_;
}
inline void jump_user::set_trans_id(::google::protobuf::uint32 value) {
  set_has_trans_id();
  trans_id_ = value;
}

// required uint32 map_id = 3;
inline bool jump_user::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void jump_user::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void jump_user::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void jump_user::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 jump_user::map_id() const {
  return map_id_;
}
inline void jump_user::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 scene_id = 4;
inline bool jump_user::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void jump_user::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void jump_user::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void jump_user::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 jump_user::scene_id() const {
  return scene_id_;
}
inline void jump_user::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required int32 x = 5;
inline bool jump_user::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void jump_user::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void jump_user::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void jump_user::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 jump_user::x() const {
  return x_;
}
inline void jump_user::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 6;
inline bool jump_user::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void jump_user::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void jump_user::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void jump_user::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 jump_user::y() const {
  return y_;
}
inline void jump_user::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 7;
inline bool jump_user::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void jump_user::set_has_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void jump_user::clear_has_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void jump_user::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 jump_user::z() const {
  return z_;
}
inline void jump_user::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 role_id = 8;
inline bool jump_user::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void jump_user::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void jump_user::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void jump_user::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 jump_user::role_id() const {
  return role_id_;
}
inline void jump_user::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional bool same_scene = 9;
inline bool jump_user::has_same_scene() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void jump_user::set_has_same_scene() {
  _has_bits_[0] |= 0x00000100u;
}
inline void jump_user::clear_has_same_scene() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void jump_user::clear_same_scene() {
  same_scene_ = false;
  clear_has_same_scene();
}
inline bool jump_user::same_scene() const {
  return same_scene_;
}
inline void jump_user::set_same_scene(bool value) {
  set_has_same_scene();
  same_scene_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2etrans_5fuser_2eproto__INCLUDED
