// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_potential.proto

#ifndef PROTOBUF_client_2erole_5fpotential_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5fpotential_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

class acupoint_info;
class potential_info_list;
class potential_info_list_rsp;
class client_point_info;
class act_potential_req;
class act_potential_rsp;
class potential_share_rsp;
class record_exp;
class effects_brocast_rsp;

enum act_potential_rsp_result {
  act_potential_rsp_result_success = 1,
  act_potential_rsp_result_failed = 2
};
bool act_potential_rsp_result_IsValid(int value);
const act_potential_rsp_result act_potential_rsp_result_result_MIN = act_potential_rsp_result_success;
const act_potential_rsp_result act_potential_rsp_result_result_MAX = act_potential_rsp_result_failed;
const int act_potential_rsp_result_result_ARRAYSIZE = act_potential_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* act_potential_rsp_result_descriptor();
inline const ::std::string& act_potential_rsp_result_Name(act_potential_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    act_potential_rsp_result_descriptor(), value);
}
inline bool act_potential_rsp_result_Parse(
    const ::std::string& name, act_potential_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<act_potential_rsp_result>(
    act_potential_rsp_result_descriptor(), name, value);
}
enum ACTIVITION_TYPE {
  ACT_TYPE_ACT = 1,
  ACT_TYPE_ICE = 2
};
bool ACTIVITION_TYPE_IsValid(int value);
const ACTIVITION_TYPE ACTIVITION_TYPE_MIN = ACT_TYPE_ACT;
const ACTIVITION_TYPE ACTIVITION_TYPE_MAX = ACT_TYPE_ICE;
const int ACTIVITION_TYPE_ARRAYSIZE = ACTIVITION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTIVITION_TYPE_descriptor();
inline const ::std::string& ACTIVITION_TYPE_Name(ACTIVITION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTIVITION_TYPE_descriptor(), value);
}
inline bool ACTIVITION_TYPE_Parse(
    const ::std::string& name, ACTIVITION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTIVITION_TYPE>(
    ACTIVITION_TYPE_descriptor(), name, value);
}
// ===================================================================

class acupoint_info : public ::google::protobuf::Message {
 public:
  acupoint_info();
  virtual ~acupoint_info();

  acupoint_info(const acupoint_info& from);

  inline acupoint_info& operator=(const acupoint_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const acupoint_info& default_instance();

  void Swap(acupoint_info* other);

  // implements Message ----------------------------------------------

  acupoint_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const acupoint_info& from);
  void MergeFrom(const acupoint_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 status = 2 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 act_count = 5 [default = 0];
  inline bool has_act_count() const;
  inline void clear_act_count();
  static const int kActCountFieldNumber = 5;
  inline ::google::protobuf::uint32 act_count() const;
  inline void set_act_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.acupoint_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_act_count();
  inline void clear_has_act_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 act_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static acupoint_info* default_instance_;
};
// -------------------------------------------------------------------

class potential_info_list : public ::google::protobuf::Message {
 public:
  potential_info_list();
  virtual ~potential_info_list();

  potential_info_list(const potential_info_list& from);

  inline potential_info_list& operator=(const potential_info_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const potential_info_list& default_instance();

  void Swap(potential_info_list* other);

  // implements Message ----------------------------------------------

  potential_info_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const potential_info_list& from);
  void MergeFrom(const potential_info_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.potential_info_list)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static potential_info_list* default_instance_;
};
// -------------------------------------------------------------------

class potential_info_list_rsp : public ::google::protobuf::Message {
 public:
  potential_info_list_rsp();
  virtual ~potential_info_list_rsp();

  potential_info_list_rsp(const potential_info_list_rsp& from);

  inline potential_info_list_rsp& operator=(const potential_info_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const potential_info_list_rsp& default_instance();

  void Swap(potential_info_list_rsp* other);

  // implements Message ----------------------------------------------

  potential_info_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const potential_info_list_rsp& from);
  void MergeFrom(const potential_info_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 2;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 2;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated .client.client_point_info point_info = 1;
  inline int point_info_size() const;
  inline void clear_point_info();
  static const int kPointInfoFieldNumber = 1;
  inline const ::client::client_point_info& point_info(int index) const;
  inline ::client::client_point_info* mutable_point_info(int index);
  inline ::client::client_point_info* add_point_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
      point_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
      mutable_point_info();

  // @@protoc_insertion_point(class_scope:client.potential_info_list_rsp)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::google::protobuf::RepeatedPtrField< ::client::client_point_info > point_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static potential_info_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class client_point_info : public ::google::protobuf::Message {
 public:
  client_point_info();
  virtual ~client_point_info();

  client_point_info(const client_point_info& from);

  inline client_point_info& operator=(const client_point_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_point_info& default_instance();

  void Swap(client_point_info* other);

  // implements Message ----------------------------------------------

  client_point_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_point_info& from);
  void MergeFrom(const client_point_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 status = 2 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.client_point_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static client_point_info* default_instance_;
};
// -------------------------------------------------------------------

class act_potential_req : public ::google::protobuf::Message {
 public:
  act_potential_req();
  virtual ~act_potential_req();

  act_potential_req(const act_potential_req& from);

  inline act_potential_req& operator=(const act_potential_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const act_potential_req& default_instance();

  void Swap(act_potential_req* other);

  // implements Message ----------------------------------------------

  act_potential_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const act_potential_req& from);
  void MergeFrom(const act_potential_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.ACTIVITION_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::ACTIVITION_TYPE type() const;
  inline void set_type(::client::ACTIVITION_TYPE value);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.act_potential_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static act_potential_req* default_instance_;
};
// -------------------------------------------------------------------

class act_potential_rsp : public ::google::protobuf::Message {
 public:
  act_potential_rsp();
  virtual ~act_potential_rsp();

  act_potential_rsp(const act_potential_rsp& from);

  inline act_potential_rsp& operator=(const act_potential_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const act_potential_rsp& default_instance();

  void Swap(act_potential_rsp* other);

  // implements Message ----------------------------------------------

  act_potential_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const act_potential_rsp& from);
  void MergeFrom(const act_potential_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef act_potential_rsp_result result;
  static const result success = act_potential_rsp_result_success;
  static const result failed = act_potential_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return act_potential_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    act_potential_rsp_result_result_MIN;
  static const result result_MAX =
    act_potential_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    act_potential_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return act_potential_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return act_potential_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return act_potential_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.act_potential_rsp.result result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::client::act_potential_rsp_result result_type() const;
  inline void set_result_type(::client::act_potential_rsp_result value);

  // repeated .client.client_point_info point_info = 2;
  inline int point_info_size() const;
  inline void clear_point_info();
  static const int kPointInfoFieldNumber = 2;
  inline const ::client::client_point_info& point_info(int index) const;
  inline ::client::client_point_info* mutable_point_info(int index);
  inline ::client::client_point_info* add_point_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
      point_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
      mutable_point_info();

  // @@protoc_insertion_point(class_scope:client.act_potential_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::client_point_info > point_info_;
  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static act_potential_rsp* default_instance_;
};
// -------------------------------------------------------------------

class potential_share_rsp : public ::google::protobuf::Message {
 public:
  potential_share_rsp();
  virtual ~potential_share_rsp();

  potential_share_rsp(const potential_share_rsp& from);

  inline potential_share_rsp& operator=(const potential_share_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const potential_share_rsp& default_instance();

  void Swap(potential_share_rsp* other);

  // implements Message ----------------------------------------------

  potential_share_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const potential_share_rsp& from);
  void MergeFrom(const potential_share_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 add_exp = 2;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 2;
  inline ::google::protobuf::uint32 add_exp() const;
  inline void set_add_exp(::google::protobuf::uint32 value);

  // required uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:client.potential_share_rsp)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 add_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static potential_share_rsp* default_instance_;
};
// -------------------------------------------------------------------

class record_exp : public ::google::protobuf::Message {
 public:
  record_exp();
  virtual ~record_exp();

  record_exp(const record_exp& from);

  inline record_exp& operator=(const record_exp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const record_exp& default_instance();

  void Swap(record_exp* other);

  // implements Message ----------------------------------------------

  record_exp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const record_exp& from);
  void MergeFrom(const record_exp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 old_exp = 1;
  inline bool has_old_exp() const;
  inline void clear_old_exp();
  static const int kOldExpFieldNumber = 1;
  inline ::google::protobuf::uint32 old_exp() const;
  inline void set_old_exp(::google::protobuf::uint32 value);

  // optional uint32 new_exp = 2;
  inline bool has_new_exp() const;
  inline void clear_new_exp();
  static const int kNewExpFieldNumber = 2;
  inline ::google::protobuf::uint32 new_exp() const;
  inline void set_new_exp(::google::protobuf::uint32 value);

  // optional uint32 add_exp = 3;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 3;
  inline ::google::protobuf::uint32 add_exp() const;
  inline void set_add_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.record_exp)
 private:
  inline void set_has_old_exp();
  inline void clear_has_old_exp();
  inline void set_has_new_exp();
  inline void clear_has_new_exp();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 old_exp_;
  ::google::protobuf::uint32 new_exp_;
  ::google::protobuf::uint32 add_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static record_exp* default_instance_;
};
// -------------------------------------------------------------------

class effects_brocast_rsp : public ::google::protobuf::Message {
 public:
  effects_brocast_rsp();
  virtual ~effects_brocast_rsp();

  effects_brocast_rsp(const effects_brocast_rsp& from);

  inline effects_brocast_rsp& operator=(const effects_brocast_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const effects_brocast_rsp& default_instance();

  void Swap(effects_brocast_rsp* other);

  // implements Message ----------------------------------------------

  effects_brocast_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const effects_brocast_rsp& from);
  void MergeFrom(const effects_brocast_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 effect_type = 2;
  inline bool has_effect_type() const;
  inline void clear_effect_type();
  static const int kEffectTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 effect_type() const;
  inline void set_effect_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.effects_brocast_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_effect_type();
  inline void clear_has_effect_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 effect_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fpotential_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto();

  void InitAsDefaultInstance();
  static effects_brocast_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// acupoint_info

// required uint32 index = 1 [default = 0];
inline bool acupoint_info::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void acupoint_info::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void acupoint_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void acupoint_info::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 acupoint_info::index() const {
  return index_;
}
inline void acupoint_info::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 status = 2 [default = 0];
inline bool acupoint_info::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void acupoint_info::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void acupoint_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void acupoint_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 acupoint_info::status() const {
  return status_;
}
inline void acupoint_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 act_count = 5 [default = 0];
inline bool acupoint_info::has_act_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void acupoint_info::set_has_act_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void acupoint_info::clear_has_act_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void acupoint_info::clear_act_count() {
  act_count_ = 0u;
  clear_has_act_count();
}
inline ::google::protobuf::uint32 acupoint_info::act_count() const {
  return act_count_;
}
inline void acupoint_info::set_act_count(::google::protobuf::uint32 value) {
  set_has_act_count();
  act_count_ = value;
}

// -------------------------------------------------------------------

// potential_info_list

// required uint32 unixtime = 1;
inline bool potential_info_list::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void potential_info_list::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void potential_info_list::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void potential_info_list::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 potential_info_list::unixtime() const {
  return unixtime_;
}
inline void potential_info_list::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool potential_info_list::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void potential_info_list::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void potential_info_list::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void potential_info_list::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& potential_info_list::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* potential_info_list::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* potential_info_list::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void potential_info_list::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// potential_info_list_rsp

// required .client.role_data rd = 2;
inline bool potential_info_list_rsp::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void potential_info_list_rsp::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void potential_info_list_rsp::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void potential_info_list_rsp::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& potential_info_list_rsp::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* potential_info_list_rsp::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* potential_info_list_rsp::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void potential_info_list_rsp::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated .client.client_point_info point_info = 1;
inline int potential_info_list_rsp::point_info_size() const {
  return point_info_.size();
}
inline void potential_info_list_rsp::clear_point_info() {
  point_info_.Clear();
}
inline const ::client::client_point_info& potential_info_list_rsp::point_info(int index) const {
  return point_info_.Get(index);
}
inline ::client::client_point_info* potential_info_list_rsp::mutable_point_info(int index) {
  return point_info_.Mutable(index);
}
inline ::client::client_point_info* potential_info_list_rsp::add_point_info() {
  return point_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
potential_info_list_rsp::point_info() const {
  return point_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
potential_info_list_rsp::mutable_point_info() {
  return &point_info_;
}

// -------------------------------------------------------------------

// client_point_info

// required uint32 index = 1 [default = 0];
inline bool client_point_info::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_point_info::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_point_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_point_info::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 client_point_info::index() const {
  return index_;
}
inline void client_point_info::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 status = 2 [default = 0];
inline bool client_point_info::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_point_info::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_point_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_point_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 client_point_info::status() const {
  return status_;
}
inline void client_point_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// act_potential_req

// required .client.ACTIVITION_TYPE type = 1;
inline bool act_potential_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void act_potential_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void act_potential_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void act_potential_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::ACTIVITION_TYPE act_potential_req::type() const {
  return static_cast< ::client::ACTIVITION_TYPE >(type_);
}
inline void act_potential_req::set_type(::client::ACTIVITION_TYPE value) {
  assert(::client::ACTIVITION_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 index = 2;
inline bool act_potential_req::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void act_potential_req::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void act_potential_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void act_potential_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 act_potential_req::index() const {
  return index_;
}
inline void act_potential_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool act_potential_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void act_potential_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void act_potential_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void act_potential_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& act_potential_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* act_potential_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* act_potential_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void act_potential_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// act_potential_rsp

// required .client.act_potential_rsp.result result_type = 1;
inline bool act_potential_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void act_potential_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void act_potential_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void act_potential_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::act_potential_rsp_result act_potential_rsp::result_type() const {
  return static_cast< ::client::act_potential_rsp_result >(result_type_);
}
inline void act_potential_rsp::set_result_type(::client::act_potential_rsp_result value) {
  assert(::client::act_potential_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.client_point_info point_info = 2;
inline int act_potential_rsp::point_info_size() const {
  return point_info_.size();
}
inline void act_potential_rsp::clear_point_info() {
  point_info_.Clear();
}
inline const ::client::client_point_info& act_potential_rsp::point_info(int index) const {
  return point_info_.Get(index);
}
inline ::client::client_point_info* act_potential_rsp::mutable_point_info(int index) {
  return point_info_.Mutable(index);
}
inline ::client::client_point_info* act_potential_rsp::add_point_info() {
  return point_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
act_potential_rsp::point_info() const {
  return point_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
act_potential_rsp::mutable_point_info() {
  return &point_info_;
}

// -------------------------------------------------------------------

// potential_share_rsp

// required string name = 1;
inline bool potential_share_rsp::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void potential_share_rsp::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void potential_share_rsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void potential_share_rsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& potential_share_rsp::name() const {
  return *name_;
}
inline void potential_share_rsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void potential_share_rsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void potential_share_rsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* potential_share_rsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* potential_share_rsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void potential_share_rsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 add_exp = 2;
inline bool potential_share_rsp::has_add_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void potential_share_rsp::set_has_add_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void potential_share_rsp::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void potential_share_rsp::clear_add_exp() {
  add_exp_ = 0u;
  clear_has_add_exp();
}
inline ::google::protobuf::uint32 potential_share_rsp::add_exp() const {
  return add_exp_;
}
inline void potential_share_rsp::set_add_exp(::google::protobuf::uint32 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// required uint64 role_id = 3;
inline bool potential_share_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void potential_share_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void potential_share_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void potential_share_rsp::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 potential_share_rsp::role_id() const {
  return role_id_;
}
inline void potential_share_rsp::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// record_exp

// optional uint32 old_exp = 1;
inline bool record_exp::has_old_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record_exp::set_has_old_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void record_exp::clear_has_old_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void record_exp::clear_old_exp() {
  old_exp_ = 0u;
  clear_has_old_exp();
}
inline ::google::protobuf::uint32 record_exp::old_exp() const {
  return old_exp_;
}
inline void record_exp::set_old_exp(::google::protobuf::uint32 value) {
  set_has_old_exp();
  old_exp_ = value;
}

// optional uint32 new_exp = 2;
inline bool record_exp::has_new_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record_exp::set_has_new_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void record_exp::clear_has_new_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void record_exp::clear_new_exp() {
  new_exp_ = 0u;
  clear_has_new_exp();
}
inline ::google::protobuf::uint32 record_exp::new_exp() const {
  return new_exp_;
}
inline void record_exp::set_new_exp(::google::protobuf::uint32 value) {
  set_has_new_exp();
  new_exp_ = value;
}

// optional uint32 add_exp = 3;
inline bool record_exp::has_add_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void record_exp::set_has_add_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void record_exp::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void record_exp::clear_add_exp() {
  add_exp_ = 0u;
  clear_has_add_exp();
}
inline ::google::protobuf::uint32 record_exp::add_exp() const {
  return add_exp_;
}
inline void record_exp::set_add_exp(::google::protobuf::uint32 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// -------------------------------------------------------------------

// effects_brocast_rsp

// required uint32 role_id = 1;
inline bool effects_brocast_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void effects_brocast_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void effects_brocast_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void effects_brocast_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 effects_brocast_rsp::role_id() const {
  return role_id_;
}
inline void effects_brocast_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 effect_type = 2;
inline bool effects_brocast_rsp::has_effect_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void effects_brocast_rsp::set_has_effect_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void effects_brocast_rsp::clear_has_effect_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void effects_brocast_rsp::clear_effect_type() {
  effect_type_ = 0u;
  clear_has_effect_type();
}
inline ::google::protobuf::uint32 effects_brocast_rsp::effect_type() const {
  return effect_type_;
}
inline void effects_brocast_rsp::set_effect_type(::google::protobuf::uint32 value) {
  set_has_effect_type();
  effect_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::act_potential_rsp_result>() {
  return ::client::act_potential_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ACTIVITION_TYPE>() {
  return ::client::ACTIVITION_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5fpotential_2eproto__INCLUDED
