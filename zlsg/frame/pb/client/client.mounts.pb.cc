// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.mounts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.mounts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* mounts_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounts_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounts_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounts_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounts_level_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounts_level_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* receive_mounts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  receive_mounts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* receive_mounts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  receive_mounts_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* receive_mounts_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ride_mounts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ride_mounts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ride_mounts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ride_mounts_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_mounts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_mounts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_mounts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_mounts_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_mounts_skill_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_mounts_skill_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_mounts_skill_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_mounts_skill_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* upgrade_mounts_skill_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* upgrade_mounts_level_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_mounts_level_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounts_bless_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounts_bless_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mounts_bless_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mounts_bless_time_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2emounts_2eproto() {
  protobuf_AddDesc_client_2emounts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.mounts.proto");
  GOOGLE_CHECK(file != NULL);
  mounts_info_descriptor_ = file->message_type(0);
  static const int mounts_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, advance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, advance_bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, skill_upgrade_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, mount_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, mount_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, attr_),
  };
  mounts_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounts_info_descriptor_,
      mounts_info::default_instance_,
      mounts_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounts_info));
  mounts_msg_descriptor_ = file->message_type(1);
  static const int mounts_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_msg, mi_),
  };
  mounts_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounts_msg_descriptor_,
      mounts_msg::default_instance_,
      mounts_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounts_msg));
  mounts_level_rsp_descriptor_ = file->message_type(2);
  static const int mounts_level_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_level_rsp, mi_),
  };
  mounts_level_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounts_level_rsp_descriptor_,
      mounts_level_rsp::default_instance_,
      mounts_level_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_level_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_level_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounts_level_rsp));
  receive_mounts_req_descriptor_ = file->message_type(3);
  static const int receive_mounts_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_req, svr_head_),
  };
  receive_mounts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      receive_mounts_req_descriptor_,
      receive_mounts_req::default_instance_,
      receive_mounts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(receive_mounts_req));
  receive_mounts_rsp_descriptor_ = file->message_type(4);
  static const int receive_mounts_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_rsp, mount_id_),
  };
  receive_mounts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      receive_mounts_rsp_descriptor_,
      receive_mounts_rsp::default_instance_,
      receive_mounts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_mounts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(receive_mounts_rsp));
  receive_mounts_rsp_result_descriptor_ = receive_mounts_rsp_descriptor_->enum_type(0);
  ride_mounts_req_descriptor_ = file->message_type(5);
  static const int ride_mounts_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_req, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_req, svr_head_),
  };
  ride_mounts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ride_mounts_req_descriptor_,
      ride_mounts_req::default_instance_,
      ride_mounts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ride_mounts_req));
  ride_mounts_rsp_descriptor_ = file->message_type(6);
  static const int ride_mounts_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_rsp, index_),
  };
  ride_mounts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ride_mounts_rsp_descriptor_,
      ride_mounts_rsp::default_instance_,
      ride_mounts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ride_mounts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ride_mounts_rsp));
  upgrade_mounts_req_descriptor_ = file->message_type(7);
  static const int upgrade_mounts_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_req, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_req, svr_head_),
  };
  upgrade_mounts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_mounts_req_descriptor_,
      upgrade_mounts_req::default_instance_,
      upgrade_mounts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_mounts_req));
  upgrade_mounts_rsp_descriptor_ = file->message_type(8);
  static const int upgrade_mounts_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_rsp, mi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_rsp, index_),
  };
  upgrade_mounts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_mounts_rsp_descriptor_,
      upgrade_mounts_rsp::default_instance_,
      upgrade_mounts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_mounts_rsp));
  upgrade_mounts_skill_req_descriptor_ = file->message_type(9);
  static const int upgrade_mounts_skill_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_req, upgrade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_req, svr_head_),
  };
  upgrade_mounts_skill_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_mounts_skill_req_descriptor_,
      upgrade_mounts_skill_req::default_instance_,
      upgrade_mounts_skill_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_mounts_skill_req));
  upgrade_mounts_skill_rsp_descriptor_ = file->message_type(10);
  static const int upgrade_mounts_skill_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, upgrade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, upgrade_num_),
  };
  upgrade_mounts_skill_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_mounts_skill_rsp_descriptor_,
      upgrade_mounts_skill_rsp::default_instance_,
      upgrade_mounts_skill_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_skill_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_mounts_skill_rsp));
  upgrade_mounts_skill_rsp_result_descriptor_ = upgrade_mounts_skill_rsp_descriptor_->enum_type(0);
  upgrade_mounts_level_req_descriptor_ = file->message_type(11);
  static const int upgrade_mounts_level_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_level_req, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_level_req, svr_head_),
  };
  upgrade_mounts_level_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_mounts_level_req_descriptor_,
      upgrade_mounts_level_req::default_instance_,
      upgrade_mounts_level_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_level_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_mounts_level_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_mounts_level_req));
  mounts_bless_time_req_descriptor_ = file->message_type(12);
  static const int mounts_bless_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_req, svr_head_),
  };
  mounts_bless_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounts_bless_time_req_descriptor_,
      mounts_bless_time_req::default_instance_,
      mounts_bless_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounts_bless_time_req));
  mounts_bless_time_rsp_descriptor_ = file->message_type(13);
  static const int mounts_bless_time_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_rsp, remain_time_),
  };
  mounts_bless_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mounts_bless_time_rsp_descriptor_,
      mounts_bless_time_rsp::default_instance_,
      mounts_bless_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mounts_bless_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mounts_bless_time_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2emounts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounts_info_descriptor_, &mounts_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounts_msg_descriptor_, &mounts_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounts_level_rsp_descriptor_, &mounts_level_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    receive_mounts_req_descriptor_, &receive_mounts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    receive_mounts_rsp_descriptor_, &receive_mounts_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ride_mounts_req_descriptor_, &ride_mounts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ride_mounts_rsp_descriptor_, &ride_mounts_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_mounts_req_descriptor_, &upgrade_mounts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_mounts_rsp_descriptor_, &upgrade_mounts_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_mounts_skill_req_descriptor_, &upgrade_mounts_skill_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_mounts_skill_rsp_descriptor_, &upgrade_mounts_skill_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_mounts_level_req_descriptor_, &upgrade_mounts_level_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounts_bless_time_req_descriptor_, &mounts_bless_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mounts_bless_time_rsp_descriptor_, &mounts_bless_time_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2emounts_2eproto() {
  delete mounts_info::default_instance_;
  delete mounts_info_reflection_;
  delete mounts_msg::default_instance_;
  delete mounts_msg_reflection_;
  delete mounts_level_rsp::default_instance_;
  delete mounts_level_rsp_reflection_;
  delete receive_mounts_req::default_instance_;
  delete receive_mounts_req_reflection_;
  delete receive_mounts_rsp::default_instance_;
  delete receive_mounts_rsp_reflection_;
  delete ride_mounts_req::default_instance_;
  delete ride_mounts_req_reflection_;
  delete ride_mounts_rsp::default_instance_;
  delete ride_mounts_rsp_reflection_;
  delete upgrade_mounts_req::default_instance_;
  delete upgrade_mounts_req_reflection_;
  delete upgrade_mounts_rsp::default_instance_;
  delete upgrade_mounts_rsp_reflection_;
  delete upgrade_mounts_skill_req::default_instance_;
  delete upgrade_mounts_skill_req_reflection_;
  delete upgrade_mounts_skill_rsp::default_instance_;
  delete upgrade_mounts_skill_rsp_reflection_;
  delete upgrade_mounts_level_req::default_instance_;
  delete upgrade_mounts_level_req_reflection_;
  delete mounts_bless_time_req::default_instance_;
  delete mounts_bless_time_req_reflection_;
  delete mounts_bless_time_rsp::default_instance_;
  delete mounts_bless_time_rsp_reflection_;
}

void protobuf_AddDesc_client_2emounts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.mounts.proto\022\006client\032\021client.co"
    "mm.proto\032\032client.role_attr_msg.proto\032\033cl"
    "ient.role_skill_msg.proto\"\344\001\n\013mounts_inf"
    "o\022\020\n\010mount_id\030\001 \002(\r\022\024\n\014advance_time\030\002 \002("
    "\r\022\025\n\radvance_bless\030\003 \002(\r\022\031\n\021skill_upgrad"
    "e_num\030\004 \002(\r\022\023\n\013mount_level\030\005 \002(\r\022\021\n\tmoun"
    "t_exp\030\006 \002(\r\022\023\n\013mount_power\030\007 \001(\r\022\035\n\002rd\030\010"
    " \001(\0132\021.client.role_data\022\037\n\004attr\030\t \001(\0132\021."
    "client.role_attr\"-\n\nmounts_msg\022\037\n\002mi\030\001 \003"
    "(\0132\023.client.mounts_info\"3\n\020mounts_level_"
    "rsp\022\037\n\002mi\030\001 \003(\0132\023.client.mounts_info\"N\n\022"
    "receive_mounts_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"\234\001\n"
    "\022receive_mounts_rsp\022.\n\003ret\030\001 \002(\0162!.clien"
    "t.receive_mounts_rsp.result\022\020\n\010mount_id\030"
    "\002 \001(\r\"D\n\006result\022\013\n\007success\020\000\022\r\n\tlvl_limi"
    "t\020\001\022\016\n\nraid_limit\020\002\022\016\n\nonce_limit\020\003\"H\n\017r"
    "ide_mounts_req\022\r\n\005index\030\001 \002(\r\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head\"-\n\017ride_mo"
    "unts_rsp\022\013\n\003ret\030\001 \002(\r\022\r\n\005index\030\002 \001(\r\"K\n\022"
    "upgrade_mounts_req\022\r\n\005index\030\001 \002(\r\022&\n\010svr"
    "_head\030\350\007 \001(\0132\023.client.server_head\"Q\n\022upg"
    "rade_mounts_rsp\022\013\n\003ret\030\001 \002(\r\022\037\n\002mi\030\002 \003(\013"
    "2\023.client.mounts_info\022\r\n\005index\030\003 \001(\r\"[\n\030"
    "upgrade_mounts_skill_req\022\027\n\014upgrade_type"
    "\030\001 \002(\r:\0010\022&\n\010svr_head\030\350\007 \001(\0132\023.client.se"
    "rver_head\"\226\002\n\030upgrade_mounts_skill_rsp\0224"
    "\n\003ret\030\001 \002(\0162\'.client.upgrade_mounts_skil"
    "l_rsp.result\022\024\n\014upgrade_type\030\002 \002(\r\022\020\n\010sk"
    "ill_id\030\003 \003(\r\022\023\n\013upgrade_num\030\004 \002(\r\"\206\001\n\006re"
    "sult\022\023\n\017success_add_exp\020\000\022\024\n\020success_lev"
    "el_up\020\001\022\017\n\013count_limit\020\002\022\017\n\013money_limit\020"
    "\003\022\017\n\013skill_error\020\004\022\r\n\tmax_level\020\005\022\017\n\013lev"
    "el_limit\020\006\"T\n\030upgrade_mounts_level_req\022\020"
    "\n\010mount_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cl"
    "ient.server_head\"Q\n\025mounts_bless_time_re"
    "q\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\",\n\025mounts_bless_time"
    "_rsp\022\023\n\013remain_time\030\001 \002(\r", 1545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.mounts.proto", &protobuf_RegisterTypes);
  mounts_info::default_instance_ = new mounts_info();
  mounts_msg::default_instance_ = new mounts_msg();
  mounts_level_rsp::default_instance_ = new mounts_level_rsp();
  receive_mounts_req::default_instance_ = new receive_mounts_req();
  receive_mounts_rsp::default_instance_ = new receive_mounts_rsp();
  ride_mounts_req::default_instance_ = new ride_mounts_req();
  ride_mounts_rsp::default_instance_ = new ride_mounts_rsp();
  upgrade_mounts_req::default_instance_ = new upgrade_mounts_req();
  upgrade_mounts_rsp::default_instance_ = new upgrade_mounts_rsp();
  upgrade_mounts_skill_req::default_instance_ = new upgrade_mounts_skill_req();
  upgrade_mounts_skill_rsp::default_instance_ = new upgrade_mounts_skill_rsp();
  upgrade_mounts_level_req::default_instance_ = new upgrade_mounts_level_req();
  mounts_bless_time_req::default_instance_ = new mounts_bless_time_req();
  mounts_bless_time_rsp::default_instance_ = new mounts_bless_time_rsp();
  mounts_info::default_instance_->InitAsDefaultInstance();
  mounts_msg::default_instance_->InitAsDefaultInstance();
  mounts_level_rsp::default_instance_->InitAsDefaultInstance();
  receive_mounts_req::default_instance_->InitAsDefaultInstance();
  receive_mounts_rsp::default_instance_->InitAsDefaultInstance();
  ride_mounts_req::default_instance_->InitAsDefaultInstance();
  ride_mounts_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_mounts_req::default_instance_->InitAsDefaultInstance();
  upgrade_mounts_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_mounts_skill_req::default_instance_->InitAsDefaultInstance();
  upgrade_mounts_skill_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_mounts_level_req::default_instance_->InitAsDefaultInstance();
  mounts_bless_time_req::default_instance_->InitAsDefaultInstance();
  mounts_bless_time_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2emounts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2emounts_2eproto {
  StaticDescriptorInitializer_client_2emounts_2eproto() {
    protobuf_AddDesc_client_2emounts_2eproto();
  }
} static_descriptor_initializer_client_2emounts_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mounts_info::kMountIdFieldNumber;
const int mounts_info::kAdvanceTimeFieldNumber;
const int mounts_info::kAdvanceBlessFieldNumber;
const int mounts_info::kSkillUpgradeNumFieldNumber;
const int mounts_info::kMountLevelFieldNumber;
const int mounts_info::kMountExpFieldNumber;
const int mounts_info::kMountPowerFieldNumber;
const int mounts_info::kRdFieldNumber;
const int mounts_info::kAttrFieldNumber;
#endif  // !_MSC_VER

mounts_info::mounts_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounts_info::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  attr_ = const_cast< ::client::role_attr*>(&::client::role_attr::default_instance());
}

mounts_info::mounts_info(const mounts_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounts_info::SharedCtor() {
  _cached_size_ = 0;
  mount_id_ = 0u;
  advance_time_ = 0u;
  advance_bless_ = 0u;
  skill_upgrade_num_ = 0u;
  mount_level_ = 0u;
  mount_exp_ = 0u;
  mount_power_ = 0u;
  rd_ = NULL;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounts_info::~mounts_info() {
  SharedDtor();
}

void mounts_info::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
    delete attr_;
  }
}

void mounts_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounts_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounts_info_descriptor_;
}

const mounts_info& mounts_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

mounts_info* mounts_info::default_instance_ = NULL;

mounts_info* mounts_info::New() const {
  return new mounts_info;
}

void mounts_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_id_ = 0u;
    advance_time_ = 0u;
    advance_bless_ = 0u;
    skill_upgrade_num_ = 0u;
    mount_level_ = 0u;
    mount_exp_ = 0u;
    mount_power_ = 0u;
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_attr()) {
      if (attr_ != NULL) attr_->::client::role_attr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounts_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advance_time;
        break;
      }

      // required uint32 advance_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_time_)));
          set_has_advance_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_advance_bless;
        break;
      }

      // required uint32 advance_bless = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_bless_)));
          set_has_advance_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_upgrade_num;
        break;
      }

      // required uint32 skill_upgrade_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_upgrade_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_upgrade_num_)));
          set_has_skill_upgrade_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mount_level;
        break;
      }

      // required uint32 mount_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mount_exp;
        break;
      }

      // required uint32 mount_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_exp_)));
          set_has_mount_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mount_power;
        break;
      }

      // optional uint32 mount_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_power_)));
          set_has_mount_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rd;
        break;
      }

      // optional .client.role_data rd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attr;
        break;
      }

      // optional .client.role_attr attr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounts_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mount_id = 1;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mount_id(), output);
  }

  // required uint32 advance_time = 2;
  if (has_advance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advance_time(), output);
  }

  // required uint32 advance_bless = 3;
  if (has_advance_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->advance_bless(), output);
  }

  // required uint32 skill_upgrade_num = 4;
  if (has_skill_upgrade_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_upgrade_num(), output);
  }

  // required uint32 mount_level = 5;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mount_level(), output);
  }

  // required uint32 mount_exp = 6;
  if (has_mount_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mount_exp(), output);
  }

  // optional uint32 mount_power = 7;
  if (has_mount_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mount_power(), output);
  }

  // optional .client.role_data rd = 8;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rd(), output);
  }

  // optional .client.role_attr attr = 9;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounts_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mount_id = 1;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mount_id(), target);
  }

  // required uint32 advance_time = 2;
  if (has_advance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advance_time(), target);
  }

  // required uint32 advance_bless = 3;
  if (has_advance_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->advance_bless(), target);
  }

  // required uint32 skill_upgrade_num = 4;
  if (has_skill_upgrade_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_upgrade_num(), target);
  }

  // required uint32 mount_level = 5;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mount_level(), target);
  }

  // required uint32 mount_exp = 6;
  if (has_mount_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mount_exp(), target);
  }

  // optional uint32 mount_power = 7;
  if (has_mount_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mount_power(), target);
  }

  // optional .client.role_data rd = 8;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rd(), target);
  }

  // optional .client.role_attr attr = 9;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounts_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mount_id = 1;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

    // required uint32 advance_time = 2;
    if (has_advance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance_time());
    }

    // required uint32 advance_bless = 3;
    if (has_advance_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance_bless());
    }

    // required uint32 skill_upgrade_num = 4;
    if (has_skill_upgrade_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_upgrade_num());
    }

    // required uint32 mount_level = 5;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_level());
    }

    // required uint32 mount_exp = 6;
    if (has_mount_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_exp());
    }

    // optional uint32 mount_power = 7;
    if (has_mount_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_power());
    }

    // optional .client.role_data rd = 8;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client.role_attr attr = 9;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounts_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounts_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounts_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounts_info::MergeFrom(const mounts_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_advance_time()) {
      set_advance_time(from.advance_time());
    }
    if (from.has_advance_bless()) {
      set_advance_bless(from.advance_bless());
    }
    if (from.has_skill_upgrade_num()) {
      set_skill_upgrade_num(from.skill_upgrade_num());
    }
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_mount_exp()) {
      set_mount_exp(from.mount_exp());
    }
    if (from.has_mount_power()) {
      set_mount_power(from.mount_power());
    }
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attr()) {
      mutable_attr()->::client::role_attr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounts_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounts_info::CopyFrom(const mounts_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounts_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void mounts_info::Swap(mounts_info* other) {
  if (other != this) {
    std::swap(mount_id_, other->mount_id_);
    std::swap(advance_time_, other->advance_time_);
    std::swap(advance_bless_, other->advance_bless_);
    std::swap(skill_upgrade_num_, other->skill_upgrade_num_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(mount_exp_, other->mount_exp_);
    std::swap(mount_power_, other->mount_power_);
    std::swap(rd_, other->rd_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounts_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounts_info_descriptor_;
  metadata.reflection = mounts_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mounts_msg::kMiFieldNumber;
#endif  // !_MSC_VER

mounts_msg::mounts_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounts_msg::InitAsDefaultInstance() {
}

mounts_msg::mounts_msg(const mounts_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounts_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounts_msg::~mounts_msg() {
  SharedDtor();
}

void mounts_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mounts_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounts_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounts_msg_descriptor_;
}

const mounts_msg& mounts_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

mounts_msg* mounts_msg::default_instance_ = NULL;

mounts_msg* mounts_msg::New() const {
  return new mounts_msg;
}

void mounts_msg::Clear() {
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounts_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.mounts_info mi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounts_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.mounts_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounts_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.mounts_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounts_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.mounts_info mi = 1;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounts_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounts_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounts_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounts_msg::MergeFrom(const mounts_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounts_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounts_msg::CopyFrom(const mounts_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounts_msg::IsInitialized() const {

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void mounts_msg::Swap(mounts_msg* other) {
  if (other != this) {
    mi_.Swap(&other->mi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounts_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounts_msg_descriptor_;
  metadata.reflection = mounts_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mounts_level_rsp::kMiFieldNumber;
#endif  // !_MSC_VER

mounts_level_rsp::mounts_level_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounts_level_rsp::InitAsDefaultInstance() {
}

mounts_level_rsp::mounts_level_rsp(const mounts_level_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounts_level_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounts_level_rsp::~mounts_level_rsp() {
  SharedDtor();
}

void mounts_level_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mounts_level_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounts_level_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounts_level_rsp_descriptor_;
}

const mounts_level_rsp& mounts_level_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

mounts_level_rsp* mounts_level_rsp::default_instance_ = NULL;

mounts_level_rsp* mounts_level_rsp::New() const {
  return new mounts_level_rsp;
}

void mounts_level_rsp::Clear() {
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounts_level_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.mounts_info mi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounts_level_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.mounts_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounts_level_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.mounts_info mi = 1;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounts_level_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.mounts_info mi = 1;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounts_level_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounts_level_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounts_level_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounts_level_rsp::MergeFrom(const mounts_level_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounts_level_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounts_level_rsp::CopyFrom(const mounts_level_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounts_level_rsp::IsInitialized() const {

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void mounts_level_rsp::Swap(mounts_level_rsp* other) {
  if (other != this) {
    mi_.Swap(&other->mi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounts_level_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounts_level_rsp_descriptor_;
  metadata.reflection = mounts_level_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int receive_mounts_req::kUnixtimeFieldNumber;
const int receive_mounts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

receive_mounts_req::receive_mounts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void receive_mounts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

receive_mounts_req::receive_mounts_req(const receive_mounts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void receive_mounts_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

receive_mounts_req::~receive_mounts_req() {
  SharedDtor();
}

void receive_mounts_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void receive_mounts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_mounts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return receive_mounts_req_descriptor_;
}

const receive_mounts_req& receive_mounts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

receive_mounts_req* receive_mounts_req::default_instance_ = NULL;

receive_mounts_req* receive_mounts_req::New() const {
  return new receive_mounts_req;
}

void receive_mounts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool receive_mounts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void receive_mounts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* receive_mounts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int receive_mounts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_mounts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const receive_mounts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const receive_mounts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void receive_mounts_req::MergeFrom(const receive_mounts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void receive_mounts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_mounts_req::CopyFrom(const receive_mounts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_mounts_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void receive_mounts_req::Swap(receive_mounts_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata receive_mounts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = receive_mounts_req_descriptor_;
  metadata.reflection = receive_mounts_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* receive_mounts_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return receive_mounts_rsp_result_descriptor_;
}
bool receive_mounts_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const receive_mounts_rsp_result receive_mounts_rsp::success;
const receive_mounts_rsp_result receive_mounts_rsp::lvl_limit;
const receive_mounts_rsp_result receive_mounts_rsp::raid_limit;
const receive_mounts_rsp_result receive_mounts_rsp::once_limit;
const receive_mounts_rsp_result receive_mounts_rsp::result_MIN;
const receive_mounts_rsp_result receive_mounts_rsp::result_MAX;
const int receive_mounts_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int receive_mounts_rsp::kRetFieldNumber;
const int receive_mounts_rsp::kMountIdFieldNumber;
#endif  // !_MSC_VER

receive_mounts_rsp::receive_mounts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void receive_mounts_rsp::InitAsDefaultInstance() {
}

receive_mounts_rsp::receive_mounts_rsp(const receive_mounts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void receive_mounts_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mount_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

receive_mounts_rsp::~receive_mounts_rsp() {
  SharedDtor();
}

void receive_mounts_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void receive_mounts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_mounts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return receive_mounts_rsp_descriptor_;
}

const receive_mounts_rsp& receive_mounts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

receive_mounts_rsp* receive_mounts_rsp::default_instance_ = NULL;

receive_mounts_rsp* receive_mounts_rsp::New() const {
  return new receive_mounts_rsp;
}

void receive_mounts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mount_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool receive_mounts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.receive_mounts_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::receive_mounts_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::receive_mounts_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_id;
        break;
      }

      // optional uint32 mount_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void receive_mounts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.receive_mounts_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 mount_id = 2;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mount_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* receive_mounts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.receive_mounts_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 mount_id = 2;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mount_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int receive_mounts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.receive_mounts_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 mount_id = 2;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_mounts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const receive_mounts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const receive_mounts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void receive_mounts_rsp::MergeFrom(const receive_mounts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void receive_mounts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_mounts_rsp::CopyFrom(const receive_mounts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_mounts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void receive_mounts_rsp::Swap(receive_mounts_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mount_id_, other->mount_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata receive_mounts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = receive_mounts_rsp_descriptor_;
  metadata.reflection = receive_mounts_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ride_mounts_req::kIndexFieldNumber;
const int ride_mounts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

ride_mounts_req::ride_mounts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ride_mounts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

ride_mounts_req::ride_mounts_req(const ride_mounts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ride_mounts_req::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ride_mounts_req::~ride_mounts_req() {
  SharedDtor();
}

void ride_mounts_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void ride_mounts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ride_mounts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ride_mounts_req_descriptor_;
}

const ride_mounts_req& ride_mounts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

ride_mounts_req* ride_mounts_req::default_instance_ = NULL;

ride_mounts_req* ride_mounts_req::New() const {
  return new ride_mounts_req;
}

void ride_mounts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ride_mounts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ride_mounts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ride_mounts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ride_mounts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ride_mounts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ride_mounts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ride_mounts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ride_mounts_req::MergeFrom(const ride_mounts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ride_mounts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ride_mounts_req::CopyFrom(const ride_mounts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ride_mounts_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ride_mounts_req::Swap(ride_mounts_req* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ride_mounts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ride_mounts_req_descriptor_;
  metadata.reflection = ride_mounts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ride_mounts_rsp::kRetFieldNumber;
const int ride_mounts_rsp::kIndexFieldNumber;
#endif  // !_MSC_VER

ride_mounts_rsp::ride_mounts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ride_mounts_rsp::InitAsDefaultInstance() {
}

ride_mounts_rsp::ride_mounts_rsp(const ride_mounts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ride_mounts_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ride_mounts_rsp::~ride_mounts_rsp() {
  SharedDtor();
}

void ride_mounts_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ride_mounts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ride_mounts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ride_mounts_rsp_descriptor_;
}

const ride_mounts_rsp& ride_mounts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

ride_mounts_rsp* ride_mounts_rsp::default_instance_ = NULL;

ride_mounts_rsp* ride_mounts_rsp::New() const {
  return new ride_mounts_rsp;
}

void ride_mounts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ride_mounts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ride_mounts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ride_mounts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ride_mounts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ride_mounts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ride_mounts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ride_mounts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ride_mounts_rsp::MergeFrom(const ride_mounts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ride_mounts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ride_mounts_rsp::CopyFrom(const ride_mounts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ride_mounts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ride_mounts_rsp::Swap(ride_mounts_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ride_mounts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ride_mounts_rsp_descriptor_;
  metadata.reflection = ride_mounts_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_mounts_req::kIndexFieldNumber;
const int upgrade_mounts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_mounts_req::upgrade_mounts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_mounts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_mounts_req::upgrade_mounts_req(const upgrade_mounts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_mounts_req::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_mounts_req::~upgrade_mounts_req() {
  SharedDtor();
}

void upgrade_mounts_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_mounts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_mounts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_req_descriptor_;
}

const upgrade_mounts_req& upgrade_mounts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

upgrade_mounts_req* upgrade_mounts_req::default_instance_ = NULL;

upgrade_mounts_req* upgrade_mounts_req::New() const {
  return new upgrade_mounts_req;
}

void upgrade_mounts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_mounts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_mounts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_mounts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_mounts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_mounts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_mounts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_mounts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_mounts_req::MergeFrom(const upgrade_mounts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_mounts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_mounts_req::CopyFrom(const upgrade_mounts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_mounts_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void upgrade_mounts_req::Swap(upgrade_mounts_req* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_mounts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_mounts_req_descriptor_;
  metadata.reflection = upgrade_mounts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_mounts_rsp::kRetFieldNumber;
const int upgrade_mounts_rsp::kMiFieldNumber;
const int upgrade_mounts_rsp::kIndexFieldNumber;
#endif  // !_MSC_VER

upgrade_mounts_rsp::upgrade_mounts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_mounts_rsp::InitAsDefaultInstance() {
}

upgrade_mounts_rsp::upgrade_mounts_rsp(const upgrade_mounts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_mounts_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_mounts_rsp::~upgrade_mounts_rsp() {
  SharedDtor();
}

void upgrade_mounts_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upgrade_mounts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_mounts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_rsp_descriptor_;
}

const upgrade_mounts_rsp& upgrade_mounts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

upgrade_mounts_rsp* upgrade_mounts_rsp::default_instance_ = NULL;

upgrade_mounts_rsp* upgrade_mounts_rsp::New() const {
  return new upgrade_mounts_rsp;
}

void upgrade_mounts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    index_ = 0u;
  }
  mi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_mounts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mi;
        break;
      }

      // repeated .client.mounts_info mi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mi;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_mounts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .client.mounts_info mi = 2;
  for (int i = 0; i < this->mi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mi(i), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_mounts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .client.mounts_info mi = 2;
  for (int i = 0; i < this->mi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mi(i), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_mounts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .client.mounts_info mi = 2;
  total_size += 1 * this->mi_size();
  for (int i = 0; i < this->mi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_mounts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_mounts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_mounts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_mounts_rsp::MergeFrom(const upgrade_mounts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mi_.MergeFrom(from.mi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_mounts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_mounts_rsp::CopyFrom(const upgrade_mounts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_mounts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mi_size(); i++) {
    if (!this->mi(i).IsInitialized()) return false;
  }
  return true;
}

void upgrade_mounts_rsp::Swap(upgrade_mounts_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    mi_.Swap(&other->mi_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_mounts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_mounts_rsp_descriptor_;
  metadata.reflection = upgrade_mounts_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_mounts_skill_req::kUpgradeTypeFieldNumber;
const int upgrade_mounts_skill_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_mounts_skill_req::upgrade_mounts_skill_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_mounts_skill_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_mounts_skill_req::upgrade_mounts_skill_req(const upgrade_mounts_skill_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_mounts_skill_req::SharedCtor() {
  _cached_size_ = 0;
  upgrade_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_mounts_skill_req::~upgrade_mounts_skill_req() {
  SharedDtor();
}

void upgrade_mounts_skill_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_mounts_skill_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_mounts_skill_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_skill_req_descriptor_;
}

const upgrade_mounts_skill_req& upgrade_mounts_skill_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

upgrade_mounts_skill_req* upgrade_mounts_skill_req::default_instance_ = NULL;

upgrade_mounts_skill_req* upgrade_mounts_skill_req::New() const {
  return new upgrade_mounts_skill_req;
}

void upgrade_mounts_skill_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upgrade_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_mounts_skill_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 upgrade_type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_type_)));
          set_has_upgrade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_mounts_skill_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 upgrade_type = 1 [default = 0];
  if (has_upgrade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->upgrade_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_mounts_skill_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 upgrade_type = 1 [default = 0];
  if (has_upgrade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->upgrade_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_mounts_skill_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 upgrade_type = 1 [default = 0];
    if (has_upgrade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_mounts_skill_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_mounts_skill_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_mounts_skill_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_mounts_skill_req::MergeFrom(const upgrade_mounts_skill_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_type()) {
      set_upgrade_type(from.upgrade_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_mounts_skill_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_mounts_skill_req::CopyFrom(const upgrade_mounts_skill_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_mounts_skill_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void upgrade_mounts_skill_req::Swap(upgrade_mounts_skill_req* other) {
  if (other != this) {
    std::swap(upgrade_type_, other->upgrade_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_mounts_skill_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_mounts_skill_req_descriptor_;
  metadata.reflection = upgrade_mounts_skill_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* upgrade_mounts_skill_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_skill_rsp_result_descriptor_;
}
bool upgrade_mounts_skill_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::success_add_exp;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::success_level_up;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::count_limit;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::money_limit;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::skill_error;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::max_level;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::level_limit;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::result_MIN;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::result_MAX;
const int upgrade_mounts_skill_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int upgrade_mounts_skill_rsp::kRetFieldNumber;
const int upgrade_mounts_skill_rsp::kUpgradeTypeFieldNumber;
const int upgrade_mounts_skill_rsp::kSkillIdFieldNumber;
const int upgrade_mounts_skill_rsp::kUpgradeNumFieldNumber;
#endif  // !_MSC_VER

upgrade_mounts_skill_rsp::upgrade_mounts_skill_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_mounts_skill_rsp::InitAsDefaultInstance() {
}

upgrade_mounts_skill_rsp::upgrade_mounts_skill_rsp(const upgrade_mounts_skill_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_mounts_skill_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  upgrade_type_ = 0u;
  upgrade_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_mounts_skill_rsp::~upgrade_mounts_skill_rsp() {
  SharedDtor();
}

void upgrade_mounts_skill_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upgrade_mounts_skill_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_mounts_skill_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_skill_rsp_descriptor_;
}

const upgrade_mounts_skill_rsp& upgrade_mounts_skill_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

upgrade_mounts_skill_rsp* upgrade_mounts_skill_rsp::default_instance_ = NULL;

upgrade_mounts_skill_rsp* upgrade_mounts_skill_rsp::New() const {
  return new upgrade_mounts_skill_rsp;
}

void upgrade_mounts_skill_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    upgrade_type_ = 0u;
    upgrade_num_ = 0u;
  }
  skill_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_mounts_skill_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.upgrade_mounts_skill_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::upgrade_mounts_skill_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::upgrade_mounts_skill_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_type;
        break;
      }

      // required uint32 upgrade_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_type_)));
          set_has_upgrade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // repeated uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_skill_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        if (input->ExpectTag(32)) goto parse_upgrade_num;
        break;
      }

      // required uint32 upgrade_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_num_)));
          set_has_upgrade_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_mounts_skill_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.upgrade_mounts_skill_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 upgrade_type = 2;
  if (has_upgrade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upgrade_type(), output);
  }

  // repeated uint32 skill_id = 3;
  for (int i = 0; i < this->skill_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->skill_id(i), output);
  }

  // required uint32 upgrade_num = 4;
  if (has_upgrade_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->upgrade_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_mounts_skill_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.upgrade_mounts_skill_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 upgrade_type = 2;
  if (has_upgrade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upgrade_type(), target);
  }

  // repeated uint32 skill_id = 3;
  for (int i = 0; i < this->skill_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->skill_id(i), target);
  }

  // required uint32 upgrade_num = 4;
  if (has_upgrade_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->upgrade_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_mounts_skill_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.upgrade_mounts_skill_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 upgrade_type = 2;
    if (has_upgrade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_type());
    }

    // required uint32 upgrade_num = 4;
    if (has_upgrade_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_num());
    }

  }
  // repeated uint32 skill_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill_id(i));
    }
    total_size += 1 * this->skill_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_mounts_skill_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_mounts_skill_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_mounts_skill_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_mounts_skill_rsp::MergeFrom(const upgrade_mounts_skill_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_id_.MergeFrom(from.skill_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_upgrade_type()) {
      set_upgrade_type(from.upgrade_type());
    }
    if (from.has_upgrade_num()) {
      set_upgrade_num(from.upgrade_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_mounts_skill_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_mounts_skill_rsp::CopyFrom(const upgrade_mounts_skill_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_mounts_skill_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void upgrade_mounts_skill_rsp::Swap(upgrade_mounts_skill_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(upgrade_type_, other->upgrade_type_);
    skill_id_.Swap(&other->skill_id_);
    std::swap(upgrade_num_, other->upgrade_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_mounts_skill_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_mounts_skill_rsp_descriptor_;
  metadata.reflection = upgrade_mounts_skill_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_mounts_level_req::kMountIdFieldNumber;
const int upgrade_mounts_level_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_mounts_level_req::upgrade_mounts_level_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_mounts_level_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_mounts_level_req::upgrade_mounts_level_req(const upgrade_mounts_level_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_mounts_level_req::SharedCtor() {
  _cached_size_ = 0;
  mount_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_mounts_level_req::~upgrade_mounts_level_req() {
  SharedDtor();
}

void upgrade_mounts_level_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_mounts_level_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_mounts_level_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_mounts_level_req_descriptor_;
}

const upgrade_mounts_level_req& upgrade_mounts_level_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

upgrade_mounts_level_req* upgrade_mounts_level_req::default_instance_ = NULL;

upgrade_mounts_level_req* upgrade_mounts_level_req::New() const {
  return new upgrade_mounts_level_req;
}

void upgrade_mounts_level_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_mounts_level_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_mounts_level_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mount_id = 1;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mount_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_mounts_level_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mount_id = 1;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mount_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_mounts_level_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mount_id = 1;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_mounts_level_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_mounts_level_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_mounts_level_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_mounts_level_req::MergeFrom(const upgrade_mounts_level_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_mounts_level_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_mounts_level_req::CopyFrom(const upgrade_mounts_level_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_mounts_level_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void upgrade_mounts_level_req::Swap(upgrade_mounts_level_req* other) {
  if (other != this) {
    std::swap(mount_id_, other->mount_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_mounts_level_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_mounts_level_req_descriptor_;
  metadata.reflection = upgrade_mounts_level_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mounts_bless_time_req::kUnixtimeFieldNumber;
const int mounts_bless_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mounts_bless_time_req::mounts_bless_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounts_bless_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mounts_bless_time_req::mounts_bless_time_req(const mounts_bless_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounts_bless_time_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounts_bless_time_req::~mounts_bless_time_req() {
  SharedDtor();
}

void mounts_bless_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mounts_bless_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounts_bless_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounts_bless_time_req_descriptor_;
}

const mounts_bless_time_req& mounts_bless_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

mounts_bless_time_req* mounts_bless_time_req::default_instance_ = NULL;

mounts_bless_time_req* mounts_bless_time_req::New() const {
  return new mounts_bless_time_req;
}

void mounts_bless_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounts_bless_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounts_bless_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounts_bless_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounts_bless_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounts_bless_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounts_bless_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounts_bless_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounts_bless_time_req::MergeFrom(const mounts_bless_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounts_bless_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounts_bless_time_req::CopyFrom(const mounts_bless_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounts_bless_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mounts_bless_time_req::Swap(mounts_bless_time_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounts_bless_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounts_bless_time_req_descriptor_;
  metadata.reflection = mounts_bless_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mounts_bless_time_rsp::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

mounts_bless_time_rsp::mounts_bless_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mounts_bless_time_rsp::InitAsDefaultInstance() {
}

mounts_bless_time_rsp::mounts_bless_time_rsp(const mounts_bless_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mounts_bless_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  remain_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mounts_bless_time_rsp::~mounts_bless_time_rsp() {
  SharedDtor();
}

void mounts_bless_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mounts_bless_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mounts_bless_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mounts_bless_time_rsp_descriptor_;
}

const mounts_bless_time_rsp& mounts_bless_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emounts_2eproto();
  return *default_instance_;
}

mounts_bless_time_rsp* mounts_bless_time_rsp::default_instance_ = NULL;

mounts_bless_time_rsp* mounts_bless_time_rsp::New() const {
  return new mounts_bless_time_rsp;
}

void mounts_bless_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remain_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mounts_bless_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remain_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mounts_bless_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mounts_bless_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mounts_bless_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remain_time = 1;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mounts_bless_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mounts_bless_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mounts_bless_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mounts_bless_time_rsp::MergeFrom(const mounts_bless_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mounts_bless_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mounts_bless_time_rsp::CopyFrom(const mounts_bless_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mounts_bless_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mounts_bless_time_rsp::Swap(mounts_bless_time_rsp* other) {
  if (other != this) {
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mounts_bless_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mounts_bless_time_rsp_descriptor_;
  metadata.reflection = mounts_bless_time_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
