// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_pos_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_pos_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* role_pos_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_pos_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fpos_5fmsg_2eproto() {
  protobuf_AddDesc_client_2erole_5fpos_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_pos_msg.proto");
  GOOGLE_CHECK(file != NULL);
  role_pos_msg_descriptor_ = file->message_type(0);
  static const int role_pos_msg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, rds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, svr_head_),
  };
  role_pos_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_pos_msg_descriptor_,
      role_pos_msg::default_instance_,
      role_pos_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_pos_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_pos_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fpos_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_pos_msg_descriptor_, &role_pos_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fpos_5fmsg_2eproto() {
  delete role_pos_msg::default_instance_;
  delete role_pos_msg_reflection_;
}

void protobuf_AddDesc_client_2erole_5fpos_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031client.role_pos_msg.proto\022\006client\032\021cli"
    "ent.comm.proto\"\302\001\n\014role_pos_msg\022\016\n\006map_i"
    "d\030\001 \002(\r\022\020\n\010scene_id\030\002 \002(\r\022\036\n\003rds\030\003 \003(\0132\021"
    ".client.role_data\022#\n\003mps\030\004 \003(\0132\026.client."
    "client_map_pos\022\022\n\007inst_id\030\005 \001(\r:\0010\022\017\n\004ty"
    "pe\030\006 \001(\r:\0010\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_pos_msg.proto", &protobuf_RegisterTypes);
  role_pos_msg::default_instance_ = new role_pos_msg();
  role_pos_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fpos_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fpos_5fmsg_2eproto {
  StaticDescriptorInitializer_client_2erole_5fpos_5fmsg_2eproto() {
    protobuf_AddDesc_client_2erole_5fpos_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fpos_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int role_pos_msg::kMapIdFieldNumber;
const int role_pos_msg::kSceneIdFieldNumber;
const int role_pos_msg::kRdsFieldNumber;
const int role_pos_msg::kMpsFieldNumber;
const int role_pos_msg::kInstIdFieldNumber;
const int role_pos_msg::kTypeFieldNumber;
const int role_pos_msg::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

role_pos_msg::role_pos_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_pos_msg::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

role_pos_msg::role_pos_msg(const role_pos_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_pos_msg::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  scene_id_ = 0u;
  inst_id_ = 0u;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_pos_msg::~role_pos_msg() {
  SharedDtor();
}

void role_pos_msg::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void role_pos_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_pos_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_pos_msg_descriptor_;
}

const role_pos_msg& role_pos_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpos_5fmsg_2eproto();
  return *default_instance_;
}

role_pos_msg* role_pos_msg::default_instance_ = NULL;

role_pos_msg* role_pos_msg::New() const {
  return new role_pos_msg;
}

void role_pos_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    scene_id_ = 0u;
    inst_id_ = 0u;
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  rds_.Clear();
  mps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_pos_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rds;
        break;
      }

      // repeated .client.role_data rds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rds;
        if (input->ExpectTag(34)) goto parse_mps;
        break;
      }

      // repeated .client.client_map_pos mps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mps;
        if (input->ExpectTag(40)) goto parse_inst_id;
        break;
      }

      // optional uint32 inst_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_pos_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // repeated .client.role_data rds = 3;
  for (int i = 0; i < this->rds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rds(i), output);
  }

  // repeated .client.client_map_pos mps = 4;
  for (int i = 0; i < this->mps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mps(i), output);
  }

  // optional uint32 inst_id = 5 [default = 0];
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inst_id(), output);
  }

  // optional uint32 type = 6 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_pos_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // repeated .client.role_data rds = 3;
  for (int i = 0; i < this->rds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rds(i), target);
  }

  // repeated .client.client_map_pos mps = 4;
  for (int i = 0; i < this->mps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mps(i), target);
  }

  // optional uint32 inst_id = 5 [default = 0];
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inst_id(), target);
  }

  // optional uint32 type = 6 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_pos_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 inst_id = 5 [default = 0];
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }

    // optional uint32 type = 6 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.role_data rds = 3;
  total_size += 1 * this->rds_size();
  for (int i = 0; i < this->rds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rds(i));
  }

  // repeated .client.client_map_pos mps = 4;
  total_size += 1 * this->mps_size();
  for (int i = 0; i < this->mps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_pos_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_pos_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_pos_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_pos_msg::MergeFrom(const role_pos_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rds_.MergeFrom(from.rds_);
  mps_.MergeFrom(from.mps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_pos_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_pos_msg::CopyFrom(const role_pos_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_pos_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < rds_size(); i++) {
    if (!this->rds(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mps_size(); i++) {
    if (!this->mps(i).IsInitialized()) return false;
  }
  return true;
}

void role_pos_msg::Swap(role_pos_msg* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    rds_.Swap(&other->rds_);
    mps_.Swap(&other->mps_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_pos_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_pos_msg_descriptor_;
  metadata.reflection = role_pos_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
