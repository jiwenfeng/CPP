// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.saparatism.proto

#ifndef PROTOBUF_client_2esaparatism_2eproto__INCLUDED
#define PROTOBUF_client_2esaparatism_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.family.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2esaparatism_2eproto();
void protobuf_AssignDesc_client_2esaparatism_2eproto();
void protobuf_ShutdownFile_client_2esaparatism_2eproto();

class saparatism_region_info_req;
class saparatism_region_info;
class saparatism_region_info_rsp;
class saparatism_region_award_req;
class saparatism_region_award_check;
class saparatism_region_award_rsp;
class saparatism_open_pop_rsp;

enum SAPARATISM_AWARD_OPERATOR_RET {
  SAOR_SUCCESS = 0,
  SAOR_TIME_LIMIT = 1,
  SAOR_NOT_FAMILY_LIMIT = 2,
  SAOR_NOT_OCCUPTION_LIMIT = 3,
  SAOR_GET_LIMIT = 4
};
bool SAPARATISM_AWARD_OPERATOR_RET_IsValid(int value);
const SAPARATISM_AWARD_OPERATOR_RET SAPARATISM_AWARD_OPERATOR_RET_MIN = SAOR_SUCCESS;
const SAPARATISM_AWARD_OPERATOR_RET SAPARATISM_AWARD_OPERATOR_RET_MAX = SAOR_GET_LIMIT;
const int SAPARATISM_AWARD_OPERATOR_RET_ARRAYSIZE = SAPARATISM_AWARD_OPERATOR_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* SAPARATISM_AWARD_OPERATOR_RET_descriptor();
inline const ::std::string& SAPARATISM_AWARD_OPERATOR_RET_Name(SAPARATISM_AWARD_OPERATOR_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    SAPARATISM_AWARD_OPERATOR_RET_descriptor(), value);
}
inline bool SAPARATISM_AWARD_OPERATOR_RET_Parse(
    const ::std::string& name, SAPARATISM_AWARD_OPERATOR_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SAPARATISM_AWARD_OPERATOR_RET>(
    SAPARATISM_AWARD_OPERATOR_RET_descriptor(), name, value);
}
// ===================================================================

class saparatism_region_info_req : public ::google::protobuf::Message {
 public:
  saparatism_region_info_req();
  virtual ~saparatism_region_info_req();

  saparatism_region_info_req(const saparatism_region_info_req& from);

  inline saparatism_region_info_req& operator=(const saparatism_region_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_info_req& default_instance();

  void Swap(saparatism_region_info_req* other);

  // implements Message ----------------------------------------------

  saparatism_region_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_info_req& from);
  void MergeFrom(const saparatism_region_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.saparatism_region_info_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_info_req* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_region_info : public ::google::protobuf::Message {
 public:
  saparatism_region_info();
  virtual ~saparatism_region_info();

  saparatism_region_info(const saparatism_region_info& from);

  inline saparatism_region_info& operator=(const saparatism_region_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_info& default_instance();

  void Swap(saparatism_region_info* other);

  // implements Message ----------------------------------------------

  saparatism_region_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_info& from);
  void MergeFrom(const saparatism_region_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 region_id() const;
  inline void set_region_id(::google::protobuf::uint32 value);

  // required uint32 region_occuption = 2;
  inline bool has_region_occuption() const;
  inline void clear_region_occuption();
  static const int kRegionOccuptionFieldNumber = 2;
  inline ::google::protobuf::uint32 region_occuption() const;
  inline void set_region_occuption(::google::protobuf::uint32 value);

  // optional uint32 family_id = 3;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional uint32 family_occuption_days = 4;
  inline bool has_family_occuption_days() const;
  inline void clear_family_occuption_days();
  static const int kFamilyOccuptionDaysFieldNumber = 4;
  inline ::google::protobuf::uint32 family_occuption_days() const;
  inline void set_family_occuption_days(::google::protobuf::uint32 value);

  // optional .client.family_info family = 5;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 5;
  inline const ::client::family_info& family() const;
  inline ::client::family_info* mutable_family();
  inline ::client::family_info* release_family();
  inline void set_allocated_family(::client::family_info* family);

  // @@protoc_insertion_point(class_scope:client.saparatism_region_info)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_region_occuption();
  inline void clear_has_region_occuption();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_occuption_days();
  inline void clear_has_family_occuption_days();
  inline void set_has_family();
  inline void clear_has_family();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 region_id_;
  ::google::protobuf::uint32 region_occuption_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 family_occuption_days_;
  ::client::family_info* family_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_info* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_region_info_rsp : public ::google::protobuf::Message {
 public:
  saparatism_region_info_rsp();
  virtual ~saparatism_region_info_rsp();

  saparatism_region_info_rsp(const saparatism_region_info_rsp& from);

  inline saparatism_region_info_rsp& operator=(const saparatism_region_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_info_rsp& default_instance();

  void Swap(saparatism_region_info_rsp* other);

  // implements Message ----------------------------------------------

  saparatism_region_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_info_rsp& from);
  void MergeFrom(const saparatism_region_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isopen = 2;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsopenFieldNumber = 2;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required bool isleader = 4;
  inline bool has_isleader() const;
  inline void clear_isleader();
  static const int kIsleaderFieldNumber = 4;
  inline bool isleader() const;
  inline void set_isleader(bool value);

  // required uint32 sceneid = 5;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 5;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // repeated .client.saparatism_region_info ri = 1;
  inline int ri_size() const;
  inline void clear_ri();
  static const int kRiFieldNumber = 1;
  inline const ::client::saparatism_region_info& ri(int index) const;
  inline ::client::saparatism_region_info* mutable_ri(int index);
  inline ::client::saparatism_region_info* add_ri();
  inline const ::google::protobuf::RepeatedPtrField< ::client::saparatism_region_info >&
      ri() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::saparatism_region_info >*
      mutable_ri();

  // @@protoc_insertion_point(class_scope:client.saparatism_region_info_rsp)
 private:
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_isleader();
  inline void clear_has_isleader();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  bool isopen_;
  bool isleader_;
  ::google::protobuf::RepeatedPtrField< ::client::saparatism_region_info > ri_;
  ::google::protobuf::uint32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_region_award_req : public ::google::protobuf::Message {
 public:
  saparatism_region_award_req();
  virtual ~saparatism_region_award_req();

  saparatism_region_award_req(const saparatism_region_award_req& from);

  inline saparatism_region_award_req& operator=(const saparatism_region_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_award_req& default_instance();

  void Swap(saparatism_region_award_req* other);

  // implements Message ----------------------------------------------

  saparatism_region_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_award_req& from);
  void MergeFrom(const saparatism_region_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 region_id() const;
  inline void set_region_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.saparatism_region_award_req)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_award_req* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_region_award_check : public ::google::protobuf::Message {
 public:
  saparatism_region_award_check();
  virtual ~saparatism_region_award_check();

  saparatism_region_award_check(const saparatism_region_award_check& from);

  inline saparatism_region_award_check& operator=(const saparatism_region_award_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_award_check& default_instance();

  void Swap(saparatism_region_award_check* other);

  // implements Message ----------------------------------------------

  saparatism_region_award_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_award_check& from);
  void MergeFrom(const saparatism_region_award_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.saparatism_region_award_req req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline const ::client::saparatism_region_award_req& req() const;
  inline ::client::saparatism_region_award_req* mutable_req();
  inline ::client::saparatism_region_award_req* release_req();
  inline void set_allocated_req(::client::saparatism_region_award_req* req);

  // @@protoc_insertion_point(class_scope:client.saparatism_region_award_check)
 private:
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::saparatism_region_award_req* req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_award_check* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_region_award_rsp : public ::google::protobuf::Message {
 public:
  saparatism_region_award_rsp();
  virtual ~saparatism_region_award_rsp();

  saparatism_region_award_rsp(const saparatism_region_award_rsp& from);

  inline saparatism_region_award_rsp& operator=(const saparatism_region_award_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_region_award_rsp& default_instance();

  void Swap(saparatism_region_award_rsp* other);

  // implements Message ----------------------------------------------

  saparatism_region_award_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_region_award_rsp& from);
  void MergeFrom(const saparatism_region_award_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::SAPARATISM_AWARD_OPERATOR_RET ret() const;
  inline void set_ret(::client::SAPARATISM_AWARD_OPERATOR_RET value);

  // @@protoc_insertion_point(class_scope:client.saparatism_region_award_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_region_award_rsp* default_instance_;
};
// -------------------------------------------------------------------

class saparatism_open_pop_rsp : public ::google::protobuf::Message {
 public:
  saparatism_open_pop_rsp();
  virtual ~saparatism_open_pop_rsp();

  saparatism_open_pop_rsp(const saparatism_open_pop_rsp& from);

  inline saparatism_open_pop_rsp& operator=(const saparatism_open_pop_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const saparatism_open_pop_rsp& default_instance();

  void Swap(saparatism_open_pop_rsp* other);

  // implements Message ----------------------------------------------

  saparatism_open_pop_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const saparatism_open_pop_rsp& from);
  void MergeFrom(const saparatism_open_pop_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.saparatism_open_pop_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_client_2esaparatism_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_2eproto();

  void InitAsDefaultInstance();
  static saparatism_open_pop_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// saparatism_region_info_req

// optional .client.server_head svr_head = 1000;
inline bool saparatism_region_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& saparatism_region_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* saparatism_region_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* saparatism_region_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void saparatism_region_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// saparatism_region_info

// required uint32 region_id = 1;
inline bool saparatism_region_info::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_info::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_info::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_info::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 saparatism_region_info::region_id() const {
  return region_id_;
}
inline void saparatism_region_info::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
}

// required uint32 region_occuption = 2;
inline bool saparatism_region_info::has_region_occuption() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void saparatism_region_info::set_has_region_occuption() {
  _has_bits_[0] |= 0x00000002u;
}
inline void saparatism_region_info::clear_has_region_occuption() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void saparatism_region_info::clear_region_occuption() {
  region_occuption_ = 0u;
  clear_has_region_occuption();
}
inline ::google::protobuf::uint32 saparatism_region_info::region_occuption() const {
  return region_occuption_;
}
inline void saparatism_region_info::set_region_occuption(::google::protobuf::uint32 value) {
  set_has_region_occuption();
  region_occuption_ = value;
}

// optional uint32 family_id = 3;
inline bool saparatism_region_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void saparatism_region_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void saparatism_region_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void saparatism_region_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 saparatism_region_info::family_id() const {
  return family_id_;
}
inline void saparatism_region_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional uint32 family_occuption_days = 4;
inline bool saparatism_region_info::has_family_occuption_days() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void saparatism_region_info::set_has_family_occuption_days() {
  _has_bits_[0] |= 0x00000008u;
}
inline void saparatism_region_info::clear_has_family_occuption_days() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void saparatism_region_info::clear_family_occuption_days() {
  family_occuption_days_ = 0u;
  clear_has_family_occuption_days();
}
inline ::google::protobuf::uint32 saparatism_region_info::family_occuption_days() const {
  return family_occuption_days_;
}
inline void saparatism_region_info::set_family_occuption_days(::google::protobuf::uint32 value) {
  set_has_family_occuption_days();
  family_occuption_days_ = value;
}

// optional .client.family_info family = 5;
inline bool saparatism_region_info::has_family() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void saparatism_region_info::set_has_family() {
  _has_bits_[0] |= 0x00000010u;
}
inline void saparatism_region_info::clear_has_family() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void saparatism_region_info::clear_family() {
  if (family_ != NULL) family_->::client::family_info::Clear();
  clear_has_family();
}
inline const ::client::family_info& saparatism_region_info::family() const {
  return family_ != NULL ? *family_ : *default_instance_->family_;
}
inline ::client::family_info* saparatism_region_info::mutable_family() {
  set_has_family();
  if (family_ == NULL) family_ = new ::client::family_info;
  return family_;
}
inline ::client::family_info* saparatism_region_info::release_family() {
  clear_has_family();
  ::client::family_info* temp = family_;
  family_ = NULL;
  return temp;
}
inline void saparatism_region_info::set_allocated_family(::client::family_info* family) {
  delete family_;
  family_ = family;
  if (family) {
    set_has_family();
  } else {
    clear_has_family();
  }
}

// -------------------------------------------------------------------

// saparatism_region_info_rsp

// required bool isopen = 2;
inline bool saparatism_region_info_rsp::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_info_rsp::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_info_rsp::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_info_rsp::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool saparatism_region_info_rsp::isopen() const {
  return isopen_;
}
inline void saparatism_region_info_rsp::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// required uint32 time = 3;
inline bool saparatism_region_info_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void saparatism_region_info_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void saparatism_region_info_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void saparatism_region_info_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 saparatism_region_info_rsp::time() const {
  return time_;
}
inline void saparatism_region_info_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required bool isleader = 4;
inline bool saparatism_region_info_rsp::has_isleader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void saparatism_region_info_rsp::set_has_isleader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void saparatism_region_info_rsp::clear_has_isleader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void saparatism_region_info_rsp::clear_isleader() {
  isleader_ = false;
  clear_has_isleader();
}
inline bool saparatism_region_info_rsp::isleader() const {
  return isleader_;
}
inline void saparatism_region_info_rsp::set_isleader(bool value) {
  set_has_isleader();
  isleader_ = value;
}

// required uint32 sceneid = 5;
inline bool saparatism_region_info_rsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void saparatism_region_info_rsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void saparatism_region_info_rsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void saparatism_region_info_rsp::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 saparatism_region_info_rsp::sceneid() const {
  return sceneid_;
}
inline void saparatism_region_info_rsp::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// repeated .client.saparatism_region_info ri = 1;
inline int saparatism_region_info_rsp::ri_size() const {
  return ri_.size();
}
inline void saparatism_region_info_rsp::clear_ri() {
  ri_.Clear();
}
inline const ::client::saparatism_region_info& saparatism_region_info_rsp::ri(int index) const {
  return ri_.Get(index);
}
inline ::client::saparatism_region_info* saparatism_region_info_rsp::mutable_ri(int index) {
  return ri_.Mutable(index);
}
inline ::client::saparatism_region_info* saparatism_region_info_rsp::add_ri() {
  return ri_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::saparatism_region_info >&
saparatism_region_info_rsp::ri() const {
  return ri_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::saparatism_region_info >*
saparatism_region_info_rsp::mutable_ri() {
  return &ri_;
}

// -------------------------------------------------------------------

// saparatism_region_award_req

// required uint32 region_id = 1;
inline bool saparatism_region_award_req::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_award_req::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_award_req::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_award_req::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 saparatism_region_award_req::region_id() const {
  return region_id_;
}
inline void saparatism_region_award_req::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool saparatism_region_award_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void saparatism_region_award_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void saparatism_region_award_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void saparatism_region_award_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& saparatism_region_award_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* saparatism_region_award_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* saparatism_region_award_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void saparatism_region_award_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// saparatism_region_award_check

// required .client.saparatism_region_award_req req = 1;
inline bool saparatism_region_award_check::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_award_check::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_award_check::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_award_check::clear_req() {
  if (req_ != NULL) req_->::client::saparatism_region_award_req::Clear();
  clear_has_req();
}
inline const ::client::saparatism_region_award_req& saparatism_region_award_check::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::client::saparatism_region_award_req* saparatism_region_award_check::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::client::saparatism_region_award_req;
  return req_;
}
inline ::client::saparatism_region_award_req* saparatism_region_award_check::release_req() {
  clear_has_req();
  ::client::saparatism_region_award_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void saparatism_region_award_check::set_allocated_req(::client::saparatism_region_award_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// -------------------------------------------------------------------

// saparatism_region_award_rsp

// required .client.SAPARATISM_AWARD_OPERATOR_RET ret = 1;
inline bool saparatism_region_award_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void saparatism_region_award_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void saparatism_region_award_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void saparatism_region_award_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::SAPARATISM_AWARD_OPERATOR_RET saparatism_region_award_rsp::ret() const {
  return static_cast< ::client::SAPARATISM_AWARD_OPERATOR_RET >(ret_);
}
inline void saparatism_region_award_rsp::set_ret(::client::SAPARATISM_AWARD_OPERATOR_RET value) {
  assert(::client::SAPARATISM_AWARD_OPERATOR_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// saparatism_open_pop_rsp


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SAPARATISM_AWARD_OPERATOR_RET>() {
  return ::client::SAPARATISM_AWARD_OPERATOR_RET_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2esaparatism_2eproto__INCLUDED
