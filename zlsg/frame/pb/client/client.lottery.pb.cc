// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.lottery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.lottery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* lottery_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_time_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_open_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_open_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* lottery_open_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lottery_open_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* lottery_open_rsp_ret_e_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOTTERY_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2elottery_2eproto() {
  protobuf_AddDesc_client_2elottery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.lottery.proto");
  GOOGLE_CHECK(file != NULL);
  lottery_item_descriptor_ = file->message_type(0);
  static const int lottery_item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, gold_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, bronze_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, num_),
  };
  lottery_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_item_descriptor_,
      lottery_item::default_instance_,
      lottery_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_item));
  lottery_info_descriptor_ = file->message_type(1);
  static const int lottery_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_info, gold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_info, bronze_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_info, gold_lpi_),
  };
  lottery_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_info_descriptor_,
      lottery_info::default_instance_,
      lottery_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_info));
  lottery_time_req_descriptor_ = file->message_type(2);
  static const int lottery_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_req, svr_head_),
  };
  lottery_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_time_req_descriptor_,
      lottery_time_req::default_instance_,
      lottery_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_time_req));
  lottery_time_rsp_descriptor_ = file->message_type(3);
  static const int lottery_time_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_rsp, gold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_rsp, bronze_time_),
  };
  lottery_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_time_rsp_descriptor_,
      lottery_time_rsp::default_instance_,
      lottery_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_time_rsp));
  lottery_open_req_descriptor_ = file->message_type(4);
  static const int lottery_open_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, auto_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, svr_head_),
  };
  lottery_open_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_open_req_descriptor_,
      lottery_open_req::default_instance_,
      lottery_open_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_open_req));
  lottery_open_rsp_descriptor_ = file->message_type(5);
  static const int lottery_open_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_rsp, pi_),
  };
  lottery_open_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lottery_open_rsp_descriptor_,
      lottery_open_rsp::default_instance_,
      lottery_open_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lottery_open_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lottery_open_rsp));
  lottery_open_rsp_ret_e_descriptor_ = lottery_open_rsp_descriptor_->enum_type(0);
  LOTTERY_TYPE_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2elottery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_item_descriptor_, &lottery_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_info_descriptor_, &lottery_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_time_req_descriptor_, &lottery_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_time_rsp_descriptor_, &lottery_time_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_open_req_descriptor_, &lottery_open_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lottery_open_rsp_descriptor_, &lottery_open_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2elottery_2eproto() {
  delete lottery_item::default_instance_;
  delete lottery_item_reflection_;
  delete lottery_info::default_instance_;
  delete lottery_info_reflection_;
  delete lottery_time_req::default_instance_;
  delete lottery_time_req_reflection_;
  delete lottery_time_rsp::default_instance_;
  delete lottery_time_rsp_reflection_;
  delete lottery_open_req::default_instance_;
  delete lottery_open_req_reflection_;
  delete lottery_open_rsp::default_instance_;
  delete lottery_open_rsp_reflection_;
}

void protobuf_AddDesc_client_2elottery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024client.lottery.proto\022\006client\032\021client.c"
    "omm.proto\032\027client.role_props.proto\"[\n\014lo"
    "ttery_item\022\017\n\007prop_id\030\001 \002(\r\022\023\n\010gold_box\030"
    "\002 \001(\r:\0010\022\025\n\nbronze_box\030\003 \001(\r:\0010\022\016\n\003num\030\004"
    " \001(\r:\0011\"^\n\014lottery_info\022\021\n\tgold_time\030\001 \002"
    "(\r\022\023\n\013bronze_time\030\002 \002(\r\022&\n\010gold_lpi\030\003 \002("
    "\0132\024.client.lottery_item\"K\n\020lottery_time_"
    "req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\":\n\020lottery_time_rsp"
    "\022\021\n\tgold_time\030\001 \002(\r\022\023\n\013bronze_time\030\002 \002(\r"
    "\"\201\001\n\020lottery_open_req\022\r\n\005times\030\001 \002(\r\022$\n\004"
    "type\030\002 \002(\0162\026.client.LOTTERY_TYPE_E\022\020\n\010au"
    "to_buy\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"\303\001\n\020lottery_open_rsp\022+\n\003ret"
    "\030\001 \002(\0162\036.client.lottery_open_rsp.ret_e\022\036"
    "\n\002pi\030\002 \003(\0132\022.client.props_info\"b\n\005ret_e\022"
    "\013\n\007SUCCESS\020\000\022\016\n\nPROP_LIMIT\020\001\022\r\n\tBAG_LIMI"
    "T\020\002\022\017\n\013MONEY_LIMIT\020\003\022\017\n\013INGOT_LIMIT\020\004\022\013\n"
    "\007FAILURE\020\005*.\n\016LOTTERY_TYPE_E\022\014\n\010GOLD_BOX"
    "\020\000\022\016\n\nBRONZE_BOX\020\001", 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.lottery.proto", &protobuf_RegisterTypes);
  lottery_item::default_instance_ = new lottery_item();
  lottery_info::default_instance_ = new lottery_info();
  lottery_time_req::default_instance_ = new lottery_time_req();
  lottery_time_rsp::default_instance_ = new lottery_time_rsp();
  lottery_open_req::default_instance_ = new lottery_open_req();
  lottery_open_rsp::default_instance_ = new lottery_open_rsp();
  lottery_item::default_instance_->InitAsDefaultInstance();
  lottery_info::default_instance_->InitAsDefaultInstance();
  lottery_time_req::default_instance_->InitAsDefaultInstance();
  lottery_time_rsp::default_instance_->InitAsDefaultInstance();
  lottery_open_req::default_instance_->InitAsDefaultInstance();
  lottery_open_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2elottery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2elottery_2eproto {
  StaticDescriptorInitializer_client_2elottery_2eproto() {
    protobuf_AddDesc_client_2elottery_2eproto();
  }
} static_descriptor_initializer_client_2elottery_2eproto_;
const ::google::protobuf::EnumDescriptor* LOTTERY_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOTTERY_TYPE_E_descriptor_;
}
bool LOTTERY_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_item::kPropIdFieldNumber;
const int lottery_item::kGoldBoxFieldNumber;
const int lottery_item::kBronzeBoxFieldNumber;
const int lottery_item::kNumFieldNumber;
#endif  // !_MSC_VER

lottery_item::lottery_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_item::InitAsDefaultInstance() {
}

lottery_item::lottery_item(const lottery_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_item::SharedCtor() {
  _cached_size_ = 0;
  prop_id_ = 0u;
  gold_box_ = 0u;
  bronze_box_ = 0u;
  num_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_item::~lottery_item() {
  SharedDtor();
}

void lottery_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lottery_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_item_descriptor_;
}

const lottery_item& lottery_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_item* lottery_item::default_instance_ = NULL;

lottery_item* lottery_item::New() const {
  return new lottery_item;
}

void lottery_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prop_id_ = 0u;
    gold_box_ = 0u;
    bronze_box_ = 0u;
    num_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold_box;
        break;
      }

      // optional uint32 gold_box = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_box_)));
          set_has_gold_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bronze_box;
        break;
      }

      // optional uint32 bronze_box = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bronze_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bronze_box_)));
          set_has_bronze_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_id(), output);
  }

  // optional uint32 gold_box = 2 [default = 0];
  if (has_gold_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_box(), output);
  }

  // optional uint32 bronze_box = 3 [default = 0];
  if (has_bronze_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bronze_box(), output);
  }

  // optional uint32 num = 4 [default = 1];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_id(), target);
  }

  // optional uint32 gold_box = 2 [default = 0];
  if (has_gold_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_box(), target);
  }

  // optional uint32 bronze_box = 3 [default = 0];
  if (has_bronze_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bronze_box(), target);
  }

  // optional uint32 num = 4 [default = 1];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prop_id = 1;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // optional uint32 gold_box = 2 [default = 0];
    if (has_gold_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_box());
    }

    // optional uint32 bronze_box = 3 [default = 0];
    if (has_bronze_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bronze_box());
    }

    // optional uint32 num = 4 [default = 1];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_item::MergeFrom(const lottery_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_gold_box()) {
      set_gold_box(from.gold_box());
    }
    if (from.has_bronze_box()) {
      set_bronze_box(from.bronze_box());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_item::CopyFrom(const lottery_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void lottery_item::Swap(lottery_item* other) {
  if (other != this) {
    std::swap(prop_id_, other->prop_id_);
    std::swap(gold_box_, other->gold_box_);
    std::swap(bronze_box_, other->bronze_box_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_item_descriptor_;
  metadata.reflection = lottery_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_info::kGoldTimeFieldNumber;
const int lottery_info::kBronzeTimeFieldNumber;
const int lottery_info::kGoldLpiFieldNumber;
#endif  // !_MSC_VER

lottery_info::lottery_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_info::InitAsDefaultInstance() {
  gold_lpi_ = const_cast< ::client::lottery_item*>(&::client::lottery_item::default_instance());
}

lottery_info::lottery_info(const lottery_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_info::SharedCtor() {
  _cached_size_ = 0;
  gold_time_ = 0u;
  bronze_time_ = 0u;
  gold_lpi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_info::~lottery_info() {
  SharedDtor();
}

void lottery_info::SharedDtor() {
  if (this != default_instance_) {
    delete gold_lpi_;
  }
}

void lottery_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_info_descriptor_;
}

const lottery_info& lottery_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_info* lottery_info::default_instance_ = NULL;

lottery_info* lottery_info::New() const {
  return new lottery_info;
}

void lottery_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_time_ = 0u;
    bronze_time_ = 0u;
    if (has_gold_lpi()) {
      if (gold_lpi_ != NULL) gold_lpi_->::client::lottery_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gold_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_time_)));
          set_has_gold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bronze_time;
        break;
      }

      // required uint32 bronze_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bronze_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bronze_time_)));
          set_has_bronze_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gold_lpi;
        break;
      }

      // required .client.lottery_item gold_lpi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gold_lpi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gold_lpi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gold_time = 1;
  if (has_gold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold_time(), output);
  }

  // required uint32 bronze_time = 2;
  if (has_bronze_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bronze_time(), output);
  }

  // required .client.lottery_item gold_lpi = 3;
  if (has_gold_lpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gold_lpi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gold_time = 1;
  if (has_gold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gold_time(), target);
  }

  // required uint32 bronze_time = 2;
  if (has_bronze_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bronze_time(), target);
  }

  // required .client.lottery_item gold_lpi = 3;
  if (has_gold_lpi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gold_lpi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gold_time = 1;
    if (has_gold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_time());
    }

    // required uint32 bronze_time = 2;
    if (has_bronze_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bronze_time());
    }

    // required .client.lottery_item gold_lpi = 3;
    if (has_gold_lpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gold_lpi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_info::MergeFrom(const lottery_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold_time()) {
      set_gold_time(from.gold_time());
    }
    if (from.has_bronze_time()) {
      set_bronze_time(from.bronze_time());
    }
    if (from.has_gold_lpi()) {
      mutable_gold_lpi()->::client::lottery_item::MergeFrom(from.gold_lpi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_info::CopyFrom(const lottery_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gold_lpi()) {
    if (!this->gold_lpi().IsInitialized()) return false;
  }
  return true;
}

void lottery_info::Swap(lottery_info* other) {
  if (other != this) {
    std::swap(gold_time_, other->gold_time_);
    std::swap(bronze_time_, other->bronze_time_);
    std::swap(gold_lpi_, other->gold_lpi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_info_descriptor_;
  metadata.reflection = lottery_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_time_req::kRoleIdFieldNumber;
const int lottery_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

lottery_time_req::lottery_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

lottery_time_req::lottery_time_req(const lottery_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_time_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_time_req::~lottery_time_req() {
  SharedDtor();
}

void lottery_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void lottery_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_time_req_descriptor_;
}

const lottery_time_req& lottery_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_time_req* lottery_time_req::default_instance_ = NULL;

lottery_time_req* lottery_time_req::New() const {
  return new lottery_time_req;
}

void lottery_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_time_req::MergeFrom(const lottery_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_time_req::CopyFrom(const lottery_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void lottery_time_req::Swap(lottery_time_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_time_req_descriptor_;
  metadata.reflection = lottery_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_time_rsp::kGoldTimeFieldNumber;
const int lottery_time_rsp::kBronzeTimeFieldNumber;
#endif  // !_MSC_VER

lottery_time_rsp::lottery_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_time_rsp::InitAsDefaultInstance() {
}

lottery_time_rsp::lottery_time_rsp(const lottery_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  gold_time_ = 0u;
  bronze_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_time_rsp::~lottery_time_rsp() {
  SharedDtor();
}

void lottery_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lottery_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_time_rsp_descriptor_;
}

const lottery_time_rsp& lottery_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_time_rsp* lottery_time_rsp::default_instance_ = NULL;

lottery_time_rsp* lottery_time_rsp::New() const {
  return new lottery_time_rsp;
}

void lottery_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_time_ = 0u;
    bronze_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gold_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_time_)));
          set_has_gold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bronze_time;
        break;
      }

      // required uint32 bronze_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bronze_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bronze_time_)));
          set_has_bronze_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gold_time = 1;
  if (has_gold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold_time(), output);
  }

  // required uint32 bronze_time = 2;
  if (has_bronze_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bronze_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gold_time = 1;
  if (has_gold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gold_time(), target);
  }

  // required uint32 bronze_time = 2;
  if (has_bronze_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bronze_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gold_time = 1;
    if (has_gold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_time());
    }

    // required uint32 bronze_time = 2;
    if (has_bronze_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bronze_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_time_rsp::MergeFrom(const lottery_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold_time()) {
      set_gold_time(from.gold_time());
    }
    if (from.has_bronze_time()) {
      set_bronze_time(from.bronze_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_time_rsp::CopyFrom(const lottery_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void lottery_time_rsp::Swap(lottery_time_rsp* other) {
  if (other != this) {
    std::swap(gold_time_, other->gold_time_);
    std::swap(bronze_time_, other->bronze_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_time_rsp_descriptor_;
  metadata.reflection = lottery_time_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lottery_open_req::kTimesFieldNumber;
const int lottery_open_req::kTypeFieldNumber;
const int lottery_open_req::kAutoBuyFieldNumber;
const int lottery_open_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

lottery_open_req::lottery_open_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_open_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

lottery_open_req::lottery_open_req(const lottery_open_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_open_req::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  type_ = 0;
  auto_buy_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_open_req::~lottery_open_req() {
  SharedDtor();
}

void lottery_open_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void lottery_open_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_open_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_open_req_descriptor_;
}

const lottery_open_req& lottery_open_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_open_req* lottery_open_req::default_instance_ = NULL;

lottery_open_req* lottery_open_req::New() const {
  return new lottery_open_req;
}

void lottery_open_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0u;
    type_ = 0;
    auto_buy_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_open_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.LOTTERY_TYPE_E type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::LOTTERY_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::LOTTERY_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_buy;
        break;
      }

      // required uint32 auto_buy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_buy_)));
          set_has_auto_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_open_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // required .client.LOTTERY_TYPE_E type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 auto_buy = 3;
  if (has_auto_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_buy(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_open_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  // required .client.LOTTERY_TYPE_E type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 auto_buy = 3;
  if (has_auto_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_buy(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_open_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // required .client.LOTTERY_TYPE_E type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 auto_buy = 3;
    if (has_auto_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_buy());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_open_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_open_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_open_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_open_req::MergeFrom(const lottery_open_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_auto_buy()) {
      set_auto_buy(from.auto_buy());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_open_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_open_req::CopyFrom(const lottery_open_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_open_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void lottery_open_req::Swap(lottery_open_req* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(type_, other->type_);
    std::swap(auto_buy_, other->auto_buy_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_open_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_open_req_descriptor_;
  metadata.reflection = lottery_open_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* lottery_open_rsp_ret_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_open_rsp_ret_e_descriptor_;
}
bool lottery_open_rsp_ret_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const lottery_open_rsp_ret_e lottery_open_rsp::SUCCESS;
const lottery_open_rsp_ret_e lottery_open_rsp::PROP_LIMIT;
const lottery_open_rsp_ret_e lottery_open_rsp::BAG_LIMIT;
const lottery_open_rsp_ret_e lottery_open_rsp::MONEY_LIMIT;
const lottery_open_rsp_ret_e lottery_open_rsp::INGOT_LIMIT;
const lottery_open_rsp_ret_e lottery_open_rsp::FAILURE;
const lottery_open_rsp_ret_e lottery_open_rsp::ret_e_MIN;
const lottery_open_rsp_ret_e lottery_open_rsp::ret_e_MAX;
const int lottery_open_rsp::ret_e_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int lottery_open_rsp::kRetFieldNumber;
const int lottery_open_rsp::kPiFieldNumber;
#endif  // !_MSC_VER

lottery_open_rsp::lottery_open_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lottery_open_rsp::InitAsDefaultInstance() {
}

lottery_open_rsp::lottery_open_rsp(const lottery_open_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lottery_open_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lottery_open_rsp::~lottery_open_rsp() {
  SharedDtor();
}

void lottery_open_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lottery_open_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lottery_open_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lottery_open_rsp_descriptor_;
}

const lottery_open_rsp& lottery_open_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2elottery_2eproto();
  return *default_instance_;
}

lottery_open_rsp* lottery_open_rsp::default_instance_ = NULL;

lottery_open_rsp* lottery_open_rsp::New() const {
  return new lottery_open_rsp;
}

void lottery_open_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  pi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lottery_open_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.lottery_open_rsp.ret_e ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::lottery_open_rsp_ret_e_IsValid(value)) {
            set_ret(static_cast< ::client::lottery_open_rsp_ret_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pi;
        break;
      }

      // repeated .client.props_info pi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lottery_open_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.lottery_open_rsp.ret_e ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // repeated .client.props_info pi = 2;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lottery_open_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.lottery_open_rsp.ret_e ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // repeated .client.props_info pi = 2;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lottery_open_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.lottery_open_rsp.ret_e ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .client.props_info pi = 2;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lottery_open_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lottery_open_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lottery_open_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lottery_open_rsp::MergeFrom(const lottery_open_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pi_.MergeFrom(from.pi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lottery_open_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lottery_open_rsp::CopyFrom(const lottery_open_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lottery_open_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  return true;
}

void lottery_open_rsp::Swap(lottery_open_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    pi_.Swap(&other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lottery_open_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lottery_open_rsp_descriptor_;
  metadata.reflection = lottery_open_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
