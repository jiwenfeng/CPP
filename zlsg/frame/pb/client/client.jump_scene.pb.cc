// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.jump_scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.jump_scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* jump_scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jump_scene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* jump_scene_DST_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* jump_scene_CODE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* jump_scene_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jump_scene_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2ejump_5fscene_2eproto() {
  protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.jump_scene.proto");
  GOOGLE_CHECK(file != NULL);
  jump_scene_descriptor_ = file->message_type(0);
  static const int jump_scene_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, dst_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, dst_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, jump_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, jump_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, svr_head_),
  };
  jump_scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jump_scene_descriptor_,
      jump_scene::default_instance_,
      jump_scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jump_scene));
  jump_scene_DST_TYPE_descriptor_ = jump_scene_descriptor_->enum_type(0);
  jump_scene_CODE_TYPE_descriptor_ = jump_scene_descriptor_->enum_type(1);
  jump_scene_rsp_descriptor_ = file->message_type(1);
  static const int jump_scene_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene_rsp, ret_),
  };
  jump_scene_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jump_scene_rsp_descriptor_,
      jump_scene_rsp::default_instance_,
      jump_scene_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_scene_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jump_scene_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2ejump_5fscene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jump_scene_descriptor_, &jump_scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jump_scene_rsp_descriptor_, &jump_scene_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2ejump_5fscene_2eproto() {
  delete jump_scene::default_instance_;
  delete jump_scene_reflection_;
  delete jump_scene_rsp::default_instance_;
  delete jump_scene_rsp_reflection_;
}

void protobuf_AddDesc_client_2ejump_5fscene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.jump_scene.proto\022\006client\032\021clien"
    "t.comm.proto\"\361\003\n\njump_scene\022-\n\010dst_type\030"
    "\001 \002(\0162\033.client.jump_scene.DST_TYPE\022\016\n\006ds"
    "t_id\030\002 \002(\r\022\021\n\tdst_index\030\003 \002(\r\022\022\n\njump_in"
    "dex\030\004 \002(\r\022/\n\tjump_code\030\005 \002(\0162\034.client.ju"
    "mp_scene.CODE_TYPE\022\014\n\001x\030\006 \002(\005:\0010\022\014\n\001y\030\007 "
    "\002(\005:\0010\022\014\n\001z\030\010 \002(\005:\0010\022\020\n\005param\030\t \002(\r:\0010\022\021"
    "\n\006map_id\030\n \002(\r:\0010\022\023\n\010scene_id\030\013 \002(\r:\0010\022&"
    "\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\"J"
    "\n\010DST_TYPE\022\t\n\005SCENE\020\001\022\010\n\004ROLE\020\002\022\t\n\005DTASK"
    "\020\003\022\t\n\005TRANS\020\005\022\t\n\005CLUMP\020\006\022\010\n\004KILL\020\n\"t\n\tCO"
    "DE_TYPE\022\t\n\005LOGIN\020\001\022\014\n\010FLYSHOES\020\002\022\016\n\nJUMP"
    "_POINT\020\003\022\n\n\006RELIVE\020\004\022\010\n\004RAID\020\005\022\n\n\006BATTLE"
    "\020\006\022\t\n\005SKILL\020\007\022\010\n\004TASK\020\010\022\007\n\003SPA\020\t\"\035\n\016jump"
    "_scene_rsp\022\013\n\003ret\030\001 \002(\r", 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.jump_scene.proto", &protobuf_RegisterTypes);
  jump_scene::default_instance_ = new jump_scene();
  jump_scene_rsp::default_instance_ = new jump_scene_rsp();
  jump_scene::default_instance_->InitAsDefaultInstance();
  jump_scene_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2ejump_5fscene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2ejump_5fscene_2eproto {
  StaticDescriptorInitializer_client_2ejump_5fscene_2eproto() {
    protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  }
} static_descriptor_initializer_client_2ejump_5fscene_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* jump_scene_DST_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jump_scene_DST_TYPE_descriptor_;
}
bool jump_scene_DST_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const jump_scene_DST_TYPE jump_scene::SCENE;
const jump_scene_DST_TYPE jump_scene::ROLE;
const jump_scene_DST_TYPE jump_scene::DTASK;
const jump_scene_DST_TYPE jump_scene::TRANS;
const jump_scene_DST_TYPE jump_scene::CLUMP;
const jump_scene_DST_TYPE jump_scene::KILL;
const jump_scene_DST_TYPE jump_scene::DST_TYPE_MIN;
const jump_scene_DST_TYPE jump_scene::DST_TYPE_MAX;
const int jump_scene::DST_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* jump_scene_CODE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jump_scene_CODE_TYPE_descriptor_;
}
bool jump_scene_CODE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const jump_scene_CODE_TYPE jump_scene::LOGIN;
const jump_scene_CODE_TYPE jump_scene::FLYSHOES;
const jump_scene_CODE_TYPE jump_scene::JUMP_POINT;
const jump_scene_CODE_TYPE jump_scene::RELIVE;
const jump_scene_CODE_TYPE jump_scene::RAID;
const jump_scene_CODE_TYPE jump_scene::BATTLE;
const jump_scene_CODE_TYPE jump_scene::SKILL;
const jump_scene_CODE_TYPE jump_scene::TASK;
const jump_scene_CODE_TYPE jump_scene::SPA;
const jump_scene_CODE_TYPE jump_scene::CODE_TYPE_MIN;
const jump_scene_CODE_TYPE jump_scene::CODE_TYPE_MAX;
const int jump_scene::CODE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int jump_scene::kDstTypeFieldNumber;
const int jump_scene::kDstIdFieldNumber;
const int jump_scene::kDstIndexFieldNumber;
const int jump_scene::kJumpIndexFieldNumber;
const int jump_scene::kJumpCodeFieldNumber;
const int jump_scene::kXFieldNumber;
const int jump_scene::kYFieldNumber;
const int jump_scene::kZFieldNumber;
const int jump_scene::kParamFieldNumber;
const int jump_scene::kMapIdFieldNumber;
const int jump_scene::kSceneIdFieldNumber;
const int jump_scene::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

jump_scene::jump_scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jump_scene::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

jump_scene::jump_scene(const jump_scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jump_scene::SharedCtor() {
  _cached_size_ = 0;
  dst_type_ = 1;
  dst_id_ = 0u;
  dst_index_ = 0u;
  jump_index_ = 0u;
  jump_code_ = 1;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  param_ = 0u;
  map_id_ = 0u;
  scene_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jump_scene::~jump_scene() {
  SharedDtor();
}

void jump_scene::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void jump_scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jump_scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jump_scene_descriptor_;
}

const jump_scene& jump_scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  return *default_instance_;
}

jump_scene* jump_scene::default_instance_ = NULL;

jump_scene* jump_scene::New() const {
  return new jump_scene;
}

void jump_scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_type_ = 1;
    dst_id_ = 0u;
    dst_index_ = 0u;
    jump_index_ = 0u;
    jump_code_ = 1;
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param_ = 0u;
    map_id_ = 0u;
    scene_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jump_scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.jump_scene.DST_TYPE dst_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::jump_scene_DST_TYPE_IsValid(value)) {
            set_dst_type(static_cast< ::client::jump_scene_DST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_id;
        break;
      }

      // required uint32 dst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_index;
        break;
      }

      // required uint32 dst_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_index_)));
          set_has_dst_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jump_index;
        break;
      }

      // required uint32 jump_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jump_index_)));
          set_has_jump_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jump_code;
        break;
      }

      // required .client.jump_scene.CODE_TYPE jump_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::jump_scene_CODE_TYPE_IsValid(value)) {
            set_jump_code(static_cast< ::client::jump_scene_CODE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_x;
        break;
      }

      // required int32 x = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_y;
        break;
      }

      // required int32 y = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_z;
        break;
      }

      // required int32 z = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_param;
        break;
      }

      // required uint32 param = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jump_scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.jump_scene.DST_TYPE dst_type = 1;
  if (has_dst_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dst_type(), output);
  }

  // required uint32 dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_id(), output);
  }

  // required uint32 dst_index = 3;
  if (has_dst_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dst_index(), output);
  }

  // required uint32 jump_index = 4;
  if (has_jump_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jump_index(), output);
  }

  // required .client.jump_scene.CODE_TYPE jump_code = 5;
  if (has_jump_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->jump_code(), output);
  }

  // required int32 x = 6 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->x(), output);
  }

  // required int32 y = 7 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->y(), output);
  }

  // required int32 z = 8 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->z(), output);
  }

  // required uint32 param = 9 [default = 0];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->param(), output);
  }

  // required uint32 map_id = 10 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->map_id(), output);
  }

  // required uint32 scene_id = 11 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scene_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jump_scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.jump_scene.DST_TYPE dst_type = 1;
  if (has_dst_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst_type(), target);
  }

  // required uint32 dst_id = 2;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_id(), target);
  }

  // required uint32 dst_index = 3;
  if (has_dst_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dst_index(), target);
  }

  // required uint32 jump_index = 4;
  if (has_jump_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jump_index(), target);
  }

  // required .client.jump_scene.CODE_TYPE jump_code = 5;
  if (has_jump_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->jump_code(), target);
  }

  // required int32 x = 6 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->x(), target);
  }

  // required int32 y = 7 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->y(), target);
  }

  // required int32 z = 8 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->z(), target);
  }

  // required uint32 param = 9 [default = 0];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->param(), target);
  }

  // required uint32 map_id = 10 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->map_id(), target);
  }

  // required uint32 scene_id = 11 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scene_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jump_scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.jump_scene.DST_TYPE dst_type = 1;
    if (has_dst_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_type());
    }

    // required uint32 dst_id = 2;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_id());
    }

    // required uint32 dst_index = 3;
    if (has_dst_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_index());
    }

    // required uint32 jump_index = 4;
    if (has_jump_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jump_index());
    }

    // required .client.jump_scene.CODE_TYPE jump_code = 5;
    if (has_jump_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jump_code());
    }

    // required int32 x = 6 [default = 0];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 7 [default = 0];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 8 [default = 0];
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 param = 9 [default = 0];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // required uint32 map_id = 10 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 scene_id = 11 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jump_scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jump_scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jump_scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jump_scene::MergeFrom(const jump_scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_type()) {
      set_dst_type(from.dst_type());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
    if (from.has_dst_index()) {
      set_dst_index(from.dst_index());
    }
    if (from.has_jump_index()) {
      set_jump_index(from.jump_index());
    }
    if (from.has_jump_code()) {
      set_jump_code(from.jump_code());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jump_scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jump_scene::CopyFrom(const jump_scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jump_scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void jump_scene::Swap(jump_scene* other) {
  if (other != this) {
    std::swap(dst_type_, other->dst_type_);
    std::swap(dst_id_, other->dst_id_);
    std::swap(dst_index_, other->dst_index_);
    std::swap(jump_index_, other->jump_index_);
    std::swap(jump_code_, other->jump_code_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(param_, other->param_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jump_scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jump_scene_descriptor_;
  metadata.reflection = jump_scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int jump_scene_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

jump_scene_rsp::jump_scene_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jump_scene_rsp::InitAsDefaultInstance() {
}

jump_scene_rsp::jump_scene_rsp(const jump_scene_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jump_scene_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jump_scene_rsp::~jump_scene_rsp() {
  SharedDtor();
}

void jump_scene_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void jump_scene_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jump_scene_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jump_scene_rsp_descriptor_;
}

const jump_scene_rsp& jump_scene_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  return *default_instance_;
}

jump_scene_rsp* jump_scene_rsp::default_instance_ = NULL;

jump_scene_rsp* jump_scene_rsp::New() const {
  return new jump_scene_rsp;
}

void jump_scene_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jump_scene_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jump_scene_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jump_scene_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jump_scene_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jump_scene_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jump_scene_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jump_scene_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jump_scene_rsp::MergeFrom(const jump_scene_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jump_scene_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jump_scene_rsp::CopyFrom(const jump_scene_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jump_scene_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void jump_scene_rsp::Swap(jump_scene_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jump_scene_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jump_scene_rsp_descriptor_;
  metadata.reflection = jump_scene_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
