// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.operate_pet.proto

#ifndef PROTOBUF_client_2eoperate_5fpet_2eproto__INCLUDED
#define PROTOBUF_client_2eoperate_5fpet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

class pet_skill_info;
class pet_info;
class pet_add_msg;
class pet_update_msg;
class pet_remove_req;
class pet_remove_msg;
class pet_fight_req;
class pet_fight_rsp;
class pet_rest_req;
class pet_rest_rsp;
class pet_rename_req;
class pet_rename_rsp;
class pet_upgrade_req;
class pet_upgrade_rsp;
class pet_reset_req;
class pet_reset_rsp;
class pet_learn_skill_req;
class pet_learn_skill_rsp;

enum ROLE_PET_STATUS_E {
  RPSE_REST = 0,
  RPSE_FIGHT = 1
};
bool ROLE_PET_STATUS_E_IsValid(int value);
const ROLE_PET_STATUS_E ROLE_PET_STATUS_E_MIN = RPSE_REST;
const ROLE_PET_STATUS_E ROLE_PET_STATUS_E_MAX = RPSE_FIGHT;
const int ROLE_PET_STATUS_E_ARRAYSIZE = ROLE_PET_STATUS_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROLE_PET_STATUS_E_descriptor();
inline const ::std::string& ROLE_PET_STATUS_E_Name(ROLE_PET_STATUS_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROLE_PET_STATUS_E_descriptor(), value);
}
inline bool ROLE_PET_STATUS_E_Parse(
    const ::std::string& name, ROLE_PET_STATUS_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROLE_PET_STATUS_E>(
    ROLE_PET_STATUS_E_descriptor(), name, value);
}
enum PET_FIGHT_RET_E {
  PTRE_SUCCESS = 0,
  PTRE_FIGHTED = 1,
  PTRE_LIFE_LIMIT = 2,
  PTRE_FAILED = 3
};
bool PET_FIGHT_RET_E_IsValid(int value);
const PET_FIGHT_RET_E PET_FIGHT_RET_E_MIN = PTRE_SUCCESS;
const PET_FIGHT_RET_E PET_FIGHT_RET_E_MAX = PTRE_FAILED;
const int PET_FIGHT_RET_E_ARRAYSIZE = PET_FIGHT_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_FIGHT_RET_E_descriptor();
inline const ::std::string& PET_FIGHT_RET_E_Name(PET_FIGHT_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_FIGHT_RET_E_descriptor(), value);
}
inline bool PET_FIGHT_RET_E_Parse(
    const ::std::string& name, PET_FIGHT_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_FIGHT_RET_E>(
    PET_FIGHT_RET_E_descriptor(), name, value);
}
enum PET_REST_RET_E {
  PRRE_SUCCESS = 0,
  PRRE_RESETED = 1,
  PRRE_FAILED = 2
};
bool PET_REST_RET_E_IsValid(int value);
const PET_REST_RET_E PET_REST_RET_E_MIN = PRRE_SUCCESS;
const PET_REST_RET_E PET_REST_RET_E_MAX = PRRE_FAILED;
const int PET_REST_RET_E_ARRAYSIZE = PET_REST_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_REST_RET_E_descriptor();
inline const ::std::string& PET_REST_RET_E_Name(PET_REST_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_REST_RET_E_descriptor(), value);
}
inline bool PET_REST_RET_E_Parse(
    const ::std::string& name, PET_REST_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_REST_RET_E>(
    PET_REST_RET_E_descriptor(), name, value);
}
enum PET_UPGRADE_RET_E {
  PURE_SUCCESS = 0,
  PURE_NOMOENY = 1,
  PURE_NOMAT = 2,
  PURE_PETLIMIT = 3,
  PURE_BLESS = 4
};
bool PET_UPGRADE_RET_E_IsValid(int value);
const PET_UPGRADE_RET_E PET_UPGRADE_RET_E_MIN = PURE_SUCCESS;
const PET_UPGRADE_RET_E PET_UPGRADE_RET_E_MAX = PURE_BLESS;
const int PET_UPGRADE_RET_E_ARRAYSIZE = PET_UPGRADE_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_UPGRADE_RET_E_descriptor();
inline const ::std::string& PET_UPGRADE_RET_E_Name(PET_UPGRADE_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_UPGRADE_RET_E_descriptor(), value);
}
inline bool PET_UPGRADE_RET_E_Parse(
    const ::std::string& name, PET_UPGRADE_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_UPGRADE_RET_E>(
    PET_UPGRADE_RET_E_descriptor(), name, value);
}
enum PET_RESET_TYPE_E {
  PRTE_XTJ = 1,
  PRTE_DTJ = 2,
  PRTE_SJT = 3,
  PRTE_JJT = 4
};
bool PET_RESET_TYPE_E_IsValid(int value);
const PET_RESET_TYPE_E PET_RESET_TYPE_E_MIN = PRTE_XTJ;
const PET_RESET_TYPE_E PET_RESET_TYPE_E_MAX = PRTE_JJT;
const int PET_RESET_TYPE_E_ARRAYSIZE = PET_RESET_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_RESET_TYPE_E_descriptor();
inline const ::std::string& PET_RESET_TYPE_E_Name(PET_RESET_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_RESET_TYPE_E_descriptor(), value);
}
inline bool PET_RESET_TYPE_E_Parse(
    const ::std::string& name, PET_RESET_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_RESET_TYPE_E>(
    PET_RESET_TYPE_E_descriptor(), name, value);
}
enum PET_RESET_RET_E {
  PRESETRE_SUCCESS = 1,
  PRESETRE_NOMONEY = 2,
  PRESETRE_NOMAT = 3,
  PRESETRE_PETLIMIT = 4
};
bool PET_RESET_RET_E_IsValid(int value);
const PET_RESET_RET_E PET_RESET_RET_E_MIN = PRESETRE_SUCCESS;
const PET_RESET_RET_E PET_RESET_RET_E_MAX = PRESETRE_PETLIMIT;
const int PET_RESET_RET_E_ARRAYSIZE = PET_RESET_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_RESET_RET_E_descriptor();
inline const ::std::string& PET_RESET_RET_E_Name(PET_RESET_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_RESET_RET_E_descriptor(), value);
}
inline bool PET_RESET_RET_E_Parse(
    const ::std::string& name, PET_RESET_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_RESET_RET_E>(
    PET_RESET_RET_E_descriptor(), name, value);
}
// ===================================================================

class pet_skill_info : public ::google::protobuf::Message {
 public:
  pet_skill_info();
  virtual ~pet_skill_info();

  pet_skill_info(const pet_skill_info& from);

  inline pet_skill_info& operator=(const pet_skill_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_skill_info& default_instance();

  void Swap(pet_skill_info* other);

  // implements Message ----------------------------------------------

  pet_skill_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_skill_info& from);
  void MergeFrom(const pet_skill_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1 [default = 0];
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // required uint32 skill_level = 2 [default = 0];
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // required uint32 skill_grid_index = 3 [default = 0];
  inline bool has_skill_grid_index() const;
  inline void clear_skill_grid_index();
  static const int kSkillGridIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_grid_index() const;
  inline void set_skill_grid_index(::google::protobuf::uint32 value);

  // required uint32 end_cd_time = 4 [default = 0];
  inline bool has_end_cd_time() const;
  inline void clear_end_cd_time();
  static const int kEndCdTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_cd_time() const;
  inline void set_end_cd_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_skill_info)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_skill_grid_index();
  inline void clear_has_skill_grid_index();
  inline void set_has_end_cd_time();
  inline void clear_has_end_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 skill_grid_index_;
  ::google::protobuf::uint32 end_cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_skill_info* default_instance_;
};
// -------------------------------------------------------------------

class pet_info : public ::google::protobuf::Message {
 public:
  pet_info();
  virtual ~pet_info();

  pet_info(const pet_info& from);

  inline pet_info& operator=(const pet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_info& default_instance();

  void Swap(pet_info* other);

  // implements Message ----------------------------------------------

  pet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_info& from);
  void MergeFrom(const pet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1 [default = 0];
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required uint32 pet_id = 2 [default = 0];
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 max_life = 4 [default = 0];
  inline bool has_max_life() const;
  inline void clear_max_life();
  static const int kMaxLifeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_life() const;
  inline void set_max_life(::google::protobuf::uint32 value);

  // required uint32 cur_life = 5 [default = 0];
  inline bool has_cur_life() const;
  inline void clear_cur_life();
  static const int kCurLifeFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_life() const;
  inline void set_cur_life(::google::protobuf::uint32 value);

  // required uint32 max_power = 6 [default = 0];
  inline bool has_max_power() const;
  inline void clear_max_power();
  static const int kMaxPowerFieldNumber = 6;
  inline ::google::protobuf::uint32 max_power() const;
  inline void set_max_power(::google::protobuf::uint32 value);

  // required uint32 cur_power = 7 [default = 0];
  inline bool has_cur_power() const;
  inline void clear_cur_power();
  static const int kCurPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_power() const;
  inline void set_cur_power(::google::protobuf::uint32 value);

  // required uint32 attack = 8 [default = 0];
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 8;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);

  // required uint32 defense = 9 [default = 0];
  inline bool has_defense() const;
  inline void clear_defense();
  static const int kDefenseFieldNumber = 9;
  inline ::google::protobuf::uint32 defense() const;
  inline void set_defense(::google::protobuf::uint32 value);

  // required uint32 hitpoint = 10 [default = 0];
  inline bool has_hitpoint() const;
  inline void clear_hitpoint();
  static const int kHitpointFieldNumber = 10;
  inline ::google::protobuf::uint32 hitpoint() const;
  inline void set_hitpoint(::google::protobuf::uint32 value);

  // required uint32 dodge = 11 [default = 0];
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 11;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);

  // required uint32 critical = 12 [default = 0];
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 12;
  inline ::google::protobuf::uint32 critical() const;
  inline void set_critical(::google::protobuf::uint32 value);

  // required uint32 agisity = 13 [default = 0];
  inline bool has_agisity() const;
  inline void clear_agisity();
  static const int kAgisityFieldNumber = 13;
  inline ::google::protobuf::uint32 agisity() const;
  inline void set_agisity(::google::protobuf::uint32 value);

  // required uint32 tougnen = 14 [default = 0];
  inline bool has_tougnen() const;
  inline void clear_tougnen();
  static const int kTougnenFieldNumber = 14;
  inline ::google::protobuf::uint32 tougnen() const;
  inline void set_tougnen(::google::protobuf::uint32 value);

  // required uint32 strength = 15 [default = 0];
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 15;
  inline ::google::protobuf::uint32 strength() const;
  inline void set_strength(::google::protobuf::uint32 value);

  // required uint32 status = 16 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 16;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 bless = 17 [default = 0];
  inline bool has_bless() const;
  inline void clear_bless();
  static const int kBlessFieldNumber = 17;
  inline ::google::protobuf::uint32 bless() const;
  inline void set_bless(::google::protobuf::uint32 value);

  // required uint32 experience = 18 [default = 0];
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 18;
  inline ::google::protobuf::uint32 experience() const;
  inline void set_experience(::google::protobuf::uint32 value);

  // required uint32 order_ratio = 19 [default = 0];
  inline bool has_order_ratio() const;
  inline void clear_order_ratio();
  static const int kOrderRatioFieldNumber = 19;
  inline ::google::protobuf::uint32 order_ratio() const;
  inline void set_order_ratio(::google::protobuf::uint32 value);

  // required uint32 quality_ratio = 20 [default = 0];
  inline bool has_quality_ratio() const;
  inline void clear_quality_ratio();
  static const int kQualityRatioFieldNumber = 20;
  inline ::google::protobuf::uint32 quality_ratio() const;
  inline void set_quality_ratio(::google::protobuf::uint32 value);

  // required uint32 level = 21 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 21;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 class_lv = 22 [default = 0];
  inline bool has_class_lv() const;
  inline void clear_class_lv();
  static const int kClassLvFieldNumber = 22;
  inline ::google::protobuf::uint32 class_lv() const;
  inline void set_class_lv(::google::protobuf::uint32 value);

  // repeated .client.pet_skill_info psi = 23;
  inline int psi_size() const;
  inline void clear_psi();
  static const int kPsiFieldNumber = 23;
  inline const ::client::pet_skill_info& psi(int index) const;
  inline ::client::pet_skill_info* mutable_psi(int index);
  inline ::client::pet_skill_info* add_psi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_skill_info >&
      psi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_skill_info >*
      mutable_psi();

  // @@protoc_insertion_point(class_scope:client.pet_info)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_max_life();
  inline void clear_has_max_life();
  inline void set_has_cur_life();
  inline void clear_has_cur_life();
  inline void set_has_max_power();
  inline void clear_has_max_power();
  inline void set_has_cur_power();
  inline void clear_has_cur_power();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defense();
  inline void clear_has_defense();
  inline void set_has_hitpoint();
  inline void clear_has_hitpoint();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_agisity();
  inline void clear_has_agisity();
  inline void set_has_tougnen();
  inline void clear_has_tougnen();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_bless();
  inline void clear_has_bless();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_order_ratio();
  inline void clear_has_order_ratio();
  inline void set_has_quality_ratio();
  inline void clear_has_quality_ratio();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_class_lv();
  inline void clear_has_class_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 pet_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 max_life_;
  ::google::protobuf::uint32 cur_life_;
  ::google::protobuf::uint32 max_power_;
  ::google::protobuf::uint32 cur_power_;
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 defense_;
  ::google::protobuf::uint32 hitpoint_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 critical_;
  ::google::protobuf::uint32 agisity_;
  ::google::protobuf::uint32 tougnen_;
  ::google::protobuf::uint32 strength_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 bless_;
  ::google::protobuf::uint32 experience_;
  ::google::protobuf::uint32 order_ratio_;
  ::google::protobuf::uint32 quality_ratio_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::client::pet_skill_info > psi_;
  ::google::protobuf::uint32 class_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_info* default_instance_;
};
// -------------------------------------------------------------------

class pet_add_msg : public ::google::protobuf::Message {
 public:
  pet_add_msg();
  virtual ~pet_add_msg();

  pet_add_msg(const pet_add_msg& from);

  inline pet_add_msg& operator=(const pet_add_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_add_msg& default_instance();

  void Swap(pet_add_msg* other);

  // implements Message ----------------------------------------------

  pet_add_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_add_msg& from);
  void MergeFrom(const pet_add_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.pet_info pi = 1;
  inline int pi_size() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 1;
  inline const ::client::pet_info& pi(int index) const;
  inline ::client::pet_info* mutable_pi(int index);
  inline ::client::pet_info* add_pi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_info >&
      pi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_info >*
      mutable_pi();

  // @@protoc_insertion_point(class_scope:client.pet_add_msg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_info > pi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_add_msg* default_instance_;
};
// -------------------------------------------------------------------

class pet_update_msg : public ::google::protobuf::Message {
 public:
  pet_update_msg();
  virtual ~pet_update_msg();

  pet_update_msg(const pet_update_msg& from);

  inline pet_update_msg& operator=(const pet_update_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_update_msg& default_instance();

  void Swap(pet_update_msg* other);

  // implements Message ----------------------------------------------

  pet_update_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_update_msg& from);
  void MergeFrom(const pet_update_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.pet_info pi = 1;
  inline int pi_size() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 1;
  inline const ::client::pet_info& pi(int index) const;
  inline ::client::pet_info* mutable_pi(int index);
  inline ::client::pet_info* add_pi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_info >&
      pi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_info >*
      mutable_pi();

  // @@protoc_insertion_point(class_scope:client.pet_update_msg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_info > pi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_update_msg* default_instance_;
};
// -------------------------------------------------------------------

class pet_remove_req : public ::google::protobuf::Message {
 public:
  pet_remove_req();
  virtual ~pet_remove_req();

  pet_remove_req(const pet_remove_req& from);

  inline pet_remove_req& operator=(const pet_remove_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_remove_req& default_instance();

  void Swap(pet_remove_req* other);

  // implements Message ----------------------------------------------

  pet_remove_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_remove_req& from);
  void MergeFrom(const pet_remove_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required uint32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_remove_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 pet_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_remove_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_remove_msg : public ::google::protobuf::Message {
 public:
  pet_remove_msg();
  virtual ~pet_remove_msg();

  pet_remove_msg(const pet_remove_msg& from);

  inline pet_remove_msg& operator=(const pet_remove_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_remove_msg& default_instance();

  void Swap(pet_remove_msg* other);

  // implements Message ----------------------------------------------

  pet_remove_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_remove_msg& from);
  void MergeFrom(const pet_remove_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required uint32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_remove_msg)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_remove_msg* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_req : public ::google::protobuf::Message {
 public:
  pet_fight_req();
  virtual ~pet_fight_req();

  pet_fight_req(const pet_fight_req& from);

  inline pet_fight_req& operator=(const pet_fight_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_req& default_instance();

  void Swap(pet_fight_req* other);

  // implements Message ----------------------------------------------

  pet_fight_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_req& from);
  void MergeFrom(const pet_fight_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_fight_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 serial_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_rsp : public ::google::protobuf::Message {
 public:
  pet_fight_rsp();
  virtual ~pet_fight_rsp();

  pet_fight_rsp(const pet_fight_rsp& from);

  inline pet_fight_rsp& operator=(const pet_fight_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_rsp& default_instance();

  void Swap(pet_fight_rsp* other);

  // implements Message ----------------------------------------------

  pet_fight_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_rsp& from);
  void MergeFrom(const pet_fight_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required .client.PET_FIGHT_RET_E ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::PET_FIGHT_RET_E ret() const;
  inline void set_ret(::client::PET_FIGHT_RET_E value);

  // @@protoc_insertion_point(class_scope:client.pet_fight_rsp)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_rest_req : public ::google::protobuf::Message {
 public:
  pet_rest_req();
  virtual ~pet_rest_req();

  pet_rest_req(const pet_rest_req& from);

  inline pet_rest_req& operator=(const pet_rest_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rest_req& default_instance();

  void Swap(pet_rest_req* other);

  // implements Message ----------------------------------------------

  pet_rest_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rest_req& from);
  void MergeFrom(const pet_rest_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_rest_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 serial_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_rest_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_rest_rsp : public ::google::protobuf::Message {
 public:
  pet_rest_rsp();
  virtual ~pet_rest_rsp();

  pet_rest_rsp(const pet_rest_rsp& from);

  inline pet_rest_rsp& operator=(const pet_rest_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rest_rsp& default_instance();

  void Swap(pet_rest_rsp* other);

  // implements Message ----------------------------------------------

  pet_rest_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rest_rsp& from);
  void MergeFrom(const pet_rest_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required .client.PET_REST_RET_E ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::PET_REST_RET_E ret() const;
  inline void set_ret(::client::PET_REST_RET_E value);

  // @@protoc_insertion_point(class_scope:client.pet_rest_rsp)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_rest_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_rename_req : public ::google::protobuf::Message {
 public:
  pet_rename_req();
  virtual ~pet_rename_req();

  pet_rename_req(const pet_rename_req& from);

  inline pet_rename_req& operator=(const pet_rename_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rename_req& default_instance();

  void Swap(pet_rename_req* other);

  // implements Message ----------------------------------------------

  pet_rename_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rename_req& from);
  void MergeFrom(const pet_rename_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_rename_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 serial_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_rename_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_rename_rsp : public ::google::protobuf::Message {
 public:
  pet_rename_rsp();
  virtual ~pet_rename_rsp();

  pet_rename_rsp(const pet_rename_rsp& from);

  inline pet_rename_rsp& operator=(const pet_rename_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rename_rsp& default_instance();

  void Swap(pet_rename_rsp* other);

  // implements Message ----------------------------------------------

  pet_rename_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rename_rsp& from);
  void MergeFrom(const pet_rename_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:client.pet_rename_rsp)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  bool success_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_rename_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_upgrade_req : public ::google::protobuf::Message {
 public:
  pet_upgrade_req();
  virtual ~pet_upgrade_req();

  pet_upgrade_req(const pet_upgrade_req& from);

  inline pet_upgrade_req& operator=(const pet_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_upgrade_req& default_instance();

  void Swap(pet_upgrade_req* other);

  // implements Message ----------------------------------------------

  pet_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_upgrade_req& from);
  void MergeFrom(const pet_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required bool auto_buy = 2;
  inline bool has_auto_buy() const;
  inline void clear_auto_buy();
  static const int kAutoBuyFieldNumber = 2;
  inline bool auto_buy() const;
  inline void set_auto_buy(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_upgrade_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_auto_buy();
  inline void clear_has_auto_buy();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  bool auto_buy_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_upgrade_rsp : public ::google::protobuf::Message {
 public:
  pet_upgrade_rsp();
  virtual ~pet_upgrade_rsp();

  pet_upgrade_rsp(const pet_upgrade_rsp& from);

  inline pet_upgrade_rsp& operator=(const pet_upgrade_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_upgrade_rsp& default_instance();

  void Swap(pet_upgrade_rsp* other);

  // implements Message ----------------------------------------------

  pet_upgrade_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_upgrade_rsp& from);
  void MergeFrom(const pet_upgrade_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required .client.PET_UPGRADE_RET_E ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::PET_UPGRADE_RET_E ret() const;
  inline void set_ret(::client::PET_UPGRADE_RET_E value);

  // optional uint32 bless_val = 3;
  inline bool has_bless_val() const;
  inline void clear_bless_val();
  static const int kBlessValFieldNumber = 3;
  inline ::google::protobuf::uint32 bless_val() const;
  inline void set_bless_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_upgrade_rsp)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_bless_val();
  inline void clear_has_bless_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  int ret_;
  ::google::protobuf::uint32 bless_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_upgrade_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_reset_req : public ::google::protobuf::Message {
 public:
  pet_reset_req();
  virtual ~pet_reset_req();

  pet_reset_req(const pet_reset_req& from);

  inline pet_reset_req& operator=(const pet_reset_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_reset_req& default_instance();

  void Swap(pet_reset_req* other);

  // implements Message ----------------------------------------------

  pet_reset_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_reset_req& from);
  void MergeFrom(const pet_reset_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required .client.PET_RESET_TYPE_E type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::client::PET_RESET_TYPE_E type() const;
  inline void set_type(::client::PET_RESET_TYPE_E value);

  // required uint32 auto = 3;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 3;
  inline ::google::protobuf::uint32 auto_() const;
  inline void set_auto_(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_reset_req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  int type_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 auto__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_reset_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_reset_rsp : public ::google::protobuf::Message {
 public:
  pet_reset_rsp();
  virtual ~pet_reset_rsp();

  pet_reset_rsp(const pet_reset_rsp& from);

  inline pet_reset_rsp& operator=(const pet_reset_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_reset_rsp& default_instance();

  void Swap(pet_reset_rsp* other);

  // implements Message ----------------------------------------------

  pet_reset_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_reset_rsp& from);
  void MergeFrom(const pet_reset_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required .client.PET_RESET_RET_E ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::PET_RESET_RET_E ret() const;
  inline void set_ret(::client::PET_RESET_RET_E value);

  // @@protoc_insertion_point(class_scope:client.pet_reset_rsp)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serial_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_reset_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_learn_skill_req : public ::google::protobuf::Message {
 public:
  pet_learn_skill_req();
  virtual ~pet_learn_skill_req();

  pet_learn_skill_req(const pet_learn_skill_req& from);

  inline pet_learn_skill_req& operator=(const pet_learn_skill_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_learn_skill_req& default_instance();

  void Swap(pet_learn_skill_req* other);

  // implements Message ----------------------------------------------

  pet_learn_skill_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_learn_skill_req& from);
  void MergeFrom(const pet_learn_skill_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_learn_skill_req)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 serial_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_learn_skill_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_learn_skill_rsp : public ::google::protobuf::Message {
 public:
  pet_learn_skill_rsp();
  virtual ~pet_learn_skill_rsp();

  pet_learn_skill_rsp(const pet_learn_skill_rsp& from);

  inline pet_learn_skill_rsp& operator=(const pet_learn_skill_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_learn_skill_rsp& default_instance();

  void Swap(pet_learn_skill_rsp* other);

  // implements Message ----------------------------------------------

  pet_learn_skill_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_learn_skill_rsp& from);
  void MergeFrom(const pet_learn_skill_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // required uint32 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // required uint32 grid_index = 3;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_learn_skill_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto();

  void InitAsDefaultInstance();
  static pet_learn_skill_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// pet_skill_info

// required uint32 skill_id = 1 [default = 0];
inline bool pet_skill_info::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_skill_info::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_skill_info::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_skill_info::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 pet_skill_info::skill_id() const {
  return skill_id_;
}
inline void pet_skill_info::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 skill_level = 2 [default = 0];
inline bool pet_skill_info::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_skill_info::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_skill_info::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_skill_info::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 pet_skill_info::skill_level() const {
  return skill_level_;
}
inline void pet_skill_info::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// required uint32 skill_grid_index = 3 [default = 0];
inline bool pet_skill_info::has_skill_grid_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_skill_info::set_has_skill_grid_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_skill_info::clear_has_skill_grid_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_skill_info::clear_skill_grid_index() {
  skill_grid_index_ = 0u;
  clear_has_skill_grid_index();
}
inline ::google::protobuf::uint32 pet_skill_info::skill_grid_index() const {
  return skill_grid_index_;
}
inline void pet_skill_info::set_skill_grid_index(::google::protobuf::uint32 value) {
  set_has_skill_grid_index();
  skill_grid_index_ = value;
}

// required uint32 end_cd_time = 4 [default = 0];
inline bool pet_skill_info::has_end_cd_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_skill_info::set_has_end_cd_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_skill_info::clear_has_end_cd_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_skill_info::clear_end_cd_time() {
  end_cd_time_ = 0u;
  clear_has_end_cd_time();
}
inline ::google::protobuf::uint32 pet_skill_info::end_cd_time() const {
  return end_cd_time_;
}
inline void pet_skill_info::set_end_cd_time(::google::protobuf::uint32 value) {
  set_has_end_cd_time();
  end_cd_time_ = value;
}

// -------------------------------------------------------------------

// pet_info

// required uint32 serial = 1 [default = 0];
inline bool pet_info::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_info::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_info::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_info::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_info::serial() const {
  return serial_;
}
inline void pet_info::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 pet_id = 2 [default = 0];
inline bool pet_info::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_info::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_info::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_info::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_info::pet_id() const {
  return pet_id_;
}
inline void pet_info::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required string name = 3;
inline bool pet_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pet_info::name() const {
  return *name_;
}
inline void pet_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pet_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 max_life = 4 [default = 0];
inline bool pet_info::has_max_life() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_info::set_has_max_life() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_info::clear_has_max_life() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_info::clear_max_life() {
  max_life_ = 0u;
  clear_has_max_life();
}
inline ::google::protobuf::uint32 pet_info::max_life() const {
  return max_life_;
}
inline void pet_info::set_max_life(::google::protobuf::uint32 value) {
  set_has_max_life();
  max_life_ = value;
}

// required uint32 cur_life = 5 [default = 0];
inline bool pet_info::has_cur_life() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_info::set_has_cur_life() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_info::clear_has_cur_life() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_info::clear_cur_life() {
  cur_life_ = 0u;
  clear_has_cur_life();
}
inline ::google::protobuf::uint32 pet_info::cur_life() const {
  return cur_life_;
}
inline void pet_info::set_cur_life(::google::protobuf::uint32 value) {
  set_has_cur_life();
  cur_life_ = value;
}

// required uint32 max_power = 6 [default = 0];
inline bool pet_info::has_max_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pet_info::set_has_max_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pet_info::clear_has_max_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pet_info::clear_max_power() {
  max_power_ = 0u;
  clear_has_max_power();
}
inline ::google::protobuf::uint32 pet_info::max_power() const {
  return max_power_;
}
inline void pet_info::set_max_power(::google::protobuf::uint32 value) {
  set_has_max_power();
  max_power_ = value;
}

// required uint32 cur_power = 7 [default = 0];
inline bool pet_info::has_cur_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pet_info::set_has_cur_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pet_info::clear_has_cur_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pet_info::clear_cur_power() {
  cur_power_ = 0u;
  clear_has_cur_power();
}
inline ::google::protobuf::uint32 pet_info::cur_power() const {
  return cur_power_;
}
inline void pet_info::set_cur_power(::google::protobuf::uint32 value) {
  set_has_cur_power();
  cur_power_ = value;
}

// required uint32 attack = 8 [default = 0];
inline bool pet_info::has_attack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pet_info::set_has_attack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pet_info::clear_has_attack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pet_info::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 pet_info::attack() const {
  return attack_;
}
inline void pet_info::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// required uint32 defense = 9 [default = 0];
inline bool pet_info::has_defense() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pet_info::set_has_defense() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pet_info::clear_has_defense() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pet_info::clear_defense() {
  defense_ = 0u;
  clear_has_defense();
}
inline ::google::protobuf::uint32 pet_info::defense() const {
  return defense_;
}
inline void pet_info::set_defense(::google::protobuf::uint32 value) {
  set_has_defense();
  defense_ = value;
}

// required uint32 hitpoint = 10 [default = 0];
inline bool pet_info::has_hitpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pet_info::set_has_hitpoint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pet_info::clear_has_hitpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pet_info::clear_hitpoint() {
  hitpoint_ = 0u;
  clear_has_hitpoint();
}
inline ::google::protobuf::uint32 pet_info::hitpoint() const {
  return hitpoint_;
}
inline void pet_info::set_hitpoint(::google::protobuf::uint32 value) {
  set_has_hitpoint();
  hitpoint_ = value;
}

// required uint32 dodge = 11 [default = 0];
inline bool pet_info::has_dodge() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pet_info::set_has_dodge() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pet_info::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pet_info::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 pet_info::dodge() const {
  return dodge_;
}
inline void pet_info::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 critical = 12 [default = 0];
inline bool pet_info::has_critical() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pet_info::set_has_critical() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pet_info::clear_has_critical() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pet_info::clear_critical() {
  critical_ = 0u;
  clear_has_critical();
}
inline ::google::protobuf::uint32 pet_info::critical() const {
  return critical_;
}
inline void pet_info::set_critical(::google::protobuf::uint32 value) {
  set_has_critical();
  critical_ = value;
}

// required uint32 agisity = 13 [default = 0];
inline bool pet_info::has_agisity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pet_info::set_has_agisity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pet_info::clear_has_agisity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pet_info::clear_agisity() {
  agisity_ = 0u;
  clear_has_agisity();
}
inline ::google::protobuf::uint32 pet_info::agisity() const {
  return agisity_;
}
inline void pet_info::set_agisity(::google::protobuf::uint32 value) {
  set_has_agisity();
  agisity_ = value;
}

// required uint32 tougnen = 14 [default = 0];
inline bool pet_info::has_tougnen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pet_info::set_has_tougnen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pet_info::clear_has_tougnen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pet_info::clear_tougnen() {
  tougnen_ = 0u;
  clear_has_tougnen();
}
inline ::google::protobuf::uint32 pet_info::tougnen() const {
  return tougnen_;
}
inline void pet_info::set_tougnen(::google::protobuf::uint32 value) {
  set_has_tougnen();
  tougnen_ = value;
}

// required uint32 strength = 15 [default = 0];
inline bool pet_info::has_strength() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pet_info::set_has_strength() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pet_info::clear_has_strength() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pet_info::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
inline ::google::protobuf::uint32 pet_info::strength() const {
  return strength_;
}
inline void pet_info::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
}

// required uint32 status = 16 [default = 0];
inline bool pet_info::has_status() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pet_info::set_has_status() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pet_info::clear_has_status() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pet_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 pet_info::status() const {
  return status_;
}
inline void pet_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 bless = 17 [default = 0];
inline bool pet_info::has_bless() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pet_info::set_has_bless() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pet_info::clear_has_bless() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pet_info::clear_bless() {
  bless_ = 0u;
  clear_has_bless();
}
inline ::google::protobuf::uint32 pet_info::bless() const {
  return bless_;
}
inline void pet_info::set_bless(::google::protobuf::uint32 value) {
  set_has_bless();
  bless_ = value;
}

// required uint32 experience = 18 [default = 0];
inline bool pet_info::has_experience() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void pet_info::set_has_experience() {
  _has_bits_[0] |= 0x00020000u;
}
inline void pet_info::clear_has_experience() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void pet_info::clear_experience() {
  experience_ = 0u;
  clear_has_experience();
}
inline ::google::protobuf::uint32 pet_info::experience() const {
  return experience_;
}
inline void pet_info::set_experience(::google::protobuf::uint32 value) {
  set_has_experience();
  experience_ = value;
}

// required uint32 order_ratio = 19 [default = 0];
inline bool pet_info::has_order_ratio() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void pet_info::set_has_order_ratio() {
  _has_bits_[0] |= 0x00040000u;
}
inline void pet_info::clear_has_order_ratio() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void pet_info::clear_order_ratio() {
  order_ratio_ = 0u;
  clear_has_order_ratio();
}
inline ::google::protobuf::uint32 pet_info::order_ratio() const {
  return order_ratio_;
}
inline void pet_info::set_order_ratio(::google::protobuf::uint32 value) {
  set_has_order_ratio();
  order_ratio_ = value;
}

// required uint32 quality_ratio = 20 [default = 0];
inline bool pet_info::has_quality_ratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void pet_info::set_has_quality_ratio() {
  _has_bits_[0] |= 0x00080000u;
}
inline void pet_info::clear_has_quality_ratio() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void pet_info::clear_quality_ratio() {
  quality_ratio_ = 0u;
  clear_has_quality_ratio();
}
inline ::google::protobuf::uint32 pet_info::quality_ratio() const {
  return quality_ratio_;
}
inline void pet_info::set_quality_ratio(::google::protobuf::uint32 value) {
  set_has_quality_ratio();
  quality_ratio_ = value;
}

// required uint32 level = 21 [default = 0];
inline bool pet_info::has_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void pet_info::set_has_level() {
  _has_bits_[0] |= 0x00100000u;
}
inline void pet_info::clear_has_level() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void pet_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 pet_info::level() const {
  return level_;
}
inline void pet_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 class_lv = 22 [default = 0];
inline bool pet_info::has_class_lv() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void pet_info::set_has_class_lv() {
  _has_bits_[0] |= 0x00200000u;
}
inline void pet_info::clear_has_class_lv() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void pet_info::clear_class_lv() {
  class_lv_ = 0u;
  clear_has_class_lv();
}
inline ::google::protobuf::uint32 pet_info::class_lv() const {
  return class_lv_;
}
inline void pet_info::set_class_lv(::google::protobuf::uint32 value) {
  set_has_class_lv();
  class_lv_ = value;
}

// repeated .client.pet_skill_info psi = 23;
inline int pet_info::psi_size() const {
  return psi_.size();
}
inline void pet_info::clear_psi() {
  psi_.Clear();
}
inline const ::client::pet_skill_info& pet_info::psi(int index) const {
  return psi_.Get(index);
}
inline ::client::pet_skill_info* pet_info::mutable_psi(int index) {
  return psi_.Mutable(index);
}
inline ::client::pet_skill_info* pet_info::add_psi() {
  return psi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_skill_info >&
pet_info::psi() const {
  return psi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_skill_info >*
pet_info::mutable_psi() {
  return &psi_;
}

// -------------------------------------------------------------------

// pet_add_msg

// repeated .client.pet_info pi = 1;
inline int pet_add_msg::pi_size() const {
  return pi_.size();
}
inline void pet_add_msg::clear_pi() {
  pi_.Clear();
}
inline const ::client::pet_info& pet_add_msg::pi(int index) const {
  return pi_.Get(index);
}
inline ::client::pet_info* pet_add_msg::mutable_pi(int index) {
  return pi_.Mutable(index);
}
inline ::client::pet_info* pet_add_msg::add_pi() {
  return pi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_info >&
pet_add_msg::pi() const {
  return pi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_info >*
pet_add_msg::mutable_pi() {
  return &pi_;
}

// -------------------------------------------------------------------

// pet_update_msg

// repeated .client.pet_info pi = 1;
inline int pet_update_msg::pi_size() const {
  return pi_.size();
}
inline void pet_update_msg::clear_pi() {
  pi_.Clear();
}
inline const ::client::pet_info& pet_update_msg::pi(int index) const {
  return pi_.Get(index);
}
inline ::client::pet_info* pet_update_msg::mutable_pi(int index) {
  return pi_.Mutable(index);
}
inline ::client::pet_info* pet_update_msg::add_pi() {
  return pi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_info >&
pet_update_msg::pi() const {
  return pi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_info >*
pet_update_msg::mutable_pi() {
  return &pi_;
}

// -------------------------------------------------------------------

// pet_remove_req

// required uint32 serial = 1;
inline bool pet_remove_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_remove_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_remove_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_remove_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_remove_req::serial() const {
  return serial_;
}
inline void pet_remove_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 pet_id = 2;
inline bool pet_remove_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_remove_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_remove_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_remove_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_remove_req::pet_id() const {
  return pet_id_;
}
inline void pet_remove_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_remove_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_remove_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_remove_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_remove_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_remove_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_remove_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_remove_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_remove_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_remove_msg

// required uint32 serial = 1;
inline bool pet_remove_msg::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_remove_msg::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_remove_msg::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_remove_msg::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_remove_msg::serial() const {
  return serial_;
}
inline void pet_remove_msg::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 pet_id = 2;
inline bool pet_remove_msg::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_remove_msg::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_remove_msg::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_remove_msg::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_remove_msg::pet_id() const {
  return pet_id_;
}
inline void pet_remove_msg::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_fight_req

// required uint32 serial = 1;
inline bool pet_fight_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_fight_req::serial() const {
  return serial_;
}
inline void pet_fight_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_fight_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_fight_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_fight_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_fight_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_fight_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_fight_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_fight_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_fight_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_fight_rsp

// required uint32 serial = 1;
inline bool pet_fight_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_fight_rsp::serial() const {
  return serial_;
}
inline void pet_fight_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required .client.PET_FIGHT_RET_E ret = 2;
inline bool pet_fight_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_fight_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_fight_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_fight_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::PET_FIGHT_RET_E pet_fight_rsp::ret() const {
  return static_cast< ::client::PET_FIGHT_RET_E >(ret_);
}
inline void pet_fight_rsp::set_ret(::client::PET_FIGHT_RET_E value) {
  assert(::client::PET_FIGHT_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pet_rest_req

// required uint32 serial = 1;
inline bool pet_rest_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rest_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rest_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rest_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_rest_req::serial() const {
  return serial_;
}
inline void pet_rest_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_rest_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rest_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rest_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rest_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_rest_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_rest_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_rest_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_rest_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_rest_rsp

// required uint32 serial = 1;
inline bool pet_rest_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rest_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rest_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rest_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_rest_rsp::serial() const {
  return serial_;
}
inline void pet_rest_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required .client.PET_REST_RET_E ret = 2;
inline bool pet_rest_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rest_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rest_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rest_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::PET_REST_RET_E pet_rest_rsp::ret() const {
  return static_cast< ::client::PET_REST_RET_E >(ret_);
}
inline void pet_rest_rsp::set_ret(::client::PET_REST_RET_E value) {
  assert(::client::PET_REST_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pet_rename_req

// required uint32 serial = 1;
inline bool pet_rename_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rename_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rename_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rename_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_rename_req::serial() const {
  return serial_;
}
inline void pet_rename_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required string name = 2;
inline bool pet_rename_req::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rename_req::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rename_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rename_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pet_rename_req::name() const {
  return *name_;
}
inline void pet_rename_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_rename_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_rename_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_rename_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pet_rename_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_rename_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool pet_rename_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_rename_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_rename_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_rename_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_rename_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_rename_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_rename_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_rename_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_rename_rsp

// required uint32 serial = 1;
inline bool pet_rename_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rename_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rename_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rename_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_rename_rsp::serial() const {
  return serial_;
}
inline void pet_rename_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required bool success = 2;
inline bool pet_rename_rsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rename_rsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rename_rsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rename_rsp::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool pet_rename_rsp::success() const {
  return success_;
}
inline void pet_rename_rsp::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string name = 3;
inline bool pet_rename_rsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_rename_rsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_rename_rsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_rename_rsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pet_rename_rsp::name() const {
  return *name_;
}
inline void pet_rename_rsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_rename_rsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_rename_rsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_rename_rsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pet_rename_rsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_rename_rsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pet_upgrade_req

// required uint32 serial = 1;
inline bool pet_upgrade_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_upgrade_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_upgrade_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_upgrade_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_upgrade_req::serial() const {
  return serial_;
}
inline void pet_upgrade_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required bool auto_buy = 2;
inline bool pet_upgrade_req::has_auto_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_upgrade_req::set_has_auto_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_upgrade_req::clear_has_auto_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_upgrade_req::clear_auto_buy() {
  auto_buy_ = false;
  clear_has_auto_buy();
}
inline bool pet_upgrade_req::auto_buy() const {
  return auto_buy_;
}
inline void pet_upgrade_req::set_auto_buy(bool value) {
  set_has_auto_buy();
  auto_buy_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_upgrade_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_upgrade_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_upgrade_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_upgrade_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_upgrade_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_upgrade_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_upgrade_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_upgrade_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_upgrade_rsp

// required uint32 serial = 1;
inline bool pet_upgrade_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_upgrade_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_upgrade_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_upgrade_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_upgrade_rsp::serial() const {
  return serial_;
}
inline void pet_upgrade_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required .client.PET_UPGRADE_RET_E ret = 2;
inline bool pet_upgrade_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_upgrade_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_upgrade_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_upgrade_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::PET_UPGRADE_RET_E pet_upgrade_rsp::ret() const {
  return static_cast< ::client::PET_UPGRADE_RET_E >(ret_);
}
inline void pet_upgrade_rsp::set_ret(::client::PET_UPGRADE_RET_E value) {
  assert(::client::PET_UPGRADE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 bless_val = 3;
inline bool pet_upgrade_rsp::has_bless_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_upgrade_rsp::set_has_bless_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_upgrade_rsp::clear_has_bless_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_upgrade_rsp::clear_bless_val() {
  bless_val_ = 0u;
  clear_has_bless_val();
}
inline ::google::protobuf::uint32 pet_upgrade_rsp::bless_val() const {
  return bless_val_;
}
inline void pet_upgrade_rsp::set_bless_val(::google::protobuf::uint32 value) {
  set_has_bless_val();
  bless_val_ = value;
}

// -------------------------------------------------------------------

// pet_reset_req

// required uint32 serial = 1;
inline bool pet_reset_req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_reset_req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_reset_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_reset_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_reset_req::serial() const {
  return serial_;
}
inline void pet_reset_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required .client.PET_RESET_TYPE_E type = 2;
inline bool pet_reset_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_reset_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_reset_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_reset_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::PET_RESET_TYPE_E pet_reset_req::type() const {
  return static_cast< ::client::PET_RESET_TYPE_E >(type_);
}
inline void pet_reset_req::set_type(::client::PET_RESET_TYPE_E value) {
  assert(::client::PET_RESET_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 auto = 3;
inline bool pet_reset_req::has_auto_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_reset_req::set_has_auto_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_reset_req::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_reset_req::clear_auto_() {
  auto__ = 0u;
  clear_has_auto_();
}
inline ::google::protobuf::uint32 pet_reset_req::auto_() const {
  return auto__;
}
inline void pet_reset_req::set_auto_(::google::protobuf::uint32 value) {
  set_has_auto_();
  auto__ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_reset_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_reset_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_reset_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_reset_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_reset_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_reset_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_reset_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_reset_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_reset_rsp

// required uint32 serial = 1;
inline bool pet_reset_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_reset_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_reset_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_reset_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_reset_rsp::serial() const {
  return serial_;
}
inline void pet_reset_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required .client.PET_RESET_RET_E ret = 2;
inline bool pet_reset_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_reset_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_reset_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_reset_rsp::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::client::PET_RESET_RET_E pet_reset_rsp::ret() const {
  return static_cast< ::client::PET_RESET_RET_E >(ret_);
}
inline void pet_reset_rsp::set_ret(::client::PET_RESET_RET_E value) {
  assert(::client::PET_RESET_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pet_learn_skill_req

// required uint32 grid_index = 1;
inline bool pet_learn_skill_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_learn_skill_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_learn_skill_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_learn_skill_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 pet_learn_skill_req::grid_index() const {
  return grid_index_;
}
inline void pet_learn_skill_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 serial = 2;
inline bool pet_learn_skill_req::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_learn_skill_req::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_learn_skill_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_learn_skill_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_learn_skill_req::serial() const {
  return serial_;
}
inline void pet_learn_skill_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_learn_skill_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_learn_skill_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_learn_skill_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_learn_skill_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_learn_skill_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_learn_skill_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_learn_skill_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_learn_skill_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_learn_skill_rsp

// required uint32 ret = 1;
inline bool pet_learn_skill_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_learn_skill_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_learn_skill_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_learn_skill_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pet_learn_skill_rsp::ret() const {
  return ret_;
}
inline void pet_learn_skill_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint32 serial = 2;
inline bool pet_learn_skill_rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_learn_skill_rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_learn_skill_rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_learn_skill_rsp::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 pet_learn_skill_rsp::serial() const {
  return serial_;
}
inline void pet_learn_skill_rsp::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 grid_index = 3;
inline bool pet_learn_skill_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_learn_skill_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_learn_skill_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_learn_skill_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 pet_learn_skill_rsp::grid_index() const {
  return grid_index_;
}
inline void pet_learn_skill_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ROLE_PET_STATUS_E>() {
  return ::client::ROLE_PET_STATUS_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_FIGHT_RET_E>() {
  return ::client::PET_FIGHT_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_REST_RET_E>() {
  return ::client::PET_REST_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_UPGRADE_RET_E>() {
  return ::client::PET_UPGRADE_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_RESET_TYPE_E>() {
  return ::client::PET_RESET_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_RESET_RET_E>() {
  return ::client::PET_RESET_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eoperate_5fpet_2eproto__INCLUDED
