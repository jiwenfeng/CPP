// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.raid_operate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.raid_operate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* raid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_info_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_info_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_raid_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_raid_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enter_raid_req_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* exit_raid_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_raid_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_open_box_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_open_box_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_open_box_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_open_box_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_success_ic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_success_ic_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_success_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_success_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_failure_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_failure_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_result_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_result_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_npc_creazed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_npc_creazed_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_raid_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_raid_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_raid_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_raid_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_raid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_raid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_raid_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_raid_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mini_server_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mini_server_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mini_server_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mini_server_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mini_server_end_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mini_server_end_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* raid_verify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  raid_verify_reflection_ = NULL;
const ::google::protobuf::Descriptor* reported_raid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reported_raid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reported_raid_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reported_raid_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_npc_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_npc_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* dead_in_raid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dead_in_raid_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* raid_check_result_e_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eraid_5foperate_2eproto() {
  protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.raid_operate.proto");
  GOOGLE_CHECK(file != NULL);
  raid_info_descriptor_ = file->message_type(0);
  static const int raid_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, fast_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, last_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, auto_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_fast_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_last_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_auto_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, elite_enter_count_),
  };
  raid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_info_descriptor_,
      raid_info::default_instance_,
      raid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_info));
  raid_info_msg_descriptor_ = file->message_type(1);
  static const int raid_info_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info_msg, ri_),
  };
  raid_info_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_info_msg_descriptor_,
      raid_info_msg::default_instance_,
      raid_info_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_info_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_info_msg));
  enter_raid_req_descriptor_ = file->message_type(2);
  static const int enter_raid_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_raid_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_raid_req, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_raid_req, svr_head_),
  };
  enter_raid_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_raid_req_descriptor_,
      enter_raid_req::default_instance_,
      enter_raid_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_raid_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_raid_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_raid_req));
  enter_raid_req_type_descriptor_ = enter_raid_req_descriptor_->enum_type(0);
  exit_raid_req_descriptor_ = file->message_type(3);
  static const int exit_raid_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_raid_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_raid_req, svr_head_),
  };
  exit_raid_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_raid_req_descriptor_,
      exit_raid_req::default_instance_,
      exit_raid_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_raid_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_raid_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_raid_req));
  raid_open_box_req_descriptor_ = file->message_type(4);
  static const int raid_open_box_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_req, svr_head_),
  };
  raid_open_box_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_open_box_req_descriptor_,
      raid_open_box_req::default_instance_,
      raid_open_box_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_open_box_req));
  raid_open_box_rsp_descriptor_ = file->message_type(5);
  static const int raid_open_box_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_rsp, open_props_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_rsp, close_props_ids_),
  };
  raid_open_box_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_open_box_rsp_descriptor_,
      raid_open_box_rsp::default_instance_,
      raid_open_box_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_open_box_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_open_box_rsp));
  raid_result_info_descriptor_ = file->message_type(6);
  static const int raid_result_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, tao_lue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, strategy_),
  };
  raid_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_result_info_descriptor_,
      raid_result_info::default_instance_,
      raid_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_result_info));
  raid_success_ic_descriptor_ = file->message_type(7);
  static const int raid_success_ic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_ic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_ic, count_),
  };
  raid_success_ic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_success_ic_descriptor_,
      raid_success_ic::default_instance_,
      raid_success_ic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_ic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_ic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_success_ic));
  raid_success_info_descriptor_ = file->message_type(8);
  static const int raid_success_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, block_),
  };
  raid_success_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_success_info_descriptor_,
      raid_success_info::default_instance_,
      raid_success_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_success_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_success_info));
  raid_failure_info_descriptor_ = file->message_type(9);
  static const int raid_failure_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, hero_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, role_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, dead_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, vip_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, monster_),
  };
  raid_failure_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_failure_info_descriptor_,
      raid_failure_info::default_instance_,
      raid_failure_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_failure_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_failure_info));
  raid_result_msg_descriptor_ = file->message_type(10);
  static const int raid_result_msg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, rep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, verify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, reward1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, reward2_),
  };
  raid_result_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_result_msg_descriptor_,
      raid_result_msg::default_instance_,
      raid_result_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_result_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_result_msg));
  raid_npc_creazed_descriptor_ = file->message_type(11);
  static const int raid_npc_creazed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_npc_creazed, raid_id_),
  };
  raid_npc_creazed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_npc_creazed_descriptor_,
      raid_npc_creazed::default_instance_,
      raid_npc_creazed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_npc_creazed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_npc_creazed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_npc_creazed));
  auto_raid_req_descriptor_ = file->message_type(12);
  static const int auto_raid_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, svr_head_),
  };
  auto_raid_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_raid_req_descriptor_,
      auto_raid_req::default_instance_,
      auto_raid_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_raid_req));
  auto_raid_rsp_descriptor_ = file->message_type(13);
  static const int auto_raid_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_rsp, id_),
  };
  auto_raid_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_raid_rsp_descriptor_,
      auto_raid_rsp::default_instance_,
      auto_raid_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_raid_rsp));
  auto_raid_info_descriptor_ = file->message_type(14);
  static const int auto_raid_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, need_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, frozen_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, frozen_physical_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, military_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, props_),
  };
  auto_raid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_raid_info_descriptor_,
      auto_raid_info::default_instance_,
      auto_raid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_raid_info));
  auto_raid_msg_descriptor_ = file->message_type(15);
  static const int auto_raid_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_msg, info_),
  };
  auto_raid_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_raid_msg_descriptor_,
      auto_raid_msg::default_instance_,
      auto_raid_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_raid_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_raid_msg));
  mini_server_req_descriptor_ = file->message_type(16);
  static const int mini_server_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, svr_head_),
  };
  mini_server_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mini_server_req_descriptor_,
      mini_server_req::default_instance_,
      mini_server_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mini_server_req));
  mini_server_rsp_descriptor_ = file->message_type(17);
  static const int mini_server_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, ret_),
  };
  mini_server_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mini_server_rsp_descriptor_,
      mini_server_rsp::default_instance_,
      mini_server_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mini_server_rsp));
  mini_server_end_msg_descriptor_ = file->message_type(18);
  static const int mini_server_end_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_end_msg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_end_msg, rep_),
  };
  mini_server_end_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mini_server_end_msg_descriptor_,
      mini_server_end_msg::default_instance_,
      mini_server_end_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_end_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mini_server_end_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mini_server_end_msg));
  raid_verify_descriptor_ = file->message_type(19);
  static const int raid_verify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, max_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, max_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, bow_index_),
  };
  raid_verify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      raid_verify_descriptor_,
      raid_verify::default_instance_,
      raid_verify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(raid_verify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(raid_verify));
  reported_raid_info_descriptor_ = file->message_type(20);
  static const int reported_raid_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, used_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, verify_),
  };
  reported_raid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reported_raid_info_descriptor_,
      reported_raid_info::default_instance_,
      reported_raid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reported_raid_info));
  reported_raid_req_descriptor_ = file->message_type(21);
  static const int reported_raid_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_req, rri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_req, svr_head_),
  };
  reported_raid_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reported_raid_req_descriptor_,
      reported_raid_req::default_instance_,
      reported_raid_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reported_raid_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reported_raid_req));
  create_npc_msg_descriptor_ = file->message_type(22);
  static const int create_npc_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_msg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_msg, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_msg, show_),
  };
  create_npc_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_npc_msg_descriptor_,
      create_npc_msg::default_instance_,
      create_npc_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_npc_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_npc_msg));
  dead_in_raid_descriptor_ = file->message_type(23);
  static const int dead_in_raid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_in_raid, time_),
  };
  dead_in_raid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dead_in_raid_descriptor_,
      dead_in_raid::default_instance_,
      dead_in_raid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_in_raid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dead_in_raid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dead_in_raid));
  raid_check_result_e_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eraid_5foperate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_info_descriptor_, &raid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_info_msg_descriptor_, &raid_info_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_raid_req_descriptor_, &enter_raid_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_raid_req_descriptor_, &exit_raid_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_open_box_req_descriptor_, &raid_open_box_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_open_box_rsp_descriptor_, &raid_open_box_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_result_info_descriptor_, &raid_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_success_ic_descriptor_, &raid_success_ic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_success_info_descriptor_, &raid_success_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_failure_info_descriptor_, &raid_failure_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_result_msg_descriptor_, &raid_result_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_npc_creazed_descriptor_, &raid_npc_creazed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_raid_req_descriptor_, &auto_raid_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_raid_rsp_descriptor_, &auto_raid_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_raid_info_descriptor_, &auto_raid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_raid_msg_descriptor_, &auto_raid_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mini_server_req_descriptor_, &mini_server_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mini_server_rsp_descriptor_, &mini_server_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mini_server_end_msg_descriptor_, &mini_server_end_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    raid_verify_descriptor_, &raid_verify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reported_raid_info_descriptor_, &reported_raid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reported_raid_req_descriptor_, &reported_raid_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_npc_msg_descriptor_, &create_npc_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dead_in_raid_descriptor_, &dead_in_raid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eraid_5foperate_2eproto() {
  delete raid_info::default_instance_;
  delete raid_info_reflection_;
  delete raid_info_msg::default_instance_;
  delete raid_info_msg_reflection_;
  delete enter_raid_req::default_instance_;
  delete enter_raid_req_reflection_;
  delete exit_raid_req::default_instance_;
  delete exit_raid_req_reflection_;
  delete raid_open_box_req::default_instance_;
  delete raid_open_box_req_reflection_;
  delete raid_open_box_rsp::default_instance_;
  delete raid_open_box_rsp_reflection_;
  delete raid_result_info::default_instance_;
  delete raid_result_info_reflection_;
  delete raid_success_ic::default_instance_;
  delete raid_success_ic_reflection_;
  delete raid_success_info::default_instance_;
  delete raid_success_info_reflection_;
  delete raid_failure_info::default_instance_;
  delete raid_failure_info_reflection_;
  delete raid_result_msg::default_instance_;
  delete raid_result_msg_reflection_;
  delete raid_npc_creazed::default_instance_;
  delete raid_npc_creazed_reflection_;
  delete auto_raid_req::default_instance_;
  delete auto_raid_req_reflection_;
  delete auto_raid_rsp::default_instance_;
  delete auto_raid_rsp_reflection_;
  delete auto_raid_info::default_instance_;
  delete auto_raid_info_reflection_;
  delete auto_raid_msg::default_instance_;
  delete auto_raid_msg_reflection_;
  delete mini_server_req::default_instance_;
  delete mini_server_req_reflection_;
  delete mini_server_rsp::default_instance_;
  delete mini_server_rsp_reflection_;
  delete mini_server_end_msg::default_instance_;
  delete mini_server_end_msg_reflection_;
  delete raid_verify::default_instance_;
  delete raid_verify_reflection_;
  delete reported_raid_info::default_instance_;
  delete reported_raid_info_reflection_;
  delete reported_raid_req::default_instance_;
  delete reported_raid_req_reflection_;
  delete create_npc_msg::default_instance_;
  delete create_npc_msg_reflection_;
  delete dead_in_raid::default_instance_;
  delete dead_in_raid_reflection_;
}

void protobuf_AddDesc_client_2eraid_5foperate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031client.raid_operate.proto\022\006client\032\021cli"
    "ent.comm.proto\032\027client.role_props.proto\""
    "\335\002\n\traid_info\022\017\n\007raid_id\030\001 \002(\r\022\020\n\010star_n"
    "um\030\002 \002(\r\022\021\n\tfast_tick\030\003 \002(\r\022\032\n\022last_comp"
    "lete_time\030\004 \002(\r\022\026\n\016complete_count\030\005 \002(\r\022"
    "\023\n\013create_time\030\006 \002(\r\022\021\n\tauto_time\030\007 \002(\r\022"
    "\026\n\016elite_star_num\030\010 \002(\r\022\027\n\017elite_fast_ti"
    "ck\030\t \002(\r\022 \n\030elite_last_complete_time\030\n \002"
    "(\r\022\034\n\024elite_complete_count\030\013 \002(\r\022\031\n\021elit"
    "e_create_time\030\014 \002(\r\022\027\n\017elite_auto_time\030\r"
    " \002(\r\022\031\n\021elite_enter_count\030\016 \002(\r\".\n\rraid_"
    "info_msg\022\035\n\002ri\030\001 \003(\0132\021.client.raid_info\""
    "s\n\016enter_raid_req\022\017\n\007raid_id\030\001 \002(\r\022\t\n\001t\030"
    "\002 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"\035\n\004type\022\n\n\006normal\020\000\022\t\n\005elite\020\001\"H\n\r"
    "exit_raid_req\022\017\n\007raid_id\030\001 \002(\r\022&\n\010svr_he"
    "ad\030\350\007 \001(\0132\023.client.server_head\"M\n\021raid_o"
    "pen_box_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head\"D\n\021raid_op"
    "en_box_rsp\022\026\n\016open_props_ids\030\001 \003(\r\022\027\n\017cl"
    "ose_props_ids\030\002 \003(\r\"\236\001\n\020raid_result_info"
    "\022\035\n\002rd\030\001 \002(\0132\021.client.role_data\022!\n\005props"
    "\030\002 \003(\0132\022.client.props_info\022\017\n\004coin\030\003 \001(\r"
    ":\0010\022\016\n\003exp\030\004 \001(\r:\0010\022\022\n\007tao_lue\030\005 \001(\r:\0010\022"
    "\023\n\010strategy\030\006 \001(\r:\0010\",\n\017raid_success_ic\022"
    "\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"\327\001\n\021raid_succ"
    "ess_info\022%\n\004role\030\001 \001(\0132\027.client.raid_suc"
    "cess_ic\022%\n\004item\030\002 \001(\0132\027.client.raid_succ"
    "ess_ic\022&\n\005touch\030\003 \001(\0132\027.client.raid_succ"
    "ess_ic\022$\n\003pos\030\004 \001(\0132\027.client.raid_succes"
    "s_ic\022&\n\005block\030\005 \001(\0132\027.client.raid_succes"
    "s_ic\"\201\001\n\021raid_failure_info\022\021\n\thero_dead\030"
    "\001 \001(\010\022\021\n\trole_dead\030\002 \001(\r\022\017\n\007timeout\030\003 \001("
    "\r\022\022\n\ndead_count\030\004 \001(\r\022\020\n\010vip_dead\030\005 \001(\r\022"
    "\017\n\007monster\030\006 \001(\r\"\346\002\n\017raid_result_msg\022\017\n\007"
    "raid_id\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\014\n\004tick\030\003 \002("
    "\r\022&\n\004info\030\004 \003(\0132\030.client.raid_result_inf"
    "o\022*\n\007success\030\005 \001(\0132\031.client.raid_success"
    "_info\022*\n\007failure\030\006 \001(\0132\031.client.raid_fai"
    "lure_info\022\013\n\003rep\030\007 \001(\r\022#\n\006verify\030\010 \001(\0132\023"
    ".client.raid_verify\022\016\n\006value1\030\t \001(\t\022\016\n\006v"
    "alue2\030\n \001(\r\022)\n\007reward1\030\013 \003(\0132\030.client.ra"
    "id_result_info\022)\n\007reward2\030\014 \003(\0132\030.client"
    ".raid_result_info\"#\n\020raid_npc_creazed\022\017\n"
    "\007raid_id\030\001 \002(\r\"[\n\rauto_raid_req\022\n\n\002id\030\001 "
    "\002(\r\022\013\n\003num\030\002 \002(\r\022\t\n\001t\030\003 \001(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"\033\n\rauto_raid"
    "_rsp\022\n\n\002id\030\001 \002(\r\"\200\002\n\016auto_raid_info\022\n\n\002i"
    "d\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\022\n\nstart_time\030\003 \002("
    "\r\022\021\n\tneed_time\030\004 \002(\r\022\025\n\rfrozen_silver\030\005 "
    "\002(\r\022\035\n\025frozen_physical_power\030\006 \002(\r\022\r\n\005co"
    "unt\030\007 \002(\r\022\017\n\007monster\030\010 \002(\r\022\013\n\003exp\030\t \002(\r\022"
    "\014\n\004coin\030\n \002(\r\022\031\n\021military_strategy\030\013 \002(\r"
    "\022!\n\005props\030\014 \003(\0132\022.client.props_info\"5\n\ra"
    "uto_raid_msg\022$\n\004info\030\001 \002(\0132\026.client.auto"
    "_raid_info\"i\n\017mini_server_req\022\n\n\002op\030\001 \002("
    "\r\022\017\n\007raid_id\030\002 \002(\r\022\021\n\traid_type\030\003 \001(\r\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head\"\\\n"
    "\017mini_server_rsp\022\n\n\002op\030\001 \002(\r\022\017\n\007raid_id\030"
    "\002 \002(\r\022\021\n\traid_type\030\003 \001(\r\022\014\n\004time\030\004 \002(\r\022\013"
    "\n\003ret\030\005 \002(\r\"H\n\023mini_server_end_msg\022$\n\003ms"
    "g\030\001 \002(\0132\027.client.raid_result_msg\022\013\n\003rep\030"
    "\002 \001(\r\"R\n\013raid_verify\022\016\n\006max_hp\030\001 \002(\r\022\017\n\007"
    "max_atk\030\002 \002(\r\022\017\n\007max_def\030\003 \002(\r\022\021\n\tbow_in"
    "dex\030\004 \002(\r\"\376\001\n\022reported_raid_info\022\n\n\002id\030\001"
    " \002(\r\022\014\n\004star\030\002 \002(\r\022\021\n\tused_tick\030\003 \002(\r\022\025\n"
    "\rcomplete_time\030\004 \002(\r\022\014\n\004type\030\005 \002(\r\022\014\n\004ti"
    "me\030\006 \002(\r\022\013\n\003key\030\007 \002(\t\022*\n\007success\030\010 \001(\0132\031"
    ".client.raid_success_info\022*\n\007failure\030\t \001"
    "(\0132\031.client.raid_failure_info\022#\n\006verify\030"
    "\n \002(\0132\023.client.raid_verify\"d\n\021reported_r"
    "aid_req\022\'\n\003rri\030\001 \003(\0132\032.client.reported_r"
    "aid_info\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\">\n\016create_npc_msg\022\017\n\007content\030\001 "
    "\002(\t\022\r\n\005delay\030\002 \002(\r\022\014\n\004show\030\003 \002(\r\"\034\n\014dead"
    "_in_raid\022\014\n\004time\030\001 \002(\r*\260\002\n\023raid_check_re"
    "sult_e\022\013\n\007success\020\000\022\016\n\nraid_error\020\001\022\r\n\tv"
    "it_limit\020\002\022\r\n\tlvl_limit\020\003\022\r\n\tpet_limit\020\004"
    "\022\016\n\nprev_limit\020\005\022\r\n\tnum_limit\020\006\022\017\n\013elite"
    "_limit\020\007\022\016\n\nneed_reset\020\010\022\016\n\nmain_limit\020\t"
    "\022\022\n\016team_not_exist\020\n\022\r\n\tteam_full\020\013\022\017\n\013t"
    "eam_closed\020\014\022\013\n\007in_team\020\r\022\017\n\013func_closed"
    "\020\016\022\016\n\ninvalid_id\020\017\022\021\n\rprize_not_get\020\020\022\n\n"
    "\006failed\020\021", 3329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.raid_operate.proto", &protobuf_RegisterTypes);
  raid_info::default_instance_ = new raid_info();
  raid_info_msg::default_instance_ = new raid_info_msg();
  enter_raid_req::default_instance_ = new enter_raid_req();
  exit_raid_req::default_instance_ = new exit_raid_req();
  raid_open_box_req::default_instance_ = new raid_open_box_req();
  raid_open_box_rsp::default_instance_ = new raid_open_box_rsp();
  raid_result_info::default_instance_ = new raid_result_info();
  raid_success_ic::default_instance_ = new raid_success_ic();
  raid_success_info::default_instance_ = new raid_success_info();
  raid_failure_info::default_instance_ = new raid_failure_info();
  raid_result_msg::default_instance_ = new raid_result_msg();
  raid_npc_creazed::default_instance_ = new raid_npc_creazed();
  auto_raid_req::default_instance_ = new auto_raid_req();
  auto_raid_rsp::default_instance_ = new auto_raid_rsp();
  auto_raid_info::default_instance_ = new auto_raid_info();
  auto_raid_msg::default_instance_ = new auto_raid_msg();
  mini_server_req::default_instance_ = new mini_server_req();
  mini_server_rsp::default_instance_ = new mini_server_rsp();
  mini_server_end_msg::default_instance_ = new mini_server_end_msg();
  raid_verify::default_instance_ = new raid_verify();
  reported_raid_info::default_instance_ = new reported_raid_info();
  reported_raid_req::default_instance_ = new reported_raid_req();
  create_npc_msg::default_instance_ = new create_npc_msg();
  dead_in_raid::default_instance_ = new dead_in_raid();
  raid_info::default_instance_->InitAsDefaultInstance();
  raid_info_msg::default_instance_->InitAsDefaultInstance();
  enter_raid_req::default_instance_->InitAsDefaultInstance();
  exit_raid_req::default_instance_->InitAsDefaultInstance();
  raid_open_box_req::default_instance_->InitAsDefaultInstance();
  raid_open_box_rsp::default_instance_->InitAsDefaultInstance();
  raid_result_info::default_instance_->InitAsDefaultInstance();
  raid_success_ic::default_instance_->InitAsDefaultInstance();
  raid_success_info::default_instance_->InitAsDefaultInstance();
  raid_failure_info::default_instance_->InitAsDefaultInstance();
  raid_result_msg::default_instance_->InitAsDefaultInstance();
  raid_npc_creazed::default_instance_->InitAsDefaultInstance();
  auto_raid_req::default_instance_->InitAsDefaultInstance();
  auto_raid_rsp::default_instance_->InitAsDefaultInstance();
  auto_raid_info::default_instance_->InitAsDefaultInstance();
  auto_raid_msg::default_instance_->InitAsDefaultInstance();
  mini_server_req::default_instance_->InitAsDefaultInstance();
  mini_server_rsp::default_instance_->InitAsDefaultInstance();
  mini_server_end_msg::default_instance_->InitAsDefaultInstance();
  raid_verify::default_instance_->InitAsDefaultInstance();
  reported_raid_info::default_instance_->InitAsDefaultInstance();
  reported_raid_req::default_instance_->InitAsDefaultInstance();
  create_npc_msg::default_instance_->InitAsDefaultInstance();
  dead_in_raid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eraid_5foperate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eraid_5foperate_2eproto {
  StaticDescriptorInitializer_client_2eraid_5foperate_2eproto() {
    protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  }
} static_descriptor_initializer_client_2eraid_5foperate_2eproto_;
const ::google::protobuf::EnumDescriptor* raid_check_result_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_check_result_e_descriptor_;
}
bool raid_check_result_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int raid_info::kRaidIdFieldNumber;
const int raid_info::kStarNumFieldNumber;
const int raid_info::kFastTickFieldNumber;
const int raid_info::kLastCompleteTimeFieldNumber;
const int raid_info::kCompleteCountFieldNumber;
const int raid_info::kCreateTimeFieldNumber;
const int raid_info::kAutoTimeFieldNumber;
const int raid_info::kEliteStarNumFieldNumber;
const int raid_info::kEliteFastTickFieldNumber;
const int raid_info::kEliteLastCompleteTimeFieldNumber;
const int raid_info::kEliteCompleteCountFieldNumber;
const int raid_info::kEliteCreateTimeFieldNumber;
const int raid_info::kEliteAutoTimeFieldNumber;
const int raid_info::kEliteEnterCountFieldNumber;
#endif  // !_MSC_VER

raid_info::raid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_info::InitAsDefaultInstance() {
}

raid_info::raid_info(const raid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_info::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  star_num_ = 0u;
  fast_tick_ = 0u;
  last_complete_time_ = 0u;
  complete_count_ = 0u;
  create_time_ = 0u;
  auto_time_ = 0u;
  elite_star_num_ = 0u;
  elite_fast_tick_ = 0u;
  elite_last_complete_time_ = 0u;
  elite_complete_count_ = 0u;
  elite_create_time_ = 0u;
  elite_auto_time_ = 0u;
  elite_enter_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_info::~raid_info() {
  SharedDtor();
}

void raid_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_info_descriptor_;
}

const raid_info& raid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_info* raid_info::default_instance_ = NULL;

raid_info* raid_info::New() const {
  return new raid_info;
}

void raid_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    star_num_ = 0u;
    fast_tick_ = 0u;
    last_complete_time_ = 0u;
    complete_count_ = 0u;
    create_time_ = 0u;
    auto_time_ = 0u;
    elite_star_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    elite_fast_tick_ = 0u;
    elite_last_complete_time_ = 0u;
    elite_complete_count_ = 0u;
    elite_create_time_ = 0u;
    elite_auto_time_ = 0u;
    elite_enter_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_num;
        break;
      }

      // required uint32 star_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_num_)));
          set_has_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fast_tick;
        break;
      }

      // required uint32 fast_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fast_tick_)));
          set_has_fast_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_complete_time;
        break;
      }

      // required uint32 last_complete_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_complete_time_)));
          set_has_last_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_complete_count;
        break;
      }

      // required uint32 complete_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_count_)));
          set_has_complete_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_time;
        break;
      }

      // required uint32 auto_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_time_)));
          set_has_auto_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_elite_star_num;
        break;
      }

      // required uint32 elite_star_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_star_num_)));
          set_has_elite_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_elite_fast_tick;
        break;
      }

      // required uint32 elite_fast_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_fast_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_fast_tick_)));
          set_has_elite_fast_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_elite_last_complete_time;
        break;
      }

      // required uint32 elite_last_complete_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_last_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_last_complete_time_)));
          set_has_elite_last_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite_complete_count;
        break;
      }

      // required uint32 elite_complete_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_complete_count_)));
          set_has_elite_complete_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_elite_create_time;
        break;
      }

      // required uint32 elite_create_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_create_time_)));
          set_has_elite_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_elite_auto_time;
        break;
      }

      // required uint32 elite_auto_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_auto_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_auto_time_)));
          set_has_elite_auto_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_elite_enter_count;
        break;
      }

      // required uint32 elite_enter_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_enter_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_enter_count_)));
          set_has_elite_enter_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 star_num = 2;
  if (has_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_num(), output);
  }

  // required uint32 fast_tick = 3;
  if (has_fast_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fast_tick(), output);
  }

  // required uint32 last_complete_time = 4;
  if (has_last_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_complete_time(), output);
  }

  // required uint32 complete_count = 5;
  if (has_complete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->complete_count(), output);
  }

  // required uint32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_time(), output);
  }

  // required uint32 auto_time = 7;
  if (has_auto_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->auto_time(), output);
  }

  // required uint32 elite_star_num = 8;
  if (has_elite_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->elite_star_num(), output);
  }

  // required uint32 elite_fast_tick = 9;
  if (has_elite_fast_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->elite_fast_tick(), output);
  }

  // required uint32 elite_last_complete_time = 10;
  if (has_elite_last_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->elite_last_complete_time(), output);
  }

  // required uint32 elite_complete_count = 11;
  if (has_elite_complete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elite_complete_count(), output);
  }

  // required uint32 elite_create_time = 12;
  if (has_elite_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->elite_create_time(), output);
  }

  // required uint32 elite_auto_time = 13;
  if (has_elite_auto_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->elite_auto_time(), output);
  }

  // required uint32 elite_enter_count = 14;
  if (has_elite_enter_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->elite_enter_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 star_num = 2;
  if (has_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_num(), target);
  }

  // required uint32 fast_tick = 3;
  if (has_fast_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fast_tick(), target);
  }

  // required uint32 last_complete_time = 4;
  if (has_last_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_complete_time(), target);
  }

  // required uint32 complete_count = 5;
  if (has_complete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->complete_count(), target);
  }

  // required uint32 create_time = 6;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_time(), target);
  }

  // required uint32 auto_time = 7;
  if (has_auto_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->auto_time(), target);
  }

  // required uint32 elite_star_num = 8;
  if (has_elite_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->elite_star_num(), target);
  }

  // required uint32 elite_fast_tick = 9;
  if (has_elite_fast_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->elite_fast_tick(), target);
  }

  // required uint32 elite_last_complete_time = 10;
  if (has_elite_last_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->elite_last_complete_time(), target);
  }

  // required uint32 elite_complete_count = 11;
  if (has_elite_complete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elite_complete_count(), target);
  }

  // required uint32 elite_create_time = 12;
  if (has_elite_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->elite_create_time(), target);
  }

  // required uint32 elite_auto_time = 13;
  if (has_elite_auto_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->elite_auto_time(), target);
  }

  // required uint32 elite_enter_count = 14;
  if (has_elite_enter_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->elite_enter_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 star_num = 2;
    if (has_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_num());
    }

    // required uint32 fast_tick = 3;
    if (has_fast_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fast_tick());
    }

    // required uint32 last_complete_time = 4;
    if (has_last_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_complete_time());
    }

    // required uint32 complete_count = 5;
    if (has_complete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_count());
    }

    // required uint32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 auto_time = 7;
    if (has_auto_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_time());
    }

    // required uint32 elite_star_num = 8;
    if (has_elite_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_star_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 elite_fast_tick = 9;
    if (has_elite_fast_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_fast_tick());
    }

    // required uint32 elite_last_complete_time = 10;
    if (has_elite_last_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_last_complete_time());
    }

    // required uint32 elite_complete_count = 11;
    if (has_elite_complete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_complete_count());
    }

    // required uint32 elite_create_time = 12;
    if (has_elite_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_create_time());
    }

    // required uint32 elite_auto_time = 13;
    if (has_elite_auto_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_auto_time());
    }

    // required uint32 elite_enter_count = 14;
    if (has_elite_enter_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_enter_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_info::MergeFrom(const raid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_star_num()) {
      set_star_num(from.star_num());
    }
    if (from.has_fast_tick()) {
      set_fast_tick(from.fast_tick());
    }
    if (from.has_last_complete_time()) {
      set_last_complete_time(from.last_complete_time());
    }
    if (from.has_complete_count()) {
      set_complete_count(from.complete_count());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_auto_time()) {
      set_auto_time(from.auto_time());
    }
    if (from.has_elite_star_num()) {
      set_elite_star_num(from.elite_star_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_elite_fast_tick()) {
      set_elite_fast_tick(from.elite_fast_tick());
    }
    if (from.has_elite_last_complete_time()) {
      set_elite_last_complete_time(from.elite_last_complete_time());
    }
    if (from.has_elite_complete_count()) {
      set_elite_complete_count(from.elite_complete_count());
    }
    if (from.has_elite_create_time()) {
      set_elite_create_time(from.elite_create_time());
    }
    if (from.has_elite_auto_time()) {
      set_elite_auto_time(from.elite_auto_time());
    }
    if (from.has_elite_enter_count()) {
      set_elite_enter_count(from.elite_enter_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_info::CopyFrom(const raid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void raid_info::Swap(raid_info* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(star_num_, other->star_num_);
    std::swap(fast_tick_, other->fast_tick_);
    std::swap(last_complete_time_, other->last_complete_time_);
    std::swap(complete_count_, other->complete_count_);
    std::swap(create_time_, other->create_time_);
    std::swap(auto_time_, other->auto_time_);
    std::swap(elite_star_num_, other->elite_star_num_);
    std::swap(elite_fast_tick_, other->elite_fast_tick_);
    std::swap(elite_last_complete_time_, other->elite_last_complete_time_);
    std::swap(elite_complete_count_, other->elite_complete_count_);
    std::swap(elite_create_time_, other->elite_create_time_);
    std::swap(elite_auto_time_, other->elite_auto_time_);
    std::swap(elite_enter_count_, other->elite_enter_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_info_descriptor_;
  metadata.reflection = raid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_info_msg::kRiFieldNumber;
#endif  // !_MSC_VER

raid_info_msg::raid_info_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_info_msg::InitAsDefaultInstance() {
}

raid_info_msg::raid_info_msg(const raid_info_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_info_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_info_msg::~raid_info_msg() {
  SharedDtor();
}

void raid_info_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_info_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_info_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_info_msg_descriptor_;
}

const raid_info_msg& raid_info_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_info_msg* raid_info_msg::default_instance_ = NULL;

raid_info_msg* raid_info_msg::New() const {
  return new raid_info_msg;
}

void raid_info_msg::Clear() {
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_info_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.raid_info ri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_info_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.raid_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_info_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.raid_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_info_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.raid_info ri = 1;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_info_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_info_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_info_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_info_msg::MergeFrom(const raid_info_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_info_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_info_msg::CopyFrom(const raid_info_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_info_msg::IsInitialized() const {

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void raid_info_msg::Swap(raid_info_msg* other) {
  if (other != this) {
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_info_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_info_msg_descriptor_;
  metadata.reflection = raid_info_msg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* enter_raid_req_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_raid_req_type_descriptor_;
}
bool enter_raid_req_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enter_raid_req_type enter_raid_req::normal;
const enter_raid_req_type enter_raid_req::elite;
const enter_raid_req_type enter_raid_req::type_MIN;
const enter_raid_req_type enter_raid_req::type_MAX;
const int enter_raid_req::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int enter_raid_req::kRaidIdFieldNumber;
const int enter_raid_req::kTFieldNumber;
const int enter_raid_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

enter_raid_req::enter_raid_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_raid_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

enter_raid_req::enter_raid_req(const enter_raid_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_raid_req::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  t_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_raid_req::~enter_raid_req() {
  SharedDtor();
}

void enter_raid_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void enter_raid_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_raid_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_raid_req_descriptor_;
}

const enter_raid_req& enter_raid_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

enter_raid_req* enter_raid_req::default_instance_ = NULL;

enter_raid_req* enter_raid_req::New() const {
  return new enter_raid_req;
}

void enter_raid_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    t_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_raid_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t;
        break;
      }

      // optional uint32 t = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_raid_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // optional uint32 t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->t(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_raid_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // optional uint32 t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->t(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_raid_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional uint32 t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_raid_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_raid_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_raid_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_raid_req::MergeFrom(const enter_raid_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_raid_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_raid_req::CopyFrom(const enter_raid_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_raid_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_raid_req::Swap(enter_raid_req* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(t_, other->t_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_raid_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_raid_req_descriptor_;
  metadata.reflection = enter_raid_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_raid_req::kRaidIdFieldNumber;
const int exit_raid_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

exit_raid_req::exit_raid_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_raid_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

exit_raid_req::exit_raid_req(const exit_raid_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_raid_req::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_raid_req::~exit_raid_req() {
  SharedDtor();
}

void exit_raid_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void exit_raid_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_raid_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_raid_req_descriptor_;
}

const exit_raid_req& exit_raid_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

exit_raid_req* exit_raid_req::default_instance_ = NULL;

exit_raid_req* exit_raid_req::New() const {
  return new exit_raid_req;
}

void exit_raid_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_raid_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_raid_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_raid_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_raid_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_raid_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_raid_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_raid_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_raid_req::MergeFrom(const exit_raid_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_raid_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_raid_req::CopyFrom(const exit_raid_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_raid_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void exit_raid_req::Swap(exit_raid_req* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_raid_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_raid_req_descriptor_;
  metadata.reflection = exit_raid_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_open_box_req::kUnixtimeFieldNumber;
const int raid_open_box_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

raid_open_box_req::raid_open_box_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_open_box_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

raid_open_box_req::raid_open_box_req(const raid_open_box_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_open_box_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_open_box_req::~raid_open_box_req() {
  SharedDtor();
}

void raid_open_box_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void raid_open_box_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_open_box_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_open_box_req_descriptor_;
}

const raid_open_box_req& raid_open_box_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_open_box_req* raid_open_box_req::default_instance_ = NULL;

raid_open_box_req* raid_open_box_req::New() const {
  return new raid_open_box_req;
}

void raid_open_box_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_open_box_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_open_box_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_open_box_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_open_box_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_open_box_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_open_box_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_open_box_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_open_box_req::MergeFrom(const raid_open_box_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_open_box_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_open_box_req::CopyFrom(const raid_open_box_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_open_box_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void raid_open_box_req::Swap(raid_open_box_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_open_box_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_open_box_req_descriptor_;
  metadata.reflection = raid_open_box_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_open_box_rsp::kOpenPropsIdsFieldNumber;
const int raid_open_box_rsp::kClosePropsIdsFieldNumber;
#endif  // !_MSC_VER

raid_open_box_rsp::raid_open_box_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_open_box_rsp::InitAsDefaultInstance() {
}

raid_open_box_rsp::raid_open_box_rsp(const raid_open_box_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_open_box_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_open_box_rsp::~raid_open_box_rsp() {
  SharedDtor();
}

void raid_open_box_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_open_box_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_open_box_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_open_box_rsp_descriptor_;
}

const raid_open_box_rsp& raid_open_box_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_open_box_rsp* raid_open_box_rsp::default_instance_ = NULL;

raid_open_box_rsp* raid_open_box_rsp::New() const {
  return new raid_open_box_rsp;
}

void raid_open_box_rsp::Clear() {
  open_props_ids_.Clear();
  close_props_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_open_box_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 open_props_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_props_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_open_props_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_props_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_open_props_ids;
        if (input->ExpectTag(16)) goto parse_close_props_ids;
        break;
      }

      // repeated uint32 close_props_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_props_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_close_props_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_close_props_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_close_props_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_open_box_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 open_props_ids = 1;
  for (int i = 0; i < this->open_props_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->open_props_ids(i), output);
  }

  // repeated uint32 close_props_ids = 2;
  for (int i = 0; i < this->close_props_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->close_props_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_open_box_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 open_props_ids = 1;
  for (int i = 0; i < this->open_props_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->open_props_ids(i), target);
  }

  // repeated uint32 close_props_ids = 2;
  for (int i = 0; i < this->close_props_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->close_props_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_open_box_rsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 open_props_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_props_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->open_props_ids(i));
    }
    total_size += 1 * this->open_props_ids_size() + data_size;
  }

  // repeated uint32 close_props_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->close_props_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->close_props_ids(i));
    }
    total_size += 1 * this->close_props_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_open_box_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_open_box_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_open_box_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_open_box_rsp::MergeFrom(const raid_open_box_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_props_ids_.MergeFrom(from.open_props_ids_);
  close_props_ids_.MergeFrom(from.close_props_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_open_box_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_open_box_rsp::CopyFrom(const raid_open_box_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_open_box_rsp::IsInitialized() const {

  return true;
}

void raid_open_box_rsp::Swap(raid_open_box_rsp* other) {
  if (other != this) {
    open_props_ids_.Swap(&other->open_props_ids_);
    close_props_ids_.Swap(&other->close_props_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_open_box_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_open_box_rsp_descriptor_;
  metadata.reflection = raid_open_box_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_result_info::kRdFieldNumber;
const int raid_result_info::kPropsFieldNumber;
const int raid_result_info::kCoinFieldNumber;
const int raid_result_info::kExpFieldNumber;
const int raid_result_info::kTaoLueFieldNumber;
const int raid_result_info::kStrategyFieldNumber;
#endif  // !_MSC_VER

raid_result_info::raid_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_result_info::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

raid_result_info::raid_result_info(const raid_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_result_info::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  coin_ = 0u;
  exp_ = 0u;
  tao_lue_ = 0u;
  strategy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_result_info::~raid_result_info() {
  SharedDtor();
}

void raid_result_info::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void raid_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_result_info_descriptor_;
}

const raid_result_info& raid_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_result_info* raid_result_info::default_instance_ = NULL;

raid_result_info* raid_result_info::New() const {
  return new raid_result_info;
}

void raid_result_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
    coin_ = 0u;
    exp_ = 0u;
    tao_lue_ = 0u;
    strategy_ = 0u;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // repeated .client.props_info props = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_props;
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tao_lue;
        break;
      }

      // optional uint32 tao_lue = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tao_lue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tao_lue_)));
          set_has_tao_lue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strategy;
        break;
      }

      // optional uint32 strategy = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // repeated .client.props_info props = 2;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(i), output);
  }

  // optional uint32 coin = 3 [default = 0];
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // optional uint32 exp = 4 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 tao_lue = 5 [default = 0];
  if (has_tao_lue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tao_lue(), output);
  }

  // optional uint32 strategy = 6 [default = 0];
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->strategy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // repeated .client.props_info props = 2;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(i), target);
  }

  // optional uint32 coin = 3 [default = 0];
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // optional uint32 exp = 4 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 tao_lue = 5 [default = 0];
  if (has_tao_lue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tao_lue(), target);
  }

  // optional uint32 strategy = 6 [default = 0];
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->strategy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

    // optional uint32 coin = 3 [default = 0];
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 exp = 4 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 tao_lue = 5 [default = 0];
    if (has_tao_lue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tao_lue());
    }

    // optional uint32 strategy = 6 [default = 0];
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy());
    }

  }
  // repeated .client.props_info props = 2;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_result_info::MergeFrom(const raid_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_tao_lue()) {
      set_tao_lue(from.tao_lue());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_result_info::CopyFrom(const raid_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_result_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void raid_result_info::Swap(raid_result_info* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    props_.Swap(&other->props_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(tao_lue_, other->tao_lue_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_result_info_descriptor_;
  metadata.reflection = raid_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_success_ic::kIdFieldNumber;
const int raid_success_ic::kCountFieldNumber;
#endif  // !_MSC_VER

raid_success_ic::raid_success_ic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_success_ic::InitAsDefaultInstance() {
}

raid_success_ic::raid_success_ic(const raid_success_ic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_success_ic::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_success_ic::~raid_success_ic() {
  SharedDtor();
}

void raid_success_ic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_success_ic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_success_ic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_success_ic_descriptor_;
}

const raid_success_ic& raid_success_ic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_success_ic* raid_success_ic::default_instance_ = NULL;

raid_success_ic* raid_success_ic::New() const {
  return new raid_success_ic;
}

void raid_success_ic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_success_ic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_success_ic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_success_ic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_success_ic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_success_ic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_success_ic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_success_ic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_success_ic::MergeFrom(const raid_success_ic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_success_ic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_success_ic::CopyFrom(const raid_success_ic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_success_ic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void raid_success_ic::Swap(raid_success_ic* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_success_ic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_success_ic_descriptor_;
  metadata.reflection = raid_success_ic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_success_info::kRoleFieldNumber;
const int raid_success_info::kItemFieldNumber;
const int raid_success_info::kTouchFieldNumber;
const int raid_success_info::kPosFieldNumber;
const int raid_success_info::kBlockFieldNumber;
#endif  // !_MSC_VER

raid_success_info::raid_success_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_success_info::InitAsDefaultInstance() {
  role_ = const_cast< ::client::raid_success_ic*>(&::client::raid_success_ic::default_instance());
  item_ = const_cast< ::client::raid_success_ic*>(&::client::raid_success_ic::default_instance());
  touch_ = const_cast< ::client::raid_success_ic*>(&::client::raid_success_ic::default_instance());
  pos_ = const_cast< ::client::raid_success_ic*>(&::client::raid_success_ic::default_instance());
  block_ = const_cast< ::client::raid_success_ic*>(&::client::raid_success_ic::default_instance());
}

raid_success_info::raid_success_info(const raid_success_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_success_info::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  item_ = NULL;
  touch_ = NULL;
  pos_ = NULL;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_success_info::~raid_success_info() {
  SharedDtor();
}

void raid_success_info::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
    delete item_;
    delete touch_;
    delete pos_;
    delete block_;
  }
}

void raid_success_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_success_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_success_info_descriptor_;
}

const raid_success_info& raid_success_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_success_info* raid_success_info::default_instance_ = NULL;

raid_success_info* raid_success_info::New() const {
  return new raid_success_info;
}

void raid_success_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::client::raid_success_ic::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::client::raid_success_ic::Clear();
    }
    if (has_touch()) {
      if (touch_ != NULL) touch_->::client::raid_success_ic::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::client::raid_success_ic::Clear();
    }
    if (has_block()) {
      if (block_ != NULL) block_->::client::raid_success_ic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_success_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client.raid_success_ic role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .client.raid_success_ic item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_touch;
        break;
      }

      // optional .client.raid_success_ic touch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .client.raid_success_ic pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_block;
        break;
      }

      // optional .client.raid_success_ic block = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_success_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client.raid_success_ic role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  // optional .client.raid_success_ic item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  // optional .client.raid_success_ic touch = 3;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->touch(), output);
  }

  // optional .client.raid_success_ic pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .client.raid_success_ic block = 5;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_success_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client.raid_success_ic role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  // optional .client.raid_success_ic item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  // optional .client.raid_success_ic touch = 3;
  if (has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->touch(), target);
  }

  // optional .client.raid_success_ic pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .client.raid_success_ic block = 5;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_success_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client.raid_success_ic role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional .client.raid_success_ic item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .client.raid_success_ic touch = 3;
    if (has_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touch());
    }

    // optional .client.raid_success_ic pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .client.raid_success_ic block = 5;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_success_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_success_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_success_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_success_info::MergeFrom(const raid_success_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::client::raid_success_ic::MergeFrom(from.role());
    }
    if (from.has_item()) {
      mutable_item()->::client::raid_success_ic::MergeFrom(from.item());
    }
    if (from.has_touch()) {
      mutable_touch()->::client::raid_success_ic::MergeFrom(from.touch());
    }
    if (from.has_pos()) {
      mutable_pos()->::client::raid_success_ic::MergeFrom(from.pos());
    }
    if (from.has_block()) {
      mutable_block()->::client::raid_success_ic::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_success_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_success_info::CopyFrom(const raid_success_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_success_info::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_touch()) {
    if (!this->touch().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void raid_success_info::Swap(raid_success_info* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(item_, other->item_);
    std::swap(touch_, other->touch_);
    std::swap(pos_, other->pos_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_success_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_success_info_descriptor_;
  metadata.reflection = raid_success_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_failure_info::kHeroDeadFieldNumber;
const int raid_failure_info::kRoleDeadFieldNumber;
const int raid_failure_info::kTimeoutFieldNumber;
const int raid_failure_info::kDeadCountFieldNumber;
const int raid_failure_info::kVipDeadFieldNumber;
const int raid_failure_info::kMonsterFieldNumber;
#endif  // !_MSC_VER

raid_failure_info::raid_failure_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_failure_info::InitAsDefaultInstance() {
}

raid_failure_info::raid_failure_info(const raid_failure_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_failure_info::SharedCtor() {
  _cached_size_ = 0;
  hero_dead_ = false;
  role_dead_ = 0u;
  timeout_ = 0u;
  dead_count_ = 0u;
  vip_dead_ = 0u;
  monster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_failure_info::~raid_failure_info() {
  SharedDtor();
}

void raid_failure_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_failure_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_failure_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_failure_info_descriptor_;
}

const raid_failure_info& raid_failure_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_failure_info* raid_failure_info::default_instance_ = NULL;

raid_failure_info* raid_failure_info::New() const {
  return new raid_failure_info;
}

void raid_failure_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_dead_ = false;
    role_dead_ = 0u;
    timeout_ = 0u;
    dead_count_ = 0u;
    vip_dead_ = 0u;
    monster_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_failure_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hero_dead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_dead_)));
          set_has_hero_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_dead;
        break;
      }

      // optional uint32 role_dead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_dead_)));
          set_has_role_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_count;
        break;
      }

      // optional uint32 dead_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_count_)));
          set_has_dead_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_dead;
        break;
      }

      // optional uint32 vip_dead = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_dead_)));
          set_has_vip_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster;
        break;
      }

      // optional uint32 monster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_)));
          set_has_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_failure_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hero_dead = 1;
  if (has_hero_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hero_dead(), output);
  }

  // optional uint32 role_dead = 2;
  if (has_role_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_dead(), output);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  // optional uint32 dead_count = 4;
  if (has_dead_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_count(), output);
  }

  // optional uint32 vip_dead = 5;
  if (has_vip_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip_dead(), output);
  }

  // optional uint32 monster = 6;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->monster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_failure_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hero_dead = 1;
  if (has_hero_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hero_dead(), target);
  }

  // optional uint32 role_dead = 2;
  if (has_role_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_dead(), target);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  // optional uint32 dead_count = 4;
  if (has_dead_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_count(), target);
  }

  // optional uint32 vip_dead = 5;
  if (has_vip_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip_dead(), target);
  }

  // optional uint32 monster = 6;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->monster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_failure_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hero_dead = 1;
    if (has_hero_dead()) {
      total_size += 1 + 1;
    }

    // optional uint32 role_dead = 2;
    if (has_role_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_dead());
    }

    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional uint32 dead_count = 4;
    if (has_dead_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_count());
    }

    // optional uint32 vip_dead = 5;
    if (has_vip_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_dead());
    }

    // optional uint32 monster = 6;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_failure_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_failure_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_failure_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_failure_info::MergeFrom(const raid_failure_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_dead()) {
      set_hero_dead(from.hero_dead());
    }
    if (from.has_role_dead()) {
      set_role_dead(from.role_dead());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_dead_count()) {
      set_dead_count(from.dead_count());
    }
    if (from.has_vip_dead()) {
      set_vip_dead(from.vip_dead());
    }
    if (from.has_monster()) {
      set_monster(from.monster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_failure_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_failure_info::CopyFrom(const raid_failure_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_failure_info::IsInitialized() const {

  return true;
}

void raid_failure_info::Swap(raid_failure_info* other) {
  if (other != this) {
    std::swap(hero_dead_, other->hero_dead_);
    std::swap(role_dead_, other->role_dead_);
    std::swap(timeout_, other->timeout_);
    std::swap(dead_count_, other->dead_count_);
    std::swap(vip_dead_, other->vip_dead_);
    std::swap(monster_, other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_failure_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_failure_info_descriptor_;
  metadata.reflection = raid_failure_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_result_msg::kRaidIdFieldNumber;
const int raid_result_msg::kStarFieldNumber;
const int raid_result_msg::kTickFieldNumber;
const int raid_result_msg::kInfoFieldNumber;
const int raid_result_msg::kSuccessFieldNumber;
const int raid_result_msg::kFailureFieldNumber;
const int raid_result_msg::kRepFieldNumber;
const int raid_result_msg::kVerifyFieldNumber;
const int raid_result_msg::kValue1FieldNumber;
const int raid_result_msg::kValue2FieldNumber;
const int raid_result_msg::kReward1FieldNumber;
const int raid_result_msg::kReward2FieldNumber;
#endif  // !_MSC_VER

raid_result_msg::raid_result_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_result_msg::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
  failure_ = const_cast< ::client::raid_failure_info*>(&::client::raid_failure_info::default_instance());
  verify_ = const_cast< ::client::raid_verify*>(&::client::raid_verify::default_instance());
}

raid_result_msg::raid_result_msg(const raid_result_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_result_msg::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  star_ = 0u;
  tick_ = 0u;
  success_ = NULL;
  failure_ = NULL;
  rep_ = 0u;
  verify_ = NULL;
  value1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_result_msg::~raid_result_msg() {
  SharedDtor();
}

void raid_result_msg::SharedDtor() {
  if (value1_ != &::google::protobuf::internal::kEmptyString) {
    delete value1_;
  }
  if (this != default_instance_) {
    delete success_;
    delete failure_;
    delete verify_;
  }
}

void raid_result_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_result_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_result_msg_descriptor_;
}

const raid_result_msg& raid_result_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_result_msg* raid_result_msg::default_instance_ = NULL;

raid_result_msg* raid_result_msg::New() const {
  return new raid_result_msg;
}

void raid_result_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    star_ = 0u;
    tick_ = 0u;
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
    if (has_failure()) {
      if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
    }
    rep_ = 0u;
    if (has_verify()) {
      if (verify_ != NULL) verify_->::client::raid_verify::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_value1()) {
      if (value1_ != &::google::protobuf::internal::kEmptyString) {
        value1_->clear();
      }
    }
    value2_ = 0u;
  }
  info_.Clear();
  reward1_.Clear();
  reward2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_result_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .client.raid_result_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectTag(42)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_failure;
        break;
      }

      // optional .client.raid_failure_info failure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rep;
        break;
      }

      // optional uint32 rep = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rep_)));
          set_has_rep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_verify;
        break;
      }

      // optional .client.raid_verify verify = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_value1;
        break;
      }

      // optional string value1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value1().data(), this->value1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_value2;
        break;
      }

      // optional uint32 value2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reward1;
        break;
      }

      // repeated .client.raid_result_info reward1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reward1;
        if (input->ExpectTag(98)) goto parse_reward2;
        break;
      }

      // repeated .client.raid_result_info reward2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reward2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_result_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // repeated .client.raid_result_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  // optional .client.raid_success_info success = 5;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->success(), output);
  }

  // optional .client.raid_failure_info failure = 6;
  if (has_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->failure(), output);
  }

  // optional uint32 rep = 7;
  if (has_rep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rep(), output);
  }

  // optional .client.raid_verify verify = 8;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->verify(), output);
  }

  // optional string value1 = 9;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value1().data(), this->value1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->value1(), output);
  }

  // optional uint32 value2 = 10;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->value2(), output);
  }

  // repeated .client.raid_result_info reward1 = 11;
  for (int i = 0; i < this->reward1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->reward1(i), output);
  }

  // repeated .client.raid_result_info reward2 = 12;
  for (int i = 0; i < this->reward2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reward2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_result_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // repeated .client.raid_result_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  // optional .client.raid_success_info success = 5;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->success(), target);
  }

  // optional .client.raid_failure_info failure = 6;
  if (has_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->failure(), target);
  }

  // optional uint32 rep = 7;
  if (has_rep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rep(), target);
  }

  // optional .client.raid_verify verify = 8;
  if (has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->verify(), target);
  }

  // optional string value1 = 9;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value1().data(), this->value1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->value1(), target);
  }

  // optional uint32 value2 = 10;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->value2(), target);
  }

  // repeated .client.raid_result_info reward1 = 11;
  for (int i = 0; i < this->reward1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->reward1(i), target);
  }

  // repeated .client.raid_result_info reward2 = 12;
  for (int i = 0; i < this->reward2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reward2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_result_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional .client.raid_success_info success = 5;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .client.raid_failure_info failure = 6;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->failure());
    }

    // optional uint32 rep = 7;
    if (has_rep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rep());
    }

    // optional .client.raid_verify verify = 8;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verify());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string value1 = 9;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value1());
    }

    // optional uint32 value2 = 10;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value2());
    }

  }
  // repeated .client.raid_result_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .client.raid_result_info reward1 = 11;
  total_size += 1 * this->reward1_size();
  for (int i = 0; i < this->reward1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward1(i));
  }

  // repeated .client.raid_result_info reward2 = 12;
  total_size += 1 * this->reward2_size();
  for (int i = 0; i < this->reward2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_result_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_result_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_result_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_result_msg::MergeFrom(const raid_result_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  reward1_.MergeFrom(from.reward1_);
  reward2_.MergeFrom(from.reward2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
    if (from.has_failure()) {
      mutable_failure()->::client::raid_failure_info::MergeFrom(from.failure());
    }
    if (from.has_rep()) {
      set_rep(from.rep());
    }
    if (from.has_verify()) {
      mutable_verify()->::client::raid_verify::MergeFrom(from.verify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_result_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_result_msg::CopyFrom(const raid_result_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_result_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_verify()) {
    if (!this->verify().IsInitialized()) return false;
  }
  for (int i = 0; i < reward1_size(); i++) {
    if (!this->reward1(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward2_size(); i++) {
    if (!this->reward2(i).IsInitialized()) return false;
  }
  return true;
}

void raid_result_msg::Swap(raid_result_msg* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(star_, other->star_);
    std::swap(tick_, other->tick_);
    info_.Swap(&other->info_);
    std::swap(success_, other->success_);
    std::swap(failure_, other->failure_);
    std::swap(rep_, other->rep_);
    std::swap(verify_, other->verify_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    reward1_.Swap(&other->reward1_);
    reward2_.Swap(&other->reward2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_result_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_result_msg_descriptor_;
  metadata.reflection = raid_result_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_npc_creazed::kRaidIdFieldNumber;
#endif  // !_MSC_VER

raid_npc_creazed::raid_npc_creazed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_npc_creazed::InitAsDefaultInstance() {
}

raid_npc_creazed::raid_npc_creazed(const raid_npc_creazed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_npc_creazed::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_npc_creazed::~raid_npc_creazed() {
  SharedDtor();
}

void raid_npc_creazed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_npc_creazed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_npc_creazed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_npc_creazed_descriptor_;
}

const raid_npc_creazed& raid_npc_creazed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_npc_creazed* raid_npc_creazed::default_instance_ = NULL;

raid_npc_creazed* raid_npc_creazed::New() const {
  return new raid_npc_creazed;
}

void raid_npc_creazed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_npc_creazed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_npc_creazed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_npc_creazed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_npc_creazed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_npc_creazed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_npc_creazed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_npc_creazed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_npc_creazed::MergeFrom(const raid_npc_creazed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_npc_creazed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_npc_creazed::CopyFrom(const raid_npc_creazed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_npc_creazed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void raid_npc_creazed::Swap(raid_npc_creazed* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_npc_creazed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_npc_creazed_descriptor_;
  metadata.reflection = raid_npc_creazed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_raid_req::kIdFieldNumber;
const int auto_raid_req::kNumFieldNumber;
const int auto_raid_req::kTFieldNumber;
const int auto_raid_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

auto_raid_req::auto_raid_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_raid_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

auto_raid_req::auto_raid_req(const auto_raid_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_raid_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  t_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_raid_req::~auto_raid_req() {
  SharedDtor();
}

void auto_raid_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void auto_raid_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_raid_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_raid_req_descriptor_;
}

const auto_raid_req& auto_raid_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

auto_raid_req* auto_raid_req::default_instance_ = NULL;

auto_raid_req* auto_raid_req::New() const {
  return new auto_raid_req;
}

void auto_raid_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
    t_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_raid_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t;
        break;
      }

      // optional uint32 t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_raid_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 t = 3;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->t(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_raid_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 t = 3;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->t(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_raid_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 t = 3;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_raid_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_raid_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_raid_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_raid_req::MergeFrom(const auto_raid_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_raid_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_raid_req::CopyFrom(const auto_raid_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_raid_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void auto_raid_req::Swap(auto_raid_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(t_, other->t_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_raid_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_raid_req_descriptor_;
  metadata.reflection = auto_raid_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_raid_rsp::kIdFieldNumber;
#endif  // !_MSC_VER

auto_raid_rsp::auto_raid_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_raid_rsp::InitAsDefaultInstance() {
}

auto_raid_rsp::auto_raid_rsp(const auto_raid_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_raid_rsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_raid_rsp::~auto_raid_rsp() {
  SharedDtor();
}

void auto_raid_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void auto_raid_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_raid_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_raid_rsp_descriptor_;
}

const auto_raid_rsp& auto_raid_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

auto_raid_rsp* auto_raid_rsp::default_instance_ = NULL;

auto_raid_rsp* auto_raid_rsp::New() const {
  return new auto_raid_rsp;
}

void auto_raid_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_raid_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_raid_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_raid_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_raid_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_raid_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_raid_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_raid_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_raid_rsp::MergeFrom(const auto_raid_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_raid_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_raid_rsp::CopyFrom(const auto_raid_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_raid_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void auto_raid_rsp::Swap(auto_raid_rsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_raid_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_raid_rsp_descriptor_;
  metadata.reflection = auto_raid_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_raid_info::kIdFieldNumber;
const int auto_raid_info::kTypeFieldNumber;
const int auto_raid_info::kStartTimeFieldNumber;
const int auto_raid_info::kNeedTimeFieldNumber;
const int auto_raid_info::kFrozenSilverFieldNumber;
const int auto_raid_info::kFrozenPhysicalPowerFieldNumber;
const int auto_raid_info::kCountFieldNumber;
const int auto_raid_info::kMonsterFieldNumber;
const int auto_raid_info::kExpFieldNumber;
const int auto_raid_info::kCoinFieldNumber;
const int auto_raid_info::kMilitaryStrategyFieldNumber;
const int auto_raid_info::kPropsFieldNumber;
#endif  // !_MSC_VER

auto_raid_info::auto_raid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_raid_info::InitAsDefaultInstance() {
}

auto_raid_info::auto_raid_info(const auto_raid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_raid_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  start_time_ = 0u;
  need_time_ = 0u;
  frozen_silver_ = 0u;
  frozen_physical_power_ = 0u;
  count_ = 0u;
  monster_ = 0u;
  exp_ = 0u;
  coin_ = 0u;
  military_strategy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_raid_info::~auto_raid_info() {
  SharedDtor();
}

void auto_raid_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void auto_raid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_raid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_raid_info_descriptor_;
}

const auto_raid_info& auto_raid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

auto_raid_info* auto_raid_info::default_instance_ = NULL;

auto_raid_info* auto_raid_info::New() const {
  return new auto_raid_info;
}

void auto_raid_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    start_time_ = 0u;
    need_time_ = 0u;
    frozen_silver_ = 0u;
    frozen_physical_power_ = 0u;
    count_ = 0u;
    monster_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
    coin_ = 0u;
    military_strategy_ = 0u;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_raid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_time;
        break;
      }

      // required uint32 need_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_time_)));
          set_has_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frozen_silver;
        break;
      }

      // required uint32 frozen_silver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_silver_)));
          set_has_frozen_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_frozen_physical_power;
        break;
      }

      // required uint32 frozen_physical_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_physical_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_physical_power_)));
          set_has_frozen_physical_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // required uint32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_monster;
        break;
      }

      // required uint32 monster = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_)));
          set_has_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // required uint32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }

      // required uint32 coin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_military_strategy;
        break;
      }

      // required uint32 military_strategy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_military_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_strategy_)));
          set_has_military_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        break;
      }

      // repeated .client.props_info props = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_raid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // required uint32 need_time = 4;
  if (has_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->need_time(), output);
  }

  // required uint32 frozen_silver = 5;
  if (has_frozen_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frozen_silver(), output);
  }

  // required uint32 frozen_physical_power = 6;
  if (has_frozen_physical_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->frozen_physical_power(), output);
  }

  // required uint32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // required uint32 monster = 8;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->monster(), output);
  }

  // required uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // required uint32 coin = 10;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->coin(), output);
  }

  // required uint32 military_strategy = 11;
  if (has_military_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->military_strategy(), output);
  }

  // repeated .client.props_info props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_raid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // required uint32 need_time = 4;
  if (has_need_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->need_time(), target);
  }

  // required uint32 frozen_silver = 5;
  if (has_frozen_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frozen_silver(), target);
  }

  // required uint32 frozen_physical_power = 6;
  if (has_frozen_physical_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->frozen_physical_power(), target);
  }

  // required uint32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // required uint32 monster = 8;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->monster(), target);
  }

  // required uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // required uint32 coin = 10;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->coin(), target);
  }

  // required uint32 military_strategy = 11;
  if (has_military_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->military_strategy(), target);
  }

  // repeated .client.props_info props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_raid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // required uint32 need_time = 4;
    if (has_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_time());
    }

    // required uint32 frozen_silver = 5;
    if (has_frozen_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_silver());
    }

    // required uint32 frozen_physical_power = 6;
    if (has_frozen_physical_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_physical_power());
    }

    // required uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 monster = 8;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 coin = 10;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 military_strategy = 11;
    if (has_military_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->military_strategy());
    }

  }
  // repeated .client.props_info props = 12;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_raid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_raid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_raid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_raid_info::MergeFrom(const auto_raid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_need_time()) {
      set_need_time(from.need_time());
    }
    if (from.has_frozen_silver()) {
      set_frozen_silver(from.frozen_silver());
    }
    if (from.has_frozen_physical_power()) {
      set_frozen_physical_power(from.frozen_physical_power());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_monster()) {
      set_monster(from.monster());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_military_strategy()) {
      set_military_strategy(from.military_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_raid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_raid_info::CopyFrom(const auto_raid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_raid_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void auto_raid_info::Swap(auto_raid_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(need_time_, other->need_time_);
    std::swap(frozen_silver_, other->frozen_silver_);
    std::swap(frozen_physical_power_, other->frozen_physical_power_);
    std::swap(count_, other->count_);
    std::swap(monster_, other->monster_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(military_strategy_, other->military_strategy_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_raid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_raid_info_descriptor_;
  metadata.reflection = auto_raid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_raid_msg::kInfoFieldNumber;
#endif  // !_MSC_VER

auto_raid_msg::auto_raid_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_raid_msg::InitAsDefaultInstance() {
  info_ = const_cast< ::client::auto_raid_info*>(&::client::auto_raid_info::default_instance());
}

auto_raid_msg::auto_raid_msg(const auto_raid_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_raid_msg::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_raid_msg::~auto_raid_msg() {
  SharedDtor();
}

void auto_raid_msg::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void auto_raid_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_raid_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_raid_msg_descriptor_;
}

const auto_raid_msg& auto_raid_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

auto_raid_msg* auto_raid_msg::default_instance_ = NULL;

auto_raid_msg* auto_raid_msg::New() const {
  return new auto_raid_msg;
}

void auto_raid_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::client::auto_raid_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_raid_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.auto_raid_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_raid_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.auto_raid_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_raid_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.auto_raid_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_raid_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.auto_raid_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_raid_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_raid_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_raid_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_raid_msg::MergeFrom(const auto_raid_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::client::auto_raid_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_raid_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_raid_msg::CopyFrom(const auto_raid_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_raid_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void auto_raid_msg::Swap(auto_raid_msg* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_raid_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_raid_msg_descriptor_;
  metadata.reflection = auto_raid_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mini_server_req::kOpFieldNumber;
const int mini_server_req::kRaidIdFieldNumber;
const int mini_server_req::kRaidTypeFieldNumber;
const int mini_server_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mini_server_req::mini_server_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mini_server_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mini_server_req::mini_server_req(const mini_server_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mini_server_req::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0u;
  raid_id_ = 0u;
  raid_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mini_server_req::~mini_server_req() {
  SharedDtor();
}

void mini_server_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mini_server_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mini_server_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mini_server_req_descriptor_;
}

const mini_server_req& mini_server_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

mini_server_req* mini_server_req::default_instance_ = NULL;

mini_server_req* mini_server_req::New() const {
  return new mini_server_req;
}

void mini_server_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0u;
    raid_id_ = 0u;
    raid_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mini_server_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid_type;
        break;
      }

      // optional uint32 raid_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mini_server_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->op(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // optional uint32 raid_type = 3;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raid_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mini_server_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->op(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // optional uint32 raid_type = 3;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raid_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mini_server_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional uint32 raid_type = 3;
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mini_server_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mini_server_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mini_server_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mini_server_req::MergeFrom(const mini_server_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mini_server_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mini_server_req::CopyFrom(const mini_server_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mini_server_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mini_server_req::Swap(mini_server_req* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mini_server_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mini_server_req_descriptor_;
  metadata.reflection = mini_server_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mini_server_rsp::kOpFieldNumber;
const int mini_server_rsp::kRaidIdFieldNumber;
const int mini_server_rsp::kRaidTypeFieldNumber;
const int mini_server_rsp::kTimeFieldNumber;
const int mini_server_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

mini_server_rsp::mini_server_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mini_server_rsp::InitAsDefaultInstance() {
}

mini_server_rsp::mini_server_rsp(const mini_server_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mini_server_rsp::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0u;
  raid_id_ = 0u;
  raid_type_ = 0u;
  time_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mini_server_rsp::~mini_server_rsp() {
  SharedDtor();
}

void mini_server_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mini_server_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mini_server_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mini_server_rsp_descriptor_;
}

const mini_server_rsp& mini_server_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

mini_server_rsp* mini_server_rsp::default_instance_ = NULL;

mini_server_rsp* mini_server_rsp::New() const {
  return new mini_server_rsp;
}

void mini_server_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0u;
    raid_id_ = 0u;
    raid_type_ = 0u;
    time_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mini_server_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid_type;
        break;
      }

      // optional uint32 raid_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // required uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mini_server_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->op(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // optional uint32 raid_type = 3;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raid_type(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mini_server_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->op(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // optional uint32 raid_type = 3;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raid_type(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mini_server_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional uint32 raid_type = 3;
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_type());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mini_server_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mini_server_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mini_server_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mini_server_rsp::MergeFrom(const mini_server_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mini_server_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mini_server_rsp::CopyFrom(const mini_server_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mini_server_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void mini_server_rsp::Swap(mini_server_rsp* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(time_, other->time_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mini_server_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mini_server_rsp_descriptor_;
  metadata.reflection = mini_server_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mini_server_end_msg::kMsgFieldNumber;
const int mini_server_end_msg::kRepFieldNumber;
#endif  // !_MSC_VER

mini_server_end_msg::mini_server_end_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mini_server_end_msg::InitAsDefaultInstance() {
  msg_ = const_cast< ::client::raid_result_msg*>(&::client::raid_result_msg::default_instance());
}

mini_server_end_msg::mini_server_end_msg(const mini_server_end_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mini_server_end_msg::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  rep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mini_server_end_msg::~mini_server_end_msg() {
  SharedDtor();
}

void mini_server_end_msg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void mini_server_end_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mini_server_end_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mini_server_end_msg_descriptor_;
}

const mini_server_end_msg& mini_server_end_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

mini_server_end_msg* mini_server_end_msg::default_instance_ = NULL;

mini_server_end_msg* mini_server_end_msg::New() const {
  return new mini_server_end_msg;
}

void mini_server_end_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::client::raid_result_msg::Clear();
    }
    rep_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mini_server_end_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.raid_result_msg msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rep;
        break;
      }

      // optional uint32 rep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rep_)));
          set_has_rep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mini_server_end_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.raid_result_msg msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  // optional uint32 rep = 2;
  if (has_rep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mini_server_end_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.raid_result_msg msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  // optional uint32 rep = 2;
  if (has_rep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mini_server_end_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.raid_result_msg msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional uint32 rep = 2;
    if (has_rep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mini_server_end_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mini_server_end_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mini_server_end_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mini_server_end_msg::MergeFrom(const mini_server_end_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::client::raid_result_msg::MergeFrom(from.msg());
    }
    if (from.has_rep()) {
      set_rep(from.rep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mini_server_end_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mini_server_end_msg::CopyFrom(const mini_server_end_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mini_server_end_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void mini_server_end_msg::Swap(mini_server_end_msg* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(rep_, other->rep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mini_server_end_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mini_server_end_msg_descriptor_;
  metadata.reflection = mini_server_end_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int raid_verify::kMaxHpFieldNumber;
const int raid_verify::kMaxAtkFieldNumber;
const int raid_verify::kMaxDefFieldNumber;
const int raid_verify::kBowIndexFieldNumber;
#endif  // !_MSC_VER

raid_verify::raid_verify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void raid_verify::InitAsDefaultInstance() {
}

raid_verify::raid_verify(const raid_verify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void raid_verify::SharedCtor() {
  _cached_size_ = 0;
  max_hp_ = 0u;
  max_atk_ = 0u;
  max_def_ = 0u;
  bow_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

raid_verify::~raid_verify() {
  SharedDtor();
}

void raid_verify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void raid_verify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* raid_verify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raid_verify_descriptor_;
}

const raid_verify& raid_verify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

raid_verify* raid_verify::default_instance_ = NULL;

raid_verify* raid_verify::New() const {
  return new raid_verify;
}

void raid_verify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_hp_ = 0u;
    max_atk_ = 0u;
    max_def_ = 0u;
    bow_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool raid_verify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_atk;
        break;
      }

      // required uint32 max_atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_atk_)));
          set_has_max_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_def;
        break;
      }

      // required uint32 max_def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_def_)));
          set_has_max_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bow_index;
        break;
      }

      // required uint32 bow_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_index_)));
          set_has_bow_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void raid_verify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_hp = 1;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_hp(), output);
  }

  // required uint32 max_atk = 2;
  if (has_max_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_atk(), output);
  }

  // required uint32 max_def = 3;
  if (has_max_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_def(), output);
  }

  // required uint32 bow_index = 4;
  if (has_bow_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bow_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* raid_verify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 max_hp = 1;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_hp(), target);
  }

  // required uint32 max_atk = 2;
  if (has_max_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_atk(), target);
  }

  // required uint32 max_def = 3;
  if (has_max_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_def(), target);
  }

  // required uint32 bow_index = 4;
  if (has_bow_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bow_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int raid_verify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_hp = 1;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }

    // required uint32 max_atk = 2;
    if (has_max_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_atk());
    }

    // required uint32 max_def = 3;
    if (has_max_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_def());
    }

    // required uint32 bow_index = 4;
    if (has_bow_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void raid_verify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const raid_verify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const raid_verify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void raid_verify::MergeFrom(const raid_verify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_max_atk()) {
      set_max_atk(from.max_atk());
    }
    if (from.has_max_def()) {
      set_max_def(from.max_def());
    }
    if (from.has_bow_index()) {
      set_bow_index(from.bow_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void raid_verify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raid_verify::CopyFrom(const raid_verify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raid_verify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void raid_verify::Swap(raid_verify* other) {
  if (other != this) {
    std::swap(max_hp_, other->max_hp_);
    std::swap(max_atk_, other->max_atk_);
    std::swap(max_def_, other->max_def_);
    std::swap(bow_index_, other->bow_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata raid_verify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = raid_verify_descriptor_;
  metadata.reflection = raid_verify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reported_raid_info::kIdFieldNumber;
const int reported_raid_info::kStarFieldNumber;
const int reported_raid_info::kUsedTickFieldNumber;
const int reported_raid_info::kCompleteTimeFieldNumber;
const int reported_raid_info::kTypeFieldNumber;
const int reported_raid_info::kTimeFieldNumber;
const int reported_raid_info::kKeyFieldNumber;
const int reported_raid_info::kSuccessFieldNumber;
const int reported_raid_info::kFailureFieldNumber;
const int reported_raid_info::kVerifyFieldNumber;
#endif  // !_MSC_VER

reported_raid_info::reported_raid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reported_raid_info::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
  failure_ = const_cast< ::client::raid_failure_info*>(&::client::raid_failure_info::default_instance());
  verify_ = const_cast< ::client::raid_verify*>(&::client::raid_verify::default_instance());
}

reported_raid_info::reported_raid_info(const reported_raid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reported_raid_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  used_tick_ = 0u;
  complete_time_ = 0u;
  type_ = 0u;
  time_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  success_ = NULL;
  failure_ = NULL;
  verify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reported_raid_info::~reported_raid_info() {
  SharedDtor();
}

void reported_raid_info::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete success_;
    delete failure_;
    delete verify_;
  }
}

void reported_raid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reported_raid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reported_raid_info_descriptor_;
}

const reported_raid_info& reported_raid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

reported_raid_info* reported_raid_info::default_instance_ = NULL;

reported_raid_info* reported_raid_info::New() const {
  return new reported_raid_info;
}

void reported_raid_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    star_ = 0u;
    used_tick_ = 0u;
    complete_time_ = 0u;
    type_ = 0u;
    time_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_failure()) {
      if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
    }
    if (has_verify()) {
      if (verify_ != NULL) verify_->::client::raid_verify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reported_raid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_tick;
        break;
      }

      // required uint32 used_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_tick_)));
          set_has_used_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_complete_time;
        break;
      }

      // required uint32 complete_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_time_)));
          set_has_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // required string key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_failure;
        break;
      }

      // optional .client.raid_failure_info failure = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_verify;
        break;
      }

      // required .client.raid_verify verify = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reported_raid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 used_tick = 3;
  if (has_used_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->used_tick(), output);
  }

  // required uint32 complete_time = 4;
  if (has_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->complete_time(), output);
  }

  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // required string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->key(), output);
  }

  // optional .client.raid_success_info success = 8;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->success(), output);
  }

  // optional .client.raid_failure_info failure = 9;
  if (has_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->failure(), output);
  }

  // required .client.raid_verify verify = 10;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->verify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reported_raid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 used_tick = 3;
  if (has_used_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_tick(), target);
  }

  // required uint32 complete_time = 4;
  if (has_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->complete_time(), target);
  }

  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // required string key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional .client.raid_success_info success = 8;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->success(), target);
  }

  // optional .client.raid_failure_info failure = 9;
  if (has_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->failure(), target);
  }

  // required .client.raid_verify verify = 10;
  if (has_verify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->verify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reported_raid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 used_tick = 3;
    if (has_used_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_tick());
    }

    // required uint32 complete_time = 4;
    if (has_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_time());
    }

    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required string key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .client.raid_success_info success = 8;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client.raid_failure_info failure = 9;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->failure());
    }

    // required .client.raid_verify verify = 10;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reported_raid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reported_raid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reported_raid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reported_raid_info::MergeFrom(const reported_raid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_used_tick()) {
      set_used_tick(from.used_tick());
    }
    if (from.has_complete_time()) {
      set_complete_time(from.complete_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_failure()) {
      mutable_failure()->::client::raid_failure_info::MergeFrom(from.failure());
    }
    if (from.has_verify()) {
      mutable_verify()->::client::raid_verify::MergeFrom(from.verify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reported_raid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reported_raid_info::CopyFrom(const reported_raid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reported_raid_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_verify()) {
    if (!this->verify().IsInitialized()) return false;
  }
  return true;
}

void reported_raid_info::Swap(reported_raid_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(used_tick_, other->used_tick_);
    std::swap(complete_time_, other->complete_time_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(key_, other->key_);
    std::swap(success_, other->success_);
    std::swap(failure_, other->failure_);
    std::swap(verify_, other->verify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reported_raid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reported_raid_info_descriptor_;
  metadata.reflection = reported_raid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reported_raid_req::kRriFieldNumber;
const int reported_raid_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

reported_raid_req::reported_raid_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reported_raid_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

reported_raid_req::reported_raid_req(const reported_raid_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reported_raid_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reported_raid_req::~reported_raid_req() {
  SharedDtor();
}

void reported_raid_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void reported_raid_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reported_raid_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reported_raid_req_descriptor_;
}

const reported_raid_req& reported_raid_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

reported_raid_req* reported_raid_req::default_instance_ = NULL;

reported_raid_req* reported_raid_req::New() const {
  return new reported_raid_req;
}

void reported_raid_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  rri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reported_raid_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.reported_raid_info rri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rri;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reported_raid_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.reported_raid_info rri = 1;
  for (int i = 0; i < this->rri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rri(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reported_raid_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.reported_raid_info rri = 1;
  for (int i = 0; i < this->rri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rri(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reported_raid_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.reported_raid_info rri = 1;
  total_size += 1 * this->rri_size();
  for (int i = 0; i < this->rri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reported_raid_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reported_raid_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reported_raid_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reported_raid_req::MergeFrom(const reported_raid_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  rri_.MergeFrom(from.rri_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reported_raid_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reported_raid_req::CopyFrom(const reported_raid_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reported_raid_req::IsInitialized() const {

  for (int i = 0; i < rri_size(); i++) {
    if (!this->rri(i).IsInitialized()) return false;
  }
  return true;
}

void reported_raid_req::Swap(reported_raid_req* other) {
  if (other != this) {
    rri_.Swap(&other->rri_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reported_raid_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reported_raid_req_descriptor_;
  metadata.reflection = reported_raid_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_npc_msg::kContentFieldNumber;
const int create_npc_msg::kDelayFieldNumber;
const int create_npc_msg::kShowFieldNumber;
#endif  // !_MSC_VER

create_npc_msg::create_npc_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_npc_msg::InitAsDefaultInstance() {
}

create_npc_msg::create_npc_msg(const create_npc_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_npc_msg::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_ = 0u;
  show_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_npc_msg::~create_npc_msg() {
  SharedDtor();
}

void create_npc_msg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void create_npc_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_npc_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_npc_msg_descriptor_;
}

const create_npc_msg& create_npc_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

create_npc_msg* create_npc_msg::default_instance_ = NULL;

create_npc_msg* create_npc_msg::New() const {
  return new create_npc_msg;
}

void create_npc_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    delay_ = 0u;
    show_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_npc_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // required uint32 delay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show;
        break;
      }

      // required uint32 show = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_npc_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay(), output);
  }

  // required uint32 show = 3;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_npc_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay(), target);
  }

  // required uint32 show = 3;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_npc_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // required uint32 show = 3;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_npc_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_npc_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_npc_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_npc_msg::MergeFrom(const create_npc_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_npc_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_npc_msg::CopyFrom(const create_npc_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_npc_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void create_npc_msg::Swap(create_npc_msg* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(delay_, other->delay_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_npc_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_npc_msg_descriptor_;
  metadata.reflection = create_npc_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dead_in_raid::kTimeFieldNumber;
#endif  // !_MSC_VER

dead_in_raid::dead_in_raid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dead_in_raid::InitAsDefaultInstance() {
}

dead_in_raid::dead_in_raid(const dead_in_raid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dead_in_raid::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dead_in_raid::~dead_in_raid() {
  SharedDtor();
}

void dead_in_raid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dead_in_raid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dead_in_raid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dead_in_raid_descriptor_;
}

const dead_in_raid& dead_in_raid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  return *default_instance_;
}

dead_in_raid* dead_in_raid::default_instance_ = NULL;

dead_in_raid* dead_in_raid::New() const {
  return new dead_in_raid;
}

void dead_in_raid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dead_in_raid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dead_in_raid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dead_in_raid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dead_in_raid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dead_in_raid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dead_in_raid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dead_in_raid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dead_in_raid::MergeFrom(const dead_in_raid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dead_in_raid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dead_in_raid::CopyFrom(const dead_in_raid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dead_in_raid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dead_in_raid::Swap(dead_in_raid* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dead_in_raid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dead_in_raid_descriptor_;
  metadata.reflection = dead_in_raid_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
