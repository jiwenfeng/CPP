// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.land_raid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.land_raid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* land_tax_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_tax_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_land_tax_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_land_tax_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_land_tax_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_land_tax_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_land_tax_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_land_tax_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_land_tax_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_land_tax_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_lucky_star_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_lucky_star_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_lucky_star_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_lucky_star_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_land_tax_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_land_tax_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_land_tax_reward_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_land_tax_reward_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_pay_tax_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_pay_tax_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_pay_tax_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_pay_tax_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_land_tax_reward_via_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_land_tax_reward_via_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eland_5fraid_2eproto() {
  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.land_raid.proto");
  GOOGLE_CHECK(file != NULL);
  land_tax_info_descriptor_ = file->message_type(0);
  static const int land_tax_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, power_),
  };
  land_tax_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_tax_info_descriptor_,
      land_tax_info::default_instance_,
      land_tax_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_tax_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_tax_info));
  get_land_tax_req_descriptor_ = file->message_type(1);
  static const int get_land_tax_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_req, svr_head_),
  };
  get_land_tax_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_land_tax_req_descriptor_,
      get_land_tax_req::default_instance_,
      get_land_tax_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_land_tax_req));
  get_land_tax_rsp_descriptor_ = file->message_type(2);
  static const int get_land_tax_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_rsp, all_tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_rsp, cur_),
  };
  get_land_tax_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_land_tax_rsp_descriptor_,
      get_land_tax_rsp::default_instance_,
      get_land_tax_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_land_tax_rsp));
  set_land_tax_req_descriptor_ = file->message_type(3);
  static const int set_land_tax_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_req, lti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_req, svr_head_),
  };
  set_land_tax_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_land_tax_req_descriptor_,
      set_land_tax_req::default_instance_,
      set_land_tax_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_land_tax_req));
  set_land_tax_rsp_descriptor_ = file->message_type(4);
  static const int set_land_tax_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_rsp, lti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_rsp, ret_),
  };
  set_land_tax_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_land_tax_rsp_descriptor_,
      set_land_tax_rsp::default_instance_,
      set_land_tax_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_land_tax_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_land_tax_rsp));
  land_lucky_star_req_descriptor_ = file->message_type(5);
  static const int land_lucky_star_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_req, svr_head_),
  };
  land_lucky_star_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_lucky_star_req_descriptor_,
      land_lucky_star_req::default_instance_,
      land_lucky_star_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_lucky_star_req));
  land_lucky_star_rsp_descriptor_ = file->message_type(6);
  static const int land_lucky_star_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_rsp, role_id_),
  };
  land_lucky_star_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_lucky_star_rsp_descriptor_,
      land_lucky_star_rsp::default_instance_,
      land_lucky_star_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_lucky_star_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_lucky_star_rsp));
  get_land_tax_reward_req_descriptor_ = file->message_type(7);
  static const int get_land_tax_reward_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_req, svr_head_),
  };
  get_land_tax_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_land_tax_reward_req_descriptor_,
      get_land_tax_reward_req::default_instance_,
      get_land_tax_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_land_tax_reward_req));
  get_land_tax_reward_rsp_descriptor_ = file->message_type(8);
  static const int get_land_tax_reward_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_rsp, ret_),
  };
  get_land_tax_reward_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_land_tax_reward_rsp_descriptor_,
      get_land_tax_reward_rsp::default_instance_,
      get_land_tax_reward_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_land_tax_reward_rsp));
  land_pay_tax_req_descriptor_ = file->message_type(9);
  static const int land_pay_tax_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, coin_),
  };
  land_pay_tax_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_pay_tax_req_descriptor_,
      land_pay_tax_req::default_instance_,
      land_pay_tax_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_pay_tax_req));
  land_pay_tax_rsp_descriptor_ = file->message_type(10);
  static const int land_pay_tax_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, coin_),
  };
  land_pay_tax_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_pay_tax_rsp_descriptor_,
      land_pay_tax_rsp::default_instance_,
      land_pay_tax_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_pay_tax_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_pay_tax_rsp));
  get_land_tax_reward_via_descriptor_ = file->message_type(11);
  static const int get_land_tax_reward_via_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_via, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_via, coin_),
  };
  get_land_tax_reward_via_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_land_tax_reward_via_descriptor_,
      get_land_tax_reward_via::default_instance_,
      get_land_tax_reward_via_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_via, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_land_tax_reward_via, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_land_tax_reward_via));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eland_5fraid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_tax_info_descriptor_, &land_tax_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_land_tax_req_descriptor_, &get_land_tax_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_land_tax_rsp_descriptor_, &get_land_tax_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_land_tax_req_descriptor_, &set_land_tax_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_land_tax_rsp_descriptor_, &set_land_tax_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_lucky_star_req_descriptor_, &land_lucky_star_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_lucky_star_rsp_descriptor_, &land_lucky_star_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_land_tax_reward_req_descriptor_, &get_land_tax_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_land_tax_reward_rsp_descriptor_, &get_land_tax_reward_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_pay_tax_req_descriptor_, &land_pay_tax_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_pay_tax_rsp_descriptor_, &land_pay_tax_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_land_tax_reward_via_descriptor_, &get_land_tax_reward_via::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eland_5fraid_2eproto() {
  delete land_tax_info::default_instance_;
  delete land_tax_info_reflection_;
  delete get_land_tax_req::default_instance_;
  delete get_land_tax_req_reflection_;
  delete get_land_tax_rsp::default_instance_;
  delete get_land_tax_rsp_reflection_;
  delete set_land_tax_req::default_instance_;
  delete set_land_tax_req_reflection_;
  delete set_land_tax_rsp::default_instance_;
  delete set_land_tax_rsp_reflection_;
  delete land_lucky_star_req::default_instance_;
  delete land_lucky_star_req_reflection_;
  delete land_lucky_star_rsp::default_instance_;
  delete land_lucky_star_rsp_reflection_;
  delete get_land_tax_reward_req::default_instance_;
  delete get_land_tax_reward_req_reflection_;
  delete get_land_tax_reward_rsp::default_instance_;
  delete get_land_tax_reward_rsp_reflection_;
  delete land_pay_tax_req::default_instance_;
  delete land_pay_tax_req_reflection_;
  delete land_pay_tax_rsp::default_instance_;
  delete land_pay_tax_rsp_reflection_;
  delete get_land_tax_reward_via::default_instance_;
  delete get_land_tax_reward_via_reflection_;
}

void protobuf_AddDesc_client_2eland_5fraid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026client.land_raid.proto\022\006client\032\021client"
    ".comm.proto\"X\n\rland_tax_info\022\014\n\004rank\030\001 \002"
    "(\r\022\013\n\003tax\030\002 \002(\r\022\014\n\004coin\030\003 \002(\r\022\017\n\007role_id"
    "\030\004 \001(\r\022\r\n\005power\030\005 \001(\r\"L\n\020get_land_tax_re"
    "q\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"G\n\020get_land_tax_rsp\022"
    "\017\n\007all_tax\030\001 \002(\r\022\"\n\003cur\030\002 \003(\0132\025.client.l"
    "and_tax_info\"^\n\020set_land_tax_req\022\"\n\003lti\030"
    "\001 \003(\0132\025.client.land_tax_info\022&\n\010svr_head"
    "\030\350\007 \001(\0132\023.client.server_head\"C\n\020set_land"
    "_tax_rsp\022\"\n\003lti\030\001 \003(\0132\025.client.land_tax_"
    "info\022\013\n\003ret\030\002 \002(\r\"O\n\023land_lucky_star_req"
    "\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"&\n\023land_lucky_star_rs"
    "p\022\017\n\007role_id\030\001 \002(\r\"S\n\027get_land_tax_rewar"
    "d_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"&\n\027get_land_tax_"
    "reward_rsp\022\013\n\003ret\030\001 \002(\r\"S\n\020land_pay_tax_"
    "req\022\017\n\007role_id\030\001 \002(\r\022\r\n\005power\030\002 \002(\r\022\021\n\tf"
    "amily_id\030\003 \002(\r\022\014\n\004coin\030\004 \002(\r\"S\n\020land_pay"
    "_tax_rsp\022\017\n\007role_id\030\001 \002(\r\022\r\n\005power\030\002 \002(\r"
    "\022\021\n\tfamily_Id\030\003 \002(\r\022\014\n\004coin\030\004 \002(\r\"8\n\027get"
    "_land_tax_reward_via\022\017\n\007role_id\030\001 \002(\r\022\014\n"
    "\004coin\030\002 \002(\r", 931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.land_raid.proto", &protobuf_RegisterTypes);
  land_tax_info::default_instance_ = new land_tax_info();
  get_land_tax_req::default_instance_ = new get_land_tax_req();
  get_land_tax_rsp::default_instance_ = new get_land_tax_rsp();
  set_land_tax_req::default_instance_ = new set_land_tax_req();
  set_land_tax_rsp::default_instance_ = new set_land_tax_rsp();
  land_lucky_star_req::default_instance_ = new land_lucky_star_req();
  land_lucky_star_rsp::default_instance_ = new land_lucky_star_rsp();
  get_land_tax_reward_req::default_instance_ = new get_land_tax_reward_req();
  get_land_tax_reward_rsp::default_instance_ = new get_land_tax_reward_rsp();
  land_pay_tax_req::default_instance_ = new land_pay_tax_req();
  land_pay_tax_rsp::default_instance_ = new land_pay_tax_rsp();
  get_land_tax_reward_via::default_instance_ = new get_land_tax_reward_via();
  land_tax_info::default_instance_->InitAsDefaultInstance();
  get_land_tax_req::default_instance_->InitAsDefaultInstance();
  get_land_tax_rsp::default_instance_->InitAsDefaultInstance();
  set_land_tax_req::default_instance_->InitAsDefaultInstance();
  set_land_tax_rsp::default_instance_->InitAsDefaultInstance();
  land_lucky_star_req::default_instance_->InitAsDefaultInstance();
  land_lucky_star_rsp::default_instance_->InitAsDefaultInstance();
  get_land_tax_reward_req::default_instance_->InitAsDefaultInstance();
  get_land_tax_reward_rsp::default_instance_->InitAsDefaultInstance();
  land_pay_tax_req::default_instance_->InitAsDefaultInstance();
  land_pay_tax_rsp::default_instance_->InitAsDefaultInstance();
  get_land_tax_reward_via::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eland_5fraid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eland_5fraid_2eproto {
  StaticDescriptorInitializer_client_2eland_5fraid_2eproto() {
    protobuf_AddDesc_client_2eland_5fraid_2eproto();
  }
} static_descriptor_initializer_client_2eland_5fraid_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int land_tax_info::kRankFieldNumber;
const int land_tax_info::kTaxFieldNumber;
const int land_tax_info::kCoinFieldNumber;
const int land_tax_info::kRoleIdFieldNumber;
const int land_tax_info::kPowerFieldNumber;
#endif  // !_MSC_VER

land_tax_info::land_tax_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_tax_info::InitAsDefaultInstance() {
}

land_tax_info::land_tax_info(const land_tax_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_tax_info::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  tax_ = 0u;
  coin_ = 0u;
  role_id_ = 0u;
  power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_tax_info::~land_tax_info() {
  SharedDtor();
}

void land_tax_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_tax_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_tax_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_tax_info_descriptor_;
}

const land_tax_info& land_tax_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

land_tax_info* land_tax_info::default_instance_ = NULL;

land_tax_info* land_tax_info::New() const {
  return new land_tax_info;
}

void land_tax_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    tax_ = 0u;
    coin_ = 0u;
    role_id_ = 0u;
    power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_tax_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tax;
        break;
      }

      // required uint32 tax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // required uint32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional uint32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_tax_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 tax = 2;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tax(), output);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // optional uint32 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_id(), output);
  }

  // optional uint32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_tax_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 tax = 2;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tax(), target);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // optional uint32 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_id(), target);
  }

  // optional uint32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_tax_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 tax = 2;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax());
    }

    // required uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_tax_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_tax_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_tax_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_tax_info::MergeFrom(const land_tax_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_tax_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_tax_info::CopyFrom(const land_tax_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_tax_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void land_tax_info::Swap(land_tax_info* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(tax_, other->tax_);
    std::swap(coin_, other->coin_);
    std::swap(role_id_, other->role_id_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_tax_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_tax_info_descriptor_;
  metadata.reflection = land_tax_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_land_tax_req::kUnixtimeFieldNumber;
const int get_land_tax_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

get_land_tax_req::get_land_tax_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_land_tax_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

get_land_tax_req::get_land_tax_req(const get_land_tax_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_land_tax_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_land_tax_req::~get_land_tax_req() {
  SharedDtor();
}

void get_land_tax_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void get_land_tax_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_land_tax_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_land_tax_req_descriptor_;
}

const get_land_tax_req& get_land_tax_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

get_land_tax_req* get_land_tax_req::default_instance_ = NULL;

get_land_tax_req* get_land_tax_req::New() const {
  return new get_land_tax_req;
}

void get_land_tax_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_land_tax_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_land_tax_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_land_tax_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_land_tax_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_land_tax_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_land_tax_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_land_tax_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_land_tax_req::MergeFrom(const get_land_tax_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_land_tax_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_land_tax_req::CopyFrom(const get_land_tax_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_land_tax_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_land_tax_req::Swap(get_land_tax_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_land_tax_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_land_tax_req_descriptor_;
  metadata.reflection = get_land_tax_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_land_tax_rsp::kAllTaxFieldNumber;
const int get_land_tax_rsp::kCurFieldNumber;
#endif  // !_MSC_VER

get_land_tax_rsp::get_land_tax_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_land_tax_rsp::InitAsDefaultInstance() {
}

get_land_tax_rsp::get_land_tax_rsp(const get_land_tax_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_land_tax_rsp::SharedCtor() {
  _cached_size_ = 0;
  all_tax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_land_tax_rsp::~get_land_tax_rsp() {
  SharedDtor();
}

void get_land_tax_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_land_tax_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_land_tax_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_land_tax_rsp_descriptor_;
}

const get_land_tax_rsp& get_land_tax_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

get_land_tax_rsp* get_land_tax_rsp::default_instance_ = NULL;

get_land_tax_rsp* get_land_tax_rsp::New() const {
  return new get_land_tax_rsp;
}

void get_land_tax_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    all_tax_ = 0u;
  }
  cur_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_land_tax_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 all_tax = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_tax_)));
          set_has_all_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur;
        break;
      }

      // repeated .client.land_tax_info cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cur()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_land_tax_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 all_tax = 1;
  if (has_all_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->all_tax(), output);
  }

  // repeated .client.land_tax_info cur = 2;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cur(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_land_tax_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 all_tax = 1;
  if (has_all_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->all_tax(), target);
  }

  // repeated .client.land_tax_info cur = 2;
  for (int i = 0; i < this->cur_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cur(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_land_tax_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 all_tax = 1;
    if (has_all_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_tax());
    }

  }
  // repeated .client.land_tax_info cur = 2;
  total_size += 1 * this->cur_size();
  for (int i = 0; i < this->cur_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cur(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_land_tax_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_land_tax_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_land_tax_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_land_tax_rsp::MergeFrom(const get_land_tax_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_.MergeFrom(from.cur_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all_tax()) {
      set_all_tax(from.all_tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_land_tax_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_land_tax_rsp::CopyFrom(const get_land_tax_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_land_tax_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cur_size(); i++) {
    if (!this->cur(i).IsInitialized()) return false;
  }
  return true;
}

void get_land_tax_rsp::Swap(get_land_tax_rsp* other) {
  if (other != this) {
    std::swap(all_tax_, other->all_tax_);
    cur_.Swap(&other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_land_tax_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_land_tax_rsp_descriptor_;
  metadata.reflection = get_land_tax_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_land_tax_req::kLtiFieldNumber;
const int set_land_tax_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

set_land_tax_req::set_land_tax_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_land_tax_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

set_land_tax_req::set_land_tax_req(const set_land_tax_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_land_tax_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_land_tax_req::~set_land_tax_req() {
  SharedDtor();
}

void set_land_tax_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void set_land_tax_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_land_tax_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_land_tax_req_descriptor_;
}

const set_land_tax_req& set_land_tax_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

set_land_tax_req* set_land_tax_req::default_instance_ = NULL;

set_land_tax_req* set_land_tax_req::New() const {
  return new set_land_tax_req;
}

void set_land_tax_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  lti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_land_tax_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.land_tax_info lti = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lti;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_land_tax_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.land_tax_info lti = 1;
  for (int i = 0; i < this->lti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lti(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_land_tax_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.land_tax_info lti = 1;
  for (int i = 0; i < this->lti_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lti(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_land_tax_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.land_tax_info lti = 1;
  total_size += 1 * this->lti_size();
  for (int i = 0; i < this->lti_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lti(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_land_tax_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_land_tax_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_land_tax_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_land_tax_req::MergeFrom(const set_land_tax_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  lti_.MergeFrom(from.lti_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_land_tax_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_land_tax_req::CopyFrom(const set_land_tax_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_land_tax_req::IsInitialized() const {

  for (int i = 0; i < lti_size(); i++) {
    if (!this->lti(i).IsInitialized()) return false;
  }
  return true;
}

void set_land_tax_req::Swap(set_land_tax_req* other) {
  if (other != this) {
    lti_.Swap(&other->lti_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_land_tax_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_land_tax_req_descriptor_;
  metadata.reflection = set_land_tax_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_land_tax_rsp::kLtiFieldNumber;
const int set_land_tax_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

set_land_tax_rsp::set_land_tax_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_land_tax_rsp::InitAsDefaultInstance() {
}

set_land_tax_rsp::set_land_tax_rsp(const set_land_tax_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_land_tax_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_land_tax_rsp::~set_land_tax_rsp() {
  SharedDtor();
}

void set_land_tax_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_land_tax_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_land_tax_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_land_tax_rsp_descriptor_;
}

const set_land_tax_rsp& set_land_tax_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

set_land_tax_rsp* set_land_tax_rsp::default_instance_ = NULL;

set_land_tax_rsp* set_land_tax_rsp::New() const {
  return new set_land_tax_rsp;
}

void set_land_tax_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0u;
  }
  lti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_land_tax_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.land_tax_info lti = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lti;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_land_tax_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.land_tax_info lti = 1;
  for (int i = 0; i < this->lti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lti(i), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_land_tax_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.land_tax_info lti = 1;
  for (int i = 0; i < this->lti_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lti(i), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_land_tax_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .client.land_tax_info lti = 1;
  total_size += 1 * this->lti_size();
  for (int i = 0; i < this->lti_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lti(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_land_tax_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_land_tax_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_land_tax_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_land_tax_rsp::MergeFrom(const set_land_tax_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lti_.MergeFrom(from.lti_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_land_tax_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_land_tax_rsp::CopyFrom(const set_land_tax_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_land_tax_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < lti_size(); i++) {
    if (!this->lti(i).IsInitialized()) return false;
  }
  return true;
}

void set_land_tax_rsp::Swap(set_land_tax_rsp* other) {
  if (other != this) {
    lti_.Swap(&other->lti_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_land_tax_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_land_tax_rsp_descriptor_;
  metadata.reflection = set_land_tax_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_lucky_star_req::kUnixtimeFieldNumber;
const int land_lucky_star_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

land_lucky_star_req::land_lucky_star_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_lucky_star_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

land_lucky_star_req::land_lucky_star_req(const land_lucky_star_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_lucky_star_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_lucky_star_req::~land_lucky_star_req() {
  SharedDtor();
}

void land_lucky_star_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void land_lucky_star_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_lucky_star_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_lucky_star_req_descriptor_;
}

const land_lucky_star_req& land_lucky_star_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

land_lucky_star_req* land_lucky_star_req::default_instance_ = NULL;

land_lucky_star_req* land_lucky_star_req::New() const {
  return new land_lucky_star_req;
}

void land_lucky_star_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_lucky_star_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_lucky_star_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_lucky_star_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_lucky_star_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_lucky_star_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_lucky_star_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_lucky_star_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_lucky_star_req::MergeFrom(const land_lucky_star_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_lucky_star_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_lucky_star_req::CopyFrom(const land_lucky_star_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_lucky_star_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void land_lucky_star_req::Swap(land_lucky_star_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_lucky_star_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_lucky_star_req_descriptor_;
  metadata.reflection = land_lucky_star_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_lucky_star_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

land_lucky_star_rsp::land_lucky_star_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_lucky_star_rsp::InitAsDefaultInstance() {
}

land_lucky_star_rsp::land_lucky_star_rsp(const land_lucky_star_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_lucky_star_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_lucky_star_rsp::~land_lucky_star_rsp() {
  SharedDtor();
}

void land_lucky_star_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_lucky_star_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_lucky_star_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_lucky_star_rsp_descriptor_;
}

const land_lucky_star_rsp& land_lucky_star_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

land_lucky_star_rsp* land_lucky_star_rsp::default_instance_ = NULL;

land_lucky_star_rsp* land_lucky_star_rsp::New() const {
  return new land_lucky_star_rsp;
}

void land_lucky_star_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_lucky_star_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_lucky_star_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_lucky_star_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_lucky_star_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_lucky_star_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_lucky_star_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_lucky_star_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_lucky_star_rsp::MergeFrom(const land_lucky_star_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_lucky_star_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_lucky_star_rsp::CopyFrom(const land_lucky_star_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_lucky_star_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void land_lucky_star_rsp::Swap(land_lucky_star_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_lucky_star_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_lucky_star_rsp_descriptor_;
  metadata.reflection = land_lucky_star_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_land_tax_reward_req::kUnixtimeFieldNumber;
const int get_land_tax_reward_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

get_land_tax_reward_req::get_land_tax_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_land_tax_reward_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

get_land_tax_reward_req::get_land_tax_reward_req(const get_land_tax_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_land_tax_reward_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_land_tax_reward_req::~get_land_tax_reward_req() {
  SharedDtor();
}

void get_land_tax_reward_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void get_land_tax_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_land_tax_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_land_tax_reward_req_descriptor_;
}

const get_land_tax_reward_req& get_land_tax_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

get_land_tax_reward_req* get_land_tax_reward_req::default_instance_ = NULL;

get_land_tax_reward_req* get_land_tax_reward_req::New() const {
  return new get_land_tax_reward_req;
}

void get_land_tax_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_land_tax_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_land_tax_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_land_tax_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_land_tax_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_land_tax_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_land_tax_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_land_tax_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_land_tax_reward_req::MergeFrom(const get_land_tax_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_land_tax_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_land_tax_reward_req::CopyFrom(const get_land_tax_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_land_tax_reward_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_land_tax_reward_req::Swap(get_land_tax_reward_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_land_tax_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_land_tax_reward_req_descriptor_;
  metadata.reflection = get_land_tax_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_land_tax_reward_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

get_land_tax_reward_rsp::get_land_tax_reward_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_land_tax_reward_rsp::InitAsDefaultInstance() {
}

get_land_tax_reward_rsp::get_land_tax_reward_rsp(const get_land_tax_reward_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_land_tax_reward_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_land_tax_reward_rsp::~get_land_tax_reward_rsp() {
  SharedDtor();
}

void get_land_tax_reward_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_land_tax_reward_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_land_tax_reward_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_land_tax_reward_rsp_descriptor_;
}

const get_land_tax_reward_rsp& get_land_tax_reward_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

get_land_tax_reward_rsp* get_land_tax_reward_rsp::default_instance_ = NULL;

get_land_tax_reward_rsp* get_land_tax_reward_rsp::New() const {
  return new get_land_tax_reward_rsp;
}

void get_land_tax_reward_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_land_tax_reward_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_land_tax_reward_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_land_tax_reward_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_land_tax_reward_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_land_tax_reward_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_land_tax_reward_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_land_tax_reward_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_land_tax_reward_rsp::MergeFrom(const get_land_tax_reward_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_land_tax_reward_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_land_tax_reward_rsp::CopyFrom(const get_land_tax_reward_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_land_tax_reward_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_land_tax_reward_rsp::Swap(get_land_tax_reward_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_land_tax_reward_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_land_tax_reward_rsp_descriptor_;
  metadata.reflection = get_land_tax_reward_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_pay_tax_req::kRoleIdFieldNumber;
const int land_pay_tax_req::kPowerFieldNumber;
const int land_pay_tax_req::kFamilyIdFieldNumber;
const int land_pay_tax_req::kCoinFieldNumber;
#endif  // !_MSC_VER

land_pay_tax_req::land_pay_tax_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_pay_tax_req::InitAsDefaultInstance() {
}

land_pay_tax_req::land_pay_tax_req(const land_pay_tax_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_pay_tax_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  power_ = 0u;
  family_id_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_pay_tax_req::~land_pay_tax_req() {
  SharedDtor();
}

void land_pay_tax_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_pay_tax_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_pay_tax_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_pay_tax_req_descriptor_;
}

const land_pay_tax_req& land_pay_tax_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

land_pay_tax_req* land_pay_tax_req::default_instance_ = NULL;

land_pay_tax_req* land_pay_tax_req::New() const {
  return new land_pay_tax_req;
}

void land_pay_tax_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    power_ = 0u;
    family_id_ = 0u;
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_pay_tax_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // required uint32 power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // required uint32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_pay_tax_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->power(), output);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_pay_tax_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->power(), target);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_pay_tax_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 family_id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_pay_tax_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_pay_tax_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_pay_tax_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_pay_tax_req::MergeFrom(const land_pay_tax_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_pay_tax_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_pay_tax_req::CopyFrom(const land_pay_tax_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_pay_tax_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void land_pay_tax_req::Swap(land_pay_tax_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(power_, other->power_);
    std::swap(family_id_, other->family_id_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_pay_tax_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_pay_tax_req_descriptor_;
  metadata.reflection = land_pay_tax_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_pay_tax_rsp::kRoleIdFieldNumber;
const int land_pay_tax_rsp::kPowerFieldNumber;
const int land_pay_tax_rsp::kFamilyIdFieldNumber;
const int land_pay_tax_rsp::kCoinFieldNumber;
#endif  // !_MSC_VER

land_pay_tax_rsp::land_pay_tax_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_pay_tax_rsp::InitAsDefaultInstance() {
}

land_pay_tax_rsp::land_pay_tax_rsp(const land_pay_tax_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_pay_tax_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  power_ = 0u;
  family_id_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_pay_tax_rsp::~land_pay_tax_rsp() {
  SharedDtor();
}

void land_pay_tax_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_pay_tax_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_pay_tax_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_pay_tax_rsp_descriptor_;
}

const land_pay_tax_rsp& land_pay_tax_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

land_pay_tax_rsp* land_pay_tax_rsp::default_instance_ = NULL;

land_pay_tax_rsp* land_pay_tax_rsp::New() const {
  return new land_pay_tax_rsp;
}

void land_pay_tax_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    power_ = 0u;
    family_id_ = 0u;
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_pay_tax_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // required uint32 power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_Id;
        break;
      }

      // required uint32 family_Id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // required uint32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_pay_tax_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->power(), output);
  }

  // required uint32 family_Id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_pay_tax_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->power(), target);
  }

  // required uint32 family_Id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_pay_tax_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 family_Id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_pay_tax_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_pay_tax_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_pay_tax_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_pay_tax_rsp::MergeFrom(const land_pay_tax_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_pay_tax_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_pay_tax_rsp::CopyFrom(const land_pay_tax_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_pay_tax_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void land_pay_tax_rsp::Swap(land_pay_tax_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(power_, other->power_);
    std::swap(family_id_, other->family_id_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_pay_tax_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_pay_tax_rsp_descriptor_;
  metadata.reflection = land_pay_tax_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_land_tax_reward_via::kRoleIdFieldNumber;
const int get_land_tax_reward_via::kCoinFieldNumber;
#endif  // !_MSC_VER

get_land_tax_reward_via::get_land_tax_reward_via()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_land_tax_reward_via::InitAsDefaultInstance() {
}

get_land_tax_reward_via::get_land_tax_reward_via(const get_land_tax_reward_via& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_land_tax_reward_via::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_land_tax_reward_via::~get_land_tax_reward_via() {
  SharedDtor();
}

void get_land_tax_reward_via::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_land_tax_reward_via::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_land_tax_reward_via::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_land_tax_reward_via_descriptor_;
}

const get_land_tax_reward_via& get_land_tax_reward_via::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eland_5fraid_2eproto();
  return *default_instance_;
}

get_land_tax_reward_via* get_land_tax_reward_via::default_instance_ = NULL;

get_land_tax_reward_via* get_land_tax_reward_via::New() const {
  return new get_land_tax_reward_via;
}

void get_land_tax_reward_via::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_land_tax_reward_via::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_land_tax_reward_via::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_land_tax_reward_via::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_land_tax_reward_via::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_land_tax_reward_via::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_land_tax_reward_via* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_land_tax_reward_via*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_land_tax_reward_via::MergeFrom(const get_land_tax_reward_via& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_land_tax_reward_via::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_land_tax_reward_via::CopyFrom(const get_land_tax_reward_via& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_land_tax_reward_via::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void get_land_tax_reward_via::Swap(get_land_tax_reward_via* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_land_tax_reward_via::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_land_tax_reward_via_descriptor_;
  metadata.reflection = get_land_tax_reward_via_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
