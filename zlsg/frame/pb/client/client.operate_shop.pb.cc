// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.operate_shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.operate_shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* buy_goods_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_goods_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_goods_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_goods_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_item_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_item_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_item_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_item_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_goods_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_goods_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_goods_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_goods_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_mall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_mall_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_mall_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_mall_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_mall_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_mall_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* order_tracking_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_tracking_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* order_tracking_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_tracking_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* order_tracking_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_tracking_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_tael_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_tael_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_tael_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_tael_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_svr_start_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_svr_start_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_svr_start_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_svr_start_time_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SHOP_BUY_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SHOP_PAY_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SHOP_LIMIT_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SHOP_SELL_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eoperate_5fshop_2eproto() {
  protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.operate_shop.proto");
  GOOGLE_CHECK(file != NULL);
  buy_goods_req_descriptor_ = file->message_type(0);
  static const int buy_goods_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, svr_head_),
  };
  buy_goods_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_goods_req_descriptor_,
      buy_goods_req::default_instance_,
      buy_goods_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_goods_req));
  buy_goods_rsp_descriptor_ = file->message_type(1);
  static const int buy_goods_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, last_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, vip_day_),
  };
  buy_goods_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_goods_rsp_descriptor_,
      buy_goods_rsp::default_instance_,
      buy_goods_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_goods_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_goods_rsp));
  shop_item_list_req_descriptor_ = file->message_type(2);
  static const int shop_item_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_req, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_req, svr_head_),
  };
  shop_item_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_item_list_req_descriptor_,
      shop_item_list_req::default_instance_,
      shop_item_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_item_list_req));
  shop_item_list_rsp_descriptor_ = file->message_type(3);
  static const int shop_item_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_rsp, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_rsp, info_),
  };
  shop_item_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_item_list_rsp_descriptor_,
      shop_item_list_rsp::default_instance_,
      shop_item_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_item_list_rsp));
  sell_goods_req_descriptor_ = file->message_type(4);
  static const int sell_goods_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_req, svr_head_),
  };
  sell_goods_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_goods_req_descriptor_,
      sell_goods_req::default_instance_,
      sell_goods_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_goods_req));
  sell_goods_rsp_descriptor_ = file->message_type(5);
  static const int sell_goods_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_rsp, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_rsp, ret_),
  };
  sell_goods_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_goods_rsp_descriptor_,
      sell_goods_rsp::default_instance_,
      sell_goods_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_goods_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_goods_rsp));
  buy_mall_descriptor_ = file->message_type(6);
  static const int buy_mall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall, is_goods_id_),
  };
  buy_mall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_mall_descriptor_,
      buy_mall::default_instance_,
      buy_mall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_mall));
  buy_mall_req_descriptor_ = file->message_type(7);
  static const int buy_mall_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_req, bm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_req, svr_head_),
  };
  buy_mall_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_mall_req_descriptor_,
      buy_mall_req::default_instance_,
      buy_mall_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_mall_req));
  buy_mall_rsp_descriptor_ = file->message_type(8);
  static const int buy_mall_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_rsp, ret_),
  };
  buy_mall_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_mall_rsp_descriptor_,
      buy_mall_rsp::default_instance_,
      buy_mall_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_mall_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_mall_rsp));
  order_tracking_req_descriptor_ = file->message_type(9);
  static const int order_tracking_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_req, svr_head_),
  };
  order_tracking_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_tracking_req_descriptor_,
      order_tracking_req::default_instance_,
      order_tracking_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_tracking_req));
  order_tracking_info_descriptor_ = file->message_type(10);
  static const int order_tracking_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_info, type_),
  };
  order_tracking_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_tracking_info_descriptor_,
      order_tracking_info::default_instance_,
      order_tracking_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_tracking_info));
  order_tracking_rsp_descriptor_ = file->message_type(11);
  static const int order_tracking_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_rsp, oti_),
  };
  order_tracking_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_tracking_rsp_descriptor_,
      order_tracking_rsp::default_instance_,
      order_tracking_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_tracking_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_tracking_rsp));
  buy_tael_req_descriptor_ = file->message_type(12);
  static const int buy_tael_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_req, svr_head_),
  };
  buy_tael_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_tael_req_descriptor_,
      buy_tael_req::default_instance_,
      buy_tael_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_tael_req));
  buy_tael_rsp_descriptor_ = file->message_type(13);
  static const int buy_tael_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_rsp, ret_),
  };
  buy_tael_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_tael_rsp_descriptor_,
      buy_tael_rsp::default_instance_,
      buy_tael_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_tael_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_tael_rsp));
  get_svr_start_time_req_descriptor_ = file->message_type(14);
  static const int get_svr_start_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_req, svr_head_),
  };
  get_svr_start_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_svr_start_time_req_descriptor_,
      get_svr_start_time_req::default_instance_,
      get_svr_start_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_svr_start_time_req));
  get_svr_start_time_rsp_descriptor_ = file->message_type(15);
  static const int get_svr_start_time_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_rsp, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_rsp, shop_discount_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_rsp, now_),
  };
  get_svr_start_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_svr_start_time_rsp_descriptor_,
      get_svr_start_time_rsp::default_instance_,
      get_svr_start_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_start_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_svr_start_time_rsp));
  SHOP_BUY_RET_E_descriptor_ = file->enum_type(0);
  SHOP_PAY_TYPE_E_descriptor_ = file->enum_type(1);
  SHOP_LIMIT_TYPE_E_descriptor_ = file->enum_type(2);
  SHOP_SELL_RET_E_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eoperate_5fshop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_goods_req_descriptor_, &buy_goods_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_goods_rsp_descriptor_, &buy_goods_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_item_list_req_descriptor_, &shop_item_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_item_list_rsp_descriptor_, &shop_item_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_goods_req_descriptor_, &sell_goods_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_goods_rsp_descriptor_, &sell_goods_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_mall_descriptor_, &buy_mall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_mall_req_descriptor_, &buy_mall_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_mall_rsp_descriptor_, &buy_mall_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_tracking_req_descriptor_, &order_tracking_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_tracking_info_descriptor_, &order_tracking_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_tracking_rsp_descriptor_, &order_tracking_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_tael_req_descriptor_, &buy_tael_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_tael_rsp_descriptor_, &buy_tael_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_svr_start_time_req_descriptor_, &get_svr_start_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_svr_start_time_rsp_descriptor_, &get_svr_start_time_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eoperate_5fshop_2eproto() {
  delete buy_goods_req::default_instance_;
  delete buy_goods_req_reflection_;
  delete buy_goods_rsp::default_instance_;
  delete buy_goods_rsp_reflection_;
  delete shop_item_list_req::default_instance_;
  delete shop_item_list_req_reflection_;
  delete shop_item_list_rsp::default_instance_;
  delete shop_item_list_rsp_reflection_;
  delete sell_goods_req::default_instance_;
  delete sell_goods_req_reflection_;
  delete sell_goods_rsp::default_instance_;
  delete sell_goods_rsp_reflection_;
  delete buy_mall::default_instance_;
  delete buy_mall_reflection_;
  delete buy_mall_req::default_instance_;
  delete buy_mall_req_reflection_;
  delete buy_mall_rsp::default_instance_;
  delete buy_mall_rsp_reflection_;
  delete order_tracking_req::default_instance_;
  delete order_tracking_req_reflection_;
  delete order_tracking_info::default_instance_;
  delete order_tracking_info_reflection_;
  delete order_tracking_rsp::default_instance_;
  delete order_tracking_rsp_reflection_;
  delete buy_tael_req::default_instance_;
  delete buy_tael_req_reflection_;
  delete buy_tael_rsp::default_instance_;
  delete buy_tael_rsp_reflection_;
  delete get_svr_start_time_req::default_instance_;
  delete get_svr_start_time_req_reflection_;
  delete get_svr_start_time_rsp::default_instance_;
  delete get_svr_start_time_rsp_reflection_;
}

void protobuf_AddDesc_client_2eoperate_5fshop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031client.operate_shop.proto\022\006client\032\021cli"
    "ent.comm.proto\032\027client.role_props.proto\""
    "g\n\rbuy_goods_req\022\017\n\007shop_id\030\001 \002(\r\022\020\n\010goo"
    "ds_id\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head\"\200\001\n\rbuy_goods_r"
    "sp\022\020\n\010goods_id\030\001 \002(\r\022\023\n\013goods_count\030\002 \002("
    "\r\022#\n\003ret\030\003 \002(\0162\026.client.SHOP_BUY_RET_E\022\022"
    "\n\nlast_count\030\004 \001(\r\022\017\n\007vip_day\030\005 \001(\r\"O\n\022s"
    "hop_item_list_req\022\021\n\tshop_type\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"O\n\022"
    "shop_item_list_rsp\022\021\n\tshop_type\030\001 \002(\r\022&\n"
    "\004info\030\002 \003(\0132\030.client.treasure_db_info\"Y\n"
    "\016sell_goods_req\022\022\n\ngrid_index\030\001 \002(\r\022\013\n\003n"
    "um\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"J\n\016sell_goods_rsp\022\022\n\ngrid_index"
    "\030\001 \002(\r\022$\n\003ret\030\002 \002(\0162\027.client.SHOP_SELL_R"
    "ET_E\">\n\010buy_mall\022\020\n\010goods_id\030\001 \002(\r\022\013\n\003nu"
    "m\030\002 \002(\r\022\023\n\013is_goods_id\030\003 \001(\r\"T\n\014buy_mall"
    "_req\022\034\n\002bm\030\001 \003(\0132\020.client.buy_mall\022&\n\010sv"
    "r_head\030\350\007 \001(\0132\023.client.server_head\"2\n\014bu"
    "y_mall_rsp\022\"\n\003ret\030\001 \003(\0132\025.client.buy_goo"
    "ds_rsp\"_\n\022order_tracking_req\022\020\n\010unixtime"
    "\030\001 \002(\r\022\017\n\007role_id\030\002 \001(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\">\n\023order_trackin"
    "g_info\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\014\n\004typ"
    "e\030\003 \002(\r\"O\n\022order_tracking_rsp\022\017\n\007role_id"
    "\030\001 \002(\r\022(\n\003oti\030\002 \003(\0132\033.client.order_track"
    "ing_info\"H\n\014buy_tael_req\022\020\n\010unixtime\030\001 \002"
    "(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_he"
    "ad\"\033\n\014buy_tael_rsp\022\013\n\003ret\030\001 \002(\r\"R\n\026get_s"
    "vr_start_time_req\022\020\n\010svr_time\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head\"R\n\026g"
    "et_svr_start_time_rsp\022\014\n\004days\030\001 \002(\r\022\035\n\025s"
    "hop_discount_seconds\030\002 \002(\r\022\013\n\003now\030\003 \002(\r*"
    "k\n\016SHOP_BUY_RET_E\022\020\n\014SBRE_SUCCESS\020\001\022\020\n\014S"
    "BRE_NOMONEY\020\002\022\022\n\016SBRE_PACK_FULL\020\003\022\021\n\rSBR"
    "E_CANT_BUY\020\004\022\016\n\nSBRE_LIMIT\020\005*\221\001\n\017SHOP_PA"
    "Y_TYPE_E\022\027\n\023SHOP_PAY_TYPE_INGOT\020\001\022\034\n\030SHO"
    "P_PAY_TYPE_FAMILY_CON\020\002\022\027\n\023SHOP_PAY_TYPE"
    "_ARENA\020\003\022\026\n\022SHOP_PAY_TYPE_ARMS\020\004\022\026\n\022SHOP"
    "_PAY_TYPE_COIN\020\005*/\n\021SHOP_LIMIT_TYPE_E\022\032\n"
    "\026SHOP_LIMIT_TYPE_FAMILY\020\001*7\n\017SHOP_SELL_R"
    "ET_E\022\020\n\014SSRE_SUCCESS\020\001\022\022\n\016SSRE_CANT_SELL"
    "\020\002", 1722);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.operate_shop.proto", &protobuf_RegisterTypes);
  buy_goods_req::default_instance_ = new buy_goods_req();
  buy_goods_rsp::default_instance_ = new buy_goods_rsp();
  shop_item_list_req::default_instance_ = new shop_item_list_req();
  shop_item_list_rsp::default_instance_ = new shop_item_list_rsp();
  sell_goods_req::default_instance_ = new sell_goods_req();
  sell_goods_rsp::default_instance_ = new sell_goods_rsp();
  buy_mall::default_instance_ = new buy_mall();
  buy_mall_req::default_instance_ = new buy_mall_req();
  buy_mall_rsp::default_instance_ = new buy_mall_rsp();
  order_tracking_req::default_instance_ = new order_tracking_req();
  order_tracking_info::default_instance_ = new order_tracking_info();
  order_tracking_rsp::default_instance_ = new order_tracking_rsp();
  buy_tael_req::default_instance_ = new buy_tael_req();
  buy_tael_rsp::default_instance_ = new buy_tael_rsp();
  get_svr_start_time_req::default_instance_ = new get_svr_start_time_req();
  get_svr_start_time_rsp::default_instance_ = new get_svr_start_time_rsp();
  buy_goods_req::default_instance_->InitAsDefaultInstance();
  buy_goods_rsp::default_instance_->InitAsDefaultInstance();
  shop_item_list_req::default_instance_->InitAsDefaultInstance();
  shop_item_list_rsp::default_instance_->InitAsDefaultInstance();
  sell_goods_req::default_instance_->InitAsDefaultInstance();
  sell_goods_rsp::default_instance_->InitAsDefaultInstance();
  buy_mall::default_instance_->InitAsDefaultInstance();
  buy_mall_req::default_instance_->InitAsDefaultInstance();
  buy_mall_rsp::default_instance_->InitAsDefaultInstance();
  order_tracking_req::default_instance_->InitAsDefaultInstance();
  order_tracking_info::default_instance_->InitAsDefaultInstance();
  order_tracking_rsp::default_instance_->InitAsDefaultInstance();
  buy_tael_req::default_instance_->InitAsDefaultInstance();
  buy_tael_rsp::default_instance_->InitAsDefaultInstance();
  get_svr_start_time_req::default_instance_->InitAsDefaultInstance();
  get_svr_start_time_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eoperate_5fshop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eoperate_5fshop_2eproto {
  StaticDescriptorInitializer_client_2eoperate_5fshop_2eproto() {
    protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  }
} static_descriptor_initializer_client_2eoperate_5fshop_2eproto_;
const ::google::protobuf::EnumDescriptor* SHOP_BUY_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOP_BUY_RET_E_descriptor_;
}
bool SHOP_BUY_RET_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SHOP_PAY_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOP_PAY_TYPE_E_descriptor_;
}
bool SHOP_PAY_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SHOP_LIMIT_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOP_LIMIT_TYPE_E_descriptor_;
}
bool SHOP_LIMIT_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SHOP_SELL_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOP_SELL_RET_E_descriptor_;
}
bool SHOP_SELL_RET_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int buy_goods_req::kShopIdFieldNumber;
const int buy_goods_req::kGoodsIdFieldNumber;
const int buy_goods_req::kNumFieldNumber;
const int buy_goods_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

buy_goods_req::buy_goods_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_goods_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

buy_goods_req::buy_goods_req(const buy_goods_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_goods_req::SharedCtor() {
  _cached_size_ = 0;
  shop_id_ = 0u;
  goods_id_ = 0u;
  num_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_goods_req::~buy_goods_req() {
  SharedDtor();
}

void buy_goods_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void buy_goods_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_goods_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_goods_req_descriptor_;
}

const buy_goods_req& buy_goods_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_goods_req* buy_goods_req::default_instance_ = NULL;

buy_goods_req* buy_goods_req::New() const {
  return new buy_goods_req;
}

void buy_goods_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_id_ = 0u;
    goods_id_ = 0u;
    num_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_goods_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required uint32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_goods_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 shop_id = 1;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_id(), output);
  }

  // required uint32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_goods_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 shop_id = 1;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shop_id(), target);
  }

  // required uint32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_goods_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shop_id = 1;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_id());
    }

    // required uint32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_goods_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_goods_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_goods_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_goods_req::MergeFrom(const buy_goods_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_goods_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_goods_req::CopyFrom(const buy_goods_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_goods_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void buy_goods_req::Swap(buy_goods_req* other) {
  if (other != this) {
    std::swap(shop_id_, other->shop_id_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(num_, other->num_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_goods_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_goods_req_descriptor_;
  metadata.reflection = buy_goods_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_goods_rsp::kGoodsIdFieldNumber;
const int buy_goods_rsp::kGoodsCountFieldNumber;
const int buy_goods_rsp::kRetFieldNumber;
const int buy_goods_rsp::kLastCountFieldNumber;
const int buy_goods_rsp::kVipDayFieldNumber;
#endif  // !_MSC_VER

buy_goods_rsp::buy_goods_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_goods_rsp::InitAsDefaultInstance() {
}

buy_goods_rsp::buy_goods_rsp(const buy_goods_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_goods_rsp::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  goods_count_ = 0u;
  ret_ = 1;
  last_count_ = 0u;
  vip_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_goods_rsp::~buy_goods_rsp() {
  SharedDtor();
}

void buy_goods_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_goods_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_goods_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_goods_rsp_descriptor_;
}

const buy_goods_rsp& buy_goods_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_goods_rsp* buy_goods_rsp::default_instance_ = NULL;

buy_goods_rsp* buy_goods_rsp::New() const {
  return new buy_goods_rsp;
}

void buy_goods_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    goods_count_ = 0u;
    ret_ = 1;
    last_count_ = 0u;
    vip_day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_goods_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_count;
        break;
      }

      // required uint32 goods_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_count_)));
          set_has_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .client.SHOP_BUY_RET_E ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SHOP_BUY_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::SHOP_BUY_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_count;
        break;
      }

      // optional uint32 last_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_count_)));
          set_has_last_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_day;
        break;
      }

      // optional uint32 vip_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_day_)));
          set_has_vip_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_goods_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // required uint32 goods_count = 2;
  if (has_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_count(), output);
  }

  // required .client.SHOP_BUY_RET_E ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  // optional uint32 last_count = 4;
  if (has_last_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_count(), output);
  }

  // optional uint32 vip_day = 5;
  if (has_vip_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_goods_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // required uint32 goods_count = 2;
  if (has_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_count(), target);
  }

  // required .client.SHOP_BUY_RET_E ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  // optional uint32 last_count = 4;
  if (has_last_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_count(), target);
  }

  // optional uint32 vip_day = 5;
  if (has_vip_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_goods_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 goods_count = 2;
    if (has_goods_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_count());
    }

    // required .client.SHOP_BUY_RET_E ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 last_count = 4;
    if (has_last_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_count());
    }

    // optional uint32 vip_day = 5;
    if (has_vip_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_goods_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_goods_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_goods_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_goods_rsp::MergeFrom(const buy_goods_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_count()) {
      set_goods_count(from.goods_count());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_last_count()) {
      set_last_count(from.last_count());
    }
    if (from.has_vip_day()) {
      set_vip_day(from.vip_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_goods_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_goods_rsp::CopyFrom(const buy_goods_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_goods_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void buy_goods_rsp::Swap(buy_goods_rsp* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_count_, other->goods_count_);
    std::swap(ret_, other->ret_);
    std::swap(last_count_, other->last_count_);
    std::swap(vip_day_, other->vip_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_goods_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_goods_rsp_descriptor_;
  metadata.reflection = buy_goods_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_item_list_req::kShopTypeFieldNumber;
const int shop_item_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

shop_item_list_req::shop_item_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_item_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

shop_item_list_req::shop_item_list_req(const shop_item_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_item_list_req::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_item_list_req::~shop_item_list_req() {
  SharedDtor();
}

void shop_item_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void shop_item_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_item_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_item_list_req_descriptor_;
}

const shop_item_list_req& shop_item_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

shop_item_list_req* shop_item_list_req::default_instance_ = NULL;

shop_item_list_req* shop_item_list_req::New() const {
  return new shop_item_list_req;
}

void shop_item_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_item_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_item_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_item_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shop_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_item_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_item_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_item_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_item_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_item_list_req::MergeFrom(const shop_item_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_item_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_item_list_req::CopyFrom(const shop_item_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_item_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void shop_item_list_req::Swap(shop_item_list_req* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_item_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_item_list_req_descriptor_;
  metadata.reflection = shop_item_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_item_list_rsp::kShopTypeFieldNumber;
const int shop_item_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

shop_item_list_rsp::shop_item_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_item_list_rsp::InitAsDefaultInstance() {
}

shop_item_list_rsp::shop_item_list_rsp(const shop_item_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_item_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_item_list_rsp::~shop_item_list_rsp() {
  SharedDtor();
}

void shop_item_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_item_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_item_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_item_list_rsp_descriptor_;
}

const shop_item_list_rsp& shop_item_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

shop_item_list_rsp* shop_item_list_rsp::default_instance_ = NULL;

shop_item_list_rsp* shop_item_list_rsp::New() const {
  return new shop_item_list_rsp;
}

void shop_item_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_item_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.treasure_db_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_item_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_type(), output);
  }

  // repeated .client.treasure_db_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_item_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shop_type(), target);
  }

  // repeated .client.treasure_db_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_item_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_type());
    }

  }
  // repeated .client.treasure_db_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_item_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_item_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_item_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_item_list_rsp::MergeFrom(const shop_item_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_item_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_item_list_rsp::CopyFrom(const shop_item_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_item_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void shop_item_list_rsp::Swap(shop_item_list_rsp* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_item_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_item_list_rsp_descriptor_;
  metadata.reflection = shop_item_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_goods_req::kGridIndexFieldNumber;
const int sell_goods_req::kNumFieldNumber;
const int sell_goods_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sell_goods_req::sell_goods_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sell_goods_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sell_goods_req::sell_goods_req(const sell_goods_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sell_goods_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  num_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_goods_req::~sell_goods_req() {
  SharedDtor();
}

void sell_goods_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sell_goods_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_goods_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_goods_req_descriptor_;
}

const sell_goods_req& sell_goods_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

sell_goods_req* sell_goods_req::default_instance_ = NULL;

sell_goods_req* sell_goods_req::New() const {
  return new sell_goods_req;
}

void sell_goods_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    num_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_goods_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sell_goods_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sell_goods_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sell_goods_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_goods_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_goods_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_goods_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_goods_req::MergeFrom(const sell_goods_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_goods_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_goods_req::CopyFrom(const sell_goods_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_goods_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sell_goods_req::Swap(sell_goods_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(num_, other->num_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_goods_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_goods_req_descriptor_;
  metadata.reflection = sell_goods_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_goods_rsp::kGridIndexFieldNumber;
const int sell_goods_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

sell_goods_rsp::sell_goods_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sell_goods_rsp::InitAsDefaultInstance() {
}

sell_goods_rsp::sell_goods_rsp(const sell_goods_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sell_goods_rsp::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_goods_rsp::~sell_goods_rsp() {
  SharedDtor();
}

void sell_goods_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sell_goods_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_goods_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_goods_rsp_descriptor_;
}

const sell_goods_rsp& sell_goods_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

sell_goods_rsp* sell_goods_rsp::default_instance_ = NULL;

sell_goods_rsp* sell_goods_rsp::New() const {
  return new sell_goods_rsp;
}

void sell_goods_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_goods_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.SHOP_SELL_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SHOP_SELL_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::SHOP_SELL_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sell_goods_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required .client.SHOP_SELL_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sell_goods_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required .client.SHOP_SELL_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sell_goods_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required .client.SHOP_SELL_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_goods_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_goods_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_goods_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_goods_rsp::MergeFrom(const sell_goods_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_goods_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_goods_rsp::CopyFrom(const sell_goods_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_goods_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sell_goods_rsp::Swap(sell_goods_rsp* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_goods_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_goods_rsp_descriptor_;
  metadata.reflection = sell_goods_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_mall::kGoodsIdFieldNumber;
const int buy_mall::kNumFieldNumber;
const int buy_mall::kIsGoodsIdFieldNumber;
#endif  // !_MSC_VER

buy_mall::buy_mall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_mall::InitAsDefaultInstance() {
}

buy_mall::buy_mall(const buy_mall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_mall::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  num_ = 0u;
  is_goods_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_mall::~buy_mall() {
  SharedDtor();
}

void buy_mall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_mall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_mall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_mall_descriptor_;
}

const buy_mall& buy_mall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_mall* buy_mall::default_instance_ = NULL;

buy_mall* buy_mall::New() const {
  return new buy_mall;
}

void buy_mall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    num_ = 0u;
    is_goods_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_mall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_goods_id;
        break;
      }

      // optional uint32 is_goods_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_goods_id_)));
          set_has_is_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_mall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 is_goods_id = 3;
  if (has_is_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_goods_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_mall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 is_goods_id = 3;
  if (has_is_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_goods_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_mall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 is_goods_id = 3;
    if (has_is_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_goods_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_mall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_mall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_mall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_mall::MergeFrom(const buy_mall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_is_goods_id()) {
      set_is_goods_id(from.is_goods_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_mall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_mall::CopyFrom(const buy_mall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_mall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void buy_mall::Swap(buy_mall* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(num_, other->num_);
    std::swap(is_goods_id_, other->is_goods_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_mall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_mall_descriptor_;
  metadata.reflection = buy_mall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_mall_req::kBmFieldNumber;
const int buy_mall_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

buy_mall_req::buy_mall_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_mall_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

buy_mall_req::buy_mall_req(const buy_mall_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_mall_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_mall_req::~buy_mall_req() {
  SharedDtor();
}

void buy_mall_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void buy_mall_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_mall_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_mall_req_descriptor_;
}

const buy_mall_req& buy_mall_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_mall_req* buy_mall_req::default_instance_ = NULL;

buy_mall_req* buy_mall_req::New() const {
  return new buy_mall_req;
}

void buy_mall_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  bm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_mall_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.buy_mall bm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bm;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_mall_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.buy_mall bm = 1;
  for (int i = 0; i < this->bm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bm(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_mall_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.buy_mall bm = 1;
  for (int i = 0; i < this->bm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bm(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_mall_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.buy_mall bm = 1;
  total_size += 1 * this->bm_size();
  for (int i = 0; i < this->bm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_mall_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_mall_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_mall_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_mall_req::MergeFrom(const buy_mall_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  bm_.MergeFrom(from.bm_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_mall_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_mall_req::CopyFrom(const buy_mall_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_mall_req::IsInitialized() const {

  for (int i = 0; i < bm_size(); i++) {
    if (!this->bm(i).IsInitialized()) return false;
  }
  return true;
}

void buy_mall_req::Swap(buy_mall_req* other) {
  if (other != this) {
    bm_.Swap(&other->bm_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_mall_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_mall_req_descriptor_;
  metadata.reflection = buy_mall_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_mall_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

buy_mall_rsp::buy_mall_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_mall_rsp::InitAsDefaultInstance() {
}

buy_mall_rsp::buy_mall_rsp(const buy_mall_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_mall_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_mall_rsp::~buy_mall_rsp() {
  SharedDtor();
}

void buy_mall_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_mall_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_mall_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_mall_rsp_descriptor_;
}

const buy_mall_rsp& buy_mall_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_mall_rsp* buy_mall_rsp::default_instance_ = NULL;

buy_mall_rsp* buy_mall_rsp::New() const {
  return new buy_mall_rsp;
}

void buy_mall_rsp::Clear() {
  ret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_mall_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.buy_goods_rsp ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ret;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_mall_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.buy_goods_rsp ret = 1;
  for (int i = 0; i < this->ret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_mall_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.buy_goods_rsp ret = 1;
  for (int i = 0; i < this->ret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_mall_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.buy_goods_rsp ret = 1;
  total_size += 1 * this->ret_size();
  for (int i = 0; i < this->ret_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ret(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_mall_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_mall_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_mall_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_mall_rsp::MergeFrom(const buy_mall_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ret_.MergeFrom(from.ret_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_mall_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_mall_rsp::CopyFrom(const buy_mall_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_mall_rsp::IsInitialized() const {

  for (int i = 0; i < ret_size(); i++) {
    if (!this->ret(i).IsInitialized()) return false;
  }
  return true;
}

void buy_mall_rsp::Swap(buy_mall_rsp* other) {
  if (other != this) {
    ret_.Swap(&other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_mall_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_mall_rsp_descriptor_;
  metadata.reflection = buy_mall_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int order_tracking_req::kUnixtimeFieldNumber;
const int order_tracking_req::kRoleIdFieldNumber;
const int order_tracking_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

order_tracking_req::order_tracking_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_tracking_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

order_tracking_req::order_tracking_req(const order_tracking_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_tracking_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_tracking_req::~order_tracking_req() {
  SharedDtor();
}

void order_tracking_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void order_tracking_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_tracking_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_tracking_req_descriptor_;
}

const order_tracking_req& order_tracking_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

order_tracking_req* order_tracking_req::default_instance_ = NULL;

order_tracking_req* order_tracking_req::New() const {
  return new order_tracking_req;
}

void order_tracking_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_tracking_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_tracking_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_tracking_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_tracking_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_tracking_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_tracking_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_tracking_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_tracking_req::MergeFrom(const order_tracking_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_tracking_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_tracking_req::CopyFrom(const order_tracking_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_tracking_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void order_tracking_req::Swap(order_tracking_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_tracking_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_tracking_req_descriptor_;
  metadata.reflection = order_tracking_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int order_tracking_info::kIdFieldNumber;
const int order_tracking_info::kCountFieldNumber;
const int order_tracking_info::kTypeFieldNumber;
#endif  // !_MSC_VER

order_tracking_info::order_tracking_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_tracking_info::InitAsDefaultInstance() {
}

order_tracking_info::order_tracking_info(const order_tracking_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_tracking_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_tracking_info::~order_tracking_info() {
  SharedDtor();
}

void order_tracking_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void order_tracking_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_tracking_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_tracking_info_descriptor_;
}

const order_tracking_info& order_tracking_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

order_tracking_info* order_tracking_info::default_instance_ = NULL;

order_tracking_info* order_tracking_info::New() const {
  return new order_tracking_info;
}

void order_tracking_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_tracking_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_tracking_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_tracking_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_tracking_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_tracking_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_tracking_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_tracking_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_tracking_info::MergeFrom(const order_tracking_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_tracking_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_tracking_info::CopyFrom(const order_tracking_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_tracking_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void order_tracking_info::Swap(order_tracking_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_tracking_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_tracking_info_descriptor_;
  metadata.reflection = order_tracking_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int order_tracking_rsp::kRoleIdFieldNumber;
const int order_tracking_rsp::kOtiFieldNumber;
#endif  // !_MSC_VER

order_tracking_rsp::order_tracking_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_tracking_rsp::InitAsDefaultInstance() {
}

order_tracking_rsp::order_tracking_rsp(const order_tracking_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_tracking_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_tracking_rsp::~order_tracking_rsp() {
  SharedDtor();
}

void order_tracking_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void order_tracking_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_tracking_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_tracking_rsp_descriptor_;
}

const order_tracking_rsp& order_tracking_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

order_tracking_rsp* order_tracking_rsp::default_instance_ = NULL;

order_tracking_rsp* order_tracking_rsp::New() const {
  return new order_tracking_rsp;
}

void order_tracking_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  oti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_tracking_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oti;
        break;
      }

      // repeated .client.order_tracking_info oti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oti;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_tracking_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated .client.order_tracking_info oti = 2;
  for (int i = 0; i < this->oti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oti(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_tracking_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated .client.order_tracking_info oti = 2;
  for (int i = 0; i < this->oti_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->oti(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_tracking_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated .client.order_tracking_info oti = 2;
  total_size += 1 * this->oti_size();
  for (int i = 0; i < this->oti_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oti(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_tracking_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_tracking_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_tracking_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_tracking_rsp::MergeFrom(const order_tracking_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  oti_.MergeFrom(from.oti_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_tracking_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_tracking_rsp::CopyFrom(const order_tracking_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_tracking_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < oti_size(); i++) {
    if (!this->oti(i).IsInitialized()) return false;
  }
  return true;
}

void order_tracking_rsp::Swap(order_tracking_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    oti_.Swap(&other->oti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_tracking_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_tracking_rsp_descriptor_;
  metadata.reflection = order_tracking_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_tael_req::kUnixtimeFieldNumber;
const int buy_tael_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

buy_tael_req::buy_tael_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_tael_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

buy_tael_req::buy_tael_req(const buy_tael_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_tael_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_tael_req::~buy_tael_req() {
  SharedDtor();
}

void buy_tael_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void buy_tael_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_tael_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_tael_req_descriptor_;
}

const buy_tael_req& buy_tael_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_tael_req* buy_tael_req::default_instance_ = NULL;

buy_tael_req* buy_tael_req::New() const {
  return new buy_tael_req;
}

void buy_tael_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_tael_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_tael_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_tael_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_tael_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_tael_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_tael_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_tael_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_tael_req::MergeFrom(const buy_tael_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_tael_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_tael_req::CopyFrom(const buy_tael_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_tael_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void buy_tael_req::Swap(buy_tael_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_tael_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_tael_req_descriptor_;
  metadata.reflection = buy_tael_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_tael_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

buy_tael_rsp::buy_tael_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_tael_rsp::InitAsDefaultInstance() {
}

buy_tael_rsp::buy_tael_rsp(const buy_tael_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_tael_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_tael_rsp::~buy_tael_rsp() {
  SharedDtor();
}

void buy_tael_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_tael_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_tael_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_tael_rsp_descriptor_;
}

const buy_tael_rsp& buy_tael_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

buy_tael_rsp* buy_tael_rsp::default_instance_ = NULL;

buy_tael_rsp* buy_tael_rsp::New() const {
  return new buy_tael_rsp;
}

void buy_tael_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_tael_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_tael_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_tael_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_tael_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_tael_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_tael_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_tael_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_tael_rsp::MergeFrom(const buy_tael_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_tael_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_tael_rsp::CopyFrom(const buy_tael_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_tael_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void buy_tael_rsp::Swap(buy_tael_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_tael_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_tael_rsp_descriptor_;
  metadata.reflection = buy_tael_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_svr_start_time_req::kSvrTimeFieldNumber;
const int get_svr_start_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

get_svr_start_time_req::get_svr_start_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_svr_start_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

get_svr_start_time_req::get_svr_start_time_req(const get_svr_start_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_svr_start_time_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_svr_start_time_req::~get_svr_start_time_req() {
  SharedDtor();
}

void get_svr_start_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void get_svr_start_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_svr_start_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_svr_start_time_req_descriptor_;
}

const get_svr_start_time_req& get_svr_start_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

get_svr_start_time_req* get_svr_start_time_req::default_instance_ = NULL;

get_svr_start_time_req* get_svr_start_time_req::New() const {
  return new get_svr_start_time_req;
}

void get_svr_start_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_svr_start_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_svr_start_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_svr_start_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_svr_start_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_svr_start_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_svr_start_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_svr_start_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_svr_start_time_req::MergeFrom(const get_svr_start_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_svr_start_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_svr_start_time_req::CopyFrom(const get_svr_start_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_svr_start_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_svr_start_time_req::Swap(get_svr_start_time_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_svr_start_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_svr_start_time_req_descriptor_;
  metadata.reflection = get_svr_start_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_svr_start_time_rsp::kDaysFieldNumber;
const int get_svr_start_time_rsp::kShopDiscountSecondsFieldNumber;
const int get_svr_start_time_rsp::kNowFieldNumber;
#endif  // !_MSC_VER

get_svr_start_time_rsp::get_svr_start_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_svr_start_time_rsp::InitAsDefaultInstance() {
}

get_svr_start_time_rsp::get_svr_start_time_rsp(const get_svr_start_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_svr_start_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0u;
  shop_discount_seconds_ = 0u;
  now_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_svr_start_time_rsp::~get_svr_start_time_rsp() {
  SharedDtor();
}

void get_svr_start_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_svr_start_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_svr_start_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_svr_start_time_rsp_descriptor_;
}

const get_svr_start_time_rsp& get_svr_start_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fshop_2eproto();
  return *default_instance_;
}

get_svr_start_time_rsp* get_svr_start_time_rsp::default_instance_ = NULL;

get_svr_start_time_rsp* get_svr_start_time_rsp::New() const {
  return new get_svr_start_time_rsp;
}

void get_svr_start_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0u;
    shop_discount_seconds_ = 0u;
    now_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_svr_start_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_discount_seconds;
        break;
      }

      // required uint32 shop_discount_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_discount_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_discount_seconds_)));
          set_has_shop_discount_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_now;
        break;
      }

      // required uint32 now = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_svr_start_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 days = 1;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->days(), output);
  }

  // required uint32 shop_discount_seconds = 2;
  if (has_shop_discount_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shop_discount_seconds(), output);
  }

  // required uint32 now = 3;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_svr_start_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 days = 1;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->days(), target);
  }

  // required uint32 shop_discount_seconds = 2;
  if (has_shop_discount_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shop_discount_seconds(), target);
  }

  // required uint32 now = 3;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_svr_start_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // required uint32 shop_discount_seconds = 2;
    if (has_shop_discount_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_discount_seconds());
    }

    // required uint32 now = 3;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_svr_start_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_svr_start_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_svr_start_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_svr_start_time_rsp::MergeFrom(const get_svr_start_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_shop_discount_seconds()) {
      set_shop_discount_seconds(from.shop_discount_seconds());
    }
    if (from.has_now()) {
      set_now(from.now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_svr_start_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_svr_start_time_rsp::CopyFrom(const get_svr_start_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_svr_start_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void get_svr_start_time_rsp::Swap(get_svr_start_time_rsp* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    std::swap(shop_discount_seconds_, other->shop_discount_seconds_);
    std::swap(now_, other->now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_svr_start_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_svr_start_time_rsp_descriptor_;
  metadata.reflection = get_svr_start_time_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
