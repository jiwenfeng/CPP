// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.pick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* pick_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pick_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pick_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pick_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pick_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pick_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PICK_ACTION_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PICK_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2epick_2eproto() {
  protobuf_AddDesc_client_2epick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.pick.proto");
  GOOGLE_CHECK(file != NULL);
  pick_info_descriptor_ = file->message_type(0);
  static const int pick_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_info, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_info, rd_),
  };
  pick_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pick_info_descriptor_,
      pick_info::default_instance_,
      pick_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pick_info));
  pick_req_descriptor_ = file->message_type(1);
  static const int pick_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_req, pi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_req, svr_head_),
  };
  pick_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pick_req_descriptor_,
      pick_req::default_instance_,
      pick_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pick_req));
  pick_rsp_descriptor_ = file->message_type(2);
  static const int pick_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, ret_),
  };
  pick_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pick_rsp_descriptor_,
      pick_rsp::default_instance_,
      pick_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pick_rsp));
  PICK_ACTION_E_descriptor_ = file->enum_type(0);
  PICK_RET_E_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2epick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pick_info_descriptor_, &pick_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pick_req_descriptor_, &pick_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pick_rsp_descriptor_, &pick_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2epick_2eproto() {
  delete pick_info::default_instance_;
  delete pick_info_reflection_;
  delete pick_req::default_instance_;
  delete pick_req_reflection_;
  delete pick_rsp::default_instance_;
  delete pick_rsp_reflection_;
}

void protobuf_AddDesc_client_2epick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.pick.proto\022\006client\032\021client.comm"
    ".proto\"Q\n\tpick_info\022%\n\006action\030\001 \002(\0162\025.cl"
    "ient.PICK_ACTION_E\022\035\n\002rd\030\002 \001(\0132\021.client."
    "role_data\"Q\n\010pick_req\022\035\n\002pi\030\001 \002(\0132\021.clie"
    "nt.pick_info\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"t\n\010pick_rsp\022\017\n\007inst_id\030\001 \002("
    "\004\022\017\n\007role_id\030\002 \002(\r\022%\n\006action\030\003 \002(\0162\025.cli"
    "ent.PICK_ACTION_E\022\037\n\003ret\030\004 \002(\0162\022.client."
    "PICK_RET_E*,\n\rPICK_ACTION_E\022\013\n\007PAE_ADD\020\001"
    "\022\016\n\nPAE_COMMIT\020\002*\264\002\n\nPICK_RET_E\022\020\n\014PIRE_"
    "SUCCESS\020\000\022\030\n\024PIRE_PARAMETER_ERROR\020\001\022\027\n\023P"
    "IRE_TYPE_NOT_EXIST\020\002\022\r\n\tPIRE_TIME\020\003\022\016\n\nP"
    "IRE_RANGE\020\004\022\020\n\014PIRE_NOT_ADD\020\005\022\017\n\013PIRE_EF"
    "FECT\020\006\022\017\n\013PIRE_REPEAT\020\007\022\017\n\013PIRE_CANCLE\020\010"
    "\022\027\n\023PIRE_OFFICIAL_LIMIT\020\t\022\024\n\020PIRE_MONEY_"
    "LIMIT\020\n\022\022\n\016PIRE_ACT_CLOSE\020\013\022\027\n\023PIRE_TARG"
    "ET_IS_MINE\020\014\022\016\n\nPIRE_IN_CD\020\r\022\021\n\rPIRE_ALL"
    "IANCE\020\016", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.pick.proto", &protobuf_RegisterTypes);
  pick_info::default_instance_ = new pick_info();
  pick_req::default_instance_ = new pick_req();
  pick_rsp::default_instance_ = new pick_rsp();
  pick_info::default_instance_->InitAsDefaultInstance();
  pick_req::default_instance_->InitAsDefaultInstance();
  pick_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2epick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2epick_2eproto {
  StaticDescriptorInitializer_client_2epick_2eproto() {
    protobuf_AddDesc_client_2epick_2eproto();
  }
} static_descriptor_initializer_client_2epick_2eproto_;
const ::google::protobuf::EnumDescriptor* PICK_ACTION_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PICK_ACTION_E_descriptor_;
}
bool PICK_ACTION_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PICK_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PICK_RET_E_descriptor_;
}
bool PICK_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pick_info::kActionFieldNumber;
const int pick_info::kRdFieldNumber;
#endif  // !_MSC_VER

pick_info::pick_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pick_info::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

pick_info::pick_info(const pick_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pick_info::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pick_info::~pick_info() {
  SharedDtor();
}

void pick_info::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void pick_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pick_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_info_descriptor_;
}

const pick_info& pick_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epick_2eproto();
  return *default_instance_;
}

pick_info* pick_info::default_instance_ = NULL;

pick_info* pick_info::New() const {
  return new pick_info;
}

void pick_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pick_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.PICK_ACTION_E action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PICK_ACTION_E_IsValid(value)) {
            set_action(static_cast< ::client::PICK_ACTION_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rd;
        break;
      }

      // optional .client.role_data rd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pick_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.PICK_ACTION_E action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .client.role_data rd = 2;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pick_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.PICK_ACTION_E action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .client.role_data rd = 2;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pick_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.PICK_ACTION_E action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .client.role_data rd = 2;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pick_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pick_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pick_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pick_info::MergeFrom(const pick_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pick_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pick_info::CopyFrom(const pick_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pick_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void pick_info::Swap(pick_info* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(rd_, other->rd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pick_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pick_info_descriptor_;
  metadata.reflection = pick_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pick_req::kPiFieldNumber;
const int pick_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pick_req::pick_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pick_req::InitAsDefaultInstance() {
  pi_ = const_cast< ::client::pick_info*>(&::client::pick_info::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pick_req::pick_req(const pick_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pick_req::SharedCtor() {
  _cached_size_ = 0;
  pi_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pick_req::~pick_req() {
  SharedDtor();
}

void pick_req::SharedDtor() {
  if (this != default_instance_) {
    delete pi_;
    delete svr_head_;
  }
}

void pick_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pick_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_req_descriptor_;
}

const pick_req& pick_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epick_2eproto();
  return *default_instance_;
}

pick_req* pick_req::default_instance_ = NULL;

pick_req* pick_req::New() const {
  return new pick_req;
}

void pick_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pi()) {
      if (pi_ != NULL) pi_->::client::pick_info::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pick_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.pick_info pi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pick_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.pick_info pi = 1;
  if (has_pi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pi(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pick_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.pick_info pi = 1;
  if (has_pi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pi(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pick_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.pick_info pi = 1;
    if (has_pi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pi());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pick_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pick_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pick_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pick_req::MergeFrom(const pick_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pi()) {
      mutable_pi()->::client::pick_info::MergeFrom(from.pi());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pick_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pick_req::CopyFrom(const pick_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pick_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pi()) {
    if (!this->pi().IsInitialized()) return false;
  }
  return true;
}

void pick_req::Swap(pick_req* other) {
  if (other != this) {
    std::swap(pi_, other->pi_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pick_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pick_req_descriptor_;
  metadata.reflection = pick_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pick_rsp::kInstIdFieldNumber;
const int pick_rsp::kRoleIdFieldNumber;
const int pick_rsp::kActionFieldNumber;
const int pick_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

pick_rsp::pick_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pick_rsp::InitAsDefaultInstance() {
}

pick_rsp::pick_rsp(const pick_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pick_rsp::SharedCtor() {
  _cached_size_ = 0;
  inst_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = 0u;
  action_ = 1;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pick_rsp::~pick_rsp() {
  SharedDtor();
}

void pick_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pick_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pick_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_rsp_descriptor_;
}

const pick_rsp& pick_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epick_2eproto();
  return *default_instance_;
}

pick_rsp* pick_rsp::default_instance_ = NULL;

pick_rsp* pick_rsp::New() const {
  return new pick_rsp;
}

void pick_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inst_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = 0u;
    action_ = 1;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pick_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 inst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // required .client.PICK_ACTION_E action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PICK_ACTION_E_IsValid(value)) {
            set_action(static_cast< ::client::PICK_ACTION_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required .client.PICK_RET_E ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PICK_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::PICK_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pick_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 inst_id = 1;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inst_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required .client.PICK_ACTION_E action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // required .client.PICK_RET_E ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pick_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 inst_id = 1;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inst_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required .client.PICK_ACTION_E action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // required .client.PICK_RET_E ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pick_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 inst_id = 1;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required .client.PICK_ACTION_E action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required .client.PICK_RET_E ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pick_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pick_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pick_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pick_rsp::MergeFrom(const pick_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pick_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pick_rsp::CopyFrom(const pick_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pick_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pick_rsp::Swap(pick_rsp* other) {
  if (other != this) {
    std::swap(inst_id_, other->inst_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(action_, other->action_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pick_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pick_rsp_descriptor_;
  metadata.reflection = pick_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
