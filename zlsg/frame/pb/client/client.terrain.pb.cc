// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.terrain.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.terrain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  point_reflection_ = NULL;
const ::google::protobuf::Descriptor* rectangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rectangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* terrain_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  terrain_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* terrain_operate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  terrain_operate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* terrain_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  terrain_list_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TERRAIN_LIST_METHOD_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eterrain_2eproto() {
  protobuf_AddDesc_client_2eterrain_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.terrain.proto");
  GOOGLE_CHECK(file != NULL);
  point_descriptor_ = file->message_type(0);
  static const int point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, y_),
  };
  point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      point_descriptor_,
      point::default_instance_,
      point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(point));
  rectangle_descriptor_ = file->message_type(1);
  static const int rectangle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, d_),
  };
  rectangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rectangle_descriptor_,
      rectangle::default_instance_,
      rectangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rectangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rectangle));
  terrain_info_descriptor_ = file->message_type(2);
  static const int terrain_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, terrain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, trigger_effects_),
  };
  terrain_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      terrain_info_descriptor_,
      terrain_info::default_instance_,
      terrain_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(terrain_info));
  terrain_operate_info_descriptor_ = file->message_type(3);
  static const int terrain_operate_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_operate_info, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_operate_info, ti_),
  };
  terrain_operate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      terrain_operate_info_descriptor_,
      terrain_operate_info::default_instance_,
      terrain_operate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_operate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_operate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(terrain_operate_info));
  terrain_list_descriptor_ = file->message_type(4);
  static const int terrain_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_list, toi_),
  };
  terrain_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      terrain_list_descriptor_,
      terrain_list::default_instance_,
      terrain_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terrain_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(terrain_list));
  TERRAIN_LIST_METHOD_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eterrain_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    point_descriptor_, &point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rectangle_descriptor_, &rectangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    terrain_info_descriptor_, &terrain_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    terrain_operate_info_descriptor_, &terrain_operate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    terrain_list_descriptor_, &terrain_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eterrain_2eproto() {
  delete point::default_instance_;
  delete point_reflection_;
  delete rectangle::default_instance_;
  delete rectangle_reflection_;
  delete terrain_info::default_instance_;
  delete terrain_info_reflection_;
  delete terrain_operate_info::default_instance_;
  delete terrain_operate_info_reflection_;
  delete terrain_list::default_instance_;
  delete terrain_list_reflection_;
}

void protobuf_AddDesc_client_2eterrain_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024client.terrain.proto\022\006client\032\021client.c"
    "omm.proto\"#\n\005point\022\014\n\001x\030\001 \002(\r:\0010\022\014\n\001y\030\002 "
    "\002(\r:\0010\"s\n\trectangle\022\030\n\001a\030\001 \002(\0132\r.client."
    "point\022\030\n\001b\030\002 \002(\0132\r.client.point\022\030\n\001c\030\003 \002"
    "(\0132\r.client.point\022\030\n\001d\030\004 \002(\0132\r.client.po"
    "int\"\264\001\n\014terrain_info\022\022\n\nterrain_id\030\001 \002(\r"
    "\022\021\n\teffect_id\030\002 \002(\r\022\037\n\004rect\030\003 \002(\0132\021.clie"
    "nt.rectangle\022\022\n\nstart_time\030\004 \002(\r\022\020\n\010end_"
    "time\030\005 \002(\r\022\035\n\002rd\030\006 \002(\0132\021.client.role_dat"
    "a\022\027\n\017trigger_effects\030\007 \003(\r\"g\n\024terrain_op"
    "erate_info\022-\n\006method\030\001 \002(\0162\035.client.TERR"
    "AIN_LIST_METHOD_E\022 \n\002ti\030\002 \002(\0132\024.client.t"
    "errain_info\"9\n\014terrain_list\022)\n\003toi\030\001 \003(\013"
    "2\034.client.terrain_operate_info*G\n\025TERRAI"
    "N_LIST_METHOD_E\022\014\n\010TLME_ADD\020\001\022\017\n\013TLME_UP"
    "DATE\020\002\022\017\n\013TLME_DELETE\020\003", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.terrain.proto", &protobuf_RegisterTypes);
  point::default_instance_ = new point();
  rectangle::default_instance_ = new rectangle();
  terrain_info::default_instance_ = new terrain_info();
  terrain_operate_info::default_instance_ = new terrain_operate_info();
  terrain_list::default_instance_ = new terrain_list();
  point::default_instance_->InitAsDefaultInstance();
  rectangle::default_instance_->InitAsDefaultInstance();
  terrain_info::default_instance_->InitAsDefaultInstance();
  terrain_operate_info::default_instance_->InitAsDefaultInstance();
  terrain_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eterrain_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eterrain_2eproto {
  StaticDescriptorInitializer_client_2eterrain_2eproto() {
    protobuf_AddDesc_client_2eterrain_2eproto();
  }
} static_descriptor_initializer_client_2eterrain_2eproto_;
const ::google::protobuf::EnumDescriptor* TERRAIN_LIST_METHOD_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TERRAIN_LIST_METHOD_E_descriptor_;
}
bool TERRAIN_LIST_METHOD_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int point::kXFieldNumber;
const int point::kYFieldNumber;
#endif  // !_MSC_VER

point::point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void point::InitAsDefaultInstance() {
}

point::point(const point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

point::~point() {
  SharedDtor();
}

void point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return point_descriptor_;
}

const point& point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eterrain_2eproto();
  return *default_instance_;
}

point* point::default_instance_ = NULL;

point* point::New() const {
  return new point;
}

void point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void point::MergeFrom(const point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point::CopyFrom(const point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void point::Swap(point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = point_descriptor_;
  metadata.reflection = point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rectangle::kAFieldNumber;
const int rectangle::kBFieldNumber;
const int rectangle::kCFieldNumber;
const int rectangle::kDFieldNumber;
#endif  // !_MSC_VER

rectangle::rectangle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rectangle::InitAsDefaultInstance() {
  a_ = const_cast< ::client::point*>(&::client::point::default_instance());
  b_ = const_cast< ::client::point*>(&::client::point::default_instance());
  c_ = const_cast< ::client::point*>(&::client::point::default_instance());
  d_ = const_cast< ::client::point*>(&::client::point::default_instance());
}

rectangle::rectangle(const rectangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rectangle::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  c_ = NULL;
  d_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rectangle::~rectangle() {
  SharedDtor();
}

void rectangle::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
    delete c_;
    delete d_;
  }
}

void rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rectangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rectangle_descriptor_;
}

const rectangle& rectangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eterrain_2eproto();
  return *default_instance_;
}

rectangle* rectangle::default_instance_ = NULL;

rectangle* rectangle::New() const {
  return new rectangle;
}

void rectangle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_a()) {
      if (a_ != NULL) a_->::client::point::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::client::point::Clear();
    }
    if (has_c()) {
      if (c_ != NULL) c_->::client::point::Clear();
    }
    if (has_d()) {
      if (d_ != NULL) d_->::client::point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.point a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .client.point b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_c;
        break;
      }

      // required .client.point c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_d;
        break;
      }

      // required .client.point d = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.point a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .client.point b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  // required .client.point c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->c(), output);
  }

  // required .client.point d = 4;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->d(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rectangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.point a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .client.point b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  // required .client.point c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->c(), target);
  }

  // required .client.point d = 4;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->d(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rectangle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.point a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .client.point b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

    // required .client.point c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c());
    }

    // required .client.point d = 4;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rectangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rectangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rectangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rectangle::MergeFrom(const rectangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::client::point::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::client::point::MergeFrom(from.b());
    }
    if (from.has_c()) {
      mutable_c()->::client::point::MergeFrom(from.c());
    }
    if (from.has_d()) {
      mutable_d()->::client::point::MergeFrom(from.d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rectangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rectangle::CopyFrom(const rectangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  if (has_c()) {
    if (!this->c().IsInitialized()) return false;
  }
  if (has_d()) {
    if (!this->d().IsInitialized()) return false;
  }
  return true;
}

void rectangle::Swap(rectangle* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rectangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rectangle_descriptor_;
  metadata.reflection = rectangle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int terrain_info::kTerrainIdFieldNumber;
const int terrain_info::kEffectIdFieldNumber;
const int terrain_info::kRectFieldNumber;
const int terrain_info::kStartTimeFieldNumber;
const int terrain_info::kEndTimeFieldNumber;
const int terrain_info::kRdFieldNumber;
const int terrain_info::kTriggerEffectsFieldNumber;
#endif  // !_MSC_VER

terrain_info::terrain_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void terrain_info::InitAsDefaultInstance() {
  rect_ = const_cast< ::client::rectangle*>(&::client::rectangle::default_instance());
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

terrain_info::terrain_info(const terrain_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void terrain_info::SharedCtor() {
  _cached_size_ = 0;
  terrain_id_ = 0u;
  effect_id_ = 0u;
  rect_ = NULL;
  start_time_ = 0u;
  end_time_ = 0u;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

terrain_info::~terrain_info() {
  SharedDtor();
}

void terrain_info::SharedDtor() {
  if (this != default_instance_) {
    delete rect_;
    delete rd_;
  }
}

void terrain_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* terrain_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terrain_info_descriptor_;
}

const terrain_info& terrain_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eterrain_2eproto();
  return *default_instance_;
}

terrain_info* terrain_info::default_instance_ = NULL;

terrain_info* terrain_info::New() const {
  return new terrain_info;
}

void terrain_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    terrain_id_ = 0u;
    effect_id_ = 0u;
    if (has_rect()) {
      if (rect_ != NULL) rect_->::client::rectangle::Clear();
    }
    start_time_ = 0u;
    end_time_ = 0u;
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  trigger_effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool terrain_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 terrain_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terrain_id_)));
          set_has_terrain_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_id;
        break;
      }

      // required uint32 effect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rect;
        break;
      }

      // required .client.rectangle rect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required uint32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rd;
        break;
      }

      // required .client.role_data rd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_trigger_effects;
        break;
      }

      // repeated uint32 trigger_effects = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_effects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_trigger_effects())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_trigger_effects())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_trigger_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void terrain_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 terrain_id = 1;
  if (has_terrain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terrain_id(), output);
  }

  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_id(), output);
  }

  // required .client.rectangle rect = 3;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect(), output);
  }

  // required uint32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // required uint32 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  // required .client.role_data rd = 6;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rd(), output);
  }

  // repeated uint32 trigger_effects = 7;
  for (int i = 0; i < this->trigger_effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->trigger_effects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* terrain_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 terrain_id = 1;
  if (has_terrain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terrain_id(), target);
  }

  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_id(), target);
  }

  // required .client.rectangle rect = 3;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect(), target);
  }

  // required uint32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // required uint32 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  // required .client.role_data rd = 6;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rd(), target);
  }

  // repeated uint32 trigger_effects = 7;
  for (int i = 0; i < this->trigger_effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->trigger_effects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int terrain_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 terrain_id = 1;
    if (has_terrain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terrain_id());
    }

    // required uint32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // required .client.rectangle rect = 3;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // required uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // required uint32 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required .client.role_data rd = 6;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated uint32 trigger_effects = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->trigger_effects_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->trigger_effects(i));
    }
    total_size += 1 * this->trigger_effects_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void terrain_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const terrain_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const terrain_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void terrain_info::MergeFrom(const terrain_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  trigger_effects_.MergeFrom(from.trigger_effects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terrain_id()) {
      set_terrain_id(from.terrain_id());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_rect()) {
      mutable_rect()->::client::rectangle::MergeFrom(from.rect());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void terrain_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void terrain_info::CopyFrom(const terrain_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool terrain_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void terrain_info::Swap(terrain_info* other) {
  if (other != this) {
    std::swap(terrain_id_, other->terrain_id_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(rect_, other->rect_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(rd_, other->rd_);
    trigger_effects_.Swap(&other->trigger_effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata terrain_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = terrain_info_descriptor_;
  metadata.reflection = terrain_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int terrain_operate_info::kMethodFieldNumber;
const int terrain_operate_info::kTiFieldNumber;
#endif  // !_MSC_VER

terrain_operate_info::terrain_operate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void terrain_operate_info::InitAsDefaultInstance() {
  ti_ = const_cast< ::client::terrain_info*>(&::client::terrain_info::default_instance());
}

terrain_operate_info::terrain_operate_info(const terrain_operate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void terrain_operate_info::SharedCtor() {
  _cached_size_ = 0;
  method_ = 1;
  ti_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

terrain_operate_info::~terrain_operate_info() {
  SharedDtor();
}

void terrain_operate_info::SharedDtor() {
  if (this != default_instance_) {
    delete ti_;
  }
}

void terrain_operate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* terrain_operate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terrain_operate_info_descriptor_;
}

const terrain_operate_info& terrain_operate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eterrain_2eproto();
  return *default_instance_;
}

terrain_operate_info* terrain_operate_info::default_instance_ = NULL;

terrain_operate_info* terrain_operate_info::New() const {
  return new terrain_operate_info;
}

void terrain_operate_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    method_ = 1;
    if (has_ti()) {
      if (ti_ != NULL) ti_->::client::terrain_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool terrain_operate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TERRAIN_LIST_METHOD_E method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TERRAIN_LIST_METHOD_E_IsValid(value)) {
            set_method(static_cast< ::client::TERRAIN_LIST_METHOD_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ti;
        break;
      }

      // required .client.terrain_info ti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void terrain_operate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TERRAIN_LIST_METHOD_E method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // required .client.terrain_info ti = 2;
  if (has_ti()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ti(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* terrain_operate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TERRAIN_LIST_METHOD_E method = 1;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // required .client.terrain_info ti = 2;
  if (has_ti()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ti(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int terrain_operate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TERRAIN_LIST_METHOD_E method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // required .client.terrain_info ti = 2;
    if (has_ti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ti());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void terrain_operate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const terrain_operate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const terrain_operate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void terrain_operate_info::MergeFrom(const terrain_operate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_ti()) {
      mutable_ti()->::client::terrain_info::MergeFrom(from.ti());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void terrain_operate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void terrain_operate_info::CopyFrom(const terrain_operate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool terrain_operate_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ti()) {
    if (!this->ti().IsInitialized()) return false;
  }
  return true;
}

void terrain_operate_info::Swap(terrain_operate_info* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(ti_, other->ti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata terrain_operate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = terrain_operate_info_descriptor_;
  metadata.reflection = terrain_operate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int terrain_list::kToiFieldNumber;
#endif  // !_MSC_VER

terrain_list::terrain_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void terrain_list::InitAsDefaultInstance() {
}

terrain_list::terrain_list(const terrain_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void terrain_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

terrain_list::~terrain_list() {
  SharedDtor();
}

void terrain_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void terrain_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* terrain_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terrain_list_descriptor_;
}

const terrain_list& terrain_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eterrain_2eproto();
  return *default_instance_;
}

terrain_list* terrain_list::default_instance_ = NULL;

terrain_list* terrain_list::New() const {
  return new terrain_list;
}

void terrain_list::Clear() {
  toi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool terrain_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.terrain_operate_info toi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_toi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void terrain_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.terrain_operate_info toi = 1;
  for (int i = 0; i < this->toi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* terrain_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.terrain_operate_info toi = 1;
  for (int i = 0; i < this->toi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int terrain_list::ByteSize() const {
  int total_size = 0;

  // repeated .client.terrain_operate_info toi = 1;
  total_size += 1 * this->toi_size();
  for (int i = 0; i < this->toi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void terrain_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const terrain_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const terrain_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void terrain_list::MergeFrom(const terrain_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  toi_.MergeFrom(from.toi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void terrain_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void terrain_list::CopyFrom(const terrain_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool terrain_list::IsInitialized() const {

  for (int i = 0; i < toi_size(); i++) {
    if (!this->toi(i).IsInitialized()) return false;
  }
  return true;
}

void terrain_list::Swap(terrain_list* other) {
  if (other != this) {
    toi_.Swap(&other->toi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata terrain_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = terrain_list_descriptor_;
  metadata.reflection = terrain_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
