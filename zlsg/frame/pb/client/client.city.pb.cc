// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.city.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.city.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* official_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  official_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_mod_title_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_mod_title_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_mod_title_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_mod_title_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_pos_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_pos_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_get_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_get_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_get_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_get_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_get_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_get_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_enter_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_enter_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* siege_enter_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* siege_enter_field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_enter_field_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_scene_camp_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_scene_camp_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_scene_camp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_scene_camp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_dead_msg_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_dead_msg_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_revive_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_revive_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_revive_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_revive_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_status_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_status_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_personal_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_personal_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_over_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_over_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_skill_modify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_skill_modify_reflection_ = NULL;
const ::google::protobuf::Descriptor* king_skill_add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  king_skill_add_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_random_trans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_random_trans_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_flag_occupy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_flag_occupy_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_welfare_get_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_welfare_get_confirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_accept_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_accept_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_call_accept_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_accept_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* siege_call_accept_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* siege_call_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_call_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_personal_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_personal_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_personal_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_personal_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_field_open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_field_open_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* siege_broadcast_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siege_broadcast_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_sculpture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_sculpture_reflection_ = NULL;
const ::google::protobuf::Descriptor* kingdom_sculpture_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kingdom_sculpture_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* kingdom_sculpture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kingdom_sculpture_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CITY_OPT_ERR_NO_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2ecity_2eproto() {
  protobuf_AddDesc_client_2ecity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.city.proto");
  GOOGLE_CHECK(file != NULL);
  official_info_descriptor_ = file->message_type(0);
  static const int official_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, model_id_),
  };
  official_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      official_info_descriptor_,
      official_info::default_instance_,
      official_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(official_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(official_info));
  city_info_req_descriptor_ = file->message_type(1);
  static const int city_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_req, svr_head_),
  };
  city_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_info_req_descriptor_,
      city_info_req::default_instance_,
      city_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_info_req));
  city_info_rsp_descriptor_ = file->message_type(2);
  static const int city_info_rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, modify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, oi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, timelong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, title_),
  };
  city_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_info_rsp_descriptor_,
      city_info_rsp::default_instance_,
      city_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_info_rsp));
  city_mod_title_req_descriptor_ = file->message_type(3);
  static const int city_mod_title_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_req, city_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_req, svr_head_),
  };
  city_mod_title_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_mod_title_req_descriptor_,
      city_mod_title_req::default_instance_,
      city_mod_title_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_mod_title_req));
  city_mod_title_rsp_descriptor_ = file->message_type(4);
  static const int city_mod_title_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_rsp, err_no_),
  };
  city_mod_title_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_mod_title_rsp_descriptor_,
      city_mod_title_rsp::default_instance_,
      city_mod_title_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_mod_title_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_mod_title_rsp));
  city_welfare_info_req_descriptor_ = file->message_type(5);
  static const int city_welfare_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_req, svr_head_),
  };
  city_welfare_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_info_req_descriptor_,
      city_welfare_info_req::default_instance_,
      city_welfare_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_info_req));
  city_pos_reward_descriptor_ = file->message_type(6);
  static const int city_pos_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_pos_reward, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_pos_reward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_pos_reward, num_),
  };
  city_pos_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_pos_reward_descriptor_,
      city_pos_reward::default_instance_,
      city_pos_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_pos_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_pos_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_pos_reward));
  city_welfare_info_rsp_descriptor_ = file->message_type(7);
  static const int city_welfare_info_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_rsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_rsp, cpr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_rsp, status_),
  };
  city_welfare_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_info_rsp_descriptor_,
      city_welfare_info_rsp::default_instance_,
      city_welfare_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_info_rsp));
  city_welfare_get_req_descriptor_ = file->message_type(8);
  static const int city_welfare_get_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_req, svr_head_),
  };
  city_welfare_get_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_get_req_descriptor_,
      city_welfare_get_req::default_instance_,
      city_welfare_get_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_get_req));
  city_welfare_get_rsp_descriptor_ = file->message_type(9);
  static const int city_welfare_get_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_rsp, err_no_),
  };
  city_welfare_get_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_get_rsp_descriptor_,
      city_welfare_get_rsp::default_instance_,
      city_welfare_get_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_get_rsp));
  city_welfare_get_notify_descriptor_ = file->message_type(10);
  static const int city_welfare_get_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_notify, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_notify, props_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_notify, num_),
  };
  city_welfare_get_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_get_notify_descriptor_,
      city_welfare_get_notify::default_instance_,
      city_welfare_get_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_get_notify));
  siege_enter_req_descriptor_ = file->message_type(11);
  static const int siege_enter_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_req, svr_head_),
  };
  siege_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_enter_req_descriptor_,
      siege_enter_req::default_instance_,
      siege_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_enter_req));
  siege_enter_rsp_descriptor_ = file->message_type(12);
  static const int siege_enter_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_rsp, ret_),
  };
  siege_enter_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_enter_rsp_descriptor_,
      siege_enter_rsp::default_instance_,
      siege_enter_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_enter_rsp));
  siege_enter_rsp_RET_descriptor_ = siege_enter_rsp_descriptor_->enum_type(0);
  siege_enter_field_descriptor_ = file->message_type(13);
  static const int siege_enter_field_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_field, role_id_),
  };
  siege_enter_field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_enter_field_descriptor_,
      siege_enter_field::default_instance_,
      siege_enter_field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_enter_field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_enter_field));
  siege_scene_camp_req_descriptor_ = file->message_type(14);
  static const int siege_scene_camp_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp_req, svr_head_),
  };
  siege_scene_camp_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_scene_camp_req_descriptor_,
      siege_scene_camp_req::default_instance_,
      siege_scene_camp_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_scene_camp_req));
  siege_scene_camp_descriptor_ = file->message_type(15);
  static const int siege_scene_camp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, occupy_time_),
  };
  siege_scene_camp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_scene_camp_descriptor_,
      siege_scene_camp::default_instance_,
      siege_scene_camp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_scene_camp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_scene_camp));
  siege_dead_msg_rsp_descriptor_ = file->message_type(16);
  static const int siege_dead_msg_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_dead_msg_rsp, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_dead_msg_rsp, family_name_),
  };
  siege_dead_msg_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_dead_msg_rsp_descriptor_,
      siege_dead_msg_rsp::default_instance_,
      siege_dead_msg_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_dead_msg_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_dead_msg_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_dead_msg_rsp));
  siege_revive_req_descriptor_ = file->message_type(17);
  static const int siege_revive_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_req, svr_head_),
  };
  siege_revive_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_revive_req_descriptor_,
      siege_revive_req::default_instance_,
      siege_revive_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_revive_req));
  siege_revive_rsp_descriptor_ = file->message_type(18);
  static const int siege_revive_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_rsp, unixtime_),
  };
  siege_revive_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_revive_rsp_descriptor_,
      siege_revive_rsp::default_instance_,
      siege_revive_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_revive_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_revive_rsp));
  siege_status_descriptor_ = file->message_type(19);
  static const int siege_status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status, role_id_),
  };
  siege_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_status_descriptor_,
      siege_status::default_instance_,
      siege_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_status));
  siege_status_rsp_descriptor_ = file->message_type(20);
  static const int siege_status_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status_rsp, status_),
  };
  siege_status_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_status_rsp_descriptor_,
      siege_status_rsp::default_instance_,
      siege_status_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_status_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_status_rsp));
  siege_personal_info_descriptor_ = file->message_type(21);
  static const int siege_personal_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, cur_combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, timelong_),
  };
  siege_personal_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_personal_info_descriptor_,
      siege_personal_info::default_instance_,
      siege_personal_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_personal_info));
  siege_over_descriptor_ = file->message_type(22);
  static const int siege_over_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_over, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_over, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_over, role_),
  };
  siege_over_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_over_descriptor_,
      siege_over::default_instance_,
      siege_over_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_over, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_over, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_over));
  siege_skill_modify_descriptor_ = file->message_type(23);
  static const int siege_skill_modify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_skill_modify, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_skill_modify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_skill_modify, op_),
  };
  siege_skill_modify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_skill_modify_descriptor_,
      siege_skill_modify::default_instance_,
      siege_skill_modify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_skill_modify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_skill_modify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_skill_modify));
  king_skill_add_descriptor_ = file->message_type(24);
  static const int king_skill_add_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_skill_add, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_skill_add, family_id_),
  };
  king_skill_add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      king_skill_add_descriptor_,
      king_skill_add::default_instance_,
      king_skill_add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_skill_add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_skill_add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(king_skill_add));
  siege_random_trans_descriptor_ = file->message_type(25);
  static const int siege_random_trans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_random_trans, unixtime_),
  };
  siege_random_trans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_random_trans_descriptor_,
      siege_random_trans::default_instance_,
      siege_random_trans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_random_trans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_random_trans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_random_trans));
  siege_flag_occupy_descriptor_ = file->message_type(26);
  static const int siege_flag_occupy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_flag_occupy, old_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_flag_occupy, new_family_id_),
  };
  siege_flag_occupy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_flag_occupy_descriptor_,
      siege_flag_occupy::default_instance_,
      siege_flag_occupy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_flag_occupy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_flag_occupy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_flag_occupy));
  city_welfare_get_confirm_descriptor_ = file->message_type(27);
  static const int city_welfare_get_confirm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_confirm, role_id_),
  };
  city_welfare_get_confirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_welfare_get_confirm_descriptor_,
      city_welfare_get_confirm::default_instance_,
      city_welfare_get_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_confirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_welfare_get_confirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_welfare_get_confirm));
  siege_call_info_descriptor_ = file->message_type(28);
  static const int siege_call_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_info, family_id_),
  };
  siege_call_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_info_descriptor_,
      siege_call_info::default_instance_,
      siege_call_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_info));
  siege_call_req_descriptor_ = file->message_type(29);
  static const int siege_call_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_req, svr_head_),
  };
  siege_call_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_req_descriptor_,
      siege_call_req::default_instance_,
      siege_call_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_req));
  siege_call_rsp_descriptor_ = file->message_type(30);
  static const int siege_call_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_rsp, err_no_),
  };
  siege_call_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_rsp_descriptor_,
      siege_call_rsp::default_instance_,
      siege_call_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_rsp));
  siege_call_accept_req_descriptor_ = file->message_type(31);
  static const int siege_call_accept_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_req, svr_head_),
  };
  siege_call_accept_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_accept_req_descriptor_,
      siege_call_accept_req::default_instance_,
      siege_call_accept_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_accept_req));
  siege_call_descriptor_ = file->message_type(32);
  static const int siege_call_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call, chief_),
  };
  siege_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_descriptor_,
      siege_call::default_instance_,
      siege_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call));
  siege_call_accept_rsp_descriptor_ = file->message_type(33);
  static const int siege_call_accept_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_rsp, ret_),
  };
  siege_call_accept_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_accept_rsp_descriptor_,
      siege_call_accept_rsp::default_instance_,
      siege_call_accept_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_accept_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_accept_rsp));
  siege_call_accept_rsp_RET_descriptor_ = siege_call_accept_rsp_descriptor_->enum_type(0);
  siege_call_status_descriptor_ = file->message_type(34);
  static const int siege_call_status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_status, time_),
  };
  siege_call_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_call_status_descriptor_,
      siege_call_status::default_instance_,
      siege_call_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_call_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_call_status));
  siege_personal_info_req_descriptor_ = file->message_type(35);
  static const int siege_personal_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_req, svr_head_),
  };
  siege_personal_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_personal_info_req_descriptor_,
      siege_personal_info_req::default_instance_,
      siege_personal_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_personal_info_req));
  siege_personal_info_rsp_descriptor_ = file->message_type(36);
  static const int siege_personal_info_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, add_),
  };
  siege_personal_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_personal_info_rsp_descriptor_,
      siege_personal_info_rsp::default_instance_,
      siege_personal_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_personal_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_personal_info_rsp));
  siege_field_open_descriptor_ = file->message_type(37);
  static const int siege_field_open_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_field_open, time_),
  };
  siege_field_open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_field_open_descriptor_,
      siege_field_open::default_instance_,
      siege_field_open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_field_open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_field_open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_field_open));
  siege_start_descriptor_ = file->message_type(38);
  static const int siege_start_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, close_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, occupy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, fsi_),
  };
  siege_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_start_descriptor_,
      siege_start::default_instance_,
      siege_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_start));
  siege_broadcast_msg_descriptor_ = file->message_type(39);
  static const int siege_broadcast_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_broadcast_msg, id_),
  };
  siege_broadcast_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siege_broadcast_msg_descriptor_,
      siege_broadcast_msg::default_instance_,
      siege_broadcast_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_broadcast_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siege_broadcast_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siege_broadcast_msg));
  update_sculpture_descriptor_ = file->message_type(40);
  static const int update_sculpture_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, family_name_),
  };
  update_sculpture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_sculpture_descriptor_,
      update_sculpture::default_instance_,
      update_sculpture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_sculpture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_sculpture));
  kingdom_sculpture_info_descriptor_ = file->message_type(41);
  static const int kingdom_sculpture_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, family_name_),
  };
  kingdom_sculpture_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kingdom_sculpture_info_descriptor_,
      kingdom_sculpture_info::default_instance_,
      kingdom_sculpture_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kingdom_sculpture_info));
  kingdom_sculpture_descriptor_ = file->message_type(42);
  static const int kingdom_sculpture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture, ksi_),
  };
  kingdom_sculpture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kingdom_sculpture_descriptor_,
      kingdom_sculpture::default_instance_,
      kingdom_sculpture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kingdom_sculpture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kingdom_sculpture));
  CITY_OPT_ERR_NO_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2ecity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    official_info_descriptor_, &official_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_info_req_descriptor_, &city_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_info_rsp_descriptor_, &city_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_mod_title_req_descriptor_, &city_mod_title_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_mod_title_rsp_descriptor_, &city_mod_title_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_info_req_descriptor_, &city_welfare_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_pos_reward_descriptor_, &city_pos_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_info_rsp_descriptor_, &city_welfare_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_get_req_descriptor_, &city_welfare_get_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_get_rsp_descriptor_, &city_welfare_get_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_get_notify_descriptor_, &city_welfare_get_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_enter_req_descriptor_, &siege_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_enter_rsp_descriptor_, &siege_enter_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_enter_field_descriptor_, &siege_enter_field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_scene_camp_req_descriptor_, &siege_scene_camp_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_scene_camp_descriptor_, &siege_scene_camp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_dead_msg_rsp_descriptor_, &siege_dead_msg_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_revive_req_descriptor_, &siege_revive_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_revive_rsp_descriptor_, &siege_revive_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_status_descriptor_, &siege_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_status_rsp_descriptor_, &siege_status_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_personal_info_descriptor_, &siege_personal_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_over_descriptor_, &siege_over::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_skill_modify_descriptor_, &siege_skill_modify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    king_skill_add_descriptor_, &king_skill_add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_random_trans_descriptor_, &siege_random_trans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_flag_occupy_descriptor_, &siege_flag_occupy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_welfare_get_confirm_descriptor_, &city_welfare_get_confirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_info_descriptor_, &siege_call_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_req_descriptor_, &siege_call_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_rsp_descriptor_, &siege_call_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_accept_req_descriptor_, &siege_call_accept_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_descriptor_, &siege_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_accept_rsp_descriptor_, &siege_call_accept_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_call_status_descriptor_, &siege_call_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_personal_info_req_descriptor_, &siege_personal_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_personal_info_rsp_descriptor_, &siege_personal_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_field_open_descriptor_, &siege_field_open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_start_descriptor_, &siege_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siege_broadcast_msg_descriptor_, &siege_broadcast_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_sculpture_descriptor_, &update_sculpture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kingdom_sculpture_info_descriptor_, &kingdom_sculpture_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kingdom_sculpture_descriptor_, &kingdom_sculpture::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2ecity_2eproto() {
  delete official_info::default_instance_;
  delete official_info_reflection_;
  delete city_info_req::default_instance_;
  delete city_info_req_reflection_;
  delete city_info_rsp::default_instance_;
  delete city_info_rsp_reflection_;
  delete city_mod_title_req::default_instance_;
  delete city_mod_title_req_reflection_;
  delete city_mod_title_rsp::default_instance_;
  delete city_mod_title_rsp_reflection_;
  delete city_welfare_info_req::default_instance_;
  delete city_welfare_info_req_reflection_;
  delete city_pos_reward::default_instance_;
  delete city_pos_reward_reflection_;
  delete city_welfare_info_rsp::default_instance_;
  delete city_welfare_info_rsp_reflection_;
  delete city_welfare_get_req::default_instance_;
  delete city_welfare_get_req_reflection_;
  delete city_welfare_get_rsp::default_instance_;
  delete city_welfare_get_rsp_reflection_;
  delete city_welfare_get_notify::default_instance_;
  delete city_welfare_get_notify_reflection_;
  delete siege_enter_req::default_instance_;
  delete siege_enter_req_reflection_;
  delete siege_enter_rsp::default_instance_;
  delete siege_enter_rsp_reflection_;
  delete siege_enter_field::default_instance_;
  delete siege_enter_field_reflection_;
  delete siege_scene_camp_req::default_instance_;
  delete siege_scene_camp_req_reflection_;
  delete siege_scene_camp::default_instance_;
  delete siege_scene_camp_reflection_;
  delete siege_dead_msg_rsp::default_instance_;
  delete siege_dead_msg_rsp_reflection_;
  delete siege_revive_req::default_instance_;
  delete siege_revive_req_reflection_;
  delete siege_revive_rsp::default_instance_;
  delete siege_revive_rsp_reflection_;
  delete siege_status::default_instance_;
  delete siege_status_reflection_;
  delete siege_status_rsp::default_instance_;
  delete siege_status_rsp_reflection_;
  delete siege_personal_info::default_instance_;
  delete siege_personal_info_reflection_;
  delete siege_over::default_instance_;
  delete siege_over_reflection_;
  delete siege_skill_modify::default_instance_;
  delete siege_skill_modify_reflection_;
  delete king_skill_add::default_instance_;
  delete king_skill_add_reflection_;
  delete siege_random_trans::default_instance_;
  delete siege_random_trans_reflection_;
  delete siege_flag_occupy::default_instance_;
  delete siege_flag_occupy_reflection_;
  delete city_welfare_get_confirm::default_instance_;
  delete city_welfare_get_confirm_reflection_;
  delete siege_call_info::default_instance_;
  delete siege_call_info_reflection_;
  delete siege_call_req::default_instance_;
  delete siege_call_req_reflection_;
  delete siege_call_rsp::default_instance_;
  delete siege_call_rsp_reflection_;
  delete siege_call_accept_req::default_instance_;
  delete siege_call_accept_req_reflection_;
  delete siege_call::default_instance_;
  delete siege_call_reflection_;
  delete siege_call_accept_rsp::default_instance_;
  delete siege_call_accept_rsp_reflection_;
  delete siege_call_status::default_instance_;
  delete siege_call_status_reflection_;
  delete siege_personal_info_req::default_instance_;
  delete siege_personal_info_req_reflection_;
  delete siege_personal_info_rsp::default_instance_;
  delete siege_personal_info_rsp_reflection_;
  delete siege_field_open::default_instance_;
  delete siege_field_open_reflection_;
  delete siege_start::default_instance_;
  delete siege_start_reflection_;
  delete siege_broadcast_msg::default_instance_;
  delete siege_broadcast_msg_reflection_;
  delete update_sculpture::default_instance_;
  delete update_sculpture_reflection_;
  delete kingdom_sculpture_info::default_instance_;
  delete kingdom_sculpture_info_reflection_;
  delete kingdom_sculpture::default_instance_;
  delete kingdom_sculpture_reflection_;
}

void protobuf_AddDesc_client_2ecity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2efamily_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.city.proto\022\006client\032\021client.comm"
    ".proto\032\023client.family.proto\"_\n\rofficial_"
    "info\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_name\030\002 \002(\t"
    "\022\013\n\003pos\030\003 \002(\r\022\013\n\003sex\030\004 \002(\r\022\020\n\010model_id\030\005"
    " \002(\t\"H\n\rcity_info_req\022\017\n\007role_id\030\001 \002(\r\022&"
    "\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\"\240"
    "\001\n\rcity_info_rsp\022\025\n\006modify\030\001 \002(\010:\005false\022"
    "\021\n\topen_time\030\002 \002(\r\022\014\n\004last\030\003 \002(\r\022!\n\002oi\030\004"
    " \003(\0132\025.client.official_info\022\020\n\010timelong\030"
    "\005 \001(\r\022\023\n\013family_name\030\006 \001(\t\022\r\n\005title\030\007 \001("
    "\t\"P\n\022city_mod_title_req\022\022\n\ncity_title\030\001 "
    "\002(\t\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_h"
    "ead\"\?\n\022city_mod_title_rsp\022)\n\006err_no\030\001 \002("
    "\0162\031.client.CITY_OPT_ERR_NO_E\"P\n\025city_wel"
    "fare_info_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_he"
    "ad\030\350\007 \001(\0132\023.client.server_head\"7\n\017city_p"
    "os_reward\022\013\n\003pos\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\013\n\003nu"
    "m\030\003 \002(\r\"Z\n\025city_welfare_info_rsp\022\013\n\003pos\030"
    "\001 \002(\r\022$\n\003cpr\030\002 \003(\0132\027.client.city_pos_rew"
    "ard\022\016\n\006status\030\003 \001(\r\"O\n\024city_welfare_get_"
    "req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"A\n\024city_welfare_get"
    "_rsp\022)\n\006err_no\030\001 \002(\0162\031.client.CITY_OPT_E"
    "RR_NO_E\"I\n\027city_welfare_get_notify\022\017\n\007ro"
    "le_id\030\001 \002(\r\022\020\n\010props_id\030\002 \002(\r\022\013\n\003num\030\003 \002"
    "(\005\"K\n\017siege_enter_req\022\020\n\010unixtime\030\001 \002(\r\022"
    "&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\""
    "n\n\017siege_enter_rsp\022(\n\003ret\030\001 \002(\0162\033.client"
    ".siege_enter_rsp.RET\"1\n\003RET\022\013\n\007SUCCESS\020\000"
    "\022\013\n\007FAILURE\020\001\022\020\n\014SCENE_CLOSED\020\002\"$\n\021siege"
    "_enter_field\022\017\n\007role_id\030\001 \002(\r\"L\n\024siege_s"
    "cene_camp_req\022\014\n\004time\030\001 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"p\n\020siege_sce"
    "ne_camp\022\014\n\004camp\030\001 \002(\r\022\021\n\topen_time\030\002 \002(\r"
    "\022\023\n\013family_name\030\003 \001(\t\022\021\n\tuser_name\030\004 \001(\t"
    "\022\023\n\013occupy_time\030\005 \001(\r\"<\n\022siege_dead_msg_"
    "rsp\022\021\n\tuser_name\030\001 \002(\t\022\023\n\013family_name\030\002 "
    "\002(\t\"L\n\020siege_revive_req\022\020\n\010unixtime\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"$\n\020siege_revive_rsp\022\020\n\010unixtime\030\001 \002(\r\""
    "\037\n\014siege_status\022\017\n\007role_id\030\001 \002(\r\"\"\n\020sieg"
    "e_status_rsp\022\016\n\006status\030\001 \002(\r\"\217\001\n\023siege_p"
    "ersonal_info\022\017\n\007role_id\030\001 \002(\r\022\021\n\tuser_na"
    "me\030\002 \002(\t\022\014\n\004tick\030\003 \002(\r\022\021\n\tcur_combo\030\004 \002("
    "\r\022\016\n\003exp\030\005 \002(\r:\0010\022\016\n\006region\030\006 \002(\r\022\023\n\010tim"
    "elong\030\007 \002(\r:\0010\"=\n\nsiege_over\022\021\n\tfamily_i"
    "d\030\001 \002(\r\022\016\n\006msg_id\030\002 \002(\r\022\014\n\004role\030\003 \003(\r\"=\n"
    "\022siege_skill_modify\022\017\n\007role_id\030\001 \002(\r\022\n\n\002"
    "id\030\002 \003(\r\022\n\n\002op\030\003 \002(\r\"4\n\016king_skill_add\022\017"
    "\n\007role_id\030\001 \002(\r\022\021\n\tfamily_id\030\002 \002(\r\"&\n\022si"
    "ege_random_trans\022\020\n\010unixtime\030\001 \002(\r\"A\n\021si"
    "ege_flag_occupy\022\025\n\rold_family_id\030\001 \002(\r\022\025"
    "\n\rnew_family_id\030\002 \002(\r\"+\n\030city_welfare_ge"
    "t_confirm\022\017\n\007role_id\030\001 \002(\r\"$\n\017siege_call"
    "_info\022\021\n\tfamily_id\030\001 \002(\r\"F\n\016siege_call_r"
    "eq\022\014\n\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cl"
    "ient.server_head\";\n\016siege_call_rsp\022)\n\006er"
    "r_no\030\001 \002(\0162\031.client.CITY_OPT_ERR_NO_E\"R\n"
    "\025siege_call_accept_req\022\021\n\tfamily_id\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\",\n\nsiege_call\022\017\n\007role_id\030\001 \002(\r\022\r\n\005chie"
    "f\030\002 \002(\r\"\255\001\n\025siege_call_accept_rsp\022.\n\003ret"
    "\030\001 \002(\0162!.client.siege_call_accept_rsp.RE"
    "T\"d\n\003RET\022\013\n\007SUCCESS\020\000\022\013\n\007TIMEOUT\020\001\022\013\n\007OU"
    "TSIDE\020\002\022\020\n\014KING_OUTSIDE\020\003\022\r\n\tNO_FAMILY\020\004"
    "\022\013\n\007MY_CALL\020\005\022\010\n\004DEAD\020\006\"!\n\021siege_call_st"
    "atus\022\014\n\004time\030\002 \002(\r\"R\n\027siege_personal_inf"
    "o_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"Q\n\027siege_personal"
    "_info_rsp\022\016\n\006region\030\001 \002(\r\022\013\n\003exp\030\002 \002(\r\022\014"
    "\n\004time\030\003 \002(\r\022\013\n\003add\030\004 \002(\r\" \n\020siege_field"
    "_open\022\014\n\004time\030\001 \002(\r\"\205\001\n\013siege_start\022\021\n\to"
    "pen_time\030\001 \002(\r\022\022\n\nclose_time\030\002 \002(\r\022\021\n\tfa"
    "mily_id\030\003 \001(\r\022\023\n\013occupy_time\030\004 \001(\r\022\'\n\003fs"
    "i\030\005 \003(\0132\032.client.family_simple_info\"!\n\023s"
    "iege_broadcast_msg\022\n\n\002id\030\001 \002(\t\"U\n\020update"
    "_sculpture\022\017\n\007role_id\030\001 \002(\r\022\014\n\004king\030\002 \002("
    "\t\022\r\n\005title\030\003 \002(\t\022\023\n\013family_name\030\004 \002(\t\"\202\001"
    "\n\026kingdom_sculpture_info\022\017\n\007role_id\030\001 \002("
    "\r\022\014\n\004king\030\002 \002(\t\022\r\n\005title\030\003 \002(\t\022\017\n\007inst_i"
    "d\030\004 \002(\004\022\t\n\001x\030\005 \002(\r\022\t\n\001y\030\006 \002(\r\022\023\n\013family_"
    "name\030\007 \002(\t\"@\n\021kingdom_sculpture\022+\n\003ksi\030\001"
    " \003(\0132\036.client.kingdom_sculpture_info*\215\003\n"
    "\021CITY_OPT_ERR_NO_E\022\013\n\007SUCCESS\020\000\022\021\n\rSIEGE"
    "_PROCEED\020\001\022\016\n\nKING_LIMIT\020\002\022\016\n\nNAME_EXIST"
    "\020\003\022\021\n\rNAME_TOO_LONG\020\004\022\020\n\014SIEGE_CLOSED\020\005\022"
    "\023\n\017ALREADY_ENTERED\020\006\022\014\n\010LV_LIMIT\020\007\022\020\n\014FA"
    "MILY_LIMIT\020\010\022\022\n\016OFFICIAL_LIMIT\020\t\022\016\n\nREWA"
    "RD_GOT\020\n\022\r\n\tBAG_LIMIT\020\013\022\017\n\013CHIEF_LIMIT\020\014"
    "\022\021\n\rOCCUPY_REPEAT\020\r\022\017\n\013MONEY_LIMIT\020\016\022\024\n\020"
    "SIEGE_NOT_CLOSED\020\017\022\016\n\nTIME_LIMIT\020\020\022\r\n\tRO"
    "LE_DEAD\020\021\022\013\n\007CD_TIME\020\022\022\025\n\021NAME_MUST_CHIN"
    "ESE\020\023\022\020\n\014ILLEGAL_WORD\020\024\022\013\n\007FAILURE\020\025", 3716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.city.proto", &protobuf_RegisterTypes);
  official_info::default_instance_ = new official_info();
  city_info_req::default_instance_ = new city_info_req();
  city_info_rsp::default_instance_ = new city_info_rsp();
  city_mod_title_req::default_instance_ = new city_mod_title_req();
  city_mod_title_rsp::default_instance_ = new city_mod_title_rsp();
  city_welfare_info_req::default_instance_ = new city_welfare_info_req();
  city_pos_reward::default_instance_ = new city_pos_reward();
  city_welfare_info_rsp::default_instance_ = new city_welfare_info_rsp();
  city_welfare_get_req::default_instance_ = new city_welfare_get_req();
  city_welfare_get_rsp::default_instance_ = new city_welfare_get_rsp();
  city_welfare_get_notify::default_instance_ = new city_welfare_get_notify();
  siege_enter_req::default_instance_ = new siege_enter_req();
  siege_enter_rsp::default_instance_ = new siege_enter_rsp();
  siege_enter_field::default_instance_ = new siege_enter_field();
  siege_scene_camp_req::default_instance_ = new siege_scene_camp_req();
  siege_scene_camp::default_instance_ = new siege_scene_camp();
  siege_dead_msg_rsp::default_instance_ = new siege_dead_msg_rsp();
  siege_revive_req::default_instance_ = new siege_revive_req();
  siege_revive_rsp::default_instance_ = new siege_revive_rsp();
  siege_status::default_instance_ = new siege_status();
  siege_status_rsp::default_instance_ = new siege_status_rsp();
  siege_personal_info::default_instance_ = new siege_personal_info();
  siege_over::default_instance_ = new siege_over();
  siege_skill_modify::default_instance_ = new siege_skill_modify();
  king_skill_add::default_instance_ = new king_skill_add();
  siege_random_trans::default_instance_ = new siege_random_trans();
  siege_flag_occupy::default_instance_ = new siege_flag_occupy();
  city_welfare_get_confirm::default_instance_ = new city_welfare_get_confirm();
  siege_call_info::default_instance_ = new siege_call_info();
  siege_call_req::default_instance_ = new siege_call_req();
  siege_call_rsp::default_instance_ = new siege_call_rsp();
  siege_call_accept_req::default_instance_ = new siege_call_accept_req();
  siege_call::default_instance_ = new siege_call();
  siege_call_accept_rsp::default_instance_ = new siege_call_accept_rsp();
  siege_call_status::default_instance_ = new siege_call_status();
  siege_personal_info_req::default_instance_ = new siege_personal_info_req();
  siege_personal_info_rsp::default_instance_ = new siege_personal_info_rsp();
  siege_field_open::default_instance_ = new siege_field_open();
  siege_start::default_instance_ = new siege_start();
  siege_broadcast_msg::default_instance_ = new siege_broadcast_msg();
  update_sculpture::default_instance_ = new update_sculpture();
  kingdom_sculpture_info::default_instance_ = new kingdom_sculpture_info();
  kingdom_sculpture::default_instance_ = new kingdom_sculpture();
  official_info::default_instance_->InitAsDefaultInstance();
  city_info_req::default_instance_->InitAsDefaultInstance();
  city_info_rsp::default_instance_->InitAsDefaultInstance();
  city_mod_title_req::default_instance_->InitAsDefaultInstance();
  city_mod_title_rsp::default_instance_->InitAsDefaultInstance();
  city_welfare_info_req::default_instance_->InitAsDefaultInstance();
  city_pos_reward::default_instance_->InitAsDefaultInstance();
  city_welfare_info_rsp::default_instance_->InitAsDefaultInstance();
  city_welfare_get_req::default_instance_->InitAsDefaultInstance();
  city_welfare_get_rsp::default_instance_->InitAsDefaultInstance();
  city_welfare_get_notify::default_instance_->InitAsDefaultInstance();
  siege_enter_req::default_instance_->InitAsDefaultInstance();
  siege_enter_rsp::default_instance_->InitAsDefaultInstance();
  siege_enter_field::default_instance_->InitAsDefaultInstance();
  siege_scene_camp_req::default_instance_->InitAsDefaultInstance();
  siege_scene_camp::default_instance_->InitAsDefaultInstance();
  siege_dead_msg_rsp::default_instance_->InitAsDefaultInstance();
  siege_revive_req::default_instance_->InitAsDefaultInstance();
  siege_revive_rsp::default_instance_->InitAsDefaultInstance();
  siege_status::default_instance_->InitAsDefaultInstance();
  siege_status_rsp::default_instance_->InitAsDefaultInstance();
  siege_personal_info::default_instance_->InitAsDefaultInstance();
  siege_over::default_instance_->InitAsDefaultInstance();
  siege_skill_modify::default_instance_->InitAsDefaultInstance();
  king_skill_add::default_instance_->InitAsDefaultInstance();
  siege_random_trans::default_instance_->InitAsDefaultInstance();
  siege_flag_occupy::default_instance_->InitAsDefaultInstance();
  city_welfare_get_confirm::default_instance_->InitAsDefaultInstance();
  siege_call_info::default_instance_->InitAsDefaultInstance();
  siege_call_req::default_instance_->InitAsDefaultInstance();
  siege_call_rsp::default_instance_->InitAsDefaultInstance();
  siege_call_accept_req::default_instance_->InitAsDefaultInstance();
  siege_call::default_instance_->InitAsDefaultInstance();
  siege_call_accept_rsp::default_instance_->InitAsDefaultInstance();
  siege_call_status::default_instance_->InitAsDefaultInstance();
  siege_personal_info_req::default_instance_->InitAsDefaultInstance();
  siege_personal_info_rsp::default_instance_->InitAsDefaultInstance();
  siege_field_open::default_instance_->InitAsDefaultInstance();
  siege_start::default_instance_->InitAsDefaultInstance();
  siege_broadcast_msg::default_instance_->InitAsDefaultInstance();
  update_sculpture::default_instance_->InitAsDefaultInstance();
  kingdom_sculpture_info::default_instance_->InitAsDefaultInstance();
  kingdom_sculpture::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2ecity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2ecity_2eproto {
  StaticDescriptorInitializer_client_2ecity_2eproto() {
    protobuf_AddDesc_client_2ecity_2eproto();
  }
} static_descriptor_initializer_client_2ecity_2eproto_;
const ::google::protobuf::EnumDescriptor* CITY_OPT_ERR_NO_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CITY_OPT_ERR_NO_E_descriptor_;
}
bool CITY_OPT_ERR_NO_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int official_info::kRoleIdFieldNumber;
const int official_info::kRoleNameFieldNumber;
const int official_info::kPosFieldNumber;
const int official_info::kSexFieldNumber;
const int official_info::kModelIdFieldNumber;
#endif  // !_MSC_VER

official_info::official_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void official_info::InitAsDefaultInstance() {
}

official_info::official_info(const official_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void official_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 0u;
  sex_ = 0u;
  model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

official_info::~official_info() {
  SharedDtor();
}

void official_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (this != default_instance_) {
  }
}

void official_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* official_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return official_info_descriptor_;
}

const official_info& official_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

official_info* official_info::default_instance_ = NULL;

official_info* official_info::New() const {
  return new official_info;
}

void official_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    pos_ = 0u;
    sex_ = 0u;
    if (has_model_id()) {
      if (model_id_ != &::google::protobuf::internal::kEmptyString) {
        model_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool official_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_id;
        break;
      }

      // required string model_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_id().data(), this->model_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void official_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // required string model_id = 5;
  if (has_model_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_id().data(), this->model_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* official_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // required string model_id = 5;
  if (has_model_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_id().data(), this->model_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int official_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required string model_id = 5;
    if (has_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void official_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const official_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const official_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void official_info::MergeFrom(const official_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_model_id()) {
      set_model_id(from.model_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void official_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void official_info::CopyFrom(const official_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool official_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void official_info::Swap(official_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(pos_, other->pos_);
    std::swap(sex_, other->sex_);
    std::swap(model_id_, other->model_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata official_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = official_info_descriptor_;
  metadata.reflection = official_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_info_req::kRoleIdFieldNumber;
const int city_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

city_info_req::city_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

city_info_req::city_info_req(const city_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_info_req::~city_info_req() {
  SharedDtor();
}

void city_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void city_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_info_req_descriptor_;
}

const city_info_req& city_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_info_req* city_info_req::default_instance_ = NULL;

city_info_req* city_info_req::New() const {
  return new city_info_req;
}

void city_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_info_req::MergeFrom(const city_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_info_req::CopyFrom(const city_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_info_req::Swap(city_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_info_req_descriptor_;
  metadata.reflection = city_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_info_rsp::kModifyFieldNumber;
const int city_info_rsp::kOpenTimeFieldNumber;
const int city_info_rsp::kLastFieldNumber;
const int city_info_rsp::kOiFieldNumber;
const int city_info_rsp::kTimelongFieldNumber;
const int city_info_rsp::kFamilyNameFieldNumber;
const int city_info_rsp::kTitleFieldNumber;
#endif  // !_MSC_VER

city_info_rsp::city_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_info_rsp::InitAsDefaultInstance() {
}

city_info_rsp::city_info_rsp(const city_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  modify_ = false;
  open_time_ = 0u;
  last_ = 0u;
  timelong_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_info_rsp::~city_info_rsp() {
  SharedDtor();
}

void city_info_rsp::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void city_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_info_rsp_descriptor_;
}

const city_info_rsp& city_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_info_rsp* city_info_rsp::default_instance_ = NULL;

city_info_rsp* city_info_rsp::New() const {
  return new city_info_rsp;
}

void city_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modify_ = false;
    open_time_ = 0u;
    last_ = 0u;
    timelong_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  oi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool modify = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modify_)));
          set_has_modify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // required uint32 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last;
        break;
      }

      // required uint32 last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oi;
        break;
      }

      // repeated .client.official_info oi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oi;
        if (input->ExpectTag(40)) goto parse_timelong;
        break;
      }

      // optional uint32 timelong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timelong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelong_)));
          set_has_timelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_family_name;
        break;
      }

      // optional string family_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // optional string title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool modify = 1 [default = false];
  if (has_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->modify(), output);
  }

  // required uint32 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_time(), output);
  }

  // required uint32 last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last(), output);
  }

  // repeated .client.official_info oi = 4;
  for (int i = 0; i < this->oi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oi(i), output);
  }

  // optional uint32 timelong = 5;
  if (has_timelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timelong(), output);
  }

  // optional string family_name = 6;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->family_name(), output);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool modify = 1 [default = false];
  if (has_modify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->modify(), target);
  }

  // required uint32 open_time = 2;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_time(), target);
  }

  // required uint32 last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last(), target);
  }

  // repeated .client.official_info oi = 4;
  for (int i = 0; i < this->oi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oi(i), target);
  }

  // optional uint32 timelong = 5;
  if (has_timelong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timelong(), target);
  }

  // optional string family_name = 6;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->family_name(), target);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool modify = 1 [default = false];
    if (has_modify()) {
      total_size += 1 + 1;
    }

    // required uint32 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_time());
    }

    // required uint32 last = 3;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last());
    }

    // optional uint32 timelong = 5;
    if (has_timelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelong());
    }

    // optional string family_name = 6;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .client.official_info oi = 4;
  total_size += 1 * this->oi_size();
  for (int i = 0; i < this->oi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_info_rsp::MergeFrom(const city_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  oi_.MergeFrom(from.oi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modify()) {
      set_modify(from.modify());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_timelong()) {
      set_timelong(from.timelong());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_info_rsp::CopyFrom(const city_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < oi_size(); i++) {
    if (!this->oi(i).IsInitialized()) return false;
  }
  return true;
}

void city_info_rsp::Swap(city_info_rsp* other) {
  if (other != this) {
    std::swap(modify_, other->modify_);
    std::swap(open_time_, other->open_time_);
    std::swap(last_, other->last_);
    oi_.Swap(&other->oi_);
    std::swap(timelong_, other->timelong_);
    std::swap(family_name_, other->family_name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_info_rsp_descriptor_;
  metadata.reflection = city_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_mod_title_req::kCityTitleFieldNumber;
const int city_mod_title_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

city_mod_title_req::city_mod_title_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_mod_title_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

city_mod_title_req::city_mod_title_req(const city_mod_title_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_mod_title_req::SharedCtor() {
  _cached_size_ = 0;
  city_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_mod_title_req::~city_mod_title_req() {
  SharedDtor();
}

void city_mod_title_req::SharedDtor() {
  if (city_title_ != &::google::protobuf::internal::kEmptyString) {
    delete city_title_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void city_mod_title_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_mod_title_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_mod_title_req_descriptor_;
}

const city_mod_title_req& city_mod_title_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_mod_title_req* city_mod_title_req::default_instance_ = NULL;

city_mod_title_req* city_mod_title_req::New() const {
  return new city_mod_title_req;
}

void city_mod_title_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city_title()) {
      if (city_title_ != &::google::protobuf::internal::kEmptyString) {
        city_title_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_mod_title_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string city_title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city_title().data(), this->city_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_mod_title_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string city_title = 1;
  if (has_city_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_title().data(), this->city_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->city_title(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_mod_title_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string city_title = 1;
  if (has_city_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_title().data(), this->city_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->city_title(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_mod_title_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string city_title = 1;
    if (has_city_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_title());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_mod_title_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_mod_title_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_mod_title_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_mod_title_req::MergeFrom(const city_mod_title_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_title()) {
      set_city_title(from.city_title());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_mod_title_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_mod_title_req::CopyFrom(const city_mod_title_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_mod_title_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_mod_title_req::Swap(city_mod_title_req* other) {
  if (other != this) {
    std::swap(city_title_, other->city_title_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_mod_title_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_mod_title_req_descriptor_;
  metadata.reflection = city_mod_title_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_mod_title_rsp::kErrNoFieldNumber;
#endif  // !_MSC_VER

city_mod_title_rsp::city_mod_title_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_mod_title_rsp::InitAsDefaultInstance() {
}

city_mod_title_rsp::city_mod_title_rsp(const city_mod_title_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_mod_title_rsp::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_mod_title_rsp::~city_mod_title_rsp() {
  SharedDtor();
}

void city_mod_title_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_mod_title_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_mod_title_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_mod_title_rsp_descriptor_;
}

const city_mod_title_rsp& city_mod_title_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_mod_title_rsp* city_mod_title_rsp::default_instance_ = NULL;

city_mod_title_rsp* city_mod_title_rsp::New() const {
  return new city_mod_title_rsp;
}

void city_mod_title_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_mod_title_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.CITY_OPT_ERR_NO_E err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::CITY_OPT_ERR_NO_E_IsValid(value)) {
            set_err_no(static_cast< ::client::CITY_OPT_ERR_NO_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_mod_title_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_mod_title_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_mod_title_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.CITY_OPT_ERR_NO_E err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_mod_title_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_mod_title_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_mod_title_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_mod_title_rsp::MergeFrom(const city_mod_title_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_mod_title_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_mod_title_rsp::CopyFrom(const city_mod_title_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_mod_title_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_mod_title_rsp::Swap(city_mod_title_rsp* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_mod_title_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_mod_title_rsp_descriptor_;
  metadata.reflection = city_mod_title_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_info_req::kRoleIdFieldNumber;
const int city_welfare_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

city_welfare_info_req::city_welfare_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

city_welfare_info_req::city_welfare_info_req(const city_welfare_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_info_req::~city_welfare_info_req() {
  SharedDtor();
}

void city_welfare_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void city_welfare_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_info_req_descriptor_;
}

const city_welfare_info_req& city_welfare_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_info_req* city_welfare_info_req::default_instance_ = NULL;

city_welfare_info_req* city_welfare_info_req::New() const {
  return new city_welfare_info_req;
}

void city_welfare_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_info_req::MergeFrom(const city_welfare_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_info_req::CopyFrom(const city_welfare_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_welfare_info_req::Swap(city_welfare_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_info_req_descriptor_;
  metadata.reflection = city_welfare_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_pos_reward::kPosFieldNumber;
const int city_pos_reward::kIdFieldNumber;
const int city_pos_reward::kNumFieldNumber;
#endif  // !_MSC_VER

city_pos_reward::city_pos_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_pos_reward::InitAsDefaultInstance() {
}

city_pos_reward::city_pos_reward(const city_pos_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_pos_reward::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_pos_reward::~city_pos_reward() {
  SharedDtor();
}

void city_pos_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_pos_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_pos_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_pos_reward_descriptor_;
}

const city_pos_reward& city_pos_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_pos_reward* city_pos_reward::default_instance_ = NULL;

city_pos_reward* city_pos_reward::New() const {
  return new city_pos_reward;
}

void city_pos_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_pos_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_pos_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_pos_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_pos_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_pos_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_pos_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_pos_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_pos_reward::MergeFrom(const city_pos_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_pos_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_pos_reward::CopyFrom(const city_pos_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_pos_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void city_pos_reward::Swap(city_pos_reward* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_pos_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_pos_reward_descriptor_;
  metadata.reflection = city_pos_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_info_rsp::kPosFieldNumber;
const int city_welfare_info_rsp::kCprFieldNumber;
const int city_welfare_info_rsp::kStatusFieldNumber;
#endif  // !_MSC_VER

city_welfare_info_rsp::city_welfare_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_info_rsp::InitAsDefaultInstance() {
}

city_welfare_info_rsp::city_welfare_info_rsp(const city_welfare_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_info_rsp::~city_welfare_info_rsp() {
  SharedDtor();
}

void city_welfare_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_welfare_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_info_rsp_descriptor_;
}

const city_welfare_info_rsp& city_welfare_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_info_rsp* city_welfare_info_rsp::default_instance_ = NULL;

city_welfare_info_rsp* city_welfare_info_rsp::New() const {
  return new city_welfare_info_rsp;
}

void city_welfare_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    status_ = 0u;
  }
  cpr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cpr;
        break;
      }

      // repeated .client.city_pos_reward cpr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cpr;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated .client.city_pos_reward cpr = 2;
  for (int i = 0; i < this->cpr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cpr(i), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated .client.city_pos_reward cpr = 2;
  for (int i = 0; i < this->cpr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cpr(i), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .client.city_pos_reward cpr = 2;
  total_size += 1 * this->cpr_size();
  for (int i = 0; i < this->cpr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_info_rsp::MergeFrom(const city_welfare_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpr_.MergeFrom(from.cpr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_info_rsp::CopyFrom(const city_welfare_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cpr_size(); i++) {
    if (!this->cpr(i).IsInitialized()) return false;
  }
  return true;
}

void city_welfare_info_rsp::Swap(city_welfare_info_rsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    cpr_.Swap(&other->cpr_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_info_rsp_descriptor_;
  metadata.reflection = city_welfare_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_get_req::kRoleIdFieldNumber;
const int city_welfare_get_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

city_welfare_get_req::city_welfare_get_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_get_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

city_welfare_get_req::city_welfare_get_req(const city_welfare_get_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_get_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_get_req::~city_welfare_get_req() {
  SharedDtor();
}

void city_welfare_get_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void city_welfare_get_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_get_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_get_req_descriptor_;
}

const city_welfare_get_req& city_welfare_get_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_get_req* city_welfare_get_req::default_instance_ = NULL;

city_welfare_get_req* city_welfare_get_req::New() const {
  return new city_welfare_get_req;
}

void city_welfare_get_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_get_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_get_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_get_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_get_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_get_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_get_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_get_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_get_req::MergeFrom(const city_welfare_get_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_get_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_get_req::CopyFrom(const city_welfare_get_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_get_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_welfare_get_req::Swap(city_welfare_get_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_get_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_get_req_descriptor_;
  metadata.reflection = city_welfare_get_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_get_rsp::kErrNoFieldNumber;
#endif  // !_MSC_VER

city_welfare_get_rsp::city_welfare_get_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_get_rsp::InitAsDefaultInstance() {
}

city_welfare_get_rsp::city_welfare_get_rsp(const city_welfare_get_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_get_rsp::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_get_rsp::~city_welfare_get_rsp() {
  SharedDtor();
}

void city_welfare_get_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_welfare_get_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_get_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_get_rsp_descriptor_;
}

const city_welfare_get_rsp& city_welfare_get_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_get_rsp* city_welfare_get_rsp::default_instance_ = NULL;

city_welfare_get_rsp* city_welfare_get_rsp::New() const {
  return new city_welfare_get_rsp;
}

void city_welfare_get_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_get_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.CITY_OPT_ERR_NO_E err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::CITY_OPT_ERR_NO_E_IsValid(value)) {
            set_err_no(static_cast< ::client::CITY_OPT_ERR_NO_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_get_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_get_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_get_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.CITY_OPT_ERR_NO_E err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_get_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_get_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_get_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_get_rsp::MergeFrom(const city_welfare_get_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_get_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_get_rsp::CopyFrom(const city_welfare_get_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_get_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_welfare_get_rsp::Swap(city_welfare_get_rsp* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_get_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_get_rsp_descriptor_;
  metadata.reflection = city_welfare_get_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_get_notify::kRoleIdFieldNumber;
const int city_welfare_get_notify::kPropsIdFieldNumber;
const int city_welfare_get_notify::kNumFieldNumber;
#endif  // !_MSC_VER

city_welfare_get_notify::city_welfare_get_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_get_notify::InitAsDefaultInstance() {
}

city_welfare_get_notify::city_welfare_get_notify(const city_welfare_get_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_get_notify::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  props_id_ = 0u;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_get_notify::~city_welfare_get_notify() {
  SharedDtor();
}

void city_welfare_get_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_welfare_get_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_get_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_get_notify_descriptor_;
}

const city_welfare_get_notify& city_welfare_get_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_get_notify* city_welfare_get_notify::default_instance_ = NULL;

city_welfare_get_notify* city_welfare_get_notify::New() const {
  return new city_welfare_get_notify;
}

void city_welfare_get_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    props_id_ = 0u;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_get_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_props_id;
        break;
      }

      // required uint32 props_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_props_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_id_)));
          set_has_props_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_get_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 props_id = 2;
  if (has_props_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->props_id(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_get_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 props_id = 2;
  if (has_props_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->props_id(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_get_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 props_id = 2;
    if (has_props_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props_id());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_get_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_get_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_get_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_get_notify::MergeFrom(const city_welfare_get_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_props_id()) {
      set_props_id(from.props_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_get_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_get_notify::CopyFrom(const city_welfare_get_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_get_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void city_welfare_get_notify::Swap(city_welfare_get_notify* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(props_id_, other->props_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_get_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_get_notify_descriptor_;
  metadata.reflection = city_welfare_get_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_enter_req::kUnixtimeFieldNumber;
const int siege_enter_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_enter_req::siege_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_enter_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_enter_req::siege_enter_req(const siege_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_enter_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_enter_req::~siege_enter_req() {
  SharedDtor();
}

void siege_enter_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_enter_req_descriptor_;
}

const siege_enter_req& siege_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_enter_req* siege_enter_req::default_instance_ = NULL;

siege_enter_req* siege_enter_req::New() const {
  return new siege_enter_req;
}

void siege_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_enter_req::MergeFrom(const siege_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_enter_req::CopyFrom(const siege_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_enter_req::Swap(siege_enter_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_enter_req_descriptor_;
  metadata.reflection = siege_enter_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* siege_enter_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_enter_rsp_RET_descriptor_;
}
bool siege_enter_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const siege_enter_rsp_RET siege_enter_rsp::SUCCESS;
const siege_enter_rsp_RET siege_enter_rsp::FAILURE;
const siege_enter_rsp_RET siege_enter_rsp::SCENE_CLOSED;
const siege_enter_rsp_RET siege_enter_rsp::RET_MIN;
const siege_enter_rsp_RET siege_enter_rsp::RET_MAX;
const int siege_enter_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int siege_enter_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

siege_enter_rsp::siege_enter_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_enter_rsp::InitAsDefaultInstance() {
}

siege_enter_rsp::siege_enter_rsp(const siege_enter_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_enter_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_enter_rsp::~siege_enter_rsp() {
  SharedDtor();
}

void siege_enter_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_enter_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_enter_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_enter_rsp_descriptor_;
}

const siege_enter_rsp& siege_enter_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_enter_rsp* siege_enter_rsp::default_instance_ = NULL;

siege_enter_rsp* siege_enter_rsp::New() const {
  return new siege_enter_rsp;
}

void siege_enter_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_enter_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.siege_enter_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::siege_enter_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::siege_enter_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_enter_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.siege_enter_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_enter_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.siege_enter_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_enter_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.siege_enter_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_enter_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_enter_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_enter_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_enter_rsp::MergeFrom(const siege_enter_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_enter_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_enter_rsp::CopyFrom(const siege_enter_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_enter_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_enter_rsp::Swap(siege_enter_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_enter_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_enter_rsp_descriptor_;
  metadata.reflection = siege_enter_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_enter_field::kRoleIdFieldNumber;
#endif  // !_MSC_VER

siege_enter_field::siege_enter_field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_enter_field::InitAsDefaultInstance() {
}

siege_enter_field::siege_enter_field(const siege_enter_field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_enter_field::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_enter_field::~siege_enter_field() {
  SharedDtor();
}

void siege_enter_field::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_enter_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_enter_field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_enter_field_descriptor_;
}

const siege_enter_field& siege_enter_field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_enter_field* siege_enter_field::default_instance_ = NULL;

siege_enter_field* siege_enter_field::New() const {
  return new siege_enter_field;
}

void siege_enter_field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_enter_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_enter_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_enter_field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_enter_field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_enter_field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_enter_field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_enter_field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_enter_field::MergeFrom(const siege_enter_field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_enter_field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_enter_field::CopyFrom(const siege_enter_field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_enter_field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_enter_field::Swap(siege_enter_field* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_enter_field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_enter_field_descriptor_;
  metadata.reflection = siege_enter_field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_scene_camp_req::kTimeFieldNumber;
const int siege_scene_camp_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_scene_camp_req::siege_scene_camp_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_scene_camp_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_scene_camp_req::siege_scene_camp_req(const siege_scene_camp_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_scene_camp_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_scene_camp_req::~siege_scene_camp_req() {
  SharedDtor();
}

void siege_scene_camp_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_scene_camp_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_scene_camp_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_scene_camp_req_descriptor_;
}

const siege_scene_camp_req& siege_scene_camp_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_scene_camp_req* siege_scene_camp_req::default_instance_ = NULL;

siege_scene_camp_req* siege_scene_camp_req::New() const {
  return new siege_scene_camp_req;
}

void siege_scene_camp_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_scene_camp_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_scene_camp_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_scene_camp_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_scene_camp_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_scene_camp_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_scene_camp_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_scene_camp_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_scene_camp_req::MergeFrom(const siege_scene_camp_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_scene_camp_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_scene_camp_req::CopyFrom(const siege_scene_camp_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_scene_camp_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_scene_camp_req::Swap(siege_scene_camp_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_scene_camp_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_scene_camp_req_descriptor_;
  metadata.reflection = siege_scene_camp_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_scene_camp::kCampFieldNumber;
const int siege_scene_camp::kOpenTimeFieldNumber;
const int siege_scene_camp::kFamilyNameFieldNumber;
const int siege_scene_camp::kUserNameFieldNumber;
const int siege_scene_camp::kOccupyTimeFieldNumber;
#endif  // !_MSC_VER

siege_scene_camp::siege_scene_camp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_scene_camp::InitAsDefaultInstance() {
}

siege_scene_camp::siege_scene_camp(const siege_scene_camp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_scene_camp::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0u;
  open_time_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  occupy_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_scene_camp::~siege_scene_camp() {
  SharedDtor();
}

void siege_scene_camp::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void siege_scene_camp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_scene_camp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_scene_camp_descriptor_;
}

const siege_scene_camp& siege_scene_camp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_scene_camp* siege_scene_camp::default_instance_ = NULL;

siege_scene_camp* siege_scene_camp::New() const {
  return new siege_scene_camp;
}

void siege_scene_camp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0u;
    open_time_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    occupy_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_scene_camp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // required uint32 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_name;
        break;
      }

      // optional string family_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_occupy_time;
        break;
      }

      // optional uint32 occupy_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_time_)));
          set_has_occupy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_scene_camp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp(), output);
  }

  // required uint32 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_time(), output);
  }

  // optional string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->family_name(), output);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name(), output);
  }

  // optional uint32 occupy_time = 5;
  if (has_occupy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->occupy_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_scene_camp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp(), target);
  }

  // required uint32 open_time = 2;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_time(), target);
  }

  // optional string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->family_name(), target);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // optional uint32 occupy_time = 5;
  if (has_occupy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->occupy_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_scene_camp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

    // required uint32 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_time());
    }

    // optional string family_name = 3;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 occupy_time = 5;
    if (has_occupy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_scene_camp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_scene_camp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_scene_camp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_scene_camp::MergeFrom(const siege_scene_camp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_occupy_time()) {
      set_occupy_time(from.occupy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_scene_camp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_scene_camp::CopyFrom(const siege_scene_camp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_scene_camp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void siege_scene_camp::Swap(siege_scene_camp* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(open_time_, other->open_time_);
    std::swap(family_name_, other->family_name_);
    std::swap(user_name_, other->user_name_);
    std::swap(occupy_time_, other->occupy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_scene_camp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_scene_camp_descriptor_;
  metadata.reflection = siege_scene_camp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_dead_msg_rsp::kUserNameFieldNumber;
const int siege_dead_msg_rsp::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

siege_dead_msg_rsp::siege_dead_msg_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_dead_msg_rsp::InitAsDefaultInstance() {
}

siege_dead_msg_rsp::siege_dead_msg_rsp(const siege_dead_msg_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_dead_msg_rsp::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_dead_msg_rsp::~siege_dead_msg_rsp() {
  SharedDtor();
}

void siege_dead_msg_rsp::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void siege_dead_msg_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_dead_msg_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_dead_msg_rsp_descriptor_;
}

const siege_dead_msg_rsp& siege_dead_msg_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_dead_msg_rsp* siege_dead_msg_rsp::default_instance_ = NULL;

siege_dead_msg_rsp* siege_dead_msg_rsp::New() const {
  return new siege_dead_msg_rsp;
}

void siege_dead_msg_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_dead_msg_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_name;
        break;
      }

      // required string family_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_dead_msg_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_dead_msg_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_dead_msg_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string family_name = 2;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_dead_msg_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_dead_msg_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_dead_msg_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_dead_msg_rsp::MergeFrom(const siege_dead_msg_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_dead_msg_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_dead_msg_rsp::CopyFrom(const siege_dead_msg_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_dead_msg_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void siege_dead_msg_rsp::Swap(siege_dead_msg_rsp* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_dead_msg_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_dead_msg_rsp_descriptor_;
  metadata.reflection = siege_dead_msg_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_revive_req::kUnixtimeFieldNumber;
const int siege_revive_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_revive_req::siege_revive_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_revive_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_revive_req::siege_revive_req(const siege_revive_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_revive_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_revive_req::~siege_revive_req() {
  SharedDtor();
}

void siege_revive_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_revive_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_revive_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_revive_req_descriptor_;
}

const siege_revive_req& siege_revive_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_revive_req* siege_revive_req::default_instance_ = NULL;

siege_revive_req* siege_revive_req::New() const {
  return new siege_revive_req;
}

void siege_revive_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_revive_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_revive_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_revive_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_revive_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_revive_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_revive_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_revive_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_revive_req::MergeFrom(const siege_revive_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_revive_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_revive_req::CopyFrom(const siege_revive_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_revive_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_revive_req::Swap(siege_revive_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_revive_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_revive_req_descriptor_;
  metadata.reflection = siege_revive_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_revive_rsp::kUnixtimeFieldNumber;
#endif  // !_MSC_VER

siege_revive_rsp::siege_revive_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_revive_rsp::InitAsDefaultInstance() {
}

siege_revive_rsp::siege_revive_rsp(const siege_revive_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_revive_rsp::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_revive_rsp::~siege_revive_rsp() {
  SharedDtor();
}

void siege_revive_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_revive_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_revive_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_revive_rsp_descriptor_;
}

const siege_revive_rsp& siege_revive_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_revive_rsp* siege_revive_rsp::default_instance_ = NULL;

siege_revive_rsp* siege_revive_rsp::New() const {
  return new siege_revive_rsp;
}

void siege_revive_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_revive_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_revive_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_revive_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_revive_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_revive_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_revive_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_revive_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_revive_rsp::MergeFrom(const siege_revive_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_revive_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_revive_rsp::CopyFrom(const siege_revive_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_revive_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_revive_rsp::Swap(siege_revive_rsp* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_revive_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_revive_rsp_descriptor_;
  metadata.reflection = siege_revive_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_status::kRoleIdFieldNumber;
#endif  // !_MSC_VER

siege_status::siege_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_status::InitAsDefaultInstance() {
}

siege_status::siege_status(const siege_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_status::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_status::~siege_status() {
  SharedDtor();
}

void siege_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_status_descriptor_;
}

const siege_status& siege_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_status* siege_status::default_instance_ = NULL;

siege_status* siege_status::New() const {
  return new siege_status;
}

void siege_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_status::MergeFrom(const siege_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_status::CopyFrom(const siege_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_status::Swap(siege_status* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_status_descriptor_;
  metadata.reflection = siege_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_status_rsp::kStatusFieldNumber;
#endif  // !_MSC_VER

siege_status_rsp::siege_status_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_status_rsp::InitAsDefaultInstance() {
}

siege_status_rsp::siege_status_rsp(const siege_status_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_status_rsp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_status_rsp::~siege_status_rsp() {
  SharedDtor();
}

void siege_status_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_status_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_status_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_status_rsp_descriptor_;
}

const siege_status_rsp& siege_status_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_status_rsp* siege_status_rsp::default_instance_ = NULL;

siege_status_rsp* siege_status_rsp::New() const {
  return new siege_status_rsp;
}

void siege_status_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_status_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_status_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_status_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_status_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_status_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_status_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_status_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_status_rsp::MergeFrom(const siege_status_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_status_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_status_rsp::CopyFrom(const siege_status_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_status_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_status_rsp::Swap(siege_status_rsp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_status_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_status_rsp_descriptor_;
  metadata.reflection = siege_status_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_personal_info::kRoleIdFieldNumber;
const int siege_personal_info::kUserNameFieldNumber;
const int siege_personal_info::kTickFieldNumber;
const int siege_personal_info::kCurComboFieldNumber;
const int siege_personal_info::kExpFieldNumber;
const int siege_personal_info::kRegionFieldNumber;
const int siege_personal_info::kTimelongFieldNumber;
#endif  // !_MSC_VER

siege_personal_info::siege_personal_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_personal_info::InitAsDefaultInstance() {
}

siege_personal_info::siege_personal_info(const siege_personal_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_personal_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  cur_combo_ = 0u;
  exp_ = 0u;
  region_ = 0u;
  timelong_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_personal_info::~siege_personal_info() {
  SharedDtor();
}

void siege_personal_info::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void siege_personal_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_personal_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_personal_info_descriptor_;
}

const siege_personal_info& siege_personal_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_personal_info* siege_personal_info::default_instance_ = NULL;

siege_personal_info* siege_personal_info::New() const {
  return new siege_personal_info;
}

void siege_personal_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    tick_ = 0u;
    cur_combo_ = 0u;
    exp_ = 0u;
    region_ = 0u;
    timelong_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_personal_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_combo;
        break;
      }

      // required uint32 cur_combo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_combo_)));
          set_has_cur_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required uint32 exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_region;
        break;
      }

      // required uint32 region = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timelong;
        break;
      }

      // required uint32 timelong = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timelong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelong_)));
          set_has_timelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_personal_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // required uint32 cur_combo = 4;
  if (has_cur_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_combo(), output);
  }

  // required uint32 exp = 5 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exp(), output);
  }

  // required uint32 region = 6;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->region(), output);
  }

  // required uint32 timelong = 7 [default = 0];
  if (has_timelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timelong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_personal_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // required uint32 cur_combo = 4;
  if (has_cur_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_combo(), target);
  }

  // required uint32 exp = 5 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exp(), target);
  }

  // required uint32 region = 6;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->region(), target);
  }

  // required uint32 timelong = 7 [default = 0];
  if (has_timelong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timelong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_personal_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 cur_combo = 4;
    if (has_cur_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_combo());
    }

    // required uint32 exp = 5 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 region = 6;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // required uint32 timelong = 7 [default = 0];
    if (has_timelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_personal_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_personal_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_personal_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_personal_info::MergeFrom(const siege_personal_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_cur_combo()) {
      set_cur_combo(from.cur_combo());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_timelong()) {
      set_timelong(from.timelong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_personal_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_personal_info::CopyFrom(const siege_personal_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_personal_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void siege_personal_info::Swap(siege_personal_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(tick_, other->tick_);
    std::swap(cur_combo_, other->cur_combo_);
    std::swap(exp_, other->exp_);
    std::swap(region_, other->region_);
    std::swap(timelong_, other->timelong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_personal_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_personal_info_descriptor_;
  metadata.reflection = siege_personal_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_over::kFamilyIdFieldNumber;
const int siege_over::kMsgIdFieldNumber;
const int siege_over::kRoleFieldNumber;
#endif  // !_MSC_VER

siege_over::siege_over()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_over::InitAsDefaultInstance() {
}

siege_over::siege_over(const siege_over& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_over::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  msg_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_over::~siege_over() {
  SharedDtor();
}

void siege_over::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_over::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_over::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_over_descriptor_;
}

const siege_over& siege_over::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_over* siege_over::default_instance_ = NULL;

siege_over* siege_over::New() const {
  return new siege_over;
}

void siege_over::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    msg_id_ = 0u;
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_over::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // repeated uint32 role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_role())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_over::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_id(), output);
  }

  // repeated uint32 role = 3;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_over::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_id(), target);
  }

  // repeated uint32 role = 3;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_over::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

  }
  // repeated uint32 role = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    total_size += 1 * this->role_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_over::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_over* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_over*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_over::MergeFrom(const siege_over& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_over::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_over::CopyFrom(const siege_over& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_over::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void siege_over::Swap(siege_over* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(msg_id_, other->msg_id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_over::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_over_descriptor_;
  metadata.reflection = siege_over_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_skill_modify::kRoleIdFieldNumber;
const int siege_skill_modify::kIdFieldNumber;
const int siege_skill_modify::kOpFieldNumber;
#endif  // !_MSC_VER

siege_skill_modify::siege_skill_modify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_skill_modify::InitAsDefaultInstance() {
}

siege_skill_modify::siege_skill_modify(const siege_skill_modify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_skill_modify::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  op_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_skill_modify::~siege_skill_modify() {
  SharedDtor();
}

void siege_skill_modify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_skill_modify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_skill_modify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_skill_modify_descriptor_;
}

const siege_skill_modify& siege_skill_modify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_skill_modify* siege_skill_modify::default_instance_ = NULL;

siege_skill_modify* siege_skill_modify::New() const {
  return new siege_skill_modify;
}

void siege_skill_modify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    op_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_skill_modify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // required uint32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_skill_modify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }

  // required uint32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_skill_modify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }

  // required uint32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_skill_modify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_skill_modify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_skill_modify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_skill_modify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_skill_modify::MergeFrom(const siege_skill_modify& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_skill_modify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_skill_modify::CopyFrom(const siege_skill_modify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_skill_modify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void siege_skill_modify::Swap(siege_skill_modify* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    id_.Swap(&other->id_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_skill_modify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_skill_modify_descriptor_;
  metadata.reflection = siege_skill_modify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int king_skill_add::kRoleIdFieldNumber;
const int king_skill_add::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

king_skill_add::king_skill_add()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void king_skill_add::InitAsDefaultInstance() {
}

king_skill_add::king_skill_add(const king_skill_add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void king_skill_add::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

king_skill_add::~king_skill_add() {
  SharedDtor();
}

void king_skill_add::SharedDtor() {
  if (this != default_instance_) {
  }
}

void king_skill_add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* king_skill_add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return king_skill_add_descriptor_;
}

const king_skill_add& king_skill_add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

king_skill_add* king_skill_add::default_instance_ = NULL;

king_skill_add* king_skill_add::New() const {
  return new king_skill_add;
}

void king_skill_add::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool king_skill_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void king_skill_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* king_skill_add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int king_skill_add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void king_skill_add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const king_skill_add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const king_skill_add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void king_skill_add::MergeFrom(const king_skill_add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void king_skill_add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void king_skill_add::CopyFrom(const king_skill_add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool king_skill_add::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void king_skill_add::Swap(king_skill_add* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata king_skill_add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = king_skill_add_descriptor_;
  metadata.reflection = king_skill_add_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_random_trans::kUnixtimeFieldNumber;
#endif  // !_MSC_VER

siege_random_trans::siege_random_trans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_random_trans::InitAsDefaultInstance() {
}

siege_random_trans::siege_random_trans(const siege_random_trans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_random_trans::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_random_trans::~siege_random_trans() {
  SharedDtor();
}

void siege_random_trans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_random_trans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_random_trans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_random_trans_descriptor_;
}

const siege_random_trans& siege_random_trans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_random_trans* siege_random_trans::default_instance_ = NULL;

siege_random_trans* siege_random_trans::New() const {
  return new siege_random_trans;
}

void siege_random_trans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_random_trans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_random_trans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_random_trans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_random_trans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_random_trans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_random_trans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_random_trans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_random_trans::MergeFrom(const siege_random_trans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_random_trans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_random_trans::CopyFrom(const siege_random_trans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_random_trans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_random_trans::Swap(siege_random_trans* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_random_trans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_random_trans_descriptor_;
  metadata.reflection = siege_random_trans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_flag_occupy::kOldFamilyIdFieldNumber;
const int siege_flag_occupy::kNewFamilyIdFieldNumber;
#endif  // !_MSC_VER

siege_flag_occupy::siege_flag_occupy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_flag_occupy::InitAsDefaultInstance() {
}

siege_flag_occupy::siege_flag_occupy(const siege_flag_occupy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_flag_occupy::SharedCtor() {
  _cached_size_ = 0;
  old_family_id_ = 0u;
  new_family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_flag_occupy::~siege_flag_occupy() {
  SharedDtor();
}

void siege_flag_occupy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_flag_occupy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_flag_occupy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_flag_occupy_descriptor_;
}

const siege_flag_occupy& siege_flag_occupy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_flag_occupy* siege_flag_occupy::default_instance_ = NULL;

siege_flag_occupy* siege_flag_occupy::New() const {
  return new siege_flag_occupy;
}

void siege_flag_occupy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_family_id_ = 0u;
    new_family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_flag_occupy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 old_family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_family_id_)));
          set_has_old_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_family_id;
        break;
      }

      // required uint32 new_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_family_id_)));
          set_has_new_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_flag_occupy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 old_family_id = 1;
  if (has_old_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_family_id(), output);
  }

  // required uint32 new_family_id = 2;
  if (has_new_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_flag_occupy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 old_family_id = 1;
  if (has_old_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_family_id(), target);
  }

  // required uint32 new_family_id = 2;
  if (has_new_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_flag_occupy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 old_family_id = 1;
    if (has_old_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_family_id());
    }

    // required uint32 new_family_id = 2;
    if (has_new_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_flag_occupy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_flag_occupy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_flag_occupy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_flag_occupy::MergeFrom(const siege_flag_occupy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_family_id()) {
      set_old_family_id(from.old_family_id());
    }
    if (from.has_new_family_id()) {
      set_new_family_id(from.new_family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_flag_occupy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_flag_occupy::CopyFrom(const siege_flag_occupy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_flag_occupy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void siege_flag_occupy::Swap(siege_flag_occupy* other) {
  if (other != this) {
    std::swap(old_family_id_, other->old_family_id_);
    std::swap(new_family_id_, other->new_family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_flag_occupy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_flag_occupy_descriptor_;
  metadata.reflection = siege_flag_occupy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_welfare_get_confirm::kRoleIdFieldNumber;
#endif  // !_MSC_VER

city_welfare_get_confirm::city_welfare_get_confirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_welfare_get_confirm::InitAsDefaultInstance() {
}

city_welfare_get_confirm::city_welfare_get_confirm(const city_welfare_get_confirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_welfare_get_confirm::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_welfare_get_confirm::~city_welfare_get_confirm() {
  SharedDtor();
}

void city_welfare_get_confirm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_welfare_get_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_welfare_get_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_welfare_get_confirm_descriptor_;
}

const city_welfare_get_confirm& city_welfare_get_confirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

city_welfare_get_confirm* city_welfare_get_confirm::default_instance_ = NULL;

city_welfare_get_confirm* city_welfare_get_confirm::New() const {
  return new city_welfare_get_confirm;
}

void city_welfare_get_confirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_welfare_get_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_welfare_get_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_welfare_get_confirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_welfare_get_confirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_welfare_get_confirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_welfare_get_confirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_welfare_get_confirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_welfare_get_confirm::MergeFrom(const city_welfare_get_confirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_welfare_get_confirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_welfare_get_confirm::CopyFrom(const city_welfare_get_confirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_welfare_get_confirm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void city_welfare_get_confirm::Swap(city_welfare_get_confirm* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_welfare_get_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_welfare_get_confirm_descriptor_;
  metadata.reflection = city_welfare_get_confirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call_info::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

siege_call_info::siege_call_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_info::InitAsDefaultInstance() {
}

siege_call_info::siege_call_info(const siege_call_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_info::~siege_call_info() {
  SharedDtor();
}

void siege_call_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_call_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_info_descriptor_;
}

const siege_call_info& siege_call_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_info* siege_call_info::default_instance_ = NULL;

siege_call_info* siege_call_info::New() const {
  return new siege_call_info;
}

void siege_call_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_info::MergeFrom(const siege_call_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_info::CopyFrom(const siege_call_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_info::Swap(siege_call_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_info_descriptor_;
  metadata.reflection = siege_call_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call_req::kTimeFieldNumber;
const int siege_call_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_call_req::siege_call_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_call_req::siege_call_req(const siege_call_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_req::~siege_call_req() {
  SharedDtor();
}

void siege_call_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_call_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_req_descriptor_;
}

const siege_call_req& siege_call_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_req* siege_call_req::default_instance_ = NULL;

siege_call_req* siege_call_req::New() const {
  return new siege_call_req;
}

void siege_call_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_req::MergeFrom(const siege_call_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_req::CopyFrom(const siege_call_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_req::Swap(siege_call_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_req_descriptor_;
  metadata.reflection = siege_call_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call_rsp::kErrNoFieldNumber;
#endif  // !_MSC_VER

siege_call_rsp::siege_call_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_rsp::InitAsDefaultInstance() {
}

siege_call_rsp::siege_call_rsp(const siege_call_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_rsp::SharedCtor() {
  _cached_size_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_rsp::~siege_call_rsp() {
  SharedDtor();
}

void siege_call_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_call_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_rsp_descriptor_;
}

const siege_call_rsp& siege_call_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_rsp* siege_call_rsp::default_instance_ = NULL;

siege_call_rsp* siege_call_rsp::New() const {
  return new siege_call_rsp;
}

void siege_call_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.CITY_OPT_ERR_NO_E err_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::CITY_OPT_ERR_NO_E_IsValid(value)) {
            set_err_no(static_cast< ::client::CITY_OPT_ERR_NO_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.CITY_OPT_ERR_NO_E err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.CITY_OPT_ERR_NO_E err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_rsp::MergeFrom(const siege_call_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_rsp::CopyFrom(const siege_call_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_rsp::Swap(siege_call_rsp* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_rsp_descriptor_;
  metadata.reflection = siege_call_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call_accept_req::kFamilyIdFieldNumber;
const int siege_call_accept_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_call_accept_req::siege_call_accept_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_accept_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_call_accept_req::siege_call_accept_req(const siege_call_accept_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_accept_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_accept_req::~siege_call_accept_req() {
  SharedDtor();
}

void siege_call_accept_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_call_accept_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_accept_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_accept_req_descriptor_;
}

const siege_call_accept_req& siege_call_accept_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_accept_req* siege_call_accept_req::default_instance_ = NULL;

siege_call_accept_req* siege_call_accept_req::New() const {
  return new siege_call_accept_req;
}

void siege_call_accept_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_accept_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_accept_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_accept_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_accept_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_accept_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_accept_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_accept_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_accept_req::MergeFrom(const siege_call_accept_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_accept_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_accept_req::CopyFrom(const siege_call_accept_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_accept_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_accept_req::Swap(siege_call_accept_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_accept_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_accept_req_descriptor_;
  metadata.reflection = siege_call_accept_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call::kRoleIdFieldNumber;
const int siege_call::kChiefFieldNumber;
#endif  // !_MSC_VER

siege_call::siege_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call::InitAsDefaultInstance() {
}

siege_call::siege_call(const siege_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  chief_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call::~siege_call() {
  SharedDtor();
}

void siege_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_descriptor_;
}

const siege_call& siege_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call* siege_call::default_instance_ = NULL;

siege_call* siege_call::New() const {
  return new siege_call;
}

void siege_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    chief_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chief;
        break;
      }

      // required uint32 chief = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chief:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chief_)));
          set_has_chief();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 chief = 2;
  if (has_chief()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chief(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 chief = 2;
  if (has_chief()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chief(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 chief = 2;
    if (has_chief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chief());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call::MergeFrom(const siege_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_chief()) {
      set_chief(from.chief());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call::CopyFrom(const siege_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void siege_call::Swap(siege_call* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(chief_, other->chief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_descriptor_;
  metadata.reflection = siege_call_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* siege_call_accept_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_accept_rsp_RET_descriptor_;
}
bool siege_call_accept_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const siege_call_accept_rsp_RET siege_call_accept_rsp::SUCCESS;
const siege_call_accept_rsp_RET siege_call_accept_rsp::TIMEOUT;
const siege_call_accept_rsp_RET siege_call_accept_rsp::OUTSIDE;
const siege_call_accept_rsp_RET siege_call_accept_rsp::KING_OUTSIDE;
const siege_call_accept_rsp_RET siege_call_accept_rsp::NO_FAMILY;
const siege_call_accept_rsp_RET siege_call_accept_rsp::MY_CALL;
const siege_call_accept_rsp_RET siege_call_accept_rsp::DEAD;
const siege_call_accept_rsp_RET siege_call_accept_rsp::RET_MIN;
const siege_call_accept_rsp_RET siege_call_accept_rsp::RET_MAX;
const int siege_call_accept_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int siege_call_accept_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

siege_call_accept_rsp::siege_call_accept_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_accept_rsp::InitAsDefaultInstance() {
}

siege_call_accept_rsp::siege_call_accept_rsp(const siege_call_accept_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_accept_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_accept_rsp::~siege_call_accept_rsp() {
  SharedDtor();
}

void siege_call_accept_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_call_accept_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_accept_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_accept_rsp_descriptor_;
}

const siege_call_accept_rsp& siege_call_accept_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_accept_rsp* siege_call_accept_rsp::default_instance_ = NULL;

siege_call_accept_rsp* siege_call_accept_rsp::New() const {
  return new siege_call_accept_rsp;
}

void siege_call_accept_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_accept_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.siege_call_accept_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::siege_call_accept_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::siege_call_accept_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_accept_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.siege_call_accept_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_accept_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.siege_call_accept_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_accept_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.siege_call_accept_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_accept_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_accept_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_accept_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_accept_rsp::MergeFrom(const siege_call_accept_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_accept_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_accept_rsp::CopyFrom(const siege_call_accept_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_accept_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_accept_rsp::Swap(siege_call_accept_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_accept_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_accept_rsp_descriptor_;
  metadata.reflection = siege_call_accept_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_call_status::kTimeFieldNumber;
#endif  // !_MSC_VER

siege_call_status::siege_call_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_call_status::InitAsDefaultInstance() {
}

siege_call_status::siege_call_status(const siege_call_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_call_status::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_call_status::~siege_call_status() {
  SharedDtor();
}

void siege_call_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_call_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_call_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_call_status_descriptor_;
}

const siege_call_status& siege_call_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_call_status* siege_call_status::default_instance_ = NULL;

siege_call_status* siege_call_status::New() const {
  return new siege_call_status;
}

void siege_call_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_call_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_call_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_call_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_call_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_call_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_call_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_call_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_call_status::MergeFrom(const siege_call_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_call_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_call_status::CopyFrom(const siege_call_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_call_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_call_status::Swap(siege_call_status* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_call_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_call_status_descriptor_;
  metadata.reflection = siege_call_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_personal_info_req::kRoleIdFieldNumber;
const int siege_personal_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

siege_personal_info_req::siege_personal_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_personal_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

siege_personal_info_req::siege_personal_info_req(const siege_personal_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_personal_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_personal_info_req::~siege_personal_info_req() {
  SharedDtor();
}

void siege_personal_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void siege_personal_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_personal_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_personal_info_req_descriptor_;
}

const siege_personal_info_req& siege_personal_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_personal_info_req* siege_personal_info_req::default_instance_ = NULL;

siege_personal_info_req* siege_personal_info_req::New() const {
  return new siege_personal_info_req;
}

void siege_personal_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_personal_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_personal_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_personal_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_personal_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_personal_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_personal_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_personal_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_personal_info_req::MergeFrom(const siege_personal_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_personal_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_personal_info_req::CopyFrom(const siege_personal_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_personal_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_personal_info_req::Swap(siege_personal_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_personal_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_personal_info_req_descriptor_;
  metadata.reflection = siege_personal_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_personal_info_rsp::kRegionFieldNumber;
const int siege_personal_info_rsp::kExpFieldNumber;
const int siege_personal_info_rsp::kTimeFieldNumber;
const int siege_personal_info_rsp::kAddFieldNumber;
#endif  // !_MSC_VER

siege_personal_info_rsp::siege_personal_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_personal_info_rsp::InitAsDefaultInstance() {
}

siege_personal_info_rsp::siege_personal_info_rsp(const siege_personal_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_personal_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0u;
  exp_ = 0u;
  time_ = 0u;
  add_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_personal_info_rsp::~siege_personal_info_rsp() {
  SharedDtor();
}

void siege_personal_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_personal_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_personal_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_personal_info_rsp_descriptor_;
}

const siege_personal_info_rsp& siege_personal_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_personal_info_rsp* siege_personal_info_rsp::default_instance_ = NULL;

siege_personal_info_rsp* siege_personal_info_rsp::New() const {
  return new siege_personal_info_rsp;
}

void siege_personal_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0u;
    exp_ = 0u;
    time_ = 0u;
    add_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_personal_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add;
        break;
      }

      // required uint32 add = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_personal_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region(), output);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 add = 4;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_personal_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region(), target);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 add = 4;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_personal_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // required uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 add = 4;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_personal_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_personal_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_personal_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_personal_info_rsp::MergeFrom(const siege_personal_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_personal_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_personal_info_rsp::CopyFrom(const siege_personal_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_personal_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void siege_personal_info_rsp::Swap(siege_personal_info_rsp* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(exp_, other->exp_);
    std::swap(time_, other->time_);
    std::swap(add_, other->add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_personal_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_personal_info_rsp_descriptor_;
  metadata.reflection = siege_personal_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_field_open::kTimeFieldNumber;
#endif  // !_MSC_VER

siege_field_open::siege_field_open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_field_open::InitAsDefaultInstance() {
}

siege_field_open::siege_field_open(const siege_field_open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_field_open::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_field_open::~siege_field_open() {
  SharedDtor();
}

void siege_field_open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_field_open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_field_open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_field_open_descriptor_;
}

const siege_field_open& siege_field_open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_field_open* siege_field_open::default_instance_ = NULL;

siege_field_open* siege_field_open::New() const {
  return new siege_field_open;
}

void siege_field_open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_field_open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_field_open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_field_open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_field_open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_field_open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_field_open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_field_open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_field_open::MergeFrom(const siege_field_open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_field_open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_field_open::CopyFrom(const siege_field_open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_field_open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_field_open::Swap(siege_field_open* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_field_open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_field_open_descriptor_;
  metadata.reflection = siege_field_open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_start::kOpenTimeFieldNumber;
const int siege_start::kCloseTimeFieldNumber;
const int siege_start::kFamilyIdFieldNumber;
const int siege_start::kOccupyTimeFieldNumber;
const int siege_start::kFsiFieldNumber;
#endif  // !_MSC_VER

siege_start::siege_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_start::InitAsDefaultInstance() {
}

siege_start::siege_start(const siege_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_start::SharedCtor() {
  _cached_size_ = 0;
  open_time_ = 0u;
  close_time_ = 0u;
  family_id_ = 0u;
  occupy_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_start::~siege_start() {
  SharedDtor();
}

void siege_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void siege_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_start_descriptor_;
}

const siege_start& siege_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_start* siege_start::default_instance_ = NULL;

siege_start* siege_start::New() const {
  return new siege_start;
}

void siege_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_time_ = 0u;
    close_time_ = 0u;
    family_id_ = 0u;
    occupy_time_ = 0u;
  }
  fsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_close_time;
        break;
      }

      // required uint32 close_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupy_time;
        break;
      }

      // optional uint32 occupy_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_time_)));
          set_has_occupy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fsi;
        break;
      }

      // repeated .client.family_simple_info fsi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fsi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 open_time = 1;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_time(), output);
  }

  // required uint32 close_time = 2;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->close_time(), output);
  }

  // optional uint32 family_id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  // optional uint32 occupy_time = 4;
  if (has_occupy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->occupy_time(), output);
  }

  // repeated .client.family_simple_info fsi = 5;
  for (int i = 0; i < this->fsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fsi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 open_time = 1;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_time(), target);
  }

  // required uint32 close_time = 2;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->close_time(), target);
  }

  // optional uint32 family_id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  // optional uint32 occupy_time = 4;
  if (has_occupy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->occupy_time(), target);
  }

  // repeated .client.family_simple_info fsi = 5;
  for (int i = 0; i < this->fsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fsi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_time = 1;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_time());
    }

    // required uint32 close_time = 2;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_time());
    }

    // optional uint32 family_id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional uint32 occupy_time = 4;
    if (has_occupy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy_time());
    }

  }
  // repeated .client.family_simple_info fsi = 5;
  total_size += 1 * this->fsi_size();
  for (int i = 0; i < this->fsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_start::MergeFrom(const siege_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  fsi_.MergeFrom(from.fsi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_occupy_time()) {
      set_occupy_time(from.occupy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_start::CopyFrom(const siege_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < fsi_size(); i++) {
    if (!this->fsi(i).IsInitialized()) return false;
  }
  return true;
}

void siege_start::Swap(siege_start* other) {
  if (other != this) {
    std::swap(open_time_, other->open_time_);
    std::swap(close_time_, other->close_time_);
    std::swap(family_id_, other->family_id_);
    std::swap(occupy_time_, other->occupy_time_);
    fsi_.Swap(&other->fsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_start_descriptor_;
  metadata.reflection = siege_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int siege_broadcast_msg::kIdFieldNumber;
#endif  // !_MSC_VER

siege_broadcast_msg::siege_broadcast_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void siege_broadcast_msg::InitAsDefaultInstance() {
}

siege_broadcast_msg::siege_broadcast_msg(const siege_broadcast_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void siege_broadcast_msg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siege_broadcast_msg::~siege_broadcast_msg() {
  SharedDtor();
}

void siege_broadcast_msg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void siege_broadcast_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siege_broadcast_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siege_broadcast_msg_descriptor_;
}

const siege_broadcast_msg& siege_broadcast_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

siege_broadcast_msg* siege_broadcast_msg::default_instance_ = NULL;

siege_broadcast_msg* siege_broadcast_msg::New() const {
  return new siege_broadcast_msg;
}

void siege_broadcast_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siege_broadcast_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void siege_broadcast_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* siege_broadcast_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int siege_broadcast_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siege_broadcast_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siege_broadcast_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siege_broadcast_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siege_broadcast_msg::MergeFrom(const siege_broadcast_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siege_broadcast_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siege_broadcast_msg::CopyFrom(const siege_broadcast_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siege_broadcast_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siege_broadcast_msg::Swap(siege_broadcast_msg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siege_broadcast_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siege_broadcast_msg_descriptor_;
  metadata.reflection = siege_broadcast_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_sculpture::kRoleIdFieldNumber;
const int update_sculpture::kKingFieldNumber;
const int update_sculpture::kTitleFieldNumber;
const int update_sculpture::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

update_sculpture::update_sculpture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_sculpture::InitAsDefaultInstance() {
}

update_sculpture::update_sculpture(const update_sculpture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_sculpture::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  king_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_sculpture::~update_sculpture() {
  SharedDtor();
}

void update_sculpture::SharedDtor() {
  if (king_ != &::google::protobuf::internal::kEmptyString) {
    delete king_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void update_sculpture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_sculpture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_sculpture_descriptor_;
}

const update_sculpture& update_sculpture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

update_sculpture* update_sculpture::default_instance_ = NULL;

update_sculpture* update_sculpture::New() const {
  return new update_sculpture;
}

void update_sculpture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_king()) {
      if (king_ != &::google::protobuf::internal::kEmptyString) {
        king_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_sculpture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_king;
        break;
      }

      // required string king = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_king:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_king()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->king().data(), this->king().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_family_name;
        break;
      }

      // required string family_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_sculpture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->king().data(), this->king().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->king(), output);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required string family_name = 4;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_sculpture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->king().data(), this->king().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->king(), target);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required string family_name = 4;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_sculpture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string king = 2;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->king());
    }

    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string family_name = 4;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_sculpture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_sculpture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_sculpture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_sculpture::MergeFrom(const update_sculpture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_king()) {
      set_king(from.king());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_sculpture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_sculpture::CopyFrom(const update_sculpture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_sculpture::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void update_sculpture::Swap(update_sculpture* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(king_, other->king_);
    std::swap(title_, other->title_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_sculpture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_sculpture_descriptor_;
  metadata.reflection = update_sculpture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kingdom_sculpture_info::kRoleIdFieldNumber;
const int kingdom_sculpture_info::kKingFieldNumber;
const int kingdom_sculpture_info::kTitleFieldNumber;
const int kingdom_sculpture_info::kInstIdFieldNumber;
const int kingdom_sculpture_info::kXFieldNumber;
const int kingdom_sculpture_info::kYFieldNumber;
const int kingdom_sculpture_info::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

kingdom_sculpture_info::kingdom_sculpture_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kingdom_sculpture_info::InitAsDefaultInstance() {
}

kingdom_sculpture_info::kingdom_sculpture_info(const kingdom_sculpture_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kingdom_sculpture_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  king_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_id_ = GOOGLE_ULONGLONG(0);
  x_ = 0u;
  y_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kingdom_sculpture_info::~kingdom_sculpture_info() {
  SharedDtor();
}

void kingdom_sculpture_info::SharedDtor() {
  if (king_ != &::google::protobuf::internal::kEmptyString) {
    delete king_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void kingdom_sculpture_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kingdom_sculpture_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kingdom_sculpture_info_descriptor_;
}

const kingdom_sculpture_info& kingdom_sculpture_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

kingdom_sculpture_info* kingdom_sculpture_info::default_instance_ = NULL;

kingdom_sculpture_info* kingdom_sculpture_info::New() const {
  return new kingdom_sculpture_info;
}

void kingdom_sculpture_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_king()) {
      if (king_ != &::google::protobuf::internal::kEmptyString) {
        king_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    inst_id_ = GOOGLE_ULONGLONG(0);
    x_ = 0u;
    y_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kingdom_sculpture_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_king;
        break;
      }

      // required string king = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_king:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_king()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->king().data(), this->king().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inst_id;
        break;
      }

      // required uint64 inst_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // required uint32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // required uint32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_family_name;
        break;
      }

      // required string family_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kingdom_sculpture_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->king().data(), this->king().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->king(), output);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required uint64 inst_id = 4;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->inst_id(), output);
  }

  // required uint32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->x(), output);
  }

  // required uint32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->y(), output);
  }

  // required string family_name = 7;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kingdom_sculpture_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->king().data(), this->king().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->king(), target);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required uint64 inst_id = 4;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->inst_id(), target);
  }

  // required uint32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->x(), target);
  }

  // required uint32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->y(), target);
  }

  // required string family_name = 7;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kingdom_sculpture_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string king = 2;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->king());
    }

    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required uint64 inst_id = 4;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_id());
    }

    // required uint32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required string family_name = 7;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kingdom_sculpture_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kingdom_sculpture_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kingdom_sculpture_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kingdom_sculpture_info::MergeFrom(const kingdom_sculpture_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_king()) {
      set_king(from.king());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kingdom_sculpture_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kingdom_sculpture_info::CopyFrom(const kingdom_sculpture_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kingdom_sculpture_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void kingdom_sculpture_info::Swap(kingdom_sculpture_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(king_, other->king_);
    std::swap(title_, other->title_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kingdom_sculpture_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kingdom_sculpture_info_descriptor_;
  metadata.reflection = kingdom_sculpture_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kingdom_sculpture::kKsiFieldNumber;
#endif  // !_MSC_VER

kingdom_sculpture::kingdom_sculpture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kingdom_sculpture::InitAsDefaultInstance() {
}

kingdom_sculpture::kingdom_sculpture(const kingdom_sculpture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kingdom_sculpture::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kingdom_sculpture::~kingdom_sculpture() {
  SharedDtor();
}

void kingdom_sculpture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void kingdom_sculpture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kingdom_sculpture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kingdom_sculpture_descriptor_;
}

const kingdom_sculpture& kingdom_sculpture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecity_2eproto();
  return *default_instance_;
}

kingdom_sculpture* kingdom_sculpture::default_instance_ = NULL;

kingdom_sculpture* kingdom_sculpture::New() const {
  return new kingdom_sculpture;
}

void kingdom_sculpture::Clear() {
  ksi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kingdom_sculpture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.kingdom_sculpture_info ksi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ksi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ksi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ksi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kingdom_sculpture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.kingdom_sculpture_info ksi = 1;
  for (int i = 0; i < this->ksi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ksi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kingdom_sculpture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.kingdom_sculpture_info ksi = 1;
  for (int i = 0; i < this->ksi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ksi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kingdom_sculpture::ByteSize() const {
  int total_size = 0;

  // repeated .client.kingdom_sculpture_info ksi = 1;
  total_size += 1 * this->ksi_size();
  for (int i = 0; i < this->ksi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ksi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kingdom_sculpture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kingdom_sculpture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kingdom_sculpture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kingdom_sculpture::MergeFrom(const kingdom_sculpture& from) {
  GOOGLE_CHECK_NE(&from, this);
  ksi_.MergeFrom(from.ksi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kingdom_sculpture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kingdom_sculpture::CopyFrom(const kingdom_sculpture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kingdom_sculpture::IsInitialized() const {

  for (int i = 0; i < ksi_size(); i++) {
    if (!this->ksi(i).IsInitialized()) return false;
  }
  return true;
}

void kingdom_sculpture::Swap(kingdom_sculpture* other) {
  if (other != this) {
    ksi_.Swap(&other->ksi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kingdom_sculpture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kingdom_sculpture_descriptor_;
  metadata.reflection = kingdom_sculpture_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
