// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.farm.proto

#ifndef PROTOBUF_client_2efarm_2eproto__INCLUDED
#define PROTOBUF_client_2efarm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2efarm_2eproto();
void protobuf_AssignDesc_client_2efarm_2eproto();
void protobuf_ShutdownFile_client_2efarm_2eproto();

class farm_land_info;
class farm_slave_info;
class farm_info;
class update_farm_info;
class farm_info_req;
class farm_info_rsp;
class farm_record;
class farm_record_req;
class farm_record_rsp;
class farm_create_req;
class farm_create_rsp;
class farm_enter_req;
class farm_enter_rsp;
class farm_entered_msg;
class farm_sow_req;
class farm_sow_rsp;
class farm_steal_req;
class farm_steal_msg;
class farm_stolen_msg;
class farm_steal_rsp;
class farm_gain_req;
class farm_gain_rsp;
class farm_gain_unit;
class farm_gain_msg;
class farm_improve_req;
class farm_improve_rsp;
class farmer_role_msg;
class farm_gain_money_req;
class farm_gain_money_rsp;

enum FARM_OPERATE_TYPE_E {
  FOTE_NULL = 0,
  FOTE_CREATE = 1,
  FOTE_SOW = 2,
  FOTE_ENTER = 3,
  FOTE_STEAL = 4,
  FOTE_IMPROVE = 5,
  FOTE_GAIN = 6
};
bool FARM_OPERATE_TYPE_E_IsValid(int value);
const FARM_OPERATE_TYPE_E FARM_OPERATE_TYPE_E_MIN = FOTE_NULL;
const FARM_OPERATE_TYPE_E FARM_OPERATE_TYPE_E_MAX = FOTE_GAIN;
const int FARM_OPERATE_TYPE_E_ARRAYSIZE = FARM_OPERATE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FARM_OPERATE_TYPE_E_descriptor();
inline const ::std::string& FARM_OPERATE_TYPE_E_Name(FARM_OPERATE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FARM_OPERATE_TYPE_E_descriptor(), value);
}
inline bool FARM_OPERATE_TYPE_E_Parse(
    const ::std::string& name, FARM_OPERATE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FARM_OPERATE_TYPE_E>(
    FARM_OPERATE_TYPE_E_descriptor(), name, value);
}
enum FARM_PARAM_E {
  FPE_MAX_FARM_LAND_NUM = 18
};
bool FARM_PARAM_E_IsValid(int value);
const FARM_PARAM_E FARM_PARAM_E_MIN = FPE_MAX_FARM_LAND_NUM;
const FARM_PARAM_E FARM_PARAM_E_MAX = FPE_MAX_FARM_LAND_NUM;
const int FARM_PARAM_E_ARRAYSIZE = FARM_PARAM_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FARM_PARAM_E_descriptor();
inline const ::std::string& FARM_PARAM_E_Name(FARM_PARAM_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FARM_PARAM_E_descriptor(), value);
}
inline bool FARM_PARAM_E_Parse(
    const ::std::string& name, FARM_PARAM_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FARM_PARAM_E>(
    FARM_PARAM_E_descriptor(), name, value);
}
enum FARM_OPERATE_E {
  FOE_SUCCESS = 0,
  FOE_NO_FARM = 1,
  FOE_NO_ENTER_TIMES = 2,
  FOE_NO_STEAL_TIMES = 3,
  FOE_CANT_STEAL = 4,
  FOE_NO_MATURE = 5,
  FOE_NO_SEED = 6,
  FOE_SEED_LEVEL_LIMIT = 7,
  FOE_STEAL_FAILED = 8,
  FOE_NOT_BELONG = 10,
  FOE_NO_LCHOR = 11,
  FOE_STEAL_KILLED = 12,
  FOE_STEALED = 13,
  FOE_STEAL_NUM_LIMIT = 14,
  FOE_ENTER_TIME_LIMIT = 15,
  FOE_LEVEL_LIMIT = 16,
  FOE_SOW_NUM_LIMIT = 17,
  FOE_SYS_ERROR = 18,
  FOE_CANT_STEAL_SELF = 19,
  FOE_NOT_EXIST_FARM = 20,
  FOE_MONEY_TIMELIMIT = 21,
  FOE_MONEY_LIMIT = 22
};
bool FARM_OPERATE_E_IsValid(int value);
const FARM_OPERATE_E FARM_OPERATE_E_MIN = FOE_SUCCESS;
const FARM_OPERATE_E FARM_OPERATE_E_MAX = FOE_MONEY_LIMIT;
const int FARM_OPERATE_E_ARRAYSIZE = FARM_OPERATE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FARM_OPERATE_E_descriptor();
inline const ::std::string& FARM_OPERATE_E_Name(FARM_OPERATE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FARM_OPERATE_E_descriptor(), value);
}
inline bool FARM_OPERATE_E_Parse(
    const ::std::string& name, FARM_OPERATE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FARM_OPERATE_E>(
    FARM_OPERATE_E_descriptor(), name, value);
}
enum FARM_CROP_STATUS_E {
  FCSE_NULL = 0,
  FCSE_SEED = 1,
  FCSE_GROWUP = 2,
  FCSE_MATURE = 3
};
bool FARM_CROP_STATUS_E_IsValid(int value);
const FARM_CROP_STATUS_E FARM_CROP_STATUS_E_MIN = FCSE_NULL;
const FARM_CROP_STATUS_E FARM_CROP_STATUS_E_MAX = FCSE_MATURE;
const int FARM_CROP_STATUS_E_ARRAYSIZE = FARM_CROP_STATUS_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FARM_CROP_STATUS_E_descriptor();
inline const ::std::string& FARM_CROP_STATUS_E_Name(FARM_CROP_STATUS_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FARM_CROP_STATUS_E_descriptor(), value);
}
inline bool FARM_CROP_STATUS_E_Parse(
    const ::std::string& name, FARM_CROP_STATUS_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FARM_CROP_STATUS_E>(
    FARM_CROP_STATUS_E_descriptor(), name, value);
}
enum FARM_IMPROVE_TYPE_E {
  FITE_ONE_HOUR = 1,
  FITE_TWO_HOUR = 2,
  FITE_FIVE_HOUR = 3
};
bool FARM_IMPROVE_TYPE_E_IsValid(int value);
const FARM_IMPROVE_TYPE_E FARM_IMPROVE_TYPE_E_MIN = FITE_ONE_HOUR;
const FARM_IMPROVE_TYPE_E FARM_IMPROVE_TYPE_E_MAX = FITE_FIVE_HOUR;
const int FARM_IMPROVE_TYPE_E_ARRAYSIZE = FARM_IMPROVE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FARM_IMPROVE_TYPE_E_descriptor();
inline const ::std::string& FARM_IMPROVE_TYPE_E_Name(FARM_IMPROVE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FARM_IMPROVE_TYPE_E_descriptor(), value);
}
inline bool FARM_IMPROVE_TYPE_E_Parse(
    const ::std::string& name, FARM_IMPROVE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FARM_IMPROVE_TYPE_E>(
    FARM_IMPROVE_TYPE_E_descriptor(), name, value);
}
// ===================================================================

class farm_land_info : public ::google::protobuf::Message {
 public:
  farm_land_info();
  virtual ~farm_land_info();

  farm_land_info(const farm_land_info& from);

  inline farm_land_info& operator=(const farm_land_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_land_info& default_instance();

  void Swap(farm_land_info* other);

  // implements Message ----------------------------------------------

  farm_land_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_land_info& from);
  void MergeFrom(const farm_land_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 land_id = 1 [default = 0];
  inline bool has_land_id() const;
  inline void clear_land_id();
  static const int kLandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 land_id() const;
  inline void set_land_id(::google::protobuf::uint32 value);

  // required uint32 serial = 2 [default = 0];
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // optional uint32 sow_time = 3 [default = 0];
  inline bool has_sow_time() const;
  inline void clear_sow_time();
  static const int kSowTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 sow_time() const;
  inline void set_sow_time(::google::protobuf::uint32 value);

  // optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::client::FARM_CROP_STATUS_E status() const;
  inline void set_status(::client::FARM_CROP_STATUS_E value);

  // optional uint32 countdown = 5 [default = 0];
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountdownFieldNumber = 5;
  inline ::google::protobuf::uint32 countdown() const;
  inline void set_countdown(::google::protobuf::uint32 value);

  // optional uint32 total_fruit_num = 6 [default = 0];
  inline bool has_total_fruit_num() const;
  inline void clear_total_fruit_num();
  static const int kTotalFruitNumFieldNumber = 6;
  inline ::google::protobuf::uint32 total_fruit_num() const;
  inline void set_total_fruit_num(::google::protobuf::uint32 value);

  // optional uint32 steal_fruit_num = 7 [default = 0];
  inline bool has_steal_fruit_num() const;
  inline void clear_steal_fruit_num();
  static const int kStealFruitNumFieldNumber = 7;
  inline ::google::protobuf::uint32 steal_fruit_num() const;
  inline void set_steal_fruit_num(::google::protobuf::uint32 value);

  // repeated uint32 steal_role_id = 8;
  inline int steal_role_id_size() const;
  inline void clear_steal_role_id();
  static const int kStealRoleIdFieldNumber = 8;
  inline ::google::protobuf::uint32 steal_role_id(int index) const;
  inline void set_steal_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_steal_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      steal_role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_steal_role_id();

  // @@protoc_insertion_point(class_scope:client.farm_land_info)
 private:
  inline void set_has_land_id();
  inline void clear_has_land_id();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_sow_time();
  inline void clear_has_sow_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_countdown();
  inline void clear_has_countdown();
  inline void set_has_total_fruit_num();
  inline void clear_has_total_fruit_num();
  inline void set_has_steal_fruit_num();
  inline void clear_has_steal_fruit_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 land_id_;
  ::google::protobuf::uint32 serial_;
  ::google::protobuf::uint32 sow_time_;
  int status_;
  ::google::protobuf::uint32 countdown_;
  ::google::protobuf::uint32 total_fruit_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > steal_role_id_;
  ::google::protobuf::uint32 steal_fruit_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_land_info* default_instance_;
};
// -------------------------------------------------------------------

class farm_slave_info : public ::google::protobuf::Message {
 public:
  farm_slave_info();
  virtual ~farm_slave_info();

  farm_slave_info(const farm_slave_info& from);

  inline farm_slave_info& operator=(const farm_slave_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_slave_info& default_instance();

  void Swap(farm_slave_info* other);

  // implements Message ----------------------------------------------

  farm_slave_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_slave_info& from);
  void MergeFrom(const farm_slave_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 time_end = 2;
  inline bool has_time_end() const;
  inline void clear_time_end();
  static const int kTimeEndFieldNumber = 2;
  inline ::google::protobuf::uint32 time_end() const;
  inline void set_time_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_slave_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_time_end();
  inline void clear_has_time_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 time_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_slave_info* default_instance_;
};
// -------------------------------------------------------------------

class farm_info : public ::google::protobuf::Message {
 public:
  farm_info();
  virtual ~farm_info();

  farm_info(const farm_info& from);

  inline farm_info& operator=(const farm_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_info& default_instance();

  void Swap(farm_info* other);

  // implements Message ----------------------------------------------

  farm_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_info& from);
  void MergeFrom(const farm_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 score = 3 [default = 0];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // required uint32 total_score = 4 [default = 0];
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 total_score() const;
  inline void set_total_score(::google::protobuf::uint32 value);

  // required uint32 money_tree_times = 5 [default = 0];
  inline bool has_money_tree_times() const;
  inline void clear_money_tree_times();
  static const int kMoneyTreeTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 money_tree_times() const;
  inline void set_money_tree_times(::google::protobuf::uint32 value);

  // repeated .client.farm_land_info fli = 6;
  inline int fli_size() const;
  inline void clear_fli();
  static const int kFliFieldNumber = 6;
  inline const ::client::farm_land_info& fli(int index) const;
  inline ::client::farm_land_info* mutable_fli(int index);
  inline ::client::farm_land_info* add_fli();
  inline const ::google::protobuf::RepeatedPtrField< ::client::farm_land_info >&
      fli() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::farm_land_info >*
      mutable_fli();

  // optional .client.farm_slave_info fsi = 7;
  inline bool has_fsi() const;
  inline void clear_fsi();
  static const int kFsiFieldNumber = 7;
  inline const ::client::farm_slave_info& fsi() const;
  inline ::client::farm_slave_info* mutable_fsi();
  inline ::client::farm_slave_info* release_fsi();
  inline void set_allocated_fsi(::client::farm_slave_info* fsi);

  // @@protoc_insertion_point(class_scope:client.farm_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_money_tree_times();
  inline void clear_has_money_tree_times();
  inline void set_has_fsi();
  inline void clear_has_fsi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 total_score_;
  ::google::protobuf::RepeatedPtrField< ::client::farm_land_info > fli_;
  ::client::farm_slave_info* fsi_;
  ::google::protobuf::uint32 money_tree_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_info* default_instance_;
};
// -------------------------------------------------------------------

class update_farm_info : public ::google::protobuf::Message {
 public:
  update_farm_info();
  virtual ~update_farm_info();

  update_farm_info(const update_farm_info& from);

  inline update_farm_info& operator=(const update_farm_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_farm_info& default_instance();

  void Swap(update_farm_info* other);

  // implements Message ----------------------------------------------

  update_farm_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_farm_info& from);
  void MergeFrom(const update_farm_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_create = 1 [default = false];
  inline bool has_is_create() const;
  inline void clear_is_create();
  static const int kIsCreateFieldNumber = 1;
  inline bool is_create() const;
  inline void set_is_create(bool value);

  // required .client.farm_info fi = 2;
  inline bool has_fi() const;
  inline void clear_fi();
  static const int kFiFieldNumber = 2;
  inline const ::client::farm_info& fi() const;
  inline ::client::farm_info* mutable_fi();
  inline ::client::farm_info* release_fi();
  inline void set_allocated_fi(::client::farm_info* fi);

  // @@protoc_insertion_point(class_scope:client.update_farm_info)
 private:
  inline void set_has_is_create();
  inline void clear_has_is_create();
  inline void set_has_fi();
  inline void clear_has_fi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::farm_info* fi_;
  bool is_create_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static update_farm_info* default_instance_;
};
// -------------------------------------------------------------------

class farm_info_req : public ::google::protobuf::Message {
 public:
  farm_info_req();
  virtual ~farm_info_req();

  farm_info_req(const farm_info_req& from);

  inline farm_info_req& operator=(const farm_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_info_req& default_instance();

  void Swap(farm_info_req* other);

  // implements Message ----------------------------------------------

  farm_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_info_req& from);
  void MergeFrom(const farm_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_info_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_info_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_info_rsp : public ::google::protobuf::Message {
 public:
  farm_info_rsp();
  virtual ~farm_info_rsp();

  farm_info_rsp(const farm_info_rsp& from);

  inline farm_info_rsp& operator=(const farm_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_info_rsp& default_instance();

  void Swap(farm_info_rsp* other);

  // implements Message ----------------------------------------------

  farm_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_info_rsp& from);
  void MergeFrom(const farm_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // repeated .client.farm_info fis = 2;
  inline int fis_size() const;
  inline void clear_fis();
  static const int kFisFieldNumber = 2;
  inline const ::client::farm_info& fis(int index) const;
  inline ::client::farm_info* mutable_fis(int index);
  inline ::client::farm_info* add_fis();
  inline const ::google::protobuf::RepeatedPtrField< ::client::farm_info >&
      fis() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::farm_info >*
      mutable_fis();

  // @@protoc_insertion_point(class_scope:client.farm_info_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::farm_info > fis_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_record : public ::google::protobuf::Message {
 public:
  farm_record();
  virtual ~farm_record();

  farm_record(const farm_record& from);

  inline farm_record& operator=(const farm_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_record& default_instance();

  void Swap(farm_record* other);

  // implements Message ----------------------------------------------

  farm_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_record& from);
  void MergeFrom(const farm_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required .client.FARM_OPERATE_TYPE_E type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::client::FARM_OPERATE_TYPE_E type() const;
  inline void set_type(::client::FARM_OPERATE_TYPE_E value);

  // optional uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 times = 5;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional uint32 serial = 6;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 6;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_record)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_serial();
  inline void clear_has_serial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  int type_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 serial_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_record* default_instance_;
};
// -------------------------------------------------------------------

class farm_record_req : public ::google::protobuf::Message {
 public:
  farm_record_req();
  virtual ~farm_record_req();

  farm_record_req(const farm_record_req& from);

  inline farm_record_req& operator=(const farm_record_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_record_req& default_instance();

  void Swap(farm_record_req* other);

  // implements Message ----------------------------------------------

  farm_record_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_record_req& from);
  void MergeFrom(const farm_record_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_record_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_record_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_record_rsp : public ::google::protobuf::Message {
 public:
  farm_record_rsp();
  virtual ~farm_record_rsp();

  farm_record_rsp(const farm_record_rsp& from);

  inline farm_record_rsp& operator=(const farm_record_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_record_rsp& default_instance();

  void Swap(farm_record_rsp* other);

  // implements Message ----------------------------------------------

  farm_record_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_record_rsp& from);
  void MergeFrom(const farm_record_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.farm_record frs = 1;
  inline int frs_size() const;
  inline void clear_frs();
  static const int kFrsFieldNumber = 1;
  inline const ::client::farm_record& frs(int index) const;
  inline ::client::farm_record* mutable_frs(int index);
  inline ::client::farm_record* add_frs();
  inline const ::google::protobuf::RepeatedPtrField< ::client::farm_record >&
      frs() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::farm_record >*
      mutable_frs();

  // @@protoc_insertion_point(class_scope:client.farm_record_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::farm_record > frs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_record_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_create_req : public ::google::protobuf::Message {
 public:
  farm_create_req();
  virtual ~farm_create_req();

  farm_create_req(const farm_create_req& from);

  inline farm_create_req& operator=(const farm_create_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_create_req& default_instance();

  void Swap(farm_create_req* other);

  // implements Message ----------------------------------------------

  farm_create_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_create_req& from);
  void MergeFrom(const farm_create_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool advanced = 1;
  inline bool has_advanced() const;
  inline void clear_advanced();
  static const int kAdvancedFieldNumber = 1;
  inline bool advanced() const;
  inline void set_advanced(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_create_req)
 private:
  inline void set_has_advanced();
  inline void clear_has_advanced();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  bool advanced_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_create_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_create_rsp : public ::google::protobuf::Message {
 public:
  farm_create_rsp();
  virtual ~farm_create_rsp();

  farm_create_rsp(const farm_create_rsp& from);

  inline farm_create_rsp& operator=(const farm_create_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_create_rsp& default_instance();

  void Swap(farm_create_rsp* other);

  // implements Message ----------------------------------------------

  farm_create_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_create_rsp& from);
  void MergeFrom(const farm_create_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional .client.farm_info fi = 2;
  inline bool has_fi() const;
  inline void clear_fi();
  static const int kFiFieldNumber = 2;
  inline const ::client::farm_info& fi() const;
  inline ::client::farm_info* mutable_fi();
  inline ::client::farm_info* release_fi();
  inline void set_allocated_fi(::client::farm_info* fi);

  // @@protoc_insertion_point(class_scope:client.farm_create_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_fi();
  inline void clear_has_fi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::farm_info* fi_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_create_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_enter_req : public ::google::protobuf::Message {
 public:
  farm_enter_req();
  virtual ~farm_enter_req();

  farm_enter_req(const farm_enter_req& from);

  inline farm_enter_req& operator=(const farm_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_enter_req& default_instance();

  void Swap(farm_enter_req* other);

  // implements Message ----------------------------------------------

  farm_enter_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_enter_req& from);
  void MergeFrom(const farm_enter_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_enter_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_enter_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_enter_rsp : public ::google::protobuf::Message {
 public:
  farm_enter_rsp();
  virtual ~farm_enter_rsp();

  farm_enter_rsp(const farm_enter_rsp& from);

  inline farm_enter_rsp& operator=(const farm_enter_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_enter_rsp& default_instance();

  void Swap(farm_enter_rsp* other);

  // implements Message ----------------------------------------------

  farm_enter_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_enter_rsp& from);
  void MergeFrom(const farm_enter_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // @@protoc_insertion_point(class_scope:client.farm_enter_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_enter_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_entered_msg : public ::google::protobuf::Message {
 public:
  farm_entered_msg();
  virtual ~farm_entered_msg();

  farm_entered_msg(const farm_entered_msg& from);

  inline farm_entered_msg& operator=(const farm_entered_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_entered_msg& default_instance();

  void Swap(farm_entered_msg* other);

  // implements Message ----------------------------------------------

  farm_entered_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_entered_msg& from);
  void MergeFrom(const farm_entered_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 farmer_id = 2 [default = 0];
  inline bool has_farmer_id() const;
  inline void clear_farmer_id();
  static const int kFarmerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 farmer_id() const;
  inline void set_farmer_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_entered_msg)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_farmer_id();
  inline void clear_has_farmer_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 farmer_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_entered_msg* default_instance_;
};
// -------------------------------------------------------------------

class farm_sow_req : public ::google::protobuf::Message {
 public:
  farm_sow_req();
  virtual ~farm_sow_req();

  farm_sow_req(const farm_sow_req& from);

  inline farm_sow_req& operator=(const farm_sow_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_sow_req& default_instance();

  void Swap(farm_sow_req* other);

  // implements Message ----------------------------------------------

  farm_sow_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_sow_req& from);
  void MergeFrom(const farm_sow_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 land_id = 1;
  inline bool has_land_id() const;
  inline void clear_land_id();
  static const int kLandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 land_id() const;
  inline void set_land_id(::google::protobuf::uint32 value);

  // required uint32 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::uint32 serial() const;
  inline void set_serial(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_sow_req)
 private:
  inline void set_has_land_id();
  inline void clear_has_land_id();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 land_id_;
  ::google::protobuf::uint32 serial_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_sow_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_sow_rsp : public ::google::protobuf::Message {
 public:
  farm_sow_rsp();
  virtual ~farm_sow_rsp();

  farm_sow_rsp(const farm_sow_rsp& from);

  inline farm_sow_rsp& operator=(const farm_sow_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_sow_rsp& default_instance();

  void Swap(farm_sow_rsp* other);

  // implements Message ----------------------------------------------

  farm_sow_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_sow_rsp& from);
  void MergeFrom(const farm_sow_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional .client.farm_land_info fli = 2;
  inline bool has_fli() const;
  inline void clear_fli();
  static const int kFliFieldNumber = 2;
  inline const ::client::farm_land_info& fli() const;
  inline ::client::farm_land_info* mutable_fli();
  inline ::client::farm_land_info* release_fli();
  inline void set_allocated_fli(::client::farm_land_info* fli);

  // @@protoc_insertion_point(class_scope:client.farm_sow_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_fli();
  inline void clear_has_fli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::farm_land_info* fli_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_sow_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_steal_req : public ::google::protobuf::Message {
 public:
  farm_steal_req();
  virtual ~farm_steal_req();

  farm_steal_req(const farm_steal_req& from);

  inline farm_steal_req& operator=(const farm_steal_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_steal_req& default_instance();

  void Swap(farm_steal_req* other);

  // implements Message ----------------------------------------------

  farm_steal_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_steal_req& from);
  void MergeFrom(const farm_steal_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 land_id = 1;
  inline bool has_land_id() const;
  inline void clear_land_id();
  static const int kLandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 land_id() const;
  inline void set_land_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_steal_req)
 private:
  inline void set_has_land_id();
  inline void clear_has_land_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 land_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_steal_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_steal_msg : public ::google::protobuf::Message {
 public:
  farm_steal_msg();
  virtual ~farm_steal_msg();

  farm_steal_msg(const farm_steal_msg& from);

  inline farm_steal_msg& operator=(const farm_steal_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_steal_msg& default_instance();

  void Swap(farm_steal_msg* other);

  // implements Message ----------------------------------------------

  farm_steal_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_steal_msg& from);
  void MergeFrom(const farm_steal_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.farm_steal_req req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline const ::client::farm_steal_req& req() const;
  inline ::client::farm_steal_req* mutable_req();
  inline ::client::farm_steal_req* release_req();
  inline void set_allocated_req(::client::farm_steal_req* req);

  // required uint32 farm_role_id = 2;
  inline bool has_farm_role_id() const;
  inline void clear_farm_role_id();
  static const int kFarmRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 farm_role_id() const;
  inline void set_farm_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_steal_msg)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_farm_role_id();
  inline void clear_has_farm_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::farm_steal_req* req_;
  ::google::protobuf::uint32 farm_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_steal_msg* default_instance_;
};
// -------------------------------------------------------------------

class farm_stolen_msg : public ::google::protobuf::Message {
 public:
  farm_stolen_msg();
  virtual ~farm_stolen_msg();

  farm_stolen_msg(const farm_stolen_msg& from);

  inline farm_stolen_msg& operator=(const farm_stolen_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_stolen_msg& default_instance();

  void Swap(farm_stolen_msg* other);

  // implements Message ----------------------------------------------

  farm_stolen_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_stolen_msg& from);
  void MergeFrom(const farm_stolen_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 farm_role_id = 1;
  inline bool has_farm_role_id() const;
  inline void clear_farm_role_id();
  static const int kFarmRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 farm_role_id() const;
  inline void set_farm_role_id(::google::protobuf::uint32 value);

  // required uint32 thief_role_id = 2;
  inline bool has_thief_role_id() const;
  inline void clear_thief_role_id();
  static const int kThiefRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 thief_role_id() const;
  inline void set_thief_role_id(::google::protobuf::uint32 value);

  // required uint32 steal_goods_id = 3;
  inline bool has_steal_goods_id() const;
  inline void clear_steal_goods_id();
  static const int kStealGoodsIdFieldNumber = 3;
  inline ::google::protobuf::uint32 steal_goods_id() const;
  inline void set_steal_goods_id(::google::protobuf::uint32 value);

  // required uint32 steal_num = 4;
  inline bool has_steal_num() const;
  inline void clear_steal_num();
  static const int kStealNumFieldNumber = 4;
  inline ::google::protobuf::uint32 steal_num() const;
  inline void set_steal_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_stolen_msg)
 private:
  inline void set_has_farm_role_id();
  inline void clear_has_farm_role_id();
  inline void set_has_thief_role_id();
  inline void clear_has_thief_role_id();
  inline void set_has_steal_goods_id();
  inline void clear_has_steal_goods_id();
  inline void set_has_steal_num();
  inline void clear_has_steal_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 farm_role_id_;
  ::google::protobuf::uint32 thief_role_id_;
  ::google::protobuf::uint32 steal_goods_id_;
  ::google::protobuf::uint32 steal_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_stolen_msg* default_instance_;
};
// -------------------------------------------------------------------

class farm_steal_rsp : public ::google::protobuf::Message {
 public:
  farm_steal_rsp();
  virtual ~farm_steal_rsp();

  farm_steal_rsp(const farm_steal_rsp& from);

  inline farm_steal_rsp& operator=(const farm_steal_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_steal_rsp& default_instance();

  void Swap(farm_steal_rsp* other);

  // implements Message ----------------------------------------------

  farm_steal_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_steal_rsp& from);
  void MergeFrom(const farm_steal_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional uint32 lose_money = 2;
  inline bool has_lose_money() const;
  inline void clear_lose_money();
  static const int kLoseMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 lose_money() const;
  inline void set_lose_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_steal_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lose_money();
  inline void clear_has_lose_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 lose_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_steal_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_req : public ::google::protobuf::Message {
 public:
  farm_gain_req();
  virtual ~farm_gain_req();

  farm_gain_req(const farm_gain_req& from);

  inline farm_gain_req& operator=(const farm_gain_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_req& default_instance();

  void Swap(farm_gain_req* other);

  // implements Message ----------------------------------------------

  farm_gain_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_req& from);
  void MergeFrom(const farm_gain_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 land_id = 1;
  inline int land_id_size() const;
  inline void clear_land_id();
  static const int kLandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 land_id(int index) const;
  inline void set_land_id(int index, ::google::protobuf::uint32 value);
  inline void add_land_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      land_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_land_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_gain_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > land_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_rsp : public ::google::protobuf::Message {
 public:
  farm_gain_rsp();
  virtual ~farm_gain_rsp();

  farm_gain_rsp(const farm_gain_rsp& from);

  inline farm_gain_rsp& operator=(const farm_gain_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_rsp& default_instance();

  void Swap(farm_gain_rsp* other);

  // implements Message ----------------------------------------------

  farm_gain_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_rsp& from);
  void MergeFrom(const farm_gain_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional uint32 add_score = 2;
  inline bool has_add_score() const;
  inline void clear_add_score();
  static const int kAddScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 add_score() const;
  inline void set_add_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_gain_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_add_score();
  inline void clear_has_add_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 add_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_unit : public ::google::protobuf::Message {
 public:
  farm_gain_unit();
  virtual ~farm_gain_unit();

  farm_gain_unit(const farm_gain_unit& from);

  inline farm_gain_unit& operator=(const farm_gain_unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_unit& default_instance();

  void Swap(farm_gain_unit* other);

  // implements Message ----------------------------------------------

  farm_gain_unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_unit& from);
  void MergeFrom(const farm_gain_unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // required uint32 goods_num = 2;
  inline bool has_goods_num() const;
  inline void clear_goods_num();
  static const int kGoodsNumFieldNumber = 2;
  inline ::google::protobuf::uint32 goods_num() const;
  inline void set_goods_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_gain_unit)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_num();
  inline void clear_has_goods_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 goods_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_unit* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_msg : public ::google::protobuf::Message {
 public:
  farm_gain_msg();
  virtual ~farm_gain_msg();

  farm_gain_msg(const farm_gain_msg& from);

  inline farm_gain_msg& operator=(const farm_gain_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_msg& default_instance();

  void Swap(farm_gain_msg* other);

  // implements Message ----------------------------------------------

  farm_gain_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_msg& from);
  void MergeFrom(const farm_gain_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 farm_role_id = 1;
  inline bool has_farm_role_id() const;
  inline void clear_farm_role_id();
  static const int kFarmRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 farm_role_id() const;
  inline void set_farm_role_id(::google::protobuf::uint32 value);

  // repeated .client.farm_gain_unit fgus = 2;
  inline int fgus_size() const;
  inline void clear_fgus();
  static const int kFgusFieldNumber = 2;
  inline const ::client::farm_gain_unit& fgus(int index) const;
  inline ::client::farm_gain_unit* mutable_fgus(int index);
  inline ::client::farm_gain_unit* add_fgus();
  inline const ::google::protobuf::RepeatedPtrField< ::client::farm_gain_unit >&
      fgus() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::farm_gain_unit >*
      mutable_fgus();

  // @@protoc_insertion_point(class_scope:client.farm_gain_msg)
 private:
  inline void set_has_farm_role_id();
  inline void clear_has_farm_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::farm_gain_unit > fgus_;
  ::google::protobuf::uint32 farm_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_msg* default_instance_;
};
// -------------------------------------------------------------------

class farm_improve_req : public ::google::protobuf::Message {
 public:
  farm_improve_req();
  virtual ~farm_improve_req();

  farm_improve_req(const farm_improve_req& from);

  inline farm_improve_req& operator=(const farm_improve_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_improve_req& default_instance();

  void Swap(farm_improve_req* other);

  // implements Message ----------------------------------------------

  farm_improve_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_improve_req& from);
  void MergeFrom(const farm_improve_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 land_id = 2;
  inline bool has_land_id() const;
  inline void clear_land_id();
  static const int kLandIdFieldNumber = 2;
  inline ::google::protobuf::uint32 land_id() const;
  inline void set_land_id(::google::protobuf::uint32 value);

  // required .client.FARM_IMPROVE_TYPE_E type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::client::FARM_IMPROVE_TYPE_E type() const;
  inline void set_type(::client::FARM_IMPROVE_TYPE_E value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_improve_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_land_id();
  inline void clear_has_land_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 land_id_;
  ::client::server_head* svr_head_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_improve_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_improve_rsp : public ::google::protobuf::Message {
 public:
  farm_improve_rsp();
  virtual ~farm_improve_rsp();

  farm_improve_rsp(const farm_improve_rsp& from);

  inline farm_improve_rsp& operator=(const farm_improve_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_improve_rsp& default_instance();

  void Swap(farm_improve_rsp* other);

  // implements Message ----------------------------------------------

  farm_improve_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_improve_rsp& from);
  void MergeFrom(const farm_improve_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional uint32 improve_role_id = 2;
  inline bool has_improve_role_id() const;
  inline void clear_improve_role_id();
  static const int kImproveRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 improve_role_id() const;
  inline void set_improve_role_id(::google::protobuf::uint32 value);

  // optional .client.farm_land_info fli = 3;
  inline bool has_fli() const;
  inline void clear_fli();
  static const int kFliFieldNumber = 3;
  inline const ::client::farm_land_info& fli() const;
  inline ::client::farm_land_info* mutable_fli();
  inline ::client::farm_land_info* release_fli();
  inline void set_allocated_fli(::client::farm_land_info* fli);

  // @@protoc_insertion_point(class_scope:client.farm_improve_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_improve_role_id();
  inline void clear_has_improve_role_id();
  inline void set_has_fli();
  inline void clear_has_fli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 improve_role_id_;
  ::client::farm_land_info* fli_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_improve_rsp* default_instance_;
};
// -------------------------------------------------------------------

class farmer_role_msg : public ::google::protobuf::Message {
 public:
  farmer_role_msg();
  virtual ~farmer_role_msg();

  farmer_role_msg(const farmer_role_msg& from);

  inline farmer_role_msg& operator=(const farmer_role_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farmer_role_msg& default_instance();

  void Swap(farmer_role_msg* other);

  // implements Message ----------------------------------------------

  farmer_role_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farmer_role_msg& from);
  void MergeFrom(const farmer_role_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farmer_role_msg)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farmer_role_msg* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_money_req : public ::google::protobuf::Message {
 public:
  farm_gain_money_req();
  virtual ~farm_gain_money_req();

  farm_gain_money_req(const farm_gain_money_req& from);

  inline farm_gain_money_req& operator=(const farm_gain_money_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_money_req& default_instance();

  void Swap(farm_gain_money_req* other);

  // implements Message ----------------------------------------------

  farm_gain_money_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_money_req& from);
  void MergeFrom(const farm_gain_money_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.farm_gain_money_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_money_req* default_instance_;
};
// -------------------------------------------------------------------

class farm_gain_money_rsp : public ::google::protobuf::Message {
 public:
  farm_gain_money_rsp();
  virtual ~farm_gain_money_rsp();

  farm_gain_money_rsp(const farm_gain_money_rsp& from);

  inline farm_gain_money_rsp& operator=(const farm_gain_money_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const farm_gain_money_rsp& default_instance();

  void Swap(farm_gain_money_rsp* other);

  // implements Message ----------------------------------------------

  farm_gain_money_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const farm_gain_money_rsp& from);
  void MergeFrom(const farm_gain_money_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FARM_OPERATE_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FARM_OPERATE_E ret() const;
  inline void set_ret(::client::FARM_OPERATE_E value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.farm_gain_money_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efarm_2eproto();
  friend void protobuf_AssignDesc_client_2efarm_2eproto();
  friend void protobuf_ShutdownFile_client_2efarm_2eproto();

  void InitAsDefaultInstance();
  static farm_gain_money_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// farm_land_info

// required uint32 land_id = 1 [default = 0];
inline bool farm_land_info::has_land_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_land_info::set_has_land_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_land_info::clear_has_land_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_land_info::clear_land_id() {
  land_id_ = 0u;
  clear_has_land_id();
}
inline ::google::protobuf::uint32 farm_land_info::land_id() const {
  return land_id_;
}
inline void farm_land_info::set_land_id(::google::protobuf::uint32 value) {
  set_has_land_id();
  land_id_ = value;
}

// required uint32 serial = 2 [default = 0];
inline bool farm_land_info::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_land_info::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_land_info::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_land_info::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 farm_land_info::serial() const {
  return serial_;
}
inline void farm_land_info::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// optional uint32 sow_time = 3 [default = 0];
inline bool farm_land_info::has_sow_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_land_info::set_has_sow_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_land_info::clear_has_sow_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_land_info::clear_sow_time() {
  sow_time_ = 0u;
  clear_has_sow_time();
}
inline ::google::protobuf::uint32 farm_land_info::sow_time() const {
  return sow_time_;
}
inline void farm_land_info::set_sow_time(::google::protobuf::uint32 value) {
  set_has_sow_time();
  sow_time_ = value;
}

// optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
inline bool farm_land_info::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void farm_land_info::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void farm_land_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void farm_land_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::client::FARM_CROP_STATUS_E farm_land_info::status() const {
  return static_cast< ::client::FARM_CROP_STATUS_E >(status_);
}
inline void farm_land_info::set_status(::client::FARM_CROP_STATUS_E value) {
  assert(::client::FARM_CROP_STATUS_E_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 countdown = 5 [default = 0];
inline bool farm_land_info::has_countdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void farm_land_info::set_has_countdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void farm_land_info::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void farm_land_info::clear_countdown() {
  countdown_ = 0u;
  clear_has_countdown();
}
inline ::google::protobuf::uint32 farm_land_info::countdown() const {
  return countdown_;
}
inline void farm_land_info::set_countdown(::google::protobuf::uint32 value) {
  set_has_countdown();
  countdown_ = value;
}

// optional uint32 total_fruit_num = 6 [default = 0];
inline bool farm_land_info::has_total_fruit_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void farm_land_info::set_has_total_fruit_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void farm_land_info::clear_has_total_fruit_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void farm_land_info::clear_total_fruit_num() {
  total_fruit_num_ = 0u;
  clear_has_total_fruit_num();
}
inline ::google::protobuf::uint32 farm_land_info::total_fruit_num() const {
  return total_fruit_num_;
}
inline void farm_land_info::set_total_fruit_num(::google::protobuf::uint32 value) {
  set_has_total_fruit_num();
  total_fruit_num_ = value;
}

// optional uint32 steal_fruit_num = 7 [default = 0];
inline bool farm_land_info::has_steal_fruit_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void farm_land_info::set_has_steal_fruit_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void farm_land_info::clear_has_steal_fruit_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void farm_land_info::clear_steal_fruit_num() {
  steal_fruit_num_ = 0u;
  clear_has_steal_fruit_num();
}
inline ::google::protobuf::uint32 farm_land_info::steal_fruit_num() const {
  return steal_fruit_num_;
}
inline void farm_land_info::set_steal_fruit_num(::google::protobuf::uint32 value) {
  set_has_steal_fruit_num();
  steal_fruit_num_ = value;
}

// repeated uint32 steal_role_id = 8;
inline int farm_land_info::steal_role_id_size() const {
  return steal_role_id_.size();
}
inline void farm_land_info::clear_steal_role_id() {
  steal_role_id_.Clear();
}
inline ::google::protobuf::uint32 farm_land_info::steal_role_id(int index) const {
  return steal_role_id_.Get(index);
}
inline void farm_land_info::set_steal_role_id(int index, ::google::protobuf::uint32 value) {
  steal_role_id_.Set(index, value);
}
inline void farm_land_info::add_steal_role_id(::google::protobuf::uint32 value) {
  steal_role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
farm_land_info::steal_role_id() const {
  return steal_role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
farm_land_info::mutable_steal_role_id() {
  return &steal_role_id_;
}

// -------------------------------------------------------------------

// farm_slave_info

// required uint32 role_id = 1;
inline bool farm_slave_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_slave_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_slave_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_slave_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_slave_info::role_id() const {
  return role_id_;
}
inline void farm_slave_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 time_end = 2;
inline bool farm_slave_info::has_time_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_slave_info::set_has_time_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_slave_info::clear_has_time_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_slave_info::clear_time_end() {
  time_end_ = 0u;
  clear_has_time_end();
}
inline ::google::protobuf::uint32 farm_slave_info::time_end() const {
  return time_end_;
}
inline void farm_slave_info::set_time_end(::google::protobuf::uint32 value) {
  set_has_time_end();
  time_end_ = value;
}

// -------------------------------------------------------------------

// farm_info

// required uint32 role_id = 1 [default = 0];
inline bool farm_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_info::role_id() const {
  return role_id_;
}
inline void farm_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2 [default = 0];
inline bool farm_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 farm_info::level() const {
  return level_;
}
inline void farm_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 score = 3 [default = 0];
inline bool farm_info::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_info::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_info::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 farm_info::score() const {
  return score_;
}
inline void farm_info::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// required uint32 total_score = 4 [default = 0];
inline bool farm_info::has_total_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void farm_info::set_has_total_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void farm_info::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void farm_info::clear_total_score() {
  total_score_ = 0u;
  clear_has_total_score();
}
inline ::google::protobuf::uint32 farm_info::total_score() const {
  return total_score_;
}
inline void farm_info::set_total_score(::google::protobuf::uint32 value) {
  set_has_total_score();
  total_score_ = value;
}

// required uint32 money_tree_times = 5 [default = 0];
inline bool farm_info::has_money_tree_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void farm_info::set_has_money_tree_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void farm_info::clear_has_money_tree_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void farm_info::clear_money_tree_times() {
  money_tree_times_ = 0u;
  clear_has_money_tree_times();
}
inline ::google::protobuf::uint32 farm_info::money_tree_times() const {
  return money_tree_times_;
}
inline void farm_info::set_money_tree_times(::google::protobuf::uint32 value) {
  set_has_money_tree_times();
  money_tree_times_ = value;
}

// repeated .client.farm_land_info fli = 6;
inline int farm_info::fli_size() const {
  return fli_.size();
}
inline void farm_info::clear_fli() {
  fli_.Clear();
}
inline const ::client::farm_land_info& farm_info::fli(int index) const {
  return fli_.Get(index);
}
inline ::client::farm_land_info* farm_info::mutable_fli(int index) {
  return fli_.Mutable(index);
}
inline ::client::farm_land_info* farm_info::add_fli() {
  return fli_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::farm_land_info >&
farm_info::fli() const {
  return fli_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::farm_land_info >*
farm_info::mutable_fli() {
  return &fli_;
}

// optional .client.farm_slave_info fsi = 7;
inline bool farm_info::has_fsi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void farm_info::set_has_fsi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void farm_info::clear_has_fsi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void farm_info::clear_fsi() {
  if (fsi_ != NULL) fsi_->::client::farm_slave_info::Clear();
  clear_has_fsi();
}
inline const ::client::farm_slave_info& farm_info::fsi() const {
  return fsi_ != NULL ? *fsi_ : *default_instance_->fsi_;
}
inline ::client::farm_slave_info* farm_info::mutable_fsi() {
  set_has_fsi();
  if (fsi_ == NULL) fsi_ = new ::client::farm_slave_info;
  return fsi_;
}
inline ::client::farm_slave_info* farm_info::release_fsi() {
  clear_has_fsi();
  ::client::farm_slave_info* temp = fsi_;
  fsi_ = NULL;
  return temp;
}
inline void farm_info::set_allocated_fsi(::client::farm_slave_info* fsi) {
  delete fsi_;
  fsi_ = fsi;
  if (fsi) {
    set_has_fsi();
  } else {
    clear_has_fsi();
  }
}

// -------------------------------------------------------------------

// update_farm_info

// required bool is_create = 1 [default = false];
inline bool update_farm_info::has_is_create() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_farm_info::set_has_is_create() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_farm_info::clear_has_is_create() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_farm_info::clear_is_create() {
  is_create_ = false;
  clear_has_is_create();
}
inline bool update_farm_info::is_create() const {
  return is_create_;
}
inline void update_farm_info::set_is_create(bool value) {
  set_has_is_create();
  is_create_ = value;
}

// required .client.farm_info fi = 2;
inline bool update_farm_info::has_fi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_farm_info::set_has_fi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_farm_info::clear_has_fi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_farm_info::clear_fi() {
  if (fi_ != NULL) fi_->::client::farm_info::Clear();
  clear_has_fi();
}
inline const ::client::farm_info& update_farm_info::fi() const {
  return fi_ != NULL ? *fi_ : *default_instance_->fi_;
}
inline ::client::farm_info* update_farm_info::mutable_fi() {
  set_has_fi();
  if (fi_ == NULL) fi_ = new ::client::farm_info;
  return fi_;
}
inline ::client::farm_info* update_farm_info::release_fi() {
  clear_has_fi();
  ::client::farm_info* temp = fi_;
  fi_ = NULL;
  return temp;
}
inline void update_farm_info::set_allocated_fi(::client::farm_info* fi) {
  delete fi_;
  fi_ = fi;
  if (fi) {
    set_has_fi();
  } else {
    clear_has_fi();
  }
}

// -------------------------------------------------------------------

// farm_info_req

// required uint32 svr_time = 1;
inline bool farm_info_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_info_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_info_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_info_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 farm_info_req::svr_time() const {
  return svr_time_;
}
inline void farm_info_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_info_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_info_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_info_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_info_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_info_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_info_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_info_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// repeated .client.farm_info fis = 2;
inline int farm_info_rsp::fis_size() const {
  return fis_.size();
}
inline void farm_info_rsp::clear_fis() {
  fis_.Clear();
}
inline const ::client::farm_info& farm_info_rsp::fis(int index) const {
  return fis_.Get(index);
}
inline ::client::farm_info* farm_info_rsp::mutable_fis(int index) {
  return fis_.Mutable(index);
}
inline ::client::farm_info* farm_info_rsp::add_fis() {
  return fis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::farm_info >&
farm_info_rsp::fis() const {
  return fis_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::farm_info >*
farm_info_rsp::mutable_fis() {
  return &fis_;
}

// -------------------------------------------------------------------

// farm_record

// required uint32 time = 1;
inline bool farm_record::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_record::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_record::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_record::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 farm_record::time() const {
  return time_;
}
inline void farm_record::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required .client.FARM_OPERATE_TYPE_E type = 2;
inline bool farm_record::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_record::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_record::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_record::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::FARM_OPERATE_TYPE_E farm_record::type() const {
  return static_cast< ::client::FARM_OPERATE_TYPE_E >(type_);
}
inline void farm_record::set_type(::client::FARM_OPERATE_TYPE_E value) {
  assert(::client::FARM_OPERATE_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 role_id = 3;
inline bool farm_record::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_record::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_record::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_record::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_record::role_id() const {
  return role_id_;
}
inline void farm_record::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 num = 4;
inline bool farm_record::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void farm_record::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void farm_record::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void farm_record::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 farm_record::num() const {
  return num_;
}
inline void farm_record::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 times = 5;
inline bool farm_record::has_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void farm_record::set_has_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void farm_record::clear_has_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void farm_record::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 farm_record::times() const {
  return times_;
}
inline void farm_record::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// optional uint32 serial = 6;
inline bool farm_record::has_serial() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void farm_record::set_has_serial() {
  _has_bits_[0] |= 0x00000020u;
}
inline void farm_record::clear_has_serial() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void farm_record::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 farm_record::serial() const {
  return serial_;
}
inline void farm_record::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// -------------------------------------------------------------------

// farm_record_req

// required uint32 svr_time = 1;
inline bool farm_record_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_record_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_record_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_record_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 farm_record_req::svr_time() const {
  return svr_time_;
}
inline void farm_record_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_record_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_record_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_record_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_record_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_record_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_record_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_record_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_record_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_record_rsp

// repeated .client.farm_record frs = 1;
inline int farm_record_rsp::frs_size() const {
  return frs_.size();
}
inline void farm_record_rsp::clear_frs() {
  frs_.Clear();
}
inline const ::client::farm_record& farm_record_rsp::frs(int index) const {
  return frs_.Get(index);
}
inline ::client::farm_record* farm_record_rsp::mutable_frs(int index) {
  return frs_.Mutable(index);
}
inline ::client::farm_record* farm_record_rsp::add_frs() {
  return frs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::farm_record >&
farm_record_rsp::frs() const {
  return frs_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::farm_record >*
farm_record_rsp::mutable_frs() {
  return &frs_;
}

// -------------------------------------------------------------------

// farm_create_req

// required bool advanced = 1;
inline bool farm_create_req::has_advanced() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_create_req::set_has_advanced() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_create_req::clear_has_advanced() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_create_req::clear_advanced() {
  advanced_ = false;
  clear_has_advanced();
}
inline bool farm_create_req::advanced() const {
  return advanced_;
}
inline void farm_create_req::set_advanced(bool value) {
  set_has_advanced();
  advanced_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_create_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_create_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_create_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_create_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_create_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_create_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_create_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_create_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_create_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_create_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_create_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_create_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_create_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_create_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_create_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .client.farm_info fi = 2;
inline bool farm_create_rsp::has_fi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_create_rsp::set_has_fi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_create_rsp::clear_has_fi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_create_rsp::clear_fi() {
  if (fi_ != NULL) fi_->::client::farm_info::Clear();
  clear_has_fi();
}
inline const ::client::farm_info& farm_create_rsp::fi() const {
  return fi_ != NULL ? *fi_ : *default_instance_->fi_;
}
inline ::client::farm_info* farm_create_rsp::mutable_fi() {
  set_has_fi();
  if (fi_ == NULL) fi_ = new ::client::farm_info;
  return fi_;
}
inline ::client::farm_info* farm_create_rsp::release_fi() {
  clear_has_fi();
  ::client::farm_info* temp = fi_;
  fi_ = NULL;
  return temp;
}
inline void farm_create_rsp::set_allocated_fi(::client::farm_info* fi) {
  delete fi_;
  fi_ = fi;
  if (fi) {
    set_has_fi();
  } else {
    clear_has_fi();
  }
}

// -------------------------------------------------------------------

// farm_enter_req

// required uint32 role_id = 1 [default = 0];
inline bool farm_enter_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_enter_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_enter_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_enter_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_enter_req::role_id() const {
  return role_id_;
}
inline void farm_enter_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_enter_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_enter_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_enter_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_enter_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_enter_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_enter_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_enter_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_enter_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_enter_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_enter_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_enter_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_enter_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_enter_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_enter_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_enter_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// farm_entered_msg

// required uint32 role_id = 1;
inline bool farm_entered_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_entered_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_entered_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_entered_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_entered_msg::role_id() const {
  return role_id_;
}
inline void farm_entered_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 farmer_id = 2 [default = 0];
inline bool farm_entered_msg::has_farmer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_entered_msg::set_has_farmer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_entered_msg::clear_has_farmer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_entered_msg::clear_farmer_id() {
  farmer_id_ = 0u;
  clear_has_farmer_id();
}
inline ::google::protobuf::uint32 farm_entered_msg::farmer_id() const {
  return farmer_id_;
}
inline void farm_entered_msg::set_farmer_id(::google::protobuf::uint32 value) {
  set_has_farmer_id();
  farmer_id_ = value;
}

// -------------------------------------------------------------------

// farm_sow_req

// required uint32 land_id = 1;
inline bool farm_sow_req::has_land_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_sow_req::set_has_land_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_sow_req::clear_has_land_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_sow_req::clear_land_id() {
  land_id_ = 0u;
  clear_has_land_id();
}
inline ::google::protobuf::uint32 farm_sow_req::land_id() const {
  return land_id_;
}
inline void farm_sow_req::set_land_id(::google::protobuf::uint32 value) {
  set_has_land_id();
  land_id_ = value;
}

// required uint32 serial = 2;
inline bool farm_sow_req::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_sow_req::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_sow_req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_sow_req::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 farm_sow_req::serial() const {
  return serial_;
}
inline void farm_sow_req::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_sow_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_sow_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_sow_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_sow_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_sow_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_sow_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_sow_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_sow_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_sow_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_sow_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_sow_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_sow_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_sow_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_sow_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_sow_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .client.farm_land_info fli = 2;
inline bool farm_sow_rsp::has_fli() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_sow_rsp::set_has_fli() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_sow_rsp::clear_has_fli() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_sow_rsp::clear_fli() {
  if (fli_ != NULL) fli_->::client::farm_land_info::Clear();
  clear_has_fli();
}
inline const ::client::farm_land_info& farm_sow_rsp::fli() const {
  return fli_ != NULL ? *fli_ : *default_instance_->fli_;
}
inline ::client::farm_land_info* farm_sow_rsp::mutable_fli() {
  set_has_fli();
  if (fli_ == NULL) fli_ = new ::client::farm_land_info;
  return fli_;
}
inline ::client::farm_land_info* farm_sow_rsp::release_fli() {
  clear_has_fli();
  ::client::farm_land_info* temp = fli_;
  fli_ = NULL;
  return temp;
}
inline void farm_sow_rsp::set_allocated_fli(::client::farm_land_info* fli) {
  delete fli_;
  fli_ = fli;
  if (fli) {
    set_has_fli();
  } else {
    clear_has_fli();
  }
}

// -------------------------------------------------------------------

// farm_steal_req

// required uint32 land_id = 1;
inline bool farm_steal_req::has_land_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_steal_req::set_has_land_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_steal_req::clear_has_land_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_steal_req::clear_land_id() {
  land_id_ = 0u;
  clear_has_land_id();
}
inline ::google::protobuf::uint32 farm_steal_req::land_id() const {
  return land_id_;
}
inline void farm_steal_req::set_land_id(::google::protobuf::uint32 value) {
  set_has_land_id();
  land_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_steal_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_steal_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_steal_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_steal_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_steal_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_steal_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_steal_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_steal_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_steal_msg

// required .client.farm_steal_req req = 1;
inline bool farm_steal_msg::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_steal_msg::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_steal_msg::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_steal_msg::clear_req() {
  if (req_ != NULL) req_->::client::farm_steal_req::Clear();
  clear_has_req();
}
inline const ::client::farm_steal_req& farm_steal_msg::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::client::farm_steal_req* farm_steal_msg::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::client::farm_steal_req;
  return req_;
}
inline ::client::farm_steal_req* farm_steal_msg::release_req() {
  clear_has_req();
  ::client::farm_steal_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void farm_steal_msg::set_allocated_req(::client::farm_steal_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// required uint32 farm_role_id = 2;
inline bool farm_steal_msg::has_farm_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_steal_msg::set_has_farm_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_steal_msg::clear_has_farm_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_steal_msg::clear_farm_role_id() {
  farm_role_id_ = 0u;
  clear_has_farm_role_id();
}
inline ::google::protobuf::uint32 farm_steal_msg::farm_role_id() const {
  return farm_role_id_;
}
inline void farm_steal_msg::set_farm_role_id(::google::protobuf::uint32 value) {
  set_has_farm_role_id();
  farm_role_id_ = value;
}

// -------------------------------------------------------------------

// farm_stolen_msg

// required uint32 farm_role_id = 1;
inline bool farm_stolen_msg::has_farm_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_stolen_msg::set_has_farm_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_stolen_msg::clear_has_farm_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_stolen_msg::clear_farm_role_id() {
  farm_role_id_ = 0u;
  clear_has_farm_role_id();
}
inline ::google::protobuf::uint32 farm_stolen_msg::farm_role_id() const {
  return farm_role_id_;
}
inline void farm_stolen_msg::set_farm_role_id(::google::protobuf::uint32 value) {
  set_has_farm_role_id();
  farm_role_id_ = value;
}

// required uint32 thief_role_id = 2;
inline bool farm_stolen_msg::has_thief_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_stolen_msg::set_has_thief_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_stolen_msg::clear_has_thief_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_stolen_msg::clear_thief_role_id() {
  thief_role_id_ = 0u;
  clear_has_thief_role_id();
}
inline ::google::protobuf::uint32 farm_stolen_msg::thief_role_id() const {
  return thief_role_id_;
}
inline void farm_stolen_msg::set_thief_role_id(::google::protobuf::uint32 value) {
  set_has_thief_role_id();
  thief_role_id_ = value;
}

// required uint32 steal_goods_id = 3;
inline bool farm_stolen_msg::has_steal_goods_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_stolen_msg::set_has_steal_goods_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_stolen_msg::clear_has_steal_goods_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_stolen_msg::clear_steal_goods_id() {
  steal_goods_id_ = 0u;
  clear_has_steal_goods_id();
}
inline ::google::protobuf::uint32 farm_stolen_msg::steal_goods_id() const {
  return steal_goods_id_;
}
inline void farm_stolen_msg::set_steal_goods_id(::google::protobuf::uint32 value) {
  set_has_steal_goods_id();
  steal_goods_id_ = value;
}

// required uint32 steal_num = 4;
inline bool farm_stolen_msg::has_steal_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void farm_stolen_msg::set_has_steal_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void farm_stolen_msg::clear_has_steal_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void farm_stolen_msg::clear_steal_num() {
  steal_num_ = 0u;
  clear_has_steal_num();
}
inline ::google::protobuf::uint32 farm_stolen_msg::steal_num() const {
  return steal_num_;
}
inline void farm_stolen_msg::set_steal_num(::google::protobuf::uint32 value) {
  set_has_steal_num();
  steal_num_ = value;
}

// -------------------------------------------------------------------

// farm_steal_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_steal_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_steal_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_steal_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_steal_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_steal_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_steal_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 lose_money = 2;
inline bool farm_steal_rsp::has_lose_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_steal_rsp::set_has_lose_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_steal_rsp::clear_has_lose_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_steal_rsp::clear_lose_money() {
  lose_money_ = 0u;
  clear_has_lose_money();
}
inline ::google::protobuf::uint32 farm_steal_rsp::lose_money() const {
  return lose_money_;
}
inline void farm_steal_rsp::set_lose_money(::google::protobuf::uint32 value) {
  set_has_lose_money();
  lose_money_ = value;
}

// -------------------------------------------------------------------

// farm_gain_req

// repeated uint32 land_id = 1;
inline int farm_gain_req::land_id_size() const {
  return land_id_.size();
}
inline void farm_gain_req::clear_land_id() {
  land_id_.Clear();
}
inline ::google::protobuf::uint32 farm_gain_req::land_id(int index) const {
  return land_id_.Get(index);
}
inline void farm_gain_req::set_land_id(int index, ::google::protobuf::uint32 value) {
  land_id_.Set(index, value);
}
inline void farm_gain_req::add_land_id(::google::protobuf::uint32 value) {
  land_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
farm_gain_req::land_id() const {
  return land_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
farm_gain_req::mutable_land_id() {
  return &land_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_gain_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_gain_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_gain_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_gain_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_gain_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_gain_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_gain_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_gain_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_gain_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_gain_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_gain_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_gain_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_gain_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_gain_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_gain_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 add_score = 2;
inline bool farm_gain_rsp::has_add_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_gain_rsp::set_has_add_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_gain_rsp::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_gain_rsp::clear_add_score() {
  add_score_ = 0u;
  clear_has_add_score();
}
inline ::google::protobuf::uint32 farm_gain_rsp::add_score() const {
  return add_score_;
}
inline void farm_gain_rsp::set_add_score(::google::protobuf::uint32 value) {
  set_has_add_score();
  add_score_ = value;
}

// -------------------------------------------------------------------

// farm_gain_unit

// required uint32 goods_id = 1;
inline bool farm_gain_unit::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_gain_unit::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_gain_unit::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_gain_unit::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 farm_gain_unit::goods_id() const {
  return goods_id_;
}
inline void farm_gain_unit::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required uint32 goods_num = 2;
inline bool farm_gain_unit::has_goods_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_gain_unit::set_has_goods_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_gain_unit::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_gain_unit::clear_goods_num() {
  goods_num_ = 0u;
  clear_has_goods_num();
}
inline ::google::protobuf::uint32 farm_gain_unit::goods_num() const {
  return goods_num_;
}
inline void farm_gain_unit::set_goods_num(::google::protobuf::uint32 value) {
  set_has_goods_num();
  goods_num_ = value;
}

// -------------------------------------------------------------------

// farm_gain_msg

// required uint32 farm_role_id = 1;
inline bool farm_gain_msg::has_farm_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_gain_msg::set_has_farm_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_gain_msg::clear_has_farm_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_gain_msg::clear_farm_role_id() {
  farm_role_id_ = 0u;
  clear_has_farm_role_id();
}
inline ::google::protobuf::uint32 farm_gain_msg::farm_role_id() const {
  return farm_role_id_;
}
inline void farm_gain_msg::set_farm_role_id(::google::protobuf::uint32 value) {
  set_has_farm_role_id();
  farm_role_id_ = value;
}

// repeated .client.farm_gain_unit fgus = 2;
inline int farm_gain_msg::fgus_size() const {
  return fgus_.size();
}
inline void farm_gain_msg::clear_fgus() {
  fgus_.Clear();
}
inline const ::client::farm_gain_unit& farm_gain_msg::fgus(int index) const {
  return fgus_.Get(index);
}
inline ::client::farm_gain_unit* farm_gain_msg::mutable_fgus(int index) {
  return fgus_.Mutable(index);
}
inline ::client::farm_gain_unit* farm_gain_msg::add_fgus() {
  return fgus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::farm_gain_unit >&
farm_gain_msg::fgus() const {
  return fgus_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::farm_gain_unit >*
farm_gain_msg::mutable_fgus() {
  return &fgus_;
}

// -------------------------------------------------------------------

// farm_improve_req

// required uint32 role_id = 1;
inline bool farm_improve_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_improve_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_improve_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_improve_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_improve_req::role_id() const {
  return role_id_;
}
inline void farm_improve_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 land_id = 2;
inline bool farm_improve_req::has_land_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_improve_req::set_has_land_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_improve_req::clear_has_land_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_improve_req::clear_land_id() {
  land_id_ = 0u;
  clear_has_land_id();
}
inline ::google::protobuf::uint32 farm_improve_req::land_id() const {
  return land_id_;
}
inline void farm_improve_req::set_land_id(::google::protobuf::uint32 value) {
  set_has_land_id();
  land_id_ = value;
}

// required .client.FARM_IMPROVE_TYPE_E type = 3;
inline bool farm_improve_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_improve_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_improve_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_improve_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::FARM_IMPROVE_TYPE_E farm_improve_req::type() const {
  return static_cast< ::client::FARM_IMPROVE_TYPE_E >(type_);
}
inline void farm_improve_req::set_type(::client::FARM_IMPROVE_TYPE_E value) {
  assert(::client::FARM_IMPROVE_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_improve_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void farm_improve_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void farm_improve_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void farm_improve_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_improve_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_improve_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_improve_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_improve_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_improve_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_improve_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_improve_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_improve_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_improve_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_improve_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_improve_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 improve_role_id = 2;
inline bool farm_improve_rsp::has_improve_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_improve_rsp::set_has_improve_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_improve_rsp::clear_has_improve_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_improve_rsp::clear_improve_role_id() {
  improve_role_id_ = 0u;
  clear_has_improve_role_id();
}
inline ::google::protobuf::uint32 farm_improve_rsp::improve_role_id() const {
  return improve_role_id_;
}
inline void farm_improve_rsp::set_improve_role_id(::google::protobuf::uint32 value) {
  set_has_improve_role_id();
  improve_role_id_ = value;
}

// optional .client.farm_land_info fli = 3;
inline bool farm_improve_rsp::has_fli() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_improve_rsp::set_has_fli() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_improve_rsp::clear_has_fli() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_improve_rsp::clear_fli() {
  if (fli_ != NULL) fli_->::client::farm_land_info::Clear();
  clear_has_fli();
}
inline const ::client::farm_land_info& farm_improve_rsp::fli() const {
  return fli_ != NULL ? *fli_ : *default_instance_->fli_;
}
inline ::client::farm_land_info* farm_improve_rsp::mutable_fli() {
  set_has_fli();
  if (fli_ == NULL) fli_ = new ::client::farm_land_info;
  return fli_;
}
inline ::client::farm_land_info* farm_improve_rsp::release_fli() {
  clear_has_fli();
  ::client::farm_land_info* temp = fli_;
  fli_ = NULL;
  return temp;
}
inline void farm_improve_rsp::set_allocated_fli(::client::farm_land_info* fli) {
  delete fli_;
  fli_ = fli;
  if (fli) {
    set_has_fli();
  } else {
    clear_has_fli();
  }
}

// -------------------------------------------------------------------

// farmer_role_msg

// required uint32 role_id = 1 [default = 0];
inline bool farmer_role_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farmer_role_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farmer_role_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farmer_role_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farmer_role_msg::role_id() const {
  return role_id_;
}
inline void farmer_role_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// farm_gain_money_req

// required uint32 svr_time = 1;
inline bool farm_gain_money_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_gain_money_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_gain_money_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_gain_money_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 farm_gain_money_req::svr_time() const {
  return svr_time_;
}
inline void farm_gain_money_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool farm_gain_money_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_gain_money_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_gain_money_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_gain_money_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& farm_gain_money_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* farm_gain_money_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* farm_gain_money_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void farm_gain_money_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// farm_gain_money_rsp

// required .client.FARM_OPERATE_E ret = 1;
inline bool farm_gain_money_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void farm_gain_money_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void farm_gain_money_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void farm_gain_money_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FARM_OPERATE_E farm_gain_money_rsp::ret() const {
  return static_cast< ::client::FARM_OPERATE_E >(ret_);
}
inline void farm_gain_money_rsp::set_ret(::client::FARM_OPERATE_E value) {
  assert(::client::FARM_OPERATE_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 money = 2;
inline bool farm_gain_money_rsp::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void farm_gain_money_rsp::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void farm_gain_money_rsp::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void farm_gain_money_rsp::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 farm_gain_money_rsp::money() const {
  return money_;
}
inline void farm_gain_money_rsp::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional uint32 role_id = 3;
inline bool farm_gain_money_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void farm_gain_money_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void farm_gain_money_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void farm_gain_money_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 farm_gain_money_rsp::role_id() const {
  return role_id_;
}
inline void farm_gain_money_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FARM_OPERATE_TYPE_E>() {
  return ::client::FARM_OPERATE_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FARM_PARAM_E>() {
  return ::client::FARM_PARAM_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FARM_OPERATE_E>() {
  return ::client::FARM_OPERATE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FARM_CROP_STATUS_E>() {
  return ::client::FARM_CROP_STATUS_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FARM_IMPROVE_TYPE_E>() {
  return ::client::FARM_IMPROVE_TYPE_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2efarm_2eproto__INCLUDED
