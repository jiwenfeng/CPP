// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.jump_scene.proto

#ifndef PROTOBUF_client_2ejump_5fscene_2eproto__INCLUDED
#define PROTOBUF_client_2ejump_5fscene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2ejump_5fscene_2eproto();
void protobuf_AssignDesc_client_2ejump_5fscene_2eproto();
void protobuf_ShutdownFile_client_2ejump_5fscene_2eproto();

class jump_scene;
class jump_scene_rsp;

enum jump_scene_DST_TYPE {
  jump_scene_DST_TYPE_SCENE = 1,
  jump_scene_DST_TYPE_ROLE = 2,
  jump_scene_DST_TYPE_DTASK = 3,
  jump_scene_DST_TYPE_TRANS = 5,
  jump_scene_DST_TYPE_CLUMP = 6,
  jump_scene_DST_TYPE_KILL = 10
};
bool jump_scene_DST_TYPE_IsValid(int value);
const jump_scene_DST_TYPE jump_scene_DST_TYPE_DST_TYPE_MIN = jump_scene_DST_TYPE_SCENE;
const jump_scene_DST_TYPE jump_scene_DST_TYPE_DST_TYPE_MAX = jump_scene_DST_TYPE_KILL;
const int jump_scene_DST_TYPE_DST_TYPE_ARRAYSIZE = jump_scene_DST_TYPE_DST_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* jump_scene_DST_TYPE_descriptor();
inline const ::std::string& jump_scene_DST_TYPE_Name(jump_scene_DST_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    jump_scene_DST_TYPE_descriptor(), value);
}
inline bool jump_scene_DST_TYPE_Parse(
    const ::std::string& name, jump_scene_DST_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<jump_scene_DST_TYPE>(
    jump_scene_DST_TYPE_descriptor(), name, value);
}
enum jump_scene_CODE_TYPE {
  jump_scene_CODE_TYPE_LOGIN = 1,
  jump_scene_CODE_TYPE_FLYSHOES = 2,
  jump_scene_CODE_TYPE_JUMP_POINT = 3,
  jump_scene_CODE_TYPE_RELIVE = 4,
  jump_scene_CODE_TYPE_RAID = 5,
  jump_scene_CODE_TYPE_BATTLE = 6,
  jump_scene_CODE_TYPE_SKILL = 7,
  jump_scene_CODE_TYPE_TASK = 8,
  jump_scene_CODE_TYPE_SPA = 9
};
bool jump_scene_CODE_TYPE_IsValid(int value);
const jump_scene_CODE_TYPE jump_scene_CODE_TYPE_CODE_TYPE_MIN = jump_scene_CODE_TYPE_LOGIN;
const jump_scene_CODE_TYPE jump_scene_CODE_TYPE_CODE_TYPE_MAX = jump_scene_CODE_TYPE_SPA;
const int jump_scene_CODE_TYPE_CODE_TYPE_ARRAYSIZE = jump_scene_CODE_TYPE_CODE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* jump_scene_CODE_TYPE_descriptor();
inline const ::std::string& jump_scene_CODE_TYPE_Name(jump_scene_CODE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    jump_scene_CODE_TYPE_descriptor(), value);
}
inline bool jump_scene_CODE_TYPE_Parse(
    const ::std::string& name, jump_scene_CODE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<jump_scene_CODE_TYPE>(
    jump_scene_CODE_TYPE_descriptor(), name, value);
}
// ===================================================================

class jump_scene : public ::google::protobuf::Message {
 public:
  jump_scene();
  virtual ~jump_scene();

  jump_scene(const jump_scene& from);

  inline jump_scene& operator=(const jump_scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const jump_scene& default_instance();

  void Swap(jump_scene* other);

  // implements Message ----------------------------------------------

  jump_scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const jump_scene& from);
  void MergeFrom(const jump_scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef jump_scene_DST_TYPE DST_TYPE;
  static const DST_TYPE SCENE = jump_scene_DST_TYPE_SCENE;
  static const DST_TYPE ROLE = jump_scene_DST_TYPE_ROLE;
  static const DST_TYPE DTASK = jump_scene_DST_TYPE_DTASK;
  static const DST_TYPE TRANS = jump_scene_DST_TYPE_TRANS;
  static const DST_TYPE CLUMP = jump_scene_DST_TYPE_CLUMP;
  static const DST_TYPE KILL = jump_scene_DST_TYPE_KILL;
  static inline bool DST_TYPE_IsValid(int value) {
    return jump_scene_DST_TYPE_IsValid(value);
  }
  static const DST_TYPE DST_TYPE_MIN =
    jump_scene_DST_TYPE_DST_TYPE_MIN;
  static const DST_TYPE DST_TYPE_MAX =
    jump_scene_DST_TYPE_DST_TYPE_MAX;
  static const int DST_TYPE_ARRAYSIZE =
    jump_scene_DST_TYPE_DST_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DST_TYPE_descriptor() {
    return jump_scene_DST_TYPE_descriptor();
  }
  static inline const ::std::string& DST_TYPE_Name(DST_TYPE value) {
    return jump_scene_DST_TYPE_Name(value);
  }
  static inline bool DST_TYPE_Parse(const ::std::string& name,
      DST_TYPE* value) {
    return jump_scene_DST_TYPE_Parse(name, value);
  }

  typedef jump_scene_CODE_TYPE CODE_TYPE;
  static const CODE_TYPE LOGIN = jump_scene_CODE_TYPE_LOGIN;
  static const CODE_TYPE FLYSHOES = jump_scene_CODE_TYPE_FLYSHOES;
  static const CODE_TYPE JUMP_POINT = jump_scene_CODE_TYPE_JUMP_POINT;
  static const CODE_TYPE RELIVE = jump_scene_CODE_TYPE_RELIVE;
  static const CODE_TYPE RAID = jump_scene_CODE_TYPE_RAID;
  static const CODE_TYPE BATTLE = jump_scene_CODE_TYPE_BATTLE;
  static const CODE_TYPE SKILL = jump_scene_CODE_TYPE_SKILL;
  static const CODE_TYPE TASK = jump_scene_CODE_TYPE_TASK;
  static const CODE_TYPE SPA = jump_scene_CODE_TYPE_SPA;
  static inline bool CODE_TYPE_IsValid(int value) {
    return jump_scene_CODE_TYPE_IsValid(value);
  }
  static const CODE_TYPE CODE_TYPE_MIN =
    jump_scene_CODE_TYPE_CODE_TYPE_MIN;
  static const CODE_TYPE CODE_TYPE_MAX =
    jump_scene_CODE_TYPE_CODE_TYPE_MAX;
  static const int CODE_TYPE_ARRAYSIZE =
    jump_scene_CODE_TYPE_CODE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CODE_TYPE_descriptor() {
    return jump_scene_CODE_TYPE_descriptor();
  }
  static inline const ::std::string& CODE_TYPE_Name(CODE_TYPE value) {
    return jump_scene_CODE_TYPE_Name(value);
  }
  static inline bool CODE_TYPE_Parse(const ::std::string& name,
      CODE_TYPE* value) {
    return jump_scene_CODE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.jump_scene.DST_TYPE dst_type = 1;
  inline bool has_dst_type() const;
  inline void clear_dst_type();
  static const int kDstTypeFieldNumber = 1;
  inline ::client::jump_scene_DST_TYPE dst_type() const;
  inline void set_dst_type(::client::jump_scene_DST_TYPE value);

  // required uint32 dst_id = 2;
  inline bool has_dst_id() const;
  inline void clear_dst_id();
  static const int kDstIdFieldNumber = 2;
  inline ::google::protobuf::uint32 dst_id() const;
  inline void set_dst_id(::google::protobuf::uint32 value);

  // required uint32 dst_index = 3;
  inline bool has_dst_index() const;
  inline void clear_dst_index();
  static const int kDstIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 dst_index() const;
  inline void set_dst_index(::google::protobuf::uint32 value);

  // required uint32 jump_index = 4;
  inline bool has_jump_index() const;
  inline void clear_jump_index();
  static const int kJumpIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 jump_index() const;
  inline void set_jump_index(::google::protobuf::uint32 value);

  // required .client.jump_scene.CODE_TYPE jump_code = 5;
  inline bool has_jump_code() const;
  inline void clear_jump_code();
  static const int kJumpCodeFieldNumber = 5;
  inline ::client::jump_scene_CODE_TYPE jump_code() const;
  inline void set_jump_code(::client::jump_scene_CODE_TYPE value);

  // required int32 x = 6 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 6;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 7 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 8 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 8;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // required uint32 param = 9 [default = 0];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 9;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // required uint32 map_id = 10 [default = 0];
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 10;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // required uint32 scene_id = 11 [default = 0];
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 11;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.jump_scene)
 private:
  inline void set_has_dst_type();
  inline void clear_has_dst_type();
  inline void set_has_dst_id();
  inline void clear_has_dst_id();
  inline void set_has_dst_index();
  inline void clear_has_dst_index();
  inline void set_has_jump_index();
  inline void clear_has_jump_index();
  inline void set_has_jump_code();
  inline void clear_has_jump_code();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int dst_type_;
  ::google::protobuf::uint32 dst_id_;
  ::google::protobuf::uint32 dst_index_;
  ::google::protobuf::uint32 jump_index_;
  int jump_code_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::uint32 param_;
  ::google::protobuf::uint32 map_id_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  friend void protobuf_AssignDesc_client_2ejump_5fscene_2eproto();
  friend void protobuf_ShutdownFile_client_2ejump_5fscene_2eproto();

  void InitAsDefaultInstance();
  static jump_scene* default_instance_;
};
// -------------------------------------------------------------------

class jump_scene_rsp : public ::google::protobuf::Message {
 public:
  jump_scene_rsp();
  virtual ~jump_scene_rsp();

  jump_scene_rsp(const jump_scene_rsp& from);

  inline jump_scene_rsp& operator=(const jump_scene_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const jump_scene_rsp& default_instance();

  void Swap(jump_scene_rsp* other);

  // implements Message ----------------------------------------------

  jump_scene_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const jump_scene_rsp& from);
  void MergeFrom(const jump_scene_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.jump_scene_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  friend void protobuf_AssignDesc_client_2ejump_5fscene_2eproto();
  friend void protobuf_ShutdownFile_client_2ejump_5fscene_2eproto();

  void InitAsDefaultInstance();
  static jump_scene_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// jump_scene

// required .client.jump_scene.DST_TYPE dst_type = 1;
inline bool jump_scene::has_dst_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void jump_scene::set_has_dst_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void jump_scene::clear_has_dst_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void jump_scene::clear_dst_type() {
  dst_type_ = 1;
  clear_has_dst_type();
}
inline ::client::jump_scene_DST_TYPE jump_scene::dst_type() const {
  return static_cast< ::client::jump_scene_DST_TYPE >(dst_type_);
}
inline void jump_scene::set_dst_type(::client::jump_scene_DST_TYPE value) {
  assert(::client::jump_scene_DST_TYPE_IsValid(value));
  set_has_dst_type();
  dst_type_ = value;
}

// required uint32 dst_id = 2;
inline bool jump_scene::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void jump_scene::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void jump_scene::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void jump_scene::clear_dst_id() {
  dst_id_ = 0u;
  clear_has_dst_id();
}
inline ::google::protobuf::uint32 jump_scene::dst_id() const {
  return dst_id_;
}
inline void jump_scene::set_dst_id(::google::protobuf::uint32 value) {
  set_has_dst_id();
  dst_id_ = value;
}

// required uint32 dst_index = 3;
inline bool jump_scene::has_dst_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void jump_scene::set_has_dst_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void jump_scene::clear_has_dst_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void jump_scene::clear_dst_index() {
  dst_index_ = 0u;
  clear_has_dst_index();
}
inline ::google::protobuf::uint32 jump_scene::dst_index() const {
  return dst_index_;
}
inline void jump_scene::set_dst_index(::google::protobuf::uint32 value) {
  set_has_dst_index();
  dst_index_ = value;
}

// required uint32 jump_index = 4;
inline bool jump_scene::has_jump_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void jump_scene::set_has_jump_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void jump_scene::clear_has_jump_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void jump_scene::clear_jump_index() {
  jump_index_ = 0u;
  clear_has_jump_index();
}
inline ::google::protobuf::uint32 jump_scene::jump_index() const {
  return jump_index_;
}
inline void jump_scene::set_jump_index(::google::protobuf::uint32 value) {
  set_has_jump_index();
  jump_index_ = value;
}

// required .client.jump_scene.CODE_TYPE jump_code = 5;
inline bool jump_scene::has_jump_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void jump_scene::set_has_jump_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void jump_scene::clear_has_jump_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void jump_scene::clear_jump_code() {
  jump_code_ = 1;
  clear_has_jump_code();
}
inline ::client::jump_scene_CODE_TYPE jump_scene::jump_code() const {
  return static_cast< ::client::jump_scene_CODE_TYPE >(jump_code_);
}
inline void jump_scene::set_jump_code(::client::jump_scene_CODE_TYPE value) {
  assert(::client::jump_scene_CODE_TYPE_IsValid(value));
  set_has_jump_code();
  jump_code_ = value;
}

// required int32 x = 6 [default = 0];
inline bool jump_scene::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void jump_scene::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void jump_scene::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void jump_scene::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 jump_scene::x() const {
  return x_;
}
inline void jump_scene::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 7 [default = 0];
inline bool jump_scene::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void jump_scene::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void jump_scene::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void jump_scene::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 jump_scene::y() const {
  return y_;
}
inline void jump_scene::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 8 [default = 0];
inline bool jump_scene::has_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void jump_scene::set_has_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void jump_scene::clear_has_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void jump_scene::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 jump_scene::z() const {
  return z_;
}
inline void jump_scene::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// required uint32 param = 9 [default = 0];
inline bool jump_scene::has_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void jump_scene::set_has_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void jump_scene::clear_has_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void jump_scene::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 jump_scene::param() const {
  return param_;
}
inline void jump_scene::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// required uint32 map_id = 10 [default = 0];
inline bool jump_scene::has_map_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void jump_scene::set_has_map_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void jump_scene::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void jump_scene::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 jump_scene::map_id() const {
  return map_id_;
}
inline void jump_scene::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 scene_id = 11 [default = 0];
inline bool jump_scene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void jump_scene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void jump_scene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void jump_scene::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 jump_scene::scene_id() const {
  return scene_id_;
}
inline void jump_scene::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool jump_scene::has_svr_head() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void jump_scene::set_has_svr_head() {
  _has_bits_[0] |= 0x00000800u;
}
inline void jump_scene::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void jump_scene::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& jump_scene::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* jump_scene::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* jump_scene::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void jump_scene::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// jump_scene_rsp

// required uint32 ret = 1;
inline bool jump_scene_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void jump_scene_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void jump_scene_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void jump_scene_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 jump_scene_rsp::ret() const {
  return ret_;
}
inline void jump_scene_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::jump_scene_DST_TYPE>() {
  return ::client::jump_scene_DST_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::jump_scene_CODE_TYPE>() {
  return ::client::jump_scene_CODE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2ejump_5fscene_2eproto__INCLUDED
