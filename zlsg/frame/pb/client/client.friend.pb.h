// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.friend.proto

#ifndef PROTOBUF_client_2efriend_2eproto__INCLUDED
#define PROTOBUF_client_2efriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2efriend_2eproto();
void protobuf_AssignDesc_client_2efriend_2eproto();
void protobuf_ShutdownFile_client_2efriend_2eproto();

class friend_list_req;
class temporary_friend_list_req;
class friend_info;
class friend_list_rsp;
class friend_add_req;
class friend_add_rsp;
class friend_add_ret;
class friend_del_req;
class friend_on_off_notify;
class friend_blk_req;
class friend_status_req;
class friend_status_info;
class friend_status_rsp;
class friend_recommend_req;
class friend_recommend_rsp;
class friend_degree_msg;
class friend_degree_add;
class attention_role_list_req;
class private_friend_rsp;

enum friend_info_friend_type {
  friend_info_friend_type_temporary_friend = 1,
  friend_info_friend_type_real_friend = 2,
  friend_info_friend_type_temporary_and_real = 3
};
bool friend_info_friend_type_IsValid(int value);
const friend_info_friend_type friend_info_friend_type_friend_type_MIN = friend_info_friend_type_temporary_friend;
const friend_info_friend_type friend_info_friend_type_friend_type_MAX = friend_info_friend_type_temporary_and_real;
const int friend_info_friend_type_friend_type_ARRAYSIZE = friend_info_friend_type_friend_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* friend_info_friend_type_descriptor();
inline const ::std::string& friend_info_friend_type_Name(friend_info_friend_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    friend_info_friend_type_descriptor(), value);
}
inline bool friend_info_friend_type_Parse(
    const ::std::string& name, friend_info_friend_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<friend_info_friend_type>(
    friend_info_friend_type_descriptor(), name, value);
}
enum FRIEND_OPERATE_RET_E {
  CFORE_SUCCESS = 0,
  CFORE_DENY_ADD = 1,
  CRORE_FRIEND_NUM_LIMIT = 2,
  CRORE_FRIEDN_OFFLINE = 3,
  CRORE_BLACK_LIST_LIMIT = 4,
  CRORE_ALREAD_FRIEND = 5,
  CFORE_SYS_ERR = 999
};
bool FRIEND_OPERATE_RET_E_IsValid(int value);
const FRIEND_OPERATE_RET_E FRIEND_OPERATE_RET_E_MIN = CFORE_SUCCESS;
const FRIEND_OPERATE_RET_E FRIEND_OPERATE_RET_E_MAX = CFORE_SYS_ERR;
const int FRIEND_OPERATE_RET_E_ARRAYSIZE = FRIEND_OPERATE_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_OPERATE_RET_E_descriptor();
inline const ::std::string& FRIEND_OPERATE_RET_E_Name(FRIEND_OPERATE_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_OPERATE_RET_E_descriptor(), value);
}
inline bool FRIEND_OPERATE_RET_E_Parse(
    const ::std::string& name, FRIEND_OPERATE_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_OPERATE_RET_E>(
    FRIEND_OPERATE_RET_E_descriptor(), name, value);
}
enum FRIEND_LIST_RES_E {
  FLRE_LIST = 1,
  FLRE_ADD = 2,
  FLRE_DEL = 3,
  FLRE_CHA = 4,
  FLRE_BLK = 5
};
bool FRIEND_LIST_RES_E_IsValid(int value);
const FRIEND_LIST_RES_E FRIEND_LIST_RES_E_MIN = FLRE_LIST;
const FRIEND_LIST_RES_E FRIEND_LIST_RES_E_MAX = FLRE_BLK;
const int FRIEND_LIST_RES_E_ARRAYSIZE = FRIEND_LIST_RES_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_LIST_RES_E_descriptor();
inline const ::std::string& FRIEND_LIST_RES_E_Name(FRIEND_LIST_RES_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_LIST_RES_E_descriptor(), value);
}
inline bool FRIEND_LIST_RES_E_Parse(
    const ::std::string& name, FRIEND_LIST_RES_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_LIST_RES_E>(
    FRIEND_LIST_RES_E_descriptor(), name, value);
}
// ===================================================================

class friend_list_req : public ::google::protobuf::Message {
 public:
  friend_list_req();
  virtual ~friend_list_req();

  friend_list_req(const friend_list_req& from);

  inline friend_list_req& operator=(const friend_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_list_req& default_instance();

  void Swap(friend_list_req* other);

  // implements Message ----------------------------------------------

  friend_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_list_req& from);
  void MergeFrom(const friend_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_list_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_list_req* default_instance_;
};
// -------------------------------------------------------------------

class temporary_friend_list_req : public ::google::protobuf::Message {
 public:
  temporary_friend_list_req();
  virtual ~temporary_friend_list_req();

  temporary_friend_list_req(const temporary_friend_list_req& from);

  inline temporary_friend_list_req& operator=(const temporary_friend_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const temporary_friend_list_req& default_instance();

  void Swap(temporary_friend_list_req* other);

  // implements Message ----------------------------------------------

  temporary_friend_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const temporary_friend_list_req& from);
  void MergeFrom(const temporary_friend_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.temporary_friend_list_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static temporary_friend_list_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_info : public ::google::protobuf::Message {
 public:
  friend_info();
  virtual ~friend_info();

  friend_info(const friend_info& from);

  inline friend_info& operator=(const friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_info& default_instance();

  void Swap(friend_info* other);

  // implements Message ----------------------------------------------

  friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_info& from);
  void MergeFrom(const friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef friend_info_friend_type friend_type;
  static const friend_type temporary_friend = friend_info_friend_type_temporary_friend;
  static const friend_type real_friend = friend_info_friend_type_real_friend;
  static const friend_type temporary_and_real = friend_info_friend_type_temporary_and_real;
  static inline bool friend_type_IsValid(int value) {
    return friend_info_friend_type_IsValid(value);
  }
  static const friend_type friend_type_MIN =
    friend_info_friend_type_friend_type_MIN;
  static const friend_type friend_type_MAX =
    friend_info_friend_type_friend_type_MAX;
  static const int friend_type_ARRAYSIZE =
    friend_info_friend_type_friend_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  friend_type_descriptor() {
    return friend_info_friend_type_descriptor();
  }
  static inline const ::std::string& friend_type_Name(friend_type value) {
    return friend_info_friend_type_Name(value);
  }
  static inline bool friend_type_Parse(const ::std::string& name,
      friend_type* value) {
    return friend_info_friend_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required .client.friend_info.friend_type relation_type = 2;
  inline bool has_relation_type() const;
  inline void clear_relation_type();
  static const int kRelationTypeFieldNumber = 2;
  inline ::client::friend_info_friend_type relation_type() const;
  inline void set_relation_type(::client::friend_info_friend_type value);

  // optional uint32 degree = 3 [default = 0];
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 3;
  inline ::google::protobuf::uint32 degree() const;
  inline void set_degree(::google::protobuf::uint32 value);

  // optional uint32 friend_level = 4;
  inline bool has_friend_level() const;
  inline void clear_friend_level();
  static const int kFriendLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 friend_level() const;
  inline void set_friend_level(::google::protobuf::uint32 value);

  // optional string friend_name = 5;
  inline bool has_friend_name() const;
  inline void clear_friend_name();
  static const int kFriendNameFieldNumber = 5;
  inline const ::std::string& friend_name() const;
  inline void set_friend_name(const ::std::string& value);
  inline void set_friend_name(const char* value);
  inline void set_friend_name(const char* value, size_t size);
  inline ::std::string* mutable_friend_name();
  inline ::std::string* release_friend_name();
  inline void set_allocated_friend_name(::std::string* friend_name);

  // optional uint32 contact_time = 6;
  inline bool has_contact_time() const;
  inline void clear_contact_time();
  static const int kContactTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 contact_time() const;
  inline void set_contact_time(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.friend_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_relation_type();
  inline void clear_has_relation_type();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_friend_level();
  inline void clear_has_friend_level();
  inline void set_has_friend_name();
  inline void clear_has_friend_name();
  inline void set_has_contact_time();
  inline void clear_has_contact_time();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  int relation_type_;
  ::google::protobuf::uint32 degree_;
  ::google::protobuf::uint32 friend_level_;
  ::std::string* friend_name_;
  ::google::protobuf::uint32 contact_time_;
  ::google::protobuf::uint32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_info* default_instance_;
};
// -------------------------------------------------------------------

class friend_list_rsp : public ::google::protobuf::Message {
 public:
  friend_list_rsp();
  virtual ~friend_list_rsp();

  friend_list_rsp(const friend_list_rsp& from);

  inline friend_list_rsp& operator=(const friend_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_list_rsp& default_instance();

  void Swap(friend_list_rsp* other);

  // implements Message ----------------------------------------------

  friend_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_list_rsp& from);
  void MergeFrom(const friend_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FRIEND_LIST_RES_E list_type = 1;
  inline bool has_list_type() const;
  inline void clear_list_type();
  static const int kListTypeFieldNumber = 1;
  inline ::client::FRIEND_LIST_RES_E list_type() const;
  inline void set_list_type(::client::FRIEND_LIST_RES_E value);

  // repeated .client.friend_info fi = 2;
  inline int fi_size() const;
  inline void clear_fi();
  static const int kFiFieldNumber = 2;
  inline const ::client::friend_info& fi(int index) const;
  inline ::client::friend_info* mutable_fi(int index);
  inline ::client::friend_info* add_fi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::friend_info >&
      fi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::friend_info >*
      mutable_fi();

  // @@protoc_insertion_point(class_scope:client.friend_list_rsp)
 private:
  inline void set_has_list_type();
  inline void clear_has_list_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::friend_info > fi_;
  int list_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class friend_add_req : public ::google::protobuf::Message {
 public:
  friend_add_req();
  virtual ~friend_add_req();

  friend_add_req(const friend_add_req& from);

  inline friend_add_req& operator=(const friend_add_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_add_req& default_instance();

  void Swap(friend_add_req* other);

  // implements Message ----------------------------------------------

  friend_add_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_add_req& from);
  void MergeFrom(const friend_add_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_add_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_add_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_add_rsp : public ::google::protobuf::Message {
 public:
  friend_add_rsp();
  virtual ~friend_add_rsp();

  friend_add_rsp(const friend_add_rsp& from);

  inline friend_add_rsp& operator=(const friend_add_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_add_rsp& default_instance();

  void Swap(friend_add_rsp* other);

  // implements Message ----------------------------------------------

  friend_add_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_add_rsp& from);
  void MergeFrom(const friend_add_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.FRIEND_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::FRIEND_OPERATE_RET_E ret() const;
  inline void set_ret(::client::FRIEND_OPERATE_RET_E value);

  // optional uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.friend_add_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_add_rsp* default_instance_;
};
// -------------------------------------------------------------------

class friend_add_ret : public ::google::protobuf::Message {
 public:
  friend_add_ret();
  virtual ~friend_add_ret();

  friend_add_ret(const friend_add_ret& from);

  inline friend_add_ret& operator=(const friend_add_ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_add_ret& default_instance();

  void Swap(friend_add_ret* other);

  // implements Message ----------------------------------------------

  friend_add_ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_add_ret& from);
  void MergeFrom(const friend_add_ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bool allow = 2;
  inline bool has_allow() const;
  inline void clear_allow();
  static const int kAllowFieldNumber = 2;
  inline bool allow() const;
  inline void set_allow(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_add_ret)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_allow();
  inline void clear_has_allow();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  bool allow_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_add_ret* default_instance_;
};
// -------------------------------------------------------------------

class friend_del_req : public ::google::protobuf::Message {
 public:
  friend_del_req();
  virtual ~friend_del_req();

  friend_del_req(const friend_del_req& from);

  inline friend_del_req& operator=(const friend_del_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_del_req& default_instance();

  void Swap(friend_del_req* other);

  // implements Message ----------------------------------------------

  friend_del_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_del_req& from);
  void MergeFrom(const friend_del_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_del_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_del_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_on_off_notify : public ::google::protobuf::Message {
 public:
  friend_on_off_notify();
  virtual ~friend_on_off_notify();

  friend_on_off_notify(const friend_on_off_notify& from);

  inline friend_on_off_notify& operator=(const friend_on_off_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_on_off_notify& default_instance();

  void Swap(friend_on_off_notify* other);

  // implements Message ----------------------------------------------

  friend_on_off_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_on_off_notify& from);
  void MergeFrom(const friend_on_off_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:client.friend_on_off_notify)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_on_off_notify* default_instance_;
};
// -------------------------------------------------------------------

class friend_blk_req : public ::google::protobuf::Message {
 public:
  friend_blk_req();
  virtual ~friend_blk_req();

  friend_blk_req(const friend_blk_req& from);

  inline friend_blk_req& operator=(const friend_blk_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_blk_req& default_instance();

  void Swap(friend_blk_req* other);

  // implements Message ----------------------------------------------

  friend_blk_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_blk_req& from);
  void MergeFrom(const friend_blk_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_blk_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_blk_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_status_req : public ::google::protobuf::Message {
 public:
  friend_status_req();
  virtual ~friend_status_req();

  friend_status_req(const friend_status_req& from);

  inline friend_status_req& operator=(const friend_status_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_status_req& default_instance();

  void Swap(friend_status_req* other);

  // implements Message ----------------------------------------------

  friend_status_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_status_req& from);
  void MergeFrom(const friend_status_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_status_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_status_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_status_info : public ::google::protobuf::Message {
 public:
  friend_status_info();
  virtual ~friend_status_info();

  friend_status_info(const friend_status_info& from);

  inline friend_status_info& operator=(const friend_status_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_status_info& default_instance();

  void Swap(friend_status_info* other);

  // implements Message ----------------------------------------------

  friend_status_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_status_info& from);
  void MergeFrom(const friend_status_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline ::google::protobuf::uint32 info() const;
  inline void set_info(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.friend_status_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_status_info* default_instance_;
};
// -------------------------------------------------------------------

class friend_status_rsp : public ::google::protobuf::Message {
 public:
  friend_status_rsp();
  virtual ~friend_status_rsp();

  friend_status_rsp(const friend_status_rsp& from);

  inline friend_status_rsp& operator=(const friend_status_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_status_rsp& default_instance();

  void Swap(friend_status_rsp* other);

  // implements Message ----------------------------------------------

  friend_status_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_status_rsp& from);
  void MergeFrom(const friend_status_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.friend_status_info fsi = 1;
  inline int fsi_size() const;
  inline void clear_fsi();
  static const int kFsiFieldNumber = 1;
  inline const ::client::friend_status_info& fsi(int index) const;
  inline ::client::friend_status_info* mutable_fsi(int index);
  inline ::client::friend_status_info* add_fsi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::friend_status_info >&
      fsi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::friend_status_info >*
      mutable_fsi();

  // @@protoc_insertion_point(class_scope:client.friend_status_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::friend_status_info > fsi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_status_rsp* default_instance_;
};
// -------------------------------------------------------------------

class friend_recommend_req : public ::google::protobuf::Message {
 public:
  friend_recommend_req();
  virtual ~friend_recommend_req();

  friend_recommend_req(const friend_recommend_req& from);

  inline friend_recommend_req& operator=(const friend_recommend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_recommend_req& default_instance();

  void Swap(friend_recommend_req* other);

  // implements Message ----------------------------------------------

  friend_recommend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_recommend_req& from);
  void MergeFrom(const friend_recommend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.friend_recommend_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_recommend_req* default_instance_;
};
// -------------------------------------------------------------------

class friend_recommend_rsp : public ::google::protobuf::Message {
 public:
  friend_recommend_rsp();
  virtual ~friend_recommend_rsp();

  friend_recommend_rsp(const friend_recommend_rsp& from);

  inline friend_recommend_rsp& operator=(const friend_recommend_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_recommend_rsp& default_instance();

  void Swap(friend_recommend_rsp* other);

  // implements Message ----------------------------------------------

  friend_recommend_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_recommend_rsp& from);
  void MergeFrom(const friend_recommend_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::uint32 value);
  inline void add_role_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_id();

  // @@protoc_insertion_point(class_scope:client.friend_recommend_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_recommend_rsp* default_instance_;
};
// -------------------------------------------------------------------

class friend_degree_msg : public ::google::protobuf::Message {
 public:
  friend_degree_msg();
  virtual ~friend_degree_msg();

  friend_degree_msg(const friend_degree_msg& from);

  inline friend_degree_msg& operator=(const friend_degree_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_degree_msg& default_instance();

  void Swap(friend_degree_msg* other);

  // implements Message ----------------------------------------------

  friend_degree_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_degree_msg& from);
  void MergeFrom(const friend_degree_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 friend_role_id = 1;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint32 value);

  // required uint32 degree_val = 2;
  inline bool has_degree_val() const;
  inline void clear_degree_val();
  static const int kDegreeValFieldNumber = 2;
  inline ::google::protobuf::uint32 degree_val() const;
  inline void set_degree_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.friend_degree_msg)
 private:
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_degree_val();
  inline void clear_has_degree_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 friend_role_id_;
  ::google::protobuf::uint32 degree_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_degree_msg* default_instance_;
};
// -------------------------------------------------------------------

class friend_degree_add : public ::google::protobuf::Message {
 public:
  friend_degree_add();
  virtual ~friend_degree_add();

  friend_degree_add(const friend_degree_add& from);

  inline friend_degree_add& operator=(const friend_degree_add& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_degree_add& default_instance();

  void Swap(friend_degree_add* other);

  // implements Message ----------------------------------------------

  friend_degree_add* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_degree_add& from);
  void MergeFrom(const friend_degree_add& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 friend_role_id = 2;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint32 value);

  // required uint32 degree_val = 3;
  inline bool has_degree_val() const;
  inline void clear_degree_val();
  static const int kDegreeValFieldNumber = 3;
  inline ::google::protobuf::uint32 degree_val() const;
  inline void set_degree_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.friend_degree_add)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_degree_val();
  inline void clear_has_degree_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 friend_role_id_;
  ::google::protobuf::uint32 degree_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static friend_degree_add* default_instance_;
};
// -------------------------------------------------------------------

class attention_role_list_req : public ::google::protobuf::Message {
 public:
  attention_role_list_req();
  virtual ~attention_role_list_req();

  attention_role_list_req(const attention_role_list_req& from);

  inline attention_role_list_req& operator=(const attention_role_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attention_role_list_req& default_instance();

  void Swap(attention_role_list_req* other);

  // implements Message ----------------------------------------------

  attention_role_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attention_role_list_req& from);
  void MergeFrom(const attention_role_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.attention_role_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static attention_role_list_req* default_instance_;
};
// -------------------------------------------------------------------

class private_friend_rsp : public ::google::protobuf::Message {
 public:
  private_friend_rsp();
  virtual ~private_friend_rsp();

  private_friend_rsp(const private_friend_rsp& from);

  inline private_friend_rsp& operator=(const private_friend_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const private_friend_rsp& default_instance();

  void Swap(private_friend_rsp* other);

  // implements Message ----------------------------------------------

  private_friend_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const private_friend_rsp& from);
  void MergeFrom(const private_friend_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.private_friend_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2efriend_2eproto();
  friend void protobuf_AssignDesc_client_2efriend_2eproto();
  friend void protobuf_ShutdownFile_client_2efriend_2eproto();

  void InitAsDefaultInstance();
  static private_friend_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// friend_list_req

// required uint32 time = 1;
inline bool friend_list_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_list_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_list_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_list_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 friend_list_req::time() const {
  return time_;
}
inline void friend_list_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// temporary_friend_list_req

// required uint32 time = 1;
inline bool temporary_friend_list_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void temporary_friend_list_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void temporary_friend_list_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void temporary_friend_list_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 temporary_friend_list_req::time() const {
  return time_;
}
inline void temporary_friend_list_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool temporary_friend_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void temporary_friend_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void temporary_friend_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void temporary_friend_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& temporary_friend_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* temporary_friend_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* temporary_friend_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void temporary_friend_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_info

// required uint32 role_id = 1;
inline bool friend_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_info::role_id() const {
  return role_id_;
}
inline void friend_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required .client.friend_info.friend_type relation_type = 2;
inline bool friend_info::has_relation_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_info::set_has_relation_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_info::clear_has_relation_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_info::clear_relation_type() {
  relation_type_ = 1;
  clear_has_relation_type();
}
inline ::client::friend_info_friend_type friend_info::relation_type() const {
  return static_cast< ::client::friend_info_friend_type >(relation_type_);
}
inline void friend_info::set_relation_type(::client::friend_info_friend_type value) {
  assert(::client::friend_info_friend_type_IsValid(value));
  set_has_relation_type();
  relation_type_ = value;
}

// optional uint32 degree = 3 [default = 0];
inline bool friend_info::has_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_info::set_has_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_info::clear_has_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_info::clear_degree() {
  degree_ = 0u;
  clear_has_degree();
}
inline ::google::protobuf::uint32 friend_info::degree() const {
  return degree_;
}
inline void friend_info::set_degree(::google::protobuf::uint32 value) {
  set_has_degree();
  degree_ = value;
}

// optional uint32 friend_level = 4;
inline bool friend_info::has_friend_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_info::set_has_friend_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_info::clear_has_friend_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_info::clear_friend_level() {
  friend_level_ = 0u;
  clear_has_friend_level();
}
inline ::google::protobuf::uint32 friend_info::friend_level() const {
  return friend_level_;
}
inline void friend_info::set_friend_level(::google::protobuf::uint32 value) {
  set_has_friend_level();
  friend_level_ = value;
}

// optional string friend_name = 5;
inline bool friend_info::has_friend_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void friend_info::set_has_friend_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void friend_info::clear_has_friend_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void friend_info::clear_friend_name() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    friend_name_->clear();
  }
  clear_has_friend_name();
}
inline const ::std::string& friend_info::friend_name() const {
  return *friend_name_;
}
inline void friend_info::set_friend_name(const ::std::string& value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void friend_info::set_friend_name(const char* value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void friend_info::set_friend_name(const char* value, size_t size) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* friend_info::mutable_friend_name() {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  return friend_name_;
}
inline ::std::string* friend_info::release_friend_name() {
  clear_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friend_name_;
    friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void friend_info::set_allocated_friend_name(::std::string* friend_name) {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (friend_name) {
    set_has_friend_name();
    friend_name_ = friend_name;
  } else {
    clear_has_friend_name();
    friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 contact_time = 6;
inline bool friend_info::has_contact_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void friend_info::set_has_contact_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void friend_info::clear_has_contact_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void friend_info::clear_contact_time() {
  contact_time_ = 0u;
  clear_has_contact_time();
}
inline ::google::protobuf::uint32 friend_info::contact_time() const {
  return contact_time_;
}
inline void friend_info::set_contact_time(::google::protobuf::uint32 value) {
  set_has_contact_time();
  contact_time_ = value;
}

// optional uint32 vip_level = 7;
inline bool friend_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void friend_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void friend_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void friend_info::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 friend_info::vip_level() const {
  return vip_level_;
}
inline void friend_info::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// friend_list_rsp

// required .client.FRIEND_LIST_RES_E list_type = 1;
inline bool friend_list_rsp::has_list_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_list_rsp::set_has_list_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_list_rsp::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_list_rsp::clear_list_type() {
  list_type_ = 1;
  clear_has_list_type();
}
inline ::client::FRIEND_LIST_RES_E friend_list_rsp::list_type() const {
  return static_cast< ::client::FRIEND_LIST_RES_E >(list_type_);
}
inline void friend_list_rsp::set_list_type(::client::FRIEND_LIST_RES_E value) {
  assert(::client::FRIEND_LIST_RES_E_IsValid(value));
  set_has_list_type();
  list_type_ = value;
}

// repeated .client.friend_info fi = 2;
inline int friend_list_rsp::fi_size() const {
  return fi_.size();
}
inline void friend_list_rsp::clear_fi() {
  fi_.Clear();
}
inline const ::client::friend_info& friend_list_rsp::fi(int index) const {
  return fi_.Get(index);
}
inline ::client::friend_info* friend_list_rsp::mutable_fi(int index) {
  return fi_.Mutable(index);
}
inline ::client::friend_info* friend_list_rsp::add_fi() {
  return fi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::friend_info >&
friend_list_rsp::fi() const {
  return fi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::friend_info >*
friend_list_rsp::mutable_fi() {
  return &fi_;
}

// -------------------------------------------------------------------

// friend_add_req

// required uint32 role_id = 1;
inline bool friend_add_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_add_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_add_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_add_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_add_req::role_id() const {
  return role_id_;
}
inline void friend_add_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_add_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_add_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_add_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_add_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_add_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_add_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_add_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_add_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_add_rsp

// required .client.FRIEND_OPERATE_RET_E ret = 1;
inline bool friend_add_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_add_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_add_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_add_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::FRIEND_OPERATE_RET_E friend_add_rsp::ret() const {
  return static_cast< ::client::FRIEND_OPERATE_RET_E >(ret_);
}
inline void friend_add_rsp::set_ret(::client::FRIEND_OPERATE_RET_E value) {
  assert(::client::FRIEND_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 role_id = 2;
inline bool friend_add_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_add_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_add_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_add_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_add_rsp::role_id() const {
  return role_id_;
}
inline void friend_add_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// friend_add_ret

// required uint32 role_id = 1;
inline bool friend_add_ret::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_add_ret::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_add_ret::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_add_ret::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_add_ret::role_id() const {
  return role_id_;
}
inline void friend_add_ret::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bool allow = 2;
inline bool friend_add_ret::has_allow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_add_ret::set_has_allow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_add_ret::clear_has_allow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_add_ret::clear_allow() {
  allow_ = false;
  clear_has_allow();
}
inline bool friend_add_ret::allow() const {
  return allow_;
}
inline void friend_add_ret::set_allow(bool value) {
  set_has_allow();
  allow_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_add_ret::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_add_ret::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_add_ret::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_add_ret::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_add_ret::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_add_ret::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_add_ret::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_add_ret::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_del_req

// repeated uint32 role_id = 1;
inline int friend_del_req::role_id_size() const {
  return role_id_.size();
}
inline void friend_del_req::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 friend_del_req::role_id(int index) const {
  return role_id_.Get(index);
}
inline void friend_del_req::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void friend_del_req::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
friend_del_req::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
friend_del_req::mutable_role_id() {
  return &role_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_del_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_del_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_del_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_del_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_del_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_del_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_del_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_del_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_on_off_notify

// required uint32 role_id = 1;
inline bool friend_on_off_notify::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_on_off_notify::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_on_off_notify::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_on_off_notify::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_on_off_notify::role_id() const {
  return role_id_;
}
inline void friend_on_off_notify::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bool online = 2;
inline bool friend_on_off_notify::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_on_off_notify::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_on_off_notify::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_on_off_notify::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool friend_on_off_notify::online() const {
  return online_;
}
inline void friend_on_off_notify::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// friend_blk_req

// repeated uint32 role_id = 1;
inline int friend_blk_req::role_id_size() const {
  return role_id_.size();
}
inline void friend_blk_req::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 friend_blk_req::role_id(int index) const {
  return role_id_.Get(index);
}
inline void friend_blk_req::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void friend_blk_req::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
friend_blk_req::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
friend_blk_req::mutable_role_id() {
  return &role_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_blk_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_blk_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_blk_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_blk_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_blk_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_blk_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_blk_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_blk_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_status_req

// repeated uint32 role_id = 1;
inline int friend_status_req::role_id_size() const {
  return role_id_.size();
}
inline void friend_status_req::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 friend_status_req::role_id(int index) const {
  return role_id_.Get(index);
}
inline void friend_status_req::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void friend_status_req::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
friend_status_req::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
friend_status_req::mutable_role_id() {
  return &role_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_status_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_status_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_status_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_status_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_status_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_status_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_status_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_status_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_status_info

// required uint32 role_id = 1;
inline bool friend_status_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_status_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_status_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_status_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_status_info::role_id() const {
  return role_id_;
}
inline void friend_status_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 info = 2;
inline bool friend_status_info::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_status_info::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_status_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_status_info::clear_info() {
  info_ = 0u;
  clear_has_info();
}
inline ::google::protobuf::uint32 friend_status_info::info() const {
  return info_;
}
inline void friend_status_info::set_info(::google::protobuf::uint32 value) {
  set_has_info();
  info_ = value;
}

// -------------------------------------------------------------------

// friend_status_rsp

// repeated .client.friend_status_info fsi = 1;
inline int friend_status_rsp::fsi_size() const {
  return fsi_.size();
}
inline void friend_status_rsp::clear_fsi() {
  fsi_.Clear();
}
inline const ::client::friend_status_info& friend_status_rsp::fsi(int index) const {
  return fsi_.Get(index);
}
inline ::client::friend_status_info* friend_status_rsp::mutable_fsi(int index) {
  return fsi_.Mutable(index);
}
inline ::client::friend_status_info* friend_status_rsp::add_fsi() {
  return fsi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::friend_status_info >&
friend_status_rsp::fsi() const {
  return fsi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::friend_status_info >*
friend_status_rsp::mutable_fsi() {
  return &fsi_;
}

// -------------------------------------------------------------------

// friend_recommend_req

// required uint32 unixtime = 1;
inline bool friend_recommend_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_recommend_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_recommend_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_recommend_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 friend_recommend_req::unixtime() const {
  return unixtime_;
}
inline void friend_recommend_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool friend_recommend_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_recommend_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_recommend_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_recommend_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& friend_recommend_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* friend_recommend_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* friend_recommend_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void friend_recommend_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// friend_recommend_rsp

// repeated uint32 role_id = 1;
inline int friend_recommend_rsp::role_id_size() const {
  return role_id_.size();
}
inline void friend_recommend_rsp::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::uint32 friend_recommend_rsp::role_id(int index) const {
  return role_id_.Get(index);
}
inline void friend_recommend_rsp::set_role_id(int index, ::google::protobuf::uint32 value) {
  role_id_.Set(index, value);
}
inline void friend_recommend_rsp::add_role_id(::google::protobuf::uint32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
friend_recommend_rsp::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
friend_recommend_rsp::mutable_role_id() {
  return &role_id_;
}

// -------------------------------------------------------------------

// friend_degree_msg

// required uint32 friend_role_id = 1;
inline bool friend_degree_msg::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_degree_msg::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_degree_msg::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_degree_msg::clear_friend_role_id() {
  friend_role_id_ = 0u;
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint32 friend_degree_msg::friend_role_id() const {
  return friend_role_id_;
}
inline void friend_degree_msg::set_friend_role_id(::google::protobuf::uint32 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// required uint32 degree_val = 2;
inline bool friend_degree_msg::has_degree_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_degree_msg::set_has_degree_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_degree_msg::clear_has_degree_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_degree_msg::clear_degree_val() {
  degree_val_ = 0u;
  clear_has_degree_val();
}
inline ::google::protobuf::uint32 friend_degree_msg::degree_val() const {
  return degree_val_;
}
inline void friend_degree_msg::set_degree_val(::google::protobuf::uint32 value) {
  set_has_degree_val();
  degree_val_ = value;
}

// -------------------------------------------------------------------

// friend_degree_add

// required uint32 role_id = 1;
inline bool friend_degree_add::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_degree_add::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_degree_add::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_degree_add::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 friend_degree_add::role_id() const {
  return role_id_;
}
inline void friend_degree_add::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 friend_role_id = 2;
inline bool friend_degree_add::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_degree_add::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_degree_add::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_degree_add::clear_friend_role_id() {
  friend_role_id_ = 0u;
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint32 friend_degree_add::friend_role_id() const {
  return friend_role_id_;
}
inline void friend_degree_add::set_friend_role_id(::google::protobuf::uint32 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// required uint32 degree_val = 3;
inline bool friend_degree_add::has_degree_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_degree_add::set_has_degree_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_degree_add::clear_has_degree_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_degree_add::clear_degree_val() {
  degree_val_ = 0u;
  clear_has_degree_val();
}
inline ::google::protobuf::uint32 friend_degree_add::degree_val() const {
  return degree_val_;
}
inline void friend_degree_add::set_degree_val(::google::protobuf::uint32 value) {
  set_has_degree_val();
  degree_val_ = value;
}

// -------------------------------------------------------------------

// attention_role_list_req

// required uint32 unixtime = 1;
inline bool attention_role_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attention_role_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attention_role_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attention_role_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 attention_role_list_req::unixtime() const {
  return unixtime_;
}
inline void attention_role_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool attention_role_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attention_role_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attention_role_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attention_role_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& attention_role_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* attention_role_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* attention_role_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void attention_role_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// private_friend_rsp

// required uint32 result_type = 1;
inline bool private_friend_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void private_friend_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void private_friend_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void private_friend_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 private_friend_rsp::result_type() const {
  return result_type_;
}
inline void private_friend_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::friend_info_friend_type>() {
  return ::client::friend_info_friend_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FRIEND_OPERATE_RET_E>() {
  return ::client::FRIEND_OPERATE_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FRIEND_LIST_RES_E>() {
  return ::client::FRIEND_LIST_RES_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2efriend_2eproto__INCLUDED
