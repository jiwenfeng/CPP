// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.cycle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.cycle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* helper_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  helper_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_helpers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_helpers_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_passed_levels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_passed_levels_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_level_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_level_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_add_helped_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_add_helped_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_fetch_helpers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_fetch_helpers_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_update_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_update_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_update_record_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_update_record_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_challenge_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_challenge_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_helpers_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_helpers_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_helper_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_helper_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_helpers_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_helpers_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_mopup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_mopup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_mopup_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_mopup_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* cycle_mopup_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cycle_mopup_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2ecycle_2eproto() {
  protobuf_AddDesc_client_2ecycle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.cycle.proto");
  GOOGLE_CHECK(file != NULL);
  helper_info_descriptor_ = file->message_type(0);
  static const int helper_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helper_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helper_info, time_),
  };
  helper_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      helper_info_descriptor_,
      helper_info::default_instance_,
      helper_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helper_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helper_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(helper_info));
  cycle_helpers_descriptor_ = file->message_type(1);
  static const int cycle_helpers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers, hi_),
  };
  cycle_helpers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_helpers_descriptor_,
      cycle_helpers::default_instance_,
      cycle_helpers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_helpers));
  cycle_passed_levels_descriptor_ = file->message_type(2);
  static const int cycle_passed_levels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_passed_levels, level_),
  };
  cycle_passed_levels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_passed_levels_descriptor_,
      cycle_passed_levels::default_instance_,
      cycle_passed_levels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_passed_levels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_passed_levels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_passed_levels));
  cycle_level_info_descriptor_ = file->message_type(3);
  static const int cycle_level_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, tick_),
  };
  cycle_level_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_level_info_descriptor_,
      cycle_level_info::default_instance_,
      cycle_level_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_level_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_level_info));
  cycle_add_helped_count_descriptor_ = file->message_type(4);
  static const int cycle_add_helped_count_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_add_helped_count, role_id_),
  };
  cycle_add_helped_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_add_helped_count_descriptor_,
      cycle_add_helped_count::default_instance_,
      cycle_add_helped_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_add_helped_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_add_helped_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_add_helped_count));
  cycle_fetch_helpers_descriptor_ = file->message_type(5);
  static const int cycle_fetch_helpers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_fetch_helpers, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_fetch_helpers, svr_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_fetch_helpers, except_),
  };
  cycle_fetch_helpers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_fetch_helpers_descriptor_,
      cycle_fetch_helpers::default_instance_,
      cycle_fetch_helpers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_fetch_helpers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_fetch_helpers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_fetch_helpers));
  cycle_update_record_req_descriptor_ = file->message_type(6);
  static const int cycle_update_record_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, success_),
  };
  cycle_update_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_update_record_req_descriptor_,
      cycle_update_record_req::default_instance_,
      cycle_update_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_update_record_req));
  cycle_update_record_rsp_descriptor_ = file->message_type(7);
  static const int cycle_update_record_rsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, success_),
  };
  cycle_update_record_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_update_record_rsp_descriptor_,
      cycle_update_record_rsp::default_instance_,
      cycle_update_record_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_update_record_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_update_record_rsp));
  cycle_info_req_descriptor_ = file->message_type(8);
  static const int cycle_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_req, svr_head_),
  };
  cycle_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_info_req_descriptor_,
      cycle_info_req::default_instance_,
      cycle_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_info_req));
  cycle_info_rsp_descriptor_ = file->message_type(9);
  static const int cycle_info_rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, count_),
  };
  cycle_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_info_rsp_descriptor_,
      cycle_info_rsp::default_instance_,
      cycle_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_info_rsp));
  cycle_challenge_req_descriptor_ = file->message_type(10);
  static const int cycle_challenge_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_challenge_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_challenge_req, helper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_challenge_req, svr_head_),
  };
  cycle_challenge_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_challenge_req_descriptor_,
      cycle_challenge_req::default_instance_,
      cycle_challenge_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_challenge_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_challenge_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_challenge_req));
  cycle_helpers_req_descriptor_ = file->message_type(11);
  static const int cycle_helpers_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_req, svr_head_),
  };
  cycle_helpers_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_helpers_req_descriptor_,
      cycle_helpers_req::default_instance_,
      cycle_helpers_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_helpers_req));
  cycle_helper_info_descriptor_ = file->message_type(12);
  static const int cycle_helper_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, count_),
  };
  cycle_helper_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_helper_info_descriptor_,
      cycle_helper_info::default_instance_,
      cycle_helper_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helper_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_helper_info));
  cycle_helpers_rsp_descriptor_ = file->message_type(13);
  static const int cycle_helpers_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_rsp, chi_),
  };
  cycle_helpers_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_helpers_rsp_descriptor_,
      cycle_helpers_rsp::default_instance_,
      cycle_helpers_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_helpers_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_helpers_rsp));
  cycle_mopup_req_descriptor_ = file->message_type(14);
  static const int cycle_mopup_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_req, svr_head_),
  };
  cycle_mopup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_mopup_req_descriptor_,
      cycle_mopup_req::default_instance_,
      cycle_mopup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_mopup_req));
  cycle_mopup_result_descriptor_ = file->message_type(15);
  static const int cycle_mopup_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_result, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_result, rri_),
  };
  cycle_mopup_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_mopup_result_descriptor_,
      cycle_mopup_result::default_instance_,
      cycle_mopup_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_mopup_result));
  cycle_mopup_rsp_descriptor_ = file->message_type(16);
  static const int cycle_mopup_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_rsp, cmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_rsp, time_),
  };
  cycle_mopup_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cycle_mopup_rsp_descriptor_,
      cycle_mopup_rsp::default_instance_,
      cycle_mopup_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cycle_mopup_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cycle_mopup_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2ecycle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    helper_info_descriptor_, &helper_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_helpers_descriptor_, &cycle_helpers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_passed_levels_descriptor_, &cycle_passed_levels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_level_info_descriptor_, &cycle_level_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_add_helped_count_descriptor_, &cycle_add_helped_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_fetch_helpers_descriptor_, &cycle_fetch_helpers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_update_record_req_descriptor_, &cycle_update_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_update_record_rsp_descriptor_, &cycle_update_record_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_info_req_descriptor_, &cycle_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_info_rsp_descriptor_, &cycle_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_challenge_req_descriptor_, &cycle_challenge_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_helpers_req_descriptor_, &cycle_helpers_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_helper_info_descriptor_, &cycle_helper_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_helpers_rsp_descriptor_, &cycle_helpers_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_mopup_req_descriptor_, &cycle_mopup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_mopup_result_descriptor_, &cycle_mopup_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cycle_mopup_rsp_descriptor_, &cycle_mopup_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2ecycle_2eproto() {
  delete helper_info::default_instance_;
  delete helper_info_reflection_;
  delete cycle_helpers::default_instance_;
  delete cycle_helpers_reflection_;
  delete cycle_passed_levels::default_instance_;
  delete cycle_passed_levels_reflection_;
  delete cycle_level_info::default_instance_;
  delete cycle_level_info_reflection_;
  delete cycle_add_helped_count::default_instance_;
  delete cycle_add_helped_count_reflection_;
  delete cycle_fetch_helpers::default_instance_;
  delete cycle_fetch_helpers_reflection_;
  delete cycle_update_record_req::default_instance_;
  delete cycle_update_record_req_reflection_;
  delete cycle_update_record_rsp::default_instance_;
  delete cycle_update_record_rsp_reflection_;
  delete cycle_info_req::default_instance_;
  delete cycle_info_req_reflection_;
  delete cycle_info_rsp::default_instance_;
  delete cycle_info_rsp_reflection_;
  delete cycle_challenge_req::default_instance_;
  delete cycle_challenge_req_reflection_;
  delete cycle_helpers_req::default_instance_;
  delete cycle_helpers_req_reflection_;
  delete cycle_helper_info::default_instance_;
  delete cycle_helper_info_reflection_;
  delete cycle_helpers_rsp::default_instance_;
  delete cycle_helpers_rsp_reflection_;
  delete cycle_mopup_req::default_instance_;
  delete cycle_mopup_req_reflection_;
  delete cycle_mopup_result::default_instance_;
  delete cycle_mopup_result_reflection_;
  delete cycle_mopup_rsp::default_instance_;
  delete cycle_mopup_rsp_reflection_;
}

void protobuf_AddDesc_client_2ecycle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::client::protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client.cycle.proto\022\006client\032\021client.com"
    "m.proto\032\027client.role_props.proto\032\031client"
    ".raid_operate.proto\",\n\013helper_info\022\017\n\007ro"
    "le_id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\"0\n\rcycle_helpe"
    "rs\022\037\n\002hi\030\001 \003(\0132\023.client.helper_info\"$\n\023c"
    "ycle_passed_levels\022\r\n\005level\030\001 \003(\r\"M\n\020cyc"
    "le_level_info\022\r\n\005level\030\001 \002(\r\022\016\n\006update\030\002"
    " \002(\r\022\014\n\004time\030\003 \002(\r\022\014\n\004tick\030\004 \001(\r\")\n\026cycl"
    "e_add_helped_count\022\017\n\007role_id\030\001 \002(\r\"[\n\023c"
    "ycle_fetch_helpers\022\r\n\005level\030\001 \002(\r\022%\n\010svr"
    "_head\030\002 \002(\0132\023.client.server_head\022\016\n\006exce"
    "pt\030\003 \003(\r\"\224\001\n\027cycle_update_record_req\022\r\n\005"
    "level\030\001 \002(\r\022\016\n\006update\030\002 \002(\r\022\017\n\007role_id\030\003"
    " \002(\r\022\017\n\007raid_id\030\004 \002(\r\022\014\n\004tick\030\005 \002(\r\022*\n\007s"
    "uccess\030\006 \001(\0132\031.client.raid_success_info\""
    "\267\001\n\027cycle_update_record_rsp\022\017\n\007role_id\030\001"
    " \002(\r\022\r\n\005level\030\002 \002(\r\022\016\n\006update\030\003 \002(\r\022\014\n\004t"
    "ick\030\004 \002(\r\022\017\n\007raid_id\030\005 \002(\r\022\021\n\trole_name\030"
    "\006 \001(\t\022\016\n\006record\030\007 \001(\r\022*\n\007success\030\010 \001(\0132\031"
    ".client.raid_success_info\"G\n\016cycle_info_"
    "req\022\r\n\005level\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"\232\001\n\016cycle_info_rsp\022\017\n"
    "\007role_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\013\n\003top\030\003 \002"
    "(\r\022\016\n\006record\030\004 \001(\r\022\021\n\trole_name\030\005 \001(\t\022\014\n"
    "\004tick\030\006 \001(\r\022\r\n\005award\030\007 \001(\010\022\014\n\004type\030\010 \001(\r"
    "\022\r\n\005count\030\t \001(\r\"\\\n\023cycle_challenge_req\022\r"
    "\n\005level\030\001 \002(\r\022\016\n\006helper\030\002 \001(\r\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head\"J\n\021cycle_h"
    "elpers_req\022\r\n\005level\030\001 \002(\r\022&\n\010svr_head\030\350\007"
    " \001(\0132\023.client.server_head\"^\n\021cycle_helpe"
    "r_info\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_name\030\002 \002"
    "(\t\022\026\n\016fighting_power\030\003 \002(\r\022\r\n\005count\030\004 \002("
    "\r\"I\n\021cycle_helpers_rsp\022\014\n\004time\030\001 \002(\r\022&\n\003"
    "chi\030\002 \003(\0132\031.client.cycle_helper_info\"G\n\017"
    "cycle_mopup_req\022\014\n\004time\030\001 \002(\r\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head\"J\n\022cycle_m"
    "opup_result\022\r\n\005level\030\001 \002(\r\022%\n\003rri\030\002 \001(\0132"
    "\030.client.raid_result_info\"H\n\017cycle_mopup"
    "_rsp\022\'\n\003cmr\030\001 \003(\0132\032.client.cycle_mopup_r"
    "esult\022\014\n\004time\030\002 \002(\r", 1579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.cycle.proto", &protobuf_RegisterTypes);
  helper_info::default_instance_ = new helper_info();
  cycle_helpers::default_instance_ = new cycle_helpers();
  cycle_passed_levels::default_instance_ = new cycle_passed_levels();
  cycle_level_info::default_instance_ = new cycle_level_info();
  cycle_add_helped_count::default_instance_ = new cycle_add_helped_count();
  cycle_fetch_helpers::default_instance_ = new cycle_fetch_helpers();
  cycle_update_record_req::default_instance_ = new cycle_update_record_req();
  cycle_update_record_rsp::default_instance_ = new cycle_update_record_rsp();
  cycle_info_req::default_instance_ = new cycle_info_req();
  cycle_info_rsp::default_instance_ = new cycle_info_rsp();
  cycle_challenge_req::default_instance_ = new cycle_challenge_req();
  cycle_helpers_req::default_instance_ = new cycle_helpers_req();
  cycle_helper_info::default_instance_ = new cycle_helper_info();
  cycle_helpers_rsp::default_instance_ = new cycle_helpers_rsp();
  cycle_mopup_req::default_instance_ = new cycle_mopup_req();
  cycle_mopup_result::default_instance_ = new cycle_mopup_result();
  cycle_mopup_rsp::default_instance_ = new cycle_mopup_rsp();
  helper_info::default_instance_->InitAsDefaultInstance();
  cycle_helpers::default_instance_->InitAsDefaultInstance();
  cycle_passed_levels::default_instance_->InitAsDefaultInstance();
  cycle_level_info::default_instance_->InitAsDefaultInstance();
  cycle_add_helped_count::default_instance_->InitAsDefaultInstance();
  cycle_fetch_helpers::default_instance_->InitAsDefaultInstance();
  cycle_update_record_req::default_instance_->InitAsDefaultInstance();
  cycle_update_record_rsp::default_instance_->InitAsDefaultInstance();
  cycle_info_req::default_instance_->InitAsDefaultInstance();
  cycle_info_rsp::default_instance_->InitAsDefaultInstance();
  cycle_challenge_req::default_instance_->InitAsDefaultInstance();
  cycle_helpers_req::default_instance_->InitAsDefaultInstance();
  cycle_helper_info::default_instance_->InitAsDefaultInstance();
  cycle_helpers_rsp::default_instance_->InitAsDefaultInstance();
  cycle_mopup_req::default_instance_->InitAsDefaultInstance();
  cycle_mopup_result::default_instance_->InitAsDefaultInstance();
  cycle_mopup_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2ecycle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2ecycle_2eproto {
  StaticDescriptorInitializer_client_2ecycle_2eproto() {
    protobuf_AddDesc_client_2ecycle_2eproto();
  }
} static_descriptor_initializer_client_2ecycle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int helper_info::kRoleIdFieldNumber;
const int helper_info::kTimeFieldNumber;
#endif  // !_MSC_VER

helper_info::helper_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void helper_info::InitAsDefaultInstance() {
}

helper_info::helper_info(const helper_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void helper_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

helper_info::~helper_info() {
  SharedDtor();
}

void helper_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void helper_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* helper_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return helper_info_descriptor_;
}

const helper_info& helper_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

helper_info* helper_info::default_instance_ = NULL;

helper_info* helper_info::New() const {
  return new helper_info;
}

void helper_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool helper_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void helper_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* helper_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int helper_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void helper_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const helper_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const helper_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void helper_info::MergeFrom(const helper_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void helper_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void helper_info::CopyFrom(const helper_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helper_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void helper_info::Swap(helper_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata helper_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = helper_info_descriptor_;
  metadata.reflection = helper_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_helpers::kHiFieldNumber;
#endif  // !_MSC_VER

cycle_helpers::cycle_helpers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_helpers::InitAsDefaultInstance() {
}

cycle_helpers::cycle_helpers(const cycle_helpers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_helpers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_helpers::~cycle_helpers() {
  SharedDtor();
}

void cycle_helpers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_helpers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_helpers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_helpers_descriptor_;
}

const cycle_helpers& cycle_helpers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_helpers* cycle_helpers::default_instance_ = NULL;

cycle_helpers* cycle_helpers::New() const {
  return new cycle_helpers;
}

void cycle_helpers::Clear() {
  hi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_helpers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.helper_info hi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_helpers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.helper_info hi = 1;
  for (int i = 0; i < this->hi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_helpers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.helper_info hi = 1;
  for (int i = 0; i < this->hi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_helpers::ByteSize() const {
  int total_size = 0;

  // repeated .client.helper_info hi = 1;
  total_size += 1 * this->hi_size();
  for (int i = 0; i < this->hi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_helpers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_helpers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_helpers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_helpers::MergeFrom(const cycle_helpers& from) {
  GOOGLE_CHECK_NE(&from, this);
  hi_.MergeFrom(from.hi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_helpers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_helpers::CopyFrom(const cycle_helpers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_helpers::IsInitialized() const {

  for (int i = 0; i < hi_size(); i++) {
    if (!this->hi(i).IsInitialized()) return false;
  }
  return true;
}

void cycle_helpers::Swap(cycle_helpers* other) {
  if (other != this) {
    hi_.Swap(&other->hi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_helpers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_helpers_descriptor_;
  metadata.reflection = cycle_helpers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_passed_levels::kLevelFieldNumber;
#endif  // !_MSC_VER

cycle_passed_levels::cycle_passed_levels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_passed_levels::InitAsDefaultInstance() {
}

cycle_passed_levels::cycle_passed_levels(const cycle_passed_levels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_passed_levels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_passed_levels::~cycle_passed_levels() {
  SharedDtor();
}

void cycle_passed_levels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_passed_levels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_passed_levels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_passed_levels_descriptor_;
}

const cycle_passed_levels& cycle_passed_levels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_passed_levels* cycle_passed_levels::default_instance_ = NULL;

cycle_passed_levels* cycle_passed_levels::New() const {
  return new cycle_passed_levels;
}

void cycle_passed_levels::Clear() {
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_passed_levels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_passed_levels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_passed_levels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_passed_levels::ByteSize() const {
  int total_size = 0;

  // repeated uint32 level = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_passed_levels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_passed_levels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_passed_levels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_passed_levels::MergeFrom(const cycle_passed_levels& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_passed_levels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_passed_levels::CopyFrom(const cycle_passed_levels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_passed_levels::IsInitialized() const {

  return true;
}

void cycle_passed_levels::Swap(cycle_passed_levels* other) {
  if (other != this) {
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_passed_levels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_passed_levels_descriptor_;
  metadata.reflection = cycle_passed_levels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_level_info::kLevelFieldNumber;
const int cycle_level_info::kUpdateFieldNumber;
const int cycle_level_info::kTimeFieldNumber;
const int cycle_level_info::kTickFieldNumber;
#endif  // !_MSC_VER

cycle_level_info::cycle_level_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_level_info::InitAsDefaultInstance() {
}

cycle_level_info::cycle_level_info(const cycle_level_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_level_info::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  update_ = 0u;
  time_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_level_info::~cycle_level_info() {
  SharedDtor();
}

void cycle_level_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_level_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_level_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_level_info_descriptor_;
}

const cycle_level_info& cycle_level_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_level_info* cycle_level_info::default_instance_ = NULL;

cycle_level_info* cycle_level_info::New() const {
  return new cycle_level_info;
}

void cycle_level_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    update_ = 0u;
    time_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_level_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update;
        break;
      }

      // required uint32 update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_level_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 tick = 4;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_level_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 tick = 4;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_level_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 tick = 4;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_level_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_level_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_level_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_level_info::MergeFrom(const cycle_level_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_level_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_level_info::CopyFrom(const cycle_level_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_level_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cycle_level_info::Swap(cycle_level_info* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(update_, other->update_);
    std::swap(time_, other->time_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_level_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_level_info_descriptor_;
  metadata.reflection = cycle_level_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_add_helped_count::kRoleIdFieldNumber;
#endif  // !_MSC_VER

cycle_add_helped_count::cycle_add_helped_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_add_helped_count::InitAsDefaultInstance() {
}

cycle_add_helped_count::cycle_add_helped_count(const cycle_add_helped_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_add_helped_count::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_add_helped_count::~cycle_add_helped_count() {
  SharedDtor();
}

void cycle_add_helped_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_add_helped_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_add_helped_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_add_helped_count_descriptor_;
}

const cycle_add_helped_count& cycle_add_helped_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_add_helped_count* cycle_add_helped_count::default_instance_ = NULL;

cycle_add_helped_count* cycle_add_helped_count::New() const {
  return new cycle_add_helped_count;
}

void cycle_add_helped_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_add_helped_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_add_helped_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_add_helped_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_add_helped_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_add_helped_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_add_helped_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_add_helped_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_add_helped_count::MergeFrom(const cycle_add_helped_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_add_helped_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_add_helped_count::CopyFrom(const cycle_add_helped_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_add_helped_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cycle_add_helped_count::Swap(cycle_add_helped_count* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_add_helped_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_add_helped_count_descriptor_;
  metadata.reflection = cycle_add_helped_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_fetch_helpers::kLevelFieldNumber;
const int cycle_fetch_helpers::kSvrHeadFieldNumber;
const int cycle_fetch_helpers::kExceptFieldNumber;
#endif  // !_MSC_VER

cycle_fetch_helpers::cycle_fetch_helpers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_fetch_helpers::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cycle_fetch_helpers::cycle_fetch_helpers(const cycle_fetch_helpers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_fetch_helpers::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_fetch_helpers::~cycle_fetch_helpers() {
  SharedDtor();
}

void cycle_fetch_helpers::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cycle_fetch_helpers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_fetch_helpers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_fetch_helpers_descriptor_;
}

const cycle_fetch_helpers& cycle_fetch_helpers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_fetch_helpers* cycle_fetch_helpers::default_instance_ = NULL;

cycle_fetch_helpers* cycle_fetch_helpers::New() const {
  return new cycle_fetch_helpers;
}

void cycle_fetch_helpers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  except_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_fetch_helpers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svr_head;
        break;
      }

      // required .client.server_head svr_head = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_except;
        break;
      }

      // repeated uint32 except = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_except:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_except())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_except())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_except;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_fetch_helpers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required .client.server_head svr_head = 2;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->svr_head(), output);
  }

  // repeated uint32 except = 3;
  for (int i = 0; i < this->except_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->except(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_fetch_helpers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required .client.server_head svr_head = 2;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->svr_head(), target);
  }

  // repeated uint32 except = 3;
  for (int i = 0; i < this->except_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->except(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_fetch_helpers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .client.server_head svr_head = 2;
    if (has_svr_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 except = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->except_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->except(i));
    }
    total_size += 1 * this->except_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_fetch_helpers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_fetch_helpers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_fetch_helpers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_fetch_helpers::MergeFrom(const cycle_fetch_helpers& from) {
  GOOGLE_CHECK_NE(&from, this);
  except_.MergeFrom(from.except_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_fetch_helpers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_fetch_helpers::CopyFrom(const cycle_fetch_helpers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_fetch_helpers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void cycle_fetch_helpers::Swap(cycle_fetch_helpers* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(svr_head_, other->svr_head_);
    except_.Swap(&other->except_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_fetch_helpers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_fetch_helpers_descriptor_;
  metadata.reflection = cycle_fetch_helpers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_update_record_req::kLevelFieldNumber;
const int cycle_update_record_req::kUpdateFieldNumber;
const int cycle_update_record_req::kRoleIdFieldNumber;
const int cycle_update_record_req::kRaidIdFieldNumber;
const int cycle_update_record_req::kTickFieldNumber;
const int cycle_update_record_req::kSuccessFieldNumber;
#endif  // !_MSC_VER

cycle_update_record_req::cycle_update_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_update_record_req::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
}

cycle_update_record_req::cycle_update_record_req(const cycle_update_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_update_record_req::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  update_ = 0u;
  role_id_ = 0u;
  raid_id_ = 0u;
  tick_ = 0u;
  success_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_update_record_req::~cycle_update_record_req() {
  SharedDtor();
}

void cycle_update_record_req::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
  }
}

void cycle_update_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_update_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_update_record_req_descriptor_;
}

const cycle_update_record_req& cycle_update_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_update_record_req* cycle_update_record_req::default_instance_ = NULL;

cycle_update_record_req* cycle_update_record_req::New() const {
  return new cycle_update_record_req;
}

void cycle_update_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    update_ = 0u;
    role_id_ = 0u;
    raid_id_ = 0u;
    tick_ = 0u;
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_update_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update;
        break;
      }

      // required uint32 update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tick;
        break;
      }

      // required uint32 tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_update_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 raid_id = 4;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raid_id(), output);
  }

  // required uint32 tick = 5;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tick(), output);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_update_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 raid_id = 4;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raid_id(), target);
  }

  // required uint32 tick = 5;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tick(), target);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_update_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 raid_id = 4;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 tick = 5;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional .client.raid_success_info success = 6;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_update_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_update_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_update_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_update_record_req::MergeFrom(const cycle_update_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_update_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_update_record_req::CopyFrom(const cycle_update_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_update_record_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  return true;
}

void cycle_update_record_req::Swap(cycle_update_record_req* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(update_, other->update_);
    std::swap(role_id_, other->role_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(tick_, other->tick_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_update_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_update_record_req_descriptor_;
  metadata.reflection = cycle_update_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_update_record_rsp::kRoleIdFieldNumber;
const int cycle_update_record_rsp::kLevelFieldNumber;
const int cycle_update_record_rsp::kUpdateFieldNumber;
const int cycle_update_record_rsp::kTickFieldNumber;
const int cycle_update_record_rsp::kRaidIdFieldNumber;
const int cycle_update_record_rsp::kRoleNameFieldNumber;
const int cycle_update_record_rsp::kRecordFieldNumber;
const int cycle_update_record_rsp::kSuccessFieldNumber;
#endif  // !_MSC_VER

cycle_update_record_rsp::cycle_update_record_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_update_record_rsp::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
}

cycle_update_record_rsp::cycle_update_record_rsp(const cycle_update_record_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_update_record_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  update_ = 0u;
  tick_ = 0u;
  raid_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_ = 0u;
  success_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_update_record_rsp::~cycle_update_record_rsp() {
  SharedDtor();
}

void cycle_update_record_rsp::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
    delete success_;
  }
}

void cycle_update_record_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_update_record_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_update_record_rsp_descriptor_;
}

const cycle_update_record_rsp& cycle_update_record_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_update_record_rsp* cycle_update_record_rsp::default_instance_ = NULL;

cycle_update_record_rsp* cycle_update_record_rsp::New() const {
  return new cycle_update_record_rsp;
}

void cycle_update_record_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    update_ = 0u;
    tick_ = 0u;
    raid_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    record_ = 0u;
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_update_record_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update;
        break;
      }

      // required uint32 update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tick;
        break;
      }

      // required uint32 tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_name;
        break;
      }

      // optional string role_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_record;
        break;
      }

      // optional uint32 record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_)));
          set_has_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_update_record_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 update = 3;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update(), output);
  }

  // required uint32 tick = 4;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tick(), output);
  }

  // required uint32 raid_id = 5;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raid_id(), output);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role_name(), output);
  }

  // optional uint32 record = 7;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->record(), output);
  }

  // optional .client.raid_success_info success = 8;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_update_record_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 update = 3;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->update(), target);
  }

  // required uint32 tick = 4;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tick(), target);
  }

  // required uint32 raid_id = 5;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raid_id(), target);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role_name(), target);
  }

  // optional uint32 record = 7;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->record(), target);
  }

  // optional .client.raid_success_info success = 8;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_update_record_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 update = 3;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update());
    }

    // required uint32 tick = 4;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 raid_id = 5;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional string role_name = 6;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 record = 7;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record());
    }

    // optional .client.raid_success_info success = 8;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_update_record_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_update_record_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_update_record_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_update_record_rsp::MergeFrom(const cycle_update_record_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_update_record_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_update_record_rsp::CopyFrom(const cycle_update_record_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_update_record_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  return true;
}

void cycle_update_record_rsp::Swap(cycle_update_record_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(update_, other->update_);
    std::swap(tick_, other->tick_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(record_, other->record_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_update_record_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_update_record_rsp_descriptor_;
  metadata.reflection = cycle_update_record_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_info_req::kLevelFieldNumber;
const int cycle_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

cycle_info_req::cycle_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cycle_info_req::cycle_info_req(const cycle_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_info_req::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_info_req::~cycle_info_req() {
  SharedDtor();
}

void cycle_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cycle_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_info_req_descriptor_;
}

const cycle_info_req& cycle_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_info_req* cycle_info_req::default_instance_ = NULL;

cycle_info_req* cycle_info_req::New() const {
  return new cycle_info_req;
}

void cycle_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_info_req::MergeFrom(const cycle_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_info_req::CopyFrom(const cycle_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cycle_info_req::Swap(cycle_info_req* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_info_req_descriptor_;
  metadata.reflection = cycle_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_info_rsp::kRoleIdFieldNumber;
const int cycle_info_rsp::kLevelFieldNumber;
const int cycle_info_rsp::kTopFieldNumber;
const int cycle_info_rsp::kRecordFieldNumber;
const int cycle_info_rsp::kRoleNameFieldNumber;
const int cycle_info_rsp::kTickFieldNumber;
const int cycle_info_rsp::kAwardFieldNumber;
const int cycle_info_rsp::kTypeFieldNumber;
const int cycle_info_rsp::kCountFieldNumber;
#endif  // !_MSC_VER

cycle_info_rsp::cycle_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_info_rsp::InitAsDefaultInstance() {
}

cycle_info_rsp::cycle_info_rsp(const cycle_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  top_ = 0u;
  record_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  award_ = false;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_info_rsp::~cycle_info_rsp() {
  SharedDtor();
}

void cycle_info_rsp::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void cycle_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_info_rsp_descriptor_;
}

const cycle_info_rsp& cycle_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_info_rsp* cycle_info_rsp::default_instance_ = NULL;

cycle_info_rsp* cycle_info_rsp::New() const {
  return new cycle_info_rsp;
}

void cycle_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    top_ = 0u;
    record_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    tick_ = 0u;
    award_ = false;
    type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }

      // required uint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_record;
        break;
      }

      // optional uint32 record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_)));
          set_has_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_name;
        break;
      }

      // optional string role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_award;
        break;
      }

      // optional bool award = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional uint32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional uint32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top(), output);
  }

  // optional uint32 record = 4;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->record(), output);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role_name(), output);
  }

  // optional uint32 tick = 6;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tick(), output);
  }

  // optional bool award = 7;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->award(), output);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top(), target);
  }

  // optional uint32 record = 4;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->record(), target);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role_name(), target);
  }

  // optional uint32 tick = 6;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tick(), target);
  }

  // optional bool award = 7;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->award(), target);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }

    // optional uint32 record = 4;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record());
    }

    // optional string role_name = 5;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 tick = 6;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional bool award = 7;
    if (has_award()) {
      total_size += 1 + 1;
    }

    // optional uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_info_rsp::MergeFrom(const cycle_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_info_rsp::CopyFrom(const cycle_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cycle_info_rsp::Swap(cycle_info_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(top_, other->top_);
    std::swap(record_, other->record_);
    std::swap(role_name_, other->role_name_);
    std::swap(tick_, other->tick_);
    std::swap(award_, other->award_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_info_rsp_descriptor_;
  metadata.reflection = cycle_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_challenge_req::kLevelFieldNumber;
const int cycle_challenge_req::kHelperFieldNumber;
const int cycle_challenge_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

cycle_challenge_req::cycle_challenge_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_challenge_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cycle_challenge_req::cycle_challenge_req(const cycle_challenge_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_challenge_req::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  helper_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_challenge_req::~cycle_challenge_req() {
  SharedDtor();
}

void cycle_challenge_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cycle_challenge_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_challenge_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_challenge_req_descriptor_;
}

const cycle_challenge_req& cycle_challenge_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_challenge_req* cycle_challenge_req::default_instance_ = NULL;

cycle_challenge_req* cycle_challenge_req::New() const {
  return new cycle_challenge_req;
}

void cycle_challenge_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    helper_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_challenge_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helper;
        break;
      }

      // optional uint32 helper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helper_)));
          set_has_helper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_challenge_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 helper = 2;
  if (has_helper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->helper(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_challenge_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 helper = 2;
  if (has_helper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->helper(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_challenge_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 helper = 2;
    if (has_helper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helper());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_challenge_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_challenge_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_challenge_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_challenge_req::MergeFrom(const cycle_challenge_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_helper()) {
      set_helper(from.helper());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_challenge_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_challenge_req::CopyFrom(const cycle_challenge_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_challenge_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cycle_challenge_req::Swap(cycle_challenge_req* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(helper_, other->helper_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_challenge_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_challenge_req_descriptor_;
  metadata.reflection = cycle_challenge_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_helpers_req::kLevelFieldNumber;
const int cycle_helpers_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

cycle_helpers_req::cycle_helpers_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_helpers_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cycle_helpers_req::cycle_helpers_req(const cycle_helpers_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_helpers_req::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_helpers_req::~cycle_helpers_req() {
  SharedDtor();
}

void cycle_helpers_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cycle_helpers_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_helpers_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_helpers_req_descriptor_;
}

const cycle_helpers_req& cycle_helpers_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_helpers_req* cycle_helpers_req::default_instance_ = NULL;

cycle_helpers_req* cycle_helpers_req::New() const {
  return new cycle_helpers_req;
}

void cycle_helpers_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_helpers_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_helpers_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_helpers_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_helpers_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_helpers_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_helpers_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_helpers_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_helpers_req::MergeFrom(const cycle_helpers_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_helpers_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_helpers_req::CopyFrom(const cycle_helpers_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_helpers_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cycle_helpers_req::Swap(cycle_helpers_req* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_helpers_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_helpers_req_descriptor_;
  metadata.reflection = cycle_helpers_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_helper_info::kRoleIdFieldNumber;
const int cycle_helper_info::kRoleNameFieldNumber;
const int cycle_helper_info::kFightingPowerFieldNumber;
const int cycle_helper_info::kCountFieldNumber;
#endif  // !_MSC_VER

cycle_helper_info::cycle_helper_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_helper_info::InitAsDefaultInstance() {
}

cycle_helper_info::cycle_helper_info(const cycle_helper_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_helper_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fighting_power_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_helper_info::~cycle_helper_info() {
  SharedDtor();
}

void cycle_helper_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void cycle_helper_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_helper_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_helper_info_descriptor_;
}

const cycle_helper_info& cycle_helper_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_helper_info* cycle_helper_info::default_instance_ = NULL;

cycle_helper_info* cycle_helper_info::New() const {
  return new cycle_helper_info;
}

void cycle_helper_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    fighting_power_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_helper_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighting_power;
        break;
      }

      // required uint32 fighting_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_helper_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 fighting_power = 3;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fighting_power(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_helper_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 fighting_power = 3;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fighting_power(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_helper_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 fighting_power = 3;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_helper_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_helper_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_helper_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_helper_info::MergeFrom(const cycle_helper_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_helper_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_helper_info::CopyFrom(const cycle_helper_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_helper_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void cycle_helper_info::Swap(cycle_helper_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_helper_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_helper_info_descriptor_;
  metadata.reflection = cycle_helper_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_helpers_rsp::kTimeFieldNumber;
const int cycle_helpers_rsp::kChiFieldNumber;
#endif  // !_MSC_VER

cycle_helpers_rsp::cycle_helpers_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_helpers_rsp::InitAsDefaultInstance() {
}

cycle_helpers_rsp::cycle_helpers_rsp(const cycle_helpers_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_helpers_rsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_helpers_rsp::~cycle_helpers_rsp() {
  SharedDtor();
}

void cycle_helpers_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_helpers_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_helpers_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_helpers_rsp_descriptor_;
}

const cycle_helpers_rsp& cycle_helpers_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_helpers_rsp* cycle_helpers_rsp::default_instance_ = NULL;

cycle_helpers_rsp* cycle_helpers_rsp::New() const {
  return new cycle_helpers_rsp;
}

void cycle_helpers_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  chi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_helpers_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chi;
        break;
      }

      // repeated .client.cycle_helper_info chi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_helpers_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // repeated .client.cycle_helper_info chi = 2;
  for (int i = 0; i < this->chi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_helpers_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // repeated .client.cycle_helper_info chi = 2;
  for (int i = 0; i < this->chi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_helpers_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .client.cycle_helper_info chi = 2;
  total_size += 1 * this->chi_size();
  for (int i = 0; i < this->chi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_helpers_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_helpers_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_helpers_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_helpers_rsp::MergeFrom(const cycle_helpers_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  chi_.MergeFrom(from.chi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_helpers_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_helpers_rsp::CopyFrom(const cycle_helpers_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_helpers_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < chi_size(); i++) {
    if (!this->chi(i).IsInitialized()) return false;
  }
  return true;
}

void cycle_helpers_rsp::Swap(cycle_helpers_rsp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    chi_.Swap(&other->chi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_helpers_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_helpers_rsp_descriptor_;
  metadata.reflection = cycle_helpers_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_mopup_req::kTimeFieldNumber;
const int cycle_mopup_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

cycle_mopup_req::cycle_mopup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_mopup_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cycle_mopup_req::cycle_mopup_req(const cycle_mopup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_mopup_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_mopup_req::~cycle_mopup_req() {
  SharedDtor();
}

void cycle_mopup_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cycle_mopup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_mopup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_mopup_req_descriptor_;
}

const cycle_mopup_req& cycle_mopup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_mopup_req* cycle_mopup_req::default_instance_ = NULL;

cycle_mopup_req* cycle_mopup_req::New() const {
  return new cycle_mopup_req;
}

void cycle_mopup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_mopup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_mopup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_mopup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_mopup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_mopup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_mopup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_mopup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_mopup_req::MergeFrom(const cycle_mopup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_mopup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_mopup_req::CopyFrom(const cycle_mopup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_mopup_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cycle_mopup_req::Swap(cycle_mopup_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_mopup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_mopup_req_descriptor_;
  metadata.reflection = cycle_mopup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_mopup_result::kLevelFieldNumber;
const int cycle_mopup_result::kRriFieldNumber;
#endif  // !_MSC_VER

cycle_mopup_result::cycle_mopup_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_mopup_result::InitAsDefaultInstance() {
  rri_ = const_cast< ::client::raid_result_info*>(&::client::raid_result_info::default_instance());
}

cycle_mopup_result::cycle_mopup_result(const cycle_mopup_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_mopup_result::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  rri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_mopup_result::~cycle_mopup_result() {
  SharedDtor();
}

void cycle_mopup_result::SharedDtor() {
  if (this != default_instance_) {
    delete rri_;
  }
}

void cycle_mopup_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_mopup_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_mopup_result_descriptor_;
}

const cycle_mopup_result& cycle_mopup_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_mopup_result* cycle_mopup_result::default_instance_ = NULL;

cycle_mopup_result* cycle_mopup_result::New() const {
  return new cycle_mopup_result;
}

void cycle_mopup_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_rri()) {
      if (rri_ != NULL) rri_->::client::raid_result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_mopup_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rri;
        break;
      }

      // optional .client.raid_result_info rri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_mopup_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional .client.raid_result_info rri = 2;
  if (has_rri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_mopup_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional .client.raid_result_info rri = 2;
  if (has_rri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_mopup_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .client.raid_result_info rri = 2;
    if (has_rri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_mopup_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_mopup_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_mopup_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_mopup_result::MergeFrom(const cycle_mopup_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rri()) {
      mutable_rri()->::client::raid_result_info::MergeFrom(from.rri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_mopup_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_mopup_result::CopyFrom(const cycle_mopup_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_mopup_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rri()) {
    if (!this->rri().IsInitialized()) return false;
  }
  return true;
}

void cycle_mopup_result::Swap(cycle_mopup_result* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(rri_, other->rri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_mopup_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_mopup_result_descriptor_;
  metadata.reflection = cycle_mopup_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cycle_mopup_rsp::kCmrFieldNumber;
const int cycle_mopup_rsp::kTimeFieldNumber;
#endif  // !_MSC_VER

cycle_mopup_rsp::cycle_mopup_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cycle_mopup_rsp::InitAsDefaultInstance() {
}

cycle_mopup_rsp::cycle_mopup_rsp(const cycle_mopup_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cycle_mopup_rsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cycle_mopup_rsp::~cycle_mopup_rsp() {
  SharedDtor();
}

void cycle_mopup_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cycle_mopup_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cycle_mopup_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cycle_mopup_rsp_descriptor_;
}

const cycle_mopup_rsp& cycle_mopup_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ecycle_2eproto();
  return *default_instance_;
}

cycle_mopup_rsp* cycle_mopup_rsp::default_instance_ = NULL;

cycle_mopup_rsp* cycle_mopup_rsp::New() const {
  return new cycle_mopup_rsp;
}

void cycle_mopup_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_ = 0u;
  }
  cmr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cycle_mopup_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.cycle_mopup_result cmr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cmr;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cycle_mopup_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.cycle_mopup_result cmr = 1;
  for (int i = 0; i < this->cmr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmr(i), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cycle_mopup_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.cycle_mopup_result cmr = 1;
  for (int i = 0; i < this->cmr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmr(i), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cycle_mopup_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .client.cycle_mopup_result cmr = 1;
  total_size += 1 * this->cmr_size();
  for (int i = 0; i < this->cmr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cmr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cycle_mopup_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cycle_mopup_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cycle_mopup_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cycle_mopup_rsp::MergeFrom(const cycle_mopup_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmr_.MergeFrom(from.cmr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cycle_mopup_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cycle_mopup_rsp::CopyFrom(const cycle_mopup_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cycle_mopup_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < cmr_size(); i++) {
    if (!this->cmr(i).IsInitialized()) return false;
  }
  return true;
}

void cycle_mopup_rsp::Swap(cycle_mopup_rsp* other) {
  if (other != this) {
    cmr_.Swap(&other->cmr_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cycle_mopup_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cycle_mopup_rsp_descriptor_;
  metadata.reflection = cycle_mopup_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
