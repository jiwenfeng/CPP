import "client.comm.proto";

package client;

// 宠物击杀记数
message pet_kill_count_msg {
    required uint32 id    = 1;
    required uint32 count = 2;
}

enum PET_MODE {
    PM_FOLLOW = 1; // 跟随
    PM_STAY   = 2; // 静止
}

// 宠物模式改变
message pet_change_mode_req {
    required PET_MODE    m        = 1;
    optional server_head svr_head = 1000;
}

message pet_change_mode_rsp {
    required PET_MODE m = 1;
}

// 登陆的时候下发一个宠物的ID作为头像的显示、回血、被打扣血、死亡的时候死亡时间通知、复活的时候血量与状态通知、
message pet_id_rsp {
    required pet_db_info		pet_info		= 1		;
}
enum PET_STATUS_E {
    PET_STATUS_TRUCE		= 0; // 休战
    PET_STATUS_FIGHTING	    = 1; // 出战
    PET_STATUS_DEAD			= 2; // 死亡
    PET_STATUS_PREPARE      = 3; // 备战
}

enum PET_LINGERING_STATUS_E {
    PET_LINGERING_STATUS_NOT = 0;
    PET_LINGERING_STATUS_HAD = 1;
}

message pet_fight_attr
{
	required uint32 id = 1;
	required uint32 num = 2;
}

message pet_db_info{
    required uint32			pet_id					  = 1;  // 美人ID
    required uint32			pet_level				  = 2;  // 美人等级
    required uint32			pet_exp					  = 3;  // 美人经验
    required uint32			cur_hp					  = 4;  // 当前血量值
    required uint32			status					  = 5;  // 美人的状态：2死亡，1出战，0休战
    required uint32			lingering_count			  = 6;	// 缠绵的次数
    required uint32			magic_star				  = 7;  // 神兵的星数
    required uint32		    debris_exp		          = 8;  // 碎片经验进度
	repeated pet_fight_attr pfa						  = 9;  // 竞技场用
	optional uint32			max_hp					  = 10; // 最大血量
	optional uint32			levels_status			  = 11; // 过关斩将的设置状态： 0 未设置 1设置
}

message pets_msg {
    repeated pet_db_info pet_info = 1;
}

// 宠物（美人）招募
message pet_recruit_req{
    required uint32      pet_id     = 1		;  // 宠物ID
    optional server_head svr_head   = 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

enum RECRUIT_TYPE {
    RECRUIT_SUCCESS					= 1; // 招募成功
    RECRUIT_STRATEGY_NOT_ENOUGH		= 2; // 韬略不足
    RECRUIT_LEVEL_NOT_ENOUGH		= 3; // 等级不足
    RECRUIT_HAS_RECRUIT				= 4; // 已招募过了
}

message pet_recruit_rsp{
    required uint32				recruit_type = 1;// 1 招募成功 2 韬略不足 3 等级不足 4  已招募过了
    optional pet_db_info		pet_info     = 2;
}

// 宠物（美人）缠绵
message pet_lingering_req{
    required uint32      pet_id     = 1		;  // 宠物ID
    optional server_head svr_head   = 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

message pet_lingering_rsp{
    enum result {
        success     = 1; // 成功
        failed      = 2; // 失败
    }
    required result			result_type			= 1;
    repeated pet_db_info	pet_info		= 2;
}
// 宠物（美人）升级
message pet_levelup_req{
    required uint32      pet_id     = 1		;  // 宠物ID
    optional server_head svr_head   = 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

message pet_levelup_rsp{
    enum result {
        success     = 1; // 成功
        failed      = 2; // 失败
    }
    required result			result_type     = 1;  // 宠物ID
    repeated pet_db_info	pet_info		= 2;  // 宠物数据
}

// 请求宠物（美人）列表
message pet_list_req {
    required uint32       unixtime		= 1		;
    optional server_head  svr_head      = 1000	; // 服务端填写项，客户端不需要关心也不必填写数据
}

message pet_list_rsp {
    required role_data			rd			    = 1		; // 角色数据
    repeated pet_db_info		pet_info		= 2		; // 宠物数据
}

enum PET_OPERATE_E {
    PET_OPERATE_REST  = 0;
    PET_OPERATE_FIGHT = 1;
}
// 宠物出战与休战
message pet_rest_or_fight_req {
    required uint32		    pet_id         = 1		;  // 宠物ID
    required uint32			operate_type   = 2		;  // 操作类型： 0 休战 1出战
    optional server_head    svr_head       = 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

enum PET_REST_OR_FIGHT_E
{
    PET_REST_SUCCESS	  = 0; // 休战成功			
    PET_FIGHT_SUCCESS     = 1; // 出战成功
    PET_REST_FAILD		  = 2; // 休战失败
    PET_FIGHT_FAILD		  = 3; // 出战失败
    PET_PREPARE_SUCCESS   = 4; // 备战成功
}

message pet_rest_or_fight_rsp {
    required uint32					pet_id         = 1		;  // 宠物ID
    required uint32					result_type    = 2		;  // 操作结果 0 休战成功 1 出战成功 2 休战失败 3出战失败
}

enum PET_RESURGENCE_TYPE_E
{
    PET_RESURGENCE_TYPE_RESURGENCE  = 0; // 复活
    PET_RESURGENCE_TYPE_CURE		= 1; // 治疗
}

// 宠物复活
message pet_resurgence_req {
    required uint32			pet_id				= 1		;  // 宠物ID
    required uint32			operate_type		= 2		;  // 操作类型0  复活 1 治疗
    required uint32			resurgence_type		= 3		;  // 支付的类型：0 声望复活 1 银贯复活
    optional server_head	svr_head			= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

enum PET_RESURGENCE_E
{
    PET_RESURGENCE_SUCCESS						= 0; // 复活成功
    PET_RESURGENCE_HP_SUCCESS					= 1; // 治疗成功
    PET_RESURGENCE_REPUTATION_NOT_ENOUGH		= 2; // 声望不足
    PET_RESURGENCE_SILIVER_NOT_ENOUGH			= 3; // 银贯不足
    PET_RESURGENCE_HP_ENOUGH					= 4; // 血量已满不用复活

}

message	pet_resurgence_rsp {
    required uint32					result_type		= 1; // 结果   0 复活成功 1 治疗成功 2 声望不足 3 银贯不足 4 血量已满不用复活
    repeated pet_db_info			pet_info		= 2; // 宠物数据
}

message pet_info_req {
    required uint32			pet_id				= 1		;  // 宠物ID
    optional server_head    svr_head			= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

message pet_info_rsp {
    required role_data			rd					= 1		; // 角色数据
    repeated pet_db_info		pet_info			= 2		; // 宠物数据

}
// 神兵升级
message magic_upgrade_req {
    required uint32			pet_id				= 1		;  // 
    optional server_head	svr_head			= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

message magic_upgrade_rsp {
    required uint32 result_type		= 1;// 0升星成功 1失败
    repeated pet_db_info		pet_info			= 2		; // 宠物数据
}
// 美人技能升级
message pet_skill_rpgrate_req {
    required uint32 skill_id					= 1		;
    optional server_head	svr_head			= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

////////////////美人副本战斗处理////////////
// 副本中美人战斗切换
message pet_fight_mode_change_req {
    required uint32			pet_id				= 1		;  // 
	optional uint32         is_first		    = 2		;  // 美人关进入的时候切换当前副本的美人发个1 过来(当前副本第一次切换出来发个1过来)
	optional uint32			flag_type			= 3		;  // 客户端使用标记
    optional server_head	svr_head			= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

enum PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E
{
    PET_FIGHT_MODE_CHANGE_SUCCEED  = 1; // 切换成功
    PET_FIGHT_MODE_CHANGE_FAILED   = 2; // 切换失败

}

message pet_fight_info {
    optional uint32 pet_id		= 1; // 美人ID
    optional uint32 pet_status  = 2; // 美人状态 1 出战 2备战
}

message pet_fight_mode_change_rsp {
    required uint32         result_type = 1; // 
    repeated pet_fight_info info        = 2; // 
	optional uint32			flag_type	= 3;
}

enum PET_ATTR_CHANGE_TYPE_E
{
	PET_ATTR_CHANGE_TYPE_LEVEL = 1;
	PET_ATTR_CHANGE_TYPE_EQUIP  = 2;
}

// 过关斩将美人出战设置
message pet_levels_set_req {
	required uint32 pet_id				= 1; // 美人ID
	required uint32 levels_status		= 2; // 过关斩将的设置状态： 0 取消上阵 1 上阵
	optional server_head	svr_head	= 1000	;  // 服务端填写项，客户端不需要关心也不必填写数据
}

message pet_levels_set_rsp {
	required uint32 result_type		= 1; // 0 操作成功 1失败
	required uint32 pet_id			= 2;
	required uint32 levels_status	= 3;
}