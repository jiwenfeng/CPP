// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_gem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_gem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* gem_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_level_up_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_level_up_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fgem_2eproto() {
  protobuf_AddDesc_client_2erole_5fgem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_gem.proto");
  GOOGLE_CHECK(file != NULL);
  gem_info_descriptor_ = file->message_type(0);
  static const int gem_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, hole_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, gem_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, gem_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, gem_exp_),
  };
  gem_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_info_descriptor_,
      gem_info::default_instance_,
      gem_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_info));
  gem_list_req_descriptor_ = file->message_type(1);
  static const int gem_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_req, svr_head_),
  };
  gem_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_list_req_descriptor_,
      gem_list_req::default_instance_,
      gem_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_list_req));
  gem_list_rsp_descriptor_ = file->message_type(2);
  static const int gem_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_rsp, list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_rsp, info_),
  };
  gem_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_list_rsp_descriptor_,
      gem_list_rsp::default_instance_,
      gem_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_list_rsp));
  gem_level_up_req_descriptor_ = file->message_type(3);
  static const int gem_level_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_req, gem_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_req, svr_head_),
  };
  gem_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_level_up_req_descriptor_,
      gem_level_up_req::default_instance_,
      gem_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_level_up_req));
  gem_level_up_rsp_descriptor_ = file->message_type(4);
  static const int gem_level_up_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, gem_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, cir_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, info_),
  };
  gem_level_up_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_level_up_rsp_descriptor_,
      gem_level_up_rsp::default_instance_,
      gem_level_up_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_level_up_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_level_up_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fgem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_info_descriptor_, &gem_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_list_req_descriptor_, &gem_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_list_rsp_descriptor_, &gem_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_level_up_req_descriptor_, &gem_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_level_up_rsp_descriptor_, &gem_level_up_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fgem_2eproto() {
  delete gem_info::default_instance_;
  delete gem_info_reflection_;
  delete gem_list_req::default_instance_;
  delete gem_list_req_reflection_;
  delete gem_list_rsp::default_instance_;
  delete gem_list_rsp_reflection_;
  delete gem_level_up_req::default_instance_;
  delete gem_level_up_req_reflection_;
  delete gem_level_up_rsp::default_instance_;
  delete gem_level_up_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fgem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025client.role_gem.proto\022\006client\032\021client."
    "comm.proto\"Q\n\010gem_info\022\017\n\007hole_id\030\001 \001(\r\022"
    "\020\n\010gem_type\030\002 \001(\r\022\021\n\tgem_level\030\003 \001(\r\022\017\n\007"
    "gem_exp\030\004 \001(\r\"D\n\014gem_list_req\022\014\n\004time\030\001 "
    "\002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_h"
    "ead\"A\n\014gem_list_rsp\022\021\n\tlist_type\030\001 \002(\r\022\036"
    "\n\004info\030\002 \003(\0132\020.client.gem_info\"K\n\020gem_le"
    "vel_up_req\022\017\n\007gem_pos\030\001 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"k\n\020gem_level"
    "_up_rsp\022\023\n\013result_type\030\001 \002(\r\022\017\n\007gem_pos\030"
    "\002 \002(\r\022\021\n\tcir_count\030\003 \001(\r\022\036\n\004info\030\004 \003(\0132\020"
    ".client.gem_info", 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_gem.proto", &protobuf_RegisterTypes);
  gem_info::default_instance_ = new gem_info();
  gem_list_req::default_instance_ = new gem_list_req();
  gem_list_rsp::default_instance_ = new gem_list_rsp();
  gem_level_up_req::default_instance_ = new gem_level_up_req();
  gem_level_up_rsp::default_instance_ = new gem_level_up_rsp();
  gem_info::default_instance_->InitAsDefaultInstance();
  gem_list_req::default_instance_->InitAsDefaultInstance();
  gem_list_rsp::default_instance_->InitAsDefaultInstance();
  gem_level_up_req::default_instance_->InitAsDefaultInstance();
  gem_level_up_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fgem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fgem_2eproto {
  StaticDescriptorInitializer_client_2erole_5fgem_2eproto() {
    protobuf_AddDesc_client_2erole_5fgem_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fgem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gem_info::kHoleIdFieldNumber;
const int gem_info::kGemTypeFieldNumber;
const int gem_info::kGemLevelFieldNumber;
const int gem_info::kGemExpFieldNumber;
#endif  // !_MSC_VER

gem_info::gem_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_info::InitAsDefaultInstance() {
}

gem_info::gem_info(const gem_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_info::SharedCtor() {
  _cached_size_ = 0;
  hole_id_ = 0u;
  gem_type_ = 0u;
  gem_level_ = 0u;
  gem_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_info::~gem_info() {
  SharedDtor();
}

void gem_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gem_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_info_descriptor_;
}

const gem_info& gem_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fgem_2eproto();
  return *default_instance_;
}

gem_info* gem_info::default_instance_ = NULL;

gem_info* gem_info::New() const {
  return new gem_info;
}

void gem_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_id_ = 0u;
    gem_type_ = 0u;
    gem_level_ = 0u;
    gem_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hole_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_id_)));
          set_has_hole_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_type;
        break;
      }

      // optional uint32 gem_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_type_)));
          set_has_gem_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gem_level;
        break;
      }

      // optional uint32 gem_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_level_)));
          set_has_gem_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gem_exp;
        break;
      }

      // optional uint32 gem_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_exp_)));
          set_has_gem_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hole_id = 1;
  if (has_hole_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_id(), output);
  }

  // optional uint32 gem_type = 2;
  if (has_gem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gem_type(), output);
  }

  // optional uint32 gem_level = 3;
  if (has_gem_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gem_level(), output);
  }

  // optional uint32 gem_exp = 4;
  if (has_gem_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gem_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hole_id = 1;
  if (has_hole_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_id(), target);
  }

  // optional uint32 gem_type = 2;
  if (has_gem_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gem_type(), target);
  }

  // optional uint32 gem_level = 3;
  if (has_gem_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gem_level(), target);
  }

  // optional uint32 gem_exp = 4;
  if (has_gem_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gem_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hole_id = 1;
    if (has_hole_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_id());
    }

    // optional uint32 gem_type = 2;
    if (has_gem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_type());
    }

    // optional uint32 gem_level = 3;
    if (has_gem_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_level());
    }

    // optional uint32 gem_exp = 4;
    if (has_gem_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_info::MergeFrom(const gem_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_id()) {
      set_hole_id(from.hole_id());
    }
    if (from.has_gem_type()) {
      set_gem_type(from.gem_type());
    }
    if (from.has_gem_level()) {
      set_gem_level(from.gem_level());
    }
    if (from.has_gem_exp()) {
      set_gem_exp(from.gem_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_info::CopyFrom(const gem_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_info::IsInitialized() const {

  return true;
}

void gem_info::Swap(gem_info* other) {
  if (other != this) {
    std::swap(hole_id_, other->hole_id_);
    std::swap(gem_type_, other->gem_type_);
    std::swap(gem_level_, other->gem_level_);
    std::swap(gem_exp_, other->gem_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_info_descriptor_;
  metadata.reflection = gem_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_list_req::kTimeFieldNumber;
const int gem_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

gem_list_req::gem_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

gem_list_req::gem_list_req(const gem_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_list_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_list_req::~gem_list_req() {
  SharedDtor();
}

void gem_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void gem_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_list_req_descriptor_;
}

const gem_list_req& gem_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fgem_2eproto();
  return *default_instance_;
}

gem_list_req* gem_list_req::default_instance_ = NULL;

gem_list_req* gem_list_req::New() const {
  return new gem_list_req;
}

void gem_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_list_req::MergeFrom(const gem_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_list_req::CopyFrom(const gem_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gem_list_req::Swap(gem_list_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_list_req_descriptor_;
  metadata.reflection = gem_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_list_rsp::kListTypeFieldNumber;
const int gem_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

gem_list_rsp::gem_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_list_rsp::InitAsDefaultInstance() {
}

gem_list_rsp::gem_list_rsp(const gem_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  list_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_list_rsp::~gem_list_rsp() {
  SharedDtor();
}

void gem_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gem_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_list_rsp_descriptor_;
}

const gem_list_rsp& gem_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fgem_2eproto();
  return *default_instance_;
}

gem_list_rsp* gem_list_rsp::default_instance_ = NULL;

gem_list_rsp* gem_list_rsp::New() const {
  return new gem_list_rsp;
}

void gem_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 list_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
          set_has_list_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.gem_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 list_type = 1;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->list_type(), output);
  }

  // repeated .client.gem_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 list_type = 1;
  if (has_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->list_type(), target);
  }

  // repeated .client.gem_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 list_type = 1;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

  }
  // repeated .client.gem_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_list_rsp::MergeFrom(const gem_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_list_rsp::CopyFrom(const gem_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gem_list_rsp::Swap(gem_list_rsp* other) {
  if (other != this) {
    std::swap(list_type_, other->list_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_list_rsp_descriptor_;
  metadata.reflection = gem_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_level_up_req::kGemPosFieldNumber;
const int gem_level_up_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

gem_level_up_req::gem_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_level_up_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

gem_level_up_req::gem_level_up_req(const gem_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  gem_pos_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_level_up_req::~gem_level_up_req() {
  SharedDtor();
}

void gem_level_up_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void gem_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_level_up_req_descriptor_;
}

const gem_level_up_req& gem_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fgem_2eproto();
  return *default_instance_;
}

gem_level_up_req* gem_level_up_req::default_instance_ = NULL;

gem_level_up_req* gem_level_up_req::New() const {
  return new gem_level_up_req;
}

void gem_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_pos_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gem_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_pos_)));
          set_has_gem_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gem_pos = 1;
  if (has_gem_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gem_pos(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gem_pos = 1;
  if (has_gem_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gem_pos(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gem_pos = 1;
    if (has_gem_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_pos());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_level_up_req::MergeFrom(const gem_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem_pos()) {
      set_gem_pos(from.gem_pos());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_level_up_req::CopyFrom(const gem_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_level_up_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gem_level_up_req::Swap(gem_level_up_req* other) {
  if (other != this) {
    std::swap(gem_pos_, other->gem_pos_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_level_up_req_descriptor_;
  metadata.reflection = gem_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_level_up_rsp::kResultTypeFieldNumber;
const int gem_level_up_rsp::kGemPosFieldNumber;
const int gem_level_up_rsp::kCirCountFieldNumber;
const int gem_level_up_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

gem_level_up_rsp::gem_level_up_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_level_up_rsp::InitAsDefaultInstance() {
}

gem_level_up_rsp::gem_level_up_rsp(const gem_level_up_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_level_up_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  gem_pos_ = 0u;
  cir_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_level_up_rsp::~gem_level_up_rsp() {
  SharedDtor();
}

void gem_level_up_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gem_level_up_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_level_up_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_level_up_rsp_descriptor_;
}

const gem_level_up_rsp& gem_level_up_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fgem_2eproto();
  return *default_instance_;
}

gem_level_up_rsp* gem_level_up_rsp::default_instance_ = NULL;

gem_level_up_rsp* gem_level_up_rsp::New() const {
  return new gem_level_up_rsp;
}

void gem_level_up_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    gem_pos_ = 0u;
    cir_count_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_level_up_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_pos;
        break;
      }

      // required uint32 gem_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_pos_)));
          set_has_gem_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cir_count;
        break;
      }

      // optional uint32 cir_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cir_count_)));
          set_has_cir_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .client.gem_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_level_up_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 gem_pos = 2;
  if (has_gem_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gem_pos(), output);
  }

  // optional uint32 cir_count = 3;
  if (has_cir_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cir_count(), output);
  }

  // repeated .client.gem_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_level_up_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 gem_pos = 2;
  if (has_gem_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gem_pos(), target);
  }

  // optional uint32 cir_count = 3;
  if (has_cir_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cir_count(), target);
  }

  // repeated .client.gem_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_level_up_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 gem_pos = 2;
    if (has_gem_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_pos());
    }

    // optional uint32 cir_count = 3;
    if (has_cir_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cir_count());
    }

  }
  // repeated .client.gem_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_level_up_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_level_up_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_level_up_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_level_up_rsp::MergeFrom(const gem_level_up_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_gem_pos()) {
      set_gem_pos(from.gem_pos());
    }
    if (from.has_cir_count()) {
      set_cir_count(from.cir_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_level_up_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_level_up_rsp::CopyFrom(const gem_level_up_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_level_up_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gem_level_up_rsp::Swap(gem_level_up_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(gem_pos_, other->gem_pos_);
    std::swap(cir_count_, other->cir_count_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_level_up_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_level_up_rsp_descriptor_;
  metadata.reflection = gem_level_up_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
