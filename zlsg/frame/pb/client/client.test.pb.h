// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.test.proto

#ifndef PROTOBUF_client_2etest_2eproto__INCLUDED
#define PROTOBUF_client_2etest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2etest_2eproto();
void protobuf_AssignDesc_client_2etest_2eproto();
void protobuf_ShutdownFile_client_2etest_2eproto();

class test;

// ===================================================================

class test : public ::google::protobuf::Message {
 public:
  test();
  virtual ~test();

  test(const test& from);

  inline test& operator=(const test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test& default_instance();

  void Swap(test* other);

  // implements Message ----------------------------------------------

  test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test& from);
  void MergeFrom(const test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hp = 1;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 1;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 mp = 2;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 2;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // optional uint32 prop_id = 3;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 3;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // optional int32 prop_num = 4;
  inline bool has_prop_num() const;
  inline void clear_prop_num();
  static const int kPropNumFieldNumber = 4;
  inline ::google::protobuf::int32 prop_num() const;
  inline void set_prop_num(::google::protobuf::int32 value);

  // optional uint32 attr_id = 5;
  inline bool has_attr_id() const;
  inline void clear_attr_id();
  static const int kAttrIdFieldNumber = 5;
  inline ::google::protobuf::uint32 attr_id() const;
  inline void set_attr_id(::google::protobuf::uint32 value);

  // optional int32 attr_num = 6;
  inline bool has_attr_num() const;
  inline void clear_attr_num();
  static const int kAttrNumFieldNumber = 6;
  inline ::google::protobuf::int32 attr_num() const;
  inline void set_attr_num(::google::protobuf::int32 value);

  // optional uint32 task_id = 7;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 7;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 drop_id = 8;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 8;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // optional uint32 add_attr_id = 9;
  inline bool has_add_attr_id() const;
  inline void clear_add_attr_id();
  static const int kAddAttrIdFieldNumber = 9;
  inline ::google::protobuf::uint32 add_attr_id() const;
  inline void set_add_attr_id(::google::protobuf::uint32 value);

  // optional string cfg_file = 10;
  inline bool has_cfg_file() const;
  inline void clear_cfg_file();
  static const int kCfgFileFieldNumber = 10;
  inline const ::std::string& cfg_file() const;
  inline void set_cfg_file(const ::std::string& value);
  inline void set_cfg_file(const char* value);
  inline void set_cfg_file(const char* value, size_t size);
  inline ::std::string* mutable_cfg_file();
  inline ::std::string* release_cfg_file();
  inline void set_allocated_cfg_file(::std::string* cfg_file);

  // optional string cfg_table = 11;
  inline bool has_cfg_table() const;
  inline void clear_cfg_table();
  static const int kCfgTableFieldNumber = 11;
  inline const ::std::string& cfg_table() const;
  inline void set_cfg_table(const ::std::string& value);
  inline void set_cfg_table(const char* value);
  inline void set_cfg_table(const char* value, size_t size);
  inline ::std::string* mutable_cfg_table();
  inline ::std::string* release_cfg_table();
  inline void set_allocated_cfg_table(::std::string* cfg_table);

  // optional string cfg_field = 12;
  inline bool has_cfg_field() const;
  inline void clear_cfg_field();
  static const int kCfgFieldFieldNumber = 12;
  inline const ::std::string& cfg_field() const;
  inline void set_cfg_field(const ::std::string& value);
  inline void set_cfg_field(const char* value);
  inline void set_cfg_field(const char* value, size_t size);
  inline ::std::string* mutable_cfg_field();
  inline ::std::string* release_cfg_field();
  inline void set_allocated_cfg_field(::std::string* cfg_field);

  // optional uint32 mount_skill_count = 13;
  inline bool has_mount_skill_count() const;
  inline void clear_mount_skill_count();
  static const int kMountSkillCountFieldNumber = 13;
  inline ::google::protobuf::uint32 mount_skill_count() const;
  inline void set_mount_skill_count(::google::protobuf::uint32 value);

  // optional string lua = 14;
  inline bool has_lua() const;
  inline void clear_lua();
  static const int kLuaFieldNumber = 14;
  inline const ::std::string& lua() const;
  inline void set_lua(const ::std::string& value);
  inline void set_lua(const char* value);
  inline void set_lua(const char* value, size_t size);
  inline ::std::string* mutable_lua();
  inline ::std::string* release_lua();
  inline void set_allocated_lua(::std::string* lua);

  // optional uint32 area_id = 15;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 15;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 pet_id = 16;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 16;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional uint32 pet_exp = 17;
  inline bool has_pet_exp() const;
  inline void clear_pet_exp();
  static const int kPetExpFieldNumber = 17;
  inline ::google::protobuf::uint32 pet_exp() const;
  inline void set_pet_exp(::google::protobuf::uint32 value);

  // optional uint32 money = 18;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 18;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 vip_lv = 19;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 19;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);

  // optional uint32 month = 20;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 20;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 land_day = 21;
  inline bool has_land_day() const;
  inline void clear_land_day();
  static const int kLandDayFieldNumber = 21;
  inline ::google::protobuf::uint32 land_day() const;
  inline void set_land_day(::google::protobuf::uint32 value);

  // optional uint32 raid_id = 22;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 22;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional uint32 raid_type = 23;
  inline bool has_raid_type() const;
  inline void clear_raid_type();
  static const int kRaidTypeFieldNumber = 23;
  inline ::google::protobuf::uint32 raid_type() const;
  inline void set_raid_type(::google::protobuf::uint32 value);

  // optional uint32 once = 24;
  inline bool has_once() const;
  inline void clear_once();
  static const int kOnceFieldNumber = 24;
  inline ::google::protobuf::uint32 once() const;
  inline void set_once(::google::protobuf::uint32 value);

  // optional uint32 sub_attr_id = 25;
  inline bool has_sub_attr_id() const;
  inline void clear_sub_attr_id();
  static const int kSubAttrIdFieldNumber = 25;
  inline ::google::protobuf::uint32 sub_attr_id() const;
  inline void set_sub_attr_id(::google::protobuf::uint32 value);

  // optional bool clear_add_attr = 26;
  inline bool has_clear_add_attr() const;
  inline void clear_clear_add_attr();
  static const int kClearAddAttrFieldNumber = 26;
  inline bool clear_add_attr() const;
  inline void set_clear_add_attr(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.test)
 private:
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_prop_num();
  inline void clear_has_prop_num();
  inline void set_has_attr_id();
  inline void clear_has_attr_id();
  inline void set_has_attr_num();
  inline void clear_has_attr_num();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_drop_id();
  inline void clear_has_drop_id();
  inline void set_has_add_attr_id();
  inline void clear_has_add_attr_id();
  inline void set_has_cfg_file();
  inline void clear_has_cfg_file();
  inline void set_has_cfg_table();
  inline void clear_has_cfg_table();
  inline void set_has_cfg_field();
  inline void clear_has_cfg_field();
  inline void set_has_mount_skill_count();
  inline void clear_has_mount_skill_count();
  inline void set_has_lua();
  inline void clear_has_lua();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_exp();
  inline void clear_has_pet_exp();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_land_day();
  inline void clear_has_land_day();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_raid_type();
  inline void clear_has_raid_type();
  inline void set_has_once();
  inline void clear_has_once();
  inline void set_has_sub_attr_id();
  inline void clear_has_sub_attr_id();
  inline void set_has_clear_add_attr();
  inline void clear_has_clear_add_attr();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::int32 prop_num_;
  ::google::protobuf::uint32 attr_id_;
  ::google::protobuf::int32 attr_num_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 drop_id_;
  ::std::string* cfg_file_;
  ::std::string* cfg_table_;
  ::google::protobuf::uint32 add_attr_id_;
  ::google::protobuf::uint32 mount_skill_count_;
  ::std::string* cfg_field_;
  ::std::string* lua_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 pet_exp_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 vip_lv_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 land_day_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 raid_type_;
  ::google::protobuf::uint32 once_;
  ::google::protobuf::uint32 sub_attr_id_;
  bool clear_add_attr_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etest_2eproto();
  friend void protobuf_AssignDesc_client_2etest_2eproto();
  friend void protobuf_ShutdownFile_client_2etest_2eproto();

  void InitAsDefaultInstance();
  static test* default_instance_;
};
// ===================================================================


// ===================================================================

// test

// optional int32 hp = 1;
inline bool test::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 test::hp() const {
  return hp_;
}
inline void test::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 mp = 2;
inline bool test::has_mp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test::set_has_mp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test::clear_has_mp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 test::mp() const {
  return mp_;
}
inline void test::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// optional uint32 prop_id = 3;
inline bool test::has_prop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void test::set_has_prop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void test::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void test::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 test::prop_id() const {
  return prop_id_;
}
inline void test::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
}

// optional int32 prop_num = 4;
inline bool test::has_prop_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void test::set_has_prop_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void test::clear_has_prop_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void test::clear_prop_num() {
  prop_num_ = 0;
  clear_has_prop_num();
}
inline ::google::protobuf::int32 test::prop_num() const {
  return prop_num_;
}
inline void test::set_prop_num(::google::protobuf::int32 value) {
  set_has_prop_num();
  prop_num_ = value;
}

// optional uint32 attr_id = 5;
inline bool test::has_attr_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void test::set_has_attr_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void test::clear_has_attr_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void test::clear_attr_id() {
  attr_id_ = 0u;
  clear_has_attr_id();
}
inline ::google::protobuf::uint32 test::attr_id() const {
  return attr_id_;
}
inline void test::set_attr_id(::google::protobuf::uint32 value) {
  set_has_attr_id();
  attr_id_ = value;
}

// optional int32 attr_num = 6;
inline bool test::has_attr_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void test::set_has_attr_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void test::clear_has_attr_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void test::clear_attr_num() {
  attr_num_ = 0;
  clear_has_attr_num();
}
inline ::google::protobuf::int32 test::attr_num() const {
  return attr_num_;
}
inline void test::set_attr_num(::google::protobuf::int32 value) {
  set_has_attr_num();
  attr_num_ = value;
}

// optional uint32 task_id = 7;
inline bool test::has_task_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void test::set_has_task_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void test::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void test::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 test::task_id() const {
  return task_id_;
}
inline void test::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 drop_id = 8;
inline bool test::has_drop_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void test::set_has_drop_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void test::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void test::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 test::drop_id() const {
  return drop_id_;
}
inline void test::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// optional uint32 add_attr_id = 9;
inline bool test::has_add_attr_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void test::set_has_add_attr_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void test::clear_has_add_attr_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void test::clear_add_attr_id() {
  add_attr_id_ = 0u;
  clear_has_add_attr_id();
}
inline ::google::protobuf::uint32 test::add_attr_id() const {
  return add_attr_id_;
}
inline void test::set_add_attr_id(::google::protobuf::uint32 value) {
  set_has_add_attr_id();
  add_attr_id_ = value;
}

// optional string cfg_file = 10;
inline bool test::has_cfg_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void test::set_has_cfg_file() {
  _has_bits_[0] |= 0x00000200u;
}
inline void test::clear_has_cfg_file() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void test::clear_cfg_file() {
  if (cfg_file_ != &::google::protobuf::internal::kEmptyString) {
    cfg_file_->clear();
  }
  clear_has_cfg_file();
}
inline const ::std::string& test::cfg_file() const {
  return *cfg_file_;
}
inline void test::set_cfg_file(const ::std::string& value) {
  set_has_cfg_file();
  if (cfg_file_ == &::google::protobuf::internal::kEmptyString) {
    cfg_file_ = new ::std::string;
  }
  cfg_file_->assign(value);
}
inline void test::set_cfg_file(const char* value) {
  set_has_cfg_file();
  if (cfg_file_ == &::google::protobuf::internal::kEmptyString) {
    cfg_file_ = new ::std::string;
  }
  cfg_file_->assign(value);
}
inline void test::set_cfg_file(const char* value, size_t size) {
  set_has_cfg_file();
  if (cfg_file_ == &::google::protobuf::internal::kEmptyString) {
    cfg_file_ = new ::std::string;
  }
  cfg_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test::mutable_cfg_file() {
  set_has_cfg_file();
  if (cfg_file_ == &::google::protobuf::internal::kEmptyString) {
    cfg_file_ = new ::std::string;
  }
  return cfg_file_;
}
inline ::std::string* test::release_cfg_file() {
  clear_has_cfg_file();
  if (cfg_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cfg_file_;
    cfg_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test::set_allocated_cfg_file(::std::string* cfg_file) {
  if (cfg_file_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_file_;
  }
  if (cfg_file) {
    set_has_cfg_file();
    cfg_file_ = cfg_file;
  } else {
    clear_has_cfg_file();
    cfg_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cfg_table = 11;
inline bool test::has_cfg_table() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void test::set_has_cfg_table() {
  _has_bits_[0] |= 0x00000400u;
}
inline void test::clear_has_cfg_table() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void test::clear_cfg_table() {
  if (cfg_table_ != &::google::protobuf::internal::kEmptyString) {
    cfg_table_->clear();
  }
  clear_has_cfg_table();
}
inline const ::std::string& test::cfg_table() const {
  return *cfg_table_;
}
inline void test::set_cfg_table(const ::std::string& value) {
  set_has_cfg_table();
  if (cfg_table_ == &::google::protobuf::internal::kEmptyString) {
    cfg_table_ = new ::std::string;
  }
  cfg_table_->assign(value);
}
inline void test::set_cfg_table(const char* value) {
  set_has_cfg_table();
  if (cfg_table_ == &::google::protobuf::internal::kEmptyString) {
    cfg_table_ = new ::std::string;
  }
  cfg_table_->assign(value);
}
inline void test::set_cfg_table(const char* value, size_t size) {
  set_has_cfg_table();
  if (cfg_table_ == &::google::protobuf::internal::kEmptyString) {
    cfg_table_ = new ::std::string;
  }
  cfg_table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test::mutable_cfg_table() {
  set_has_cfg_table();
  if (cfg_table_ == &::google::protobuf::internal::kEmptyString) {
    cfg_table_ = new ::std::string;
  }
  return cfg_table_;
}
inline ::std::string* test::release_cfg_table() {
  clear_has_cfg_table();
  if (cfg_table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cfg_table_;
    cfg_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test::set_allocated_cfg_table(::std::string* cfg_table) {
  if (cfg_table_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_table_;
  }
  if (cfg_table) {
    set_has_cfg_table();
    cfg_table_ = cfg_table;
  } else {
    clear_has_cfg_table();
    cfg_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cfg_field = 12;
inline bool test::has_cfg_field() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void test::set_has_cfg_field() {
  _has_bits_[0] |= 0x00000800u;
}
inline void test::clear_has_cfg_field() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void test::clear_cfg_field() {
  if (cfg_field_ != &::google::protobuf::internal::kEmptyString) {
    cfg_field_->clear();
  }
  clear_has_cfg_field();
}
inline const ::std::string& test::cfg_field() const {
  return *cfg_field_;
}
inline void test::set_cfg_field(const ::std::string& value) {
  set_has_cfg_field();
  if (cfg_field_ == &::google::protobuf::internal::kEmptyString) {
    cfg_field_ = new ::std::string;
  }
  cfg_field_->assign(value);
}
inline void test::set_cfg_field(const char* value) {
  set_has_cfg_field();
  if (cfg_field_ == &::google::protobuf::internal::kEmptyString) {
    cfg_field_ = new ::std::string;
  }
  cfg_field_->assign(value);
}
inline void test::set_cfg_field(const char* value, size_t size) {
  set_has_cfg_field();
  if (cfg_field_ == &::google::protobuf::internal::kEmptyString) {
    cfg_field_ = new ::std::string;
  }
  cfg_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test::mutable_cfg_field() {
  set_has_cfg_field();
  if (cfg_field_ == &::google::protobuf::internal::kEmptyString) {
    cfg_field_ = new ::std::string;
  }
  return cfg_field_;
}
inline ::std::string* test::release_cfg_field() {
  clear_has_cfg_field();
  if (cfg_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cfg_field_;
    cfg_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test::set_allocated_cfg_field(::std::string* cfg_field) {
  if (cfg_field_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_field_;
  }
  if (cfg_field) {
    set_has_cfg_field();
    cfg_field_ = cfg_field;
  } else {
    clear_has_cfg_field();
    cfg_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mount_skill_count = 13;
inline bool test::has_mount_skill_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void test::set_has_mount_skill_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void test::clear_has_mount_skill_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void test::clear_mount_skill_count() {
  mount_skill_count_ = 0u;
  clear_has_mount_skill_count();
}
inline ::google::protobuf::uint32 test::mount_skill_count() const {
  return mount_skill_count_;
}
inline void test::set_mount_skill_count(::google::protobuf::uint32 value) {
  set_has_mount_skill_count();
  mount_skill_count_ = value;
}

// optional string lua = 14;
inline bool test::has_lua() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void test::set_has_lua() {
  _has_bits_[0] |= 0x00002000u;
}
inline void test::clear_has_lua() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void test::clear_lua() {
  if (lua_ != &::google::protobuf::internal::kEmptyString) {
    lua_->clear();
  }
  clear_has_lua();
}
inline const ::std::string& test::lua() const {
  return *lua_;
}
inline void test::set_lua(const ::std::string& value) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::kEmptyString) {
    lua_ = new ::std::string;
  }
  lua_->assign(value);
}
inline void test::set_lua(const char* value) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::kEmptyString) {
    lua_ = new ::std::string;
  }
  lua_->assign(value);
}
inline void test::set_lua(const char* value, size_t size) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::kEmptyString) {
    lua_ = new ::std::string;
  }
  lua_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test::mutable_lua() {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::kEmptyString) {
    lua_ = new ::std::string;
  }
  return lua_;
}
inline ::std::string* test::release_lua() {
  clear_has_lua();
  if (lua_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lua_;
    lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test::set_allocated_lua(::std::string* lua) {
  if (lua_ != &::google::protobuf::internal::kEmptyString) {
    delete lua_;
  }
  if (lua) {
    set_has_lua();
    lua_ = lua;
  } else {
    clear_has_lua();
    lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 area_id = 15;
inline bool test::has_area_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void test::set_has_area_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void test::clear_has_area_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void test::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 test::area_id() const {
  return area_id_;
}
inline void test::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 pet_id = 16;
inline bool test::has_pet_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void test::set_has_pet_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void test::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void test::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 test::pet_id() const {
  return pet_id_;
}
inline void test::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional uint32 pet_exp = 17;
inline bool test::has_pet_exp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void test::set_has_pet_exp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void test::clear_has_pet_exp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void test::clear_pet_exp() {
  pet_exp_ = 0u;
  clear_has_pet_exp();
}
inline ::google::protobuf::uint32 test::pet_exp() const {
  return pet_exp_;
}
inline void test::set_pet_exp(::google::protobuf::uint32 value) {
  set_has_pet_exp();
  pet_exp_ = value;
}

// optional uint32 money = 18;
inline bool test::has_money() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void test::set_has_money() {
  _has_bits_[0] |= 0x00020000u;
}
inline void test::clear_has_money() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void test::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 test::money() const {
  return money_;
}
inline void test::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional uint32 vip_lv = 19;
inline bool test::has_vip_lv() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void test::set_has_vip_lv() {
  _has_bits_[0] |= 0x00040000u;
}
inline void test::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void test::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 test::vip_lv() const {
  return vip_lv_;
}
inline void test::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional uint32 month = 20;
inline bool test::has_month() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void test::set_has_month() {
  _has_bits_[0] |= 0x00080000u;
}
inline void test::clear_has_month() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void test::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 test::month() const {
  return month_;
}
inline void test::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// optional uint32 land_day = 21;
inline bool test::has_land_day() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void test::set_has_land_day() {
  _has_bits_[0] |= 0x00100000u;
}
inline void test::clear_has_land_day() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void test::clear_land_day() {
  land_day_ = 0u;
  clear_has_land_day();
}
inline ::google::protobuf::uint32 test::land_day() const {
  return land_day_;
}
inline void test::set_land_day(::google::protobuf::uint32 value) {
  set_has_land_day();
  land_day_ = value;
}

// optional uint32 raid_id = 22;
inline bool test::has_raid_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void test::set_has_raid_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void test::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void test::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 test::raid_id() const {
  return raid_id_;
}
inline void test::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional uint32 raid_type = 23;
inline bool test::has_raid_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void test::set_has_raid_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void test::clear_has_raid_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void test::clear_raid_type() {
  raid_type_ = 0u;
  clear_has_raid_type();
}
inline ::google::protobuf::uint32 test::raid_type() const {
  return raid_type_;
}
inline void test::set_raid_type(::google::protobuf::uint32 value) {
  set_has_raid_type();
  raid_type_ = value;
}

// optional uint32 once = 24;
inline bool test::has_once() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void test::set_has_once() {
  _has_bits_[0] |= 0x00800000u;
}
inline void test::clear_has_once() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void test::clear_once() {
  once_ = 0u;
  clear_has_once();
}
inline ::google::protobuf::uint32 test::once() const {
  return once_;
}
inline void test::set_once(::google::protobuf::uint32 value) {
  set_has_once();
  once_ = value;
}

// optional uint32 sub_attr_id = 25;
inline bool test::has_sub_attr_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void test::set_has_sub_attr_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void test::clear_has_sub_attr_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void test::clear_sub_attr_id() {
  sub_attr_id_ = 0u;
  clear_has_sub_attr_id();
}
inline ::google::protobuf::uint32 test::sub_attr_id() const {
  return sub_attr_id_;
}
inline void test::set_sub_attr_id(::google::protobuf::uint32 value) {
  set_has_sub_attr_id();
  sub_attr_id_ = value;
}

// optional bool clear_add_attr = 26;
inline bool test::has_clear_add_attr() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void test::set_has_clear_add_attr() {
  _has_bits_[0] |= 0x02000000u;
}
inline void test::clear_has_clear_add_attr() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void test::clear_clear_add_attr() {
  clear_add_attr_ = false;
  clear_has_clear_add_attr();
}
inline bool test::clear_add_attr() const {
  return clear_add_attr_;
}
inline void test::set_clear_add_attr(bool value) {
  set_has_clear_add_attr();
  clear_add_attr_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool test::has_svr_head() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void test::set_has_svr_head() {
  _has_bits_[0] |= 0x04000000u;
}
inline void test::clear_has_svr_head() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void test::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& test::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* test::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* test::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void test::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2etest_2eproto__INCLUDED
