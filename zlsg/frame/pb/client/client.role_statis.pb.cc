// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_statis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_statis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* role_statis_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_statis_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_statis_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_statis_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_statis_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_statis_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* day_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  day_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_in_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_in_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_in_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_in_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_reward_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_reward_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_reward_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_reward_list_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SIGN_IN_RESULT_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fstatis_2eproto() {
  protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_statis.proto");
  GOOGLE_CHECK(file != NULL);
  role_statis_req_descriptor_ = file->message_type(0);
  static const int role_statis_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_req, svr_head_),
  };
  role_statis_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_statis_req_descriptor_,
      role_statis_req::default_instance_,
      role_statis_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_statis_req));
  role_statis_info_descriptor_ = file->message_type(1);
  static const int role_statis_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, last_time_),
  };
  role_statis_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_statis_info_descriptor_,
      role_statis_info::default_instance_,
      role_statis_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_statis_info));
  role_statis_rsp_descriptor_ = file->message_type(2);
  static const int role_statis_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_rsp, rsi_),
  };
  role_statis_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_statis_rsp_descriptor_,
      role_statis_rsp::default_instance_,
      role_statis_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_statis_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_statis_rsp));
  day_info_descriptor_ = file->message_type(3);
  static const int day_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, week_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, max_day_),
  };
  day_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      day_info_descriptor_,
      day_info::default_instance_,
      day_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(day_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(day_info));
  sign_list_req_descriptor_ = file->message_type(4);
  static const int sign_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_req, list_tye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_req, svr_head_),
  };
  sign_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_list_req_descriptor_,
      sign_list_req::default_instance_,
      sign_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_list_req));
  sign_list_rsp_descriptor_ = file->message_type(5);
  static const int sign_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_rsp, sign_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_rsp, info_),
  };
  sign_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_list_rsp_descriptor_,
      sign_list_rsp::default_instance_,
      sign_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_list_rsp));
  sign_in_req_descriptor_ = file->message_type(6);
  static const int sign_in_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_req, sign_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_req, svr_head_),
  };
  sign_in_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_in_req_descriptor_,
      sign_in_req::default_instance_,
      sign_in_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_in_req));
  sign_in_rsp_descriptor_ = file->message_type(7);
  static const int sign_in_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_rsp, sign_value_),
  };
  sign_in_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_in_rsp_descriptor_,
      sign_in_rsp::default_instance_,
      sign_in_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_in_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_in_rsp));
  land_reward_req_descriptor_ = file->message_type(8);
  static const int land_reward_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_req, land_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_req, svr_head_),
  };
  land_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_reward_req_descriptor_,
      land_reward_req::default_instance_,
      land_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_reward_req));
  land_reward_rsp_descriptor_ = file->message_type(9);
  static const int land_reward_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_rsp, reward_flag_),
  };
  land_reward_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_reward_rsp_descriptor_,
      land_reward_rsp::default_instance_,
      land_reward_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_reward_rsp));
  land_reward_list_rsp_descriptor_ = file->message_type(10);
  static const int land_reward_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_list_rsp, land_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_list_rsp, reward_flag_),
  };
  land_reward_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_reward_list_rsp_descriptor_,
      land_reward_list_rsp::default_instance_,
      land_reward_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_reward_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_reward_list_rsp));
  SIGN_IN_RESULT_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fstatis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_statis_req_descriptor_, &role_statis_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_statis_info_descriptor_, &role_statis_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_statis_rsp_descriptor_, &role_statis_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    day_info_descriptor_, &day_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_list_req_descriptor_, &sign_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_list_rsp_descriptor_, &sign_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_in_req_descriptor_, &sign_in_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_in_rsp_descriptor_, &sign_in_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_reward_req_descriptor_, &land_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_reward_rsp_descriptor_, &land_reward_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_reward_list_rsp_descriptor_, &land_reward_list_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fstatis_2eproto() {
  delete role_statis_req::default_instance_;
  delete role_statis_req_reflection_;
  delete role_statis_info::default_instance_;
  delete role_statis_info_reflection_;
  delete role_statis_rsp::default_instance_;
  delete role_statis_rsp_reflection_;
  delete day_info::default_instance_;
  delete day_info_reflection_;
  delete sign_list_req::default_instance_;
  delete sign_list_req_reflection_;
  delete sign_list_rsp::default_instance_;
  delete sign_list_rsp_reflection_;
  delete sign_in_req::default_instance_;
  delete sign_in_req_reflection_;
  delete sign_in_rsp::default_instance_;
  delete sign_in_rsp_reflection_;
  delete land_reward_req::default_instance_;
  delete land_reward_req_reflection_;
  delete land_reward_rsp::default_instance_;
  delete land_reward_rsp_reflection_;
  delete land_reward_list_rsp::default_instance_;
  delete land_reward_list_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fstatis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client.role_statis.proto\022\006client\032\021clie"
    "nt.comm.proto\"G\n\017role_statis_req\022\014\n\004type"
    "\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serve"
    "r_head\"U\n\020role_statis_info\022\014\n\004type\030\001 \002(\r"
    "\022\023\n\013update_type\030\002 \002(\r\022\013\n\003val\030\003 \002(\r\022\021\n\tla"
    "st_time\030\004 \002(\r\"8\n\017role_statis_rsp\022%\n\003rsi\030"
    "\001 \003(\0132\030.client.role_statis_info\"W\n\010day_i"
    "nfo\022\013\n\003day\030\001 \002(\r\022\r\n\005month\030\002 \002(\r\022\014\n\004year\030"
    "\003 \002(\r\022\020\n\010week_day\030\004 \002(\r\022\017\n\007max_day\030\005 \002(\r"
    "\"I\n\rsign_list_req\022\020\n\010list_tye\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head\"C\n\rs"
    "ign_list_rsp\022\022\n\nsign_value\030\001 \002(\r\022\036\n\004info"
    "\030\002 \003(\0132\020.client.day_info\"H\n\013sign_in_req\022"
    "\021\n\tsign_date\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"6\n\013sign_in_rsp\022\023\n\013res"
    "ult_type\030\001 \002(\r\022\022\n\nsign_value\030\002 \002(\r\"K\n\017la"
    "nd_reward_req\022\020\n\010land_day\030\001 \002(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\";\n\017land_"
    "reward_rsp\022\023\n\013result_type\030\001 \002(\r\022\023\n\013rewar"
    "d_flag\030\002 \001(\r\"=\n\024land_reward_list_rsp\022\020\n\010"
    "land_day\030\001 \002(\r\022\023\n\013reward_flag\030\002 \002(\r*o\n\020S"
    "IGN_IN_RESULT_E\022\032\n\026SIGN_IN_RESULT_SUCCES"
    "S\020\001\022\037\n\033SIGN_IN_RESULT_ALREADY_SIGN\020\002\022\036\n\032"
    "SIGN_IN_RESULT_CONFIG_ERRO\020\003", 948);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_statis.proto", &protobuf_RegisterTypes);
  role_statis_req::default_instance_ = new role_statis_req();
  role_statis_info::default_instance_ = new role_statis_info();
  role_statis_rsp::default_instance_ = new role_statis_rsp();
  day_info::default_instance_ = new day_info();
  sign_list_req::default_instance_ = new sign_list_req();
  sign_list_rsp::default_instance_ = new sign_list_rsp();
  sign_in_req::default_instance_ = new sign_in_req();
  sign_in_rsp::default_instance_ = new sign_in_rsp();
  land_reward_req::default_instance_ = new land_reward_req();
  land_reward_rsp::default_instance_ = new land_reward_rsp();
  land_reward_list_rsp::default_instance_ = new land_reward_list_rsp();
  role_statis_req::default_instance_->InitAsDefaultInstance();
  role_statis_info::default_instance_->InitAsDefaultInstance();
  role_statis_rsp::default_instance_->InitAsDefaultInstance();
  day_info::default_instance_->InitAsDefaultInstance();
  sign_list_req::default_instance_->InitAsDefaultInstance();
  sign_list_rsp::default_instance_->InitAsDefaultInstance();
  sign_in_req::default_instance_->InitAsDefaultInstance();
  sign_in_rsp::default_instance_->InitAsDefaultInstance();
  land_reward_req::default_instance_->InitAsDefaultInstance();
  land_reward_rsp::default_instance_->InitAsDefaultInstance();
  land_reward_list_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fstatis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fstatis_2eproto {
  StaticDescriptorInitializer_client_2erole_5fstatis_2eproto() {
    protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fstatis_2eproto_;
const ::google::protobuf::EnumDescriptor* SIGN_IN_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIGN_IN_RESULT_E_descriptor_;
}
bool SIGN_IN_RESULT_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int role_statis_req::kTypeFieldNumber;
const int role_statis_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

role_statis_req::role_statis_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_statis_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

role_statis_req::role_statis_req(const role_statis_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_statis_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_statis_req::~role_statis_req() {
  SharedDtor();
}

void role_statis_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void role_statis_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_statis_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_statis_req_descriptor_;
}

const role_statis_req& role_statis_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

role_statis_req* role_statis_req::default_instance_ = NULL;

role_statis_req* role_statis_req::New() const {
  return new role_statis_req;
}

void role_statis_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_statis_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_statis_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->type(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_statis_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->type(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_statis_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_statis_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_statis_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_statis_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_statis_req::MergeFrom(const role_statis_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_statis_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_statis_req::CopyFrom(const role_statis_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_statis_req::IsInitialized() const {

  return true;
}

void role_statis_req::Swap(role_statis_req* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_statis_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_statis_req_descriptor_;
  metadata.reflection = role_statis_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_statis_info::kTypeFieldNumber;
const int role_statis_info::kUpdateTypeFieldNumber;
const int role_statis_info::kValFieldNumber;
const int role_statis_info::kLastTimeFieldNumber;
#endif  // !_MSC_VER

role_statis_info::role_statis_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_statis_info::InitAsDefaultInstance() {
}

role_statis_info::role_statis_info(const role_statis_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_statis_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  update_type_ = 0u;
  val_ = 0u;
  last_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_statis_info::~role_statis_info() {
  SharedDtor();
}

void role_statis_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_statis_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_statis_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_statis_info_descriptor_;
}

const role_statis_info& role_statis_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

role_statis_info* role_statis_info::default_instance_ = NULL;

role_statis_info* role_statis_info::New() const {
  return new role_statis_info;
}

void role_statis_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    update_type_ = 0u;
    val_ = 0u;
    last_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_statis_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_type;
        break;
      }

      // required uint32 update_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_type_)));
          set_has_update_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // required uint32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // required uint32 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_statis_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 update_type = 2;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_type(), output);
  }

  // required uint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val(), output);
  }

  // required uint32 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_statis_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 update_type = 2;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_type(), target);
  }

  // required uint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val(), target);
  }

  // required uint32 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_statis_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 update_type = 2;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_type());
    }

    // required uint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

    // required uint32 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_statis_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_statis_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_statis_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_statis_info::MergeFrom(const role_statis_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_statis_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_statis_info::CopyFrom(const role_statis_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_statis_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void role_statis_info::Swap(role_statis_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(update_type_, other->update_type_);
    std::swap(val_, other->val_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_statis_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_statis_info_descriptor_;
  metadata.reflection = role_statis_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_statis_rsp::kRsiFieldNumber;
#endif  // !_MSC_VER

role_statis_rsp::role_statis_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_statis_rsp::InitAsDefaultInstance() {
}

role_statis_rsp::role_statis_rsp(const role_statis_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_statis_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_statis_rsp::~role_statis_rsp() {
  SharedDtor();
}

void role_statis_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_statis_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_statis_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_statis_rsp_descriptor_;
}

const role_statis_rsp& role_statis_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

role_statis_rsp* role_statis_rsp::default_instance_ = NULL;

role_statis_rsp* role_statis_rsp::New() const {
  return new role_statis_rsp;
}

void role_statis_rsp::Clear() {
  rsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_statis_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.role_statis_info rsi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rsi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_statis_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.role_statis_info rsi = 1;
  for (int i = 0; i < this->rsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_statis_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.role_statis_info rsi = 1;
  for (int i = 0; i < this->rsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_statis_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.role_statis_info rsi = 1;
  total_size += 1 * this->rsi_size();
  for (int i = 0; i < this->rsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_statis_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_statis_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_statis_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_statis_rsp::MergeFrom(const role_statis_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rsi_.MergeFrom(from.rsi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_statis_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_statis_rsp::CopyFrom(const role_statis_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_statis_rsp::IsInitialized() const {

  for (int i = 0; i < rsi_size(); i++) {
    if (!this->rsi(i).IsInitialized()) return false;
  }
  return true;
}

void role_statis_rsp::Swap(role_statis_rsp* other) {
  if (other != this) {
    rsi_.Swap(&other->rsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_statis_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_statis_rsp_descriptor_;
  metadata.reflection = role_statis_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int day_info::kDayFieldNumber;
const int day_info::kMonthFieldNumber;
const int day_info::kYearFieldNumber;
const int day_info::kWeekDayFieldNumber;
const int day_info::kMaxDayFieldNumber;
#endif  // !_MSC_VER

day_info::day_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void day_info::InitAsDefaultInstance() {
}

day_info::day_info(const day_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void day_info::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  month_ = 0u;
  year_ = 0u;
  week_day_ = 0u;
  max_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

day_info::~day_info() {
  SharedDtor();
}

void day_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void day_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* day_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return day_info_descriptor_;
}

const day_info& day_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

day_info* day_info::default_instance_ = NULL;

day_info* day_info::New() const {
  return new day_info;
}

void day_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    month_ = 0u;
    year_ = 0u;
    week_day_ = 0u;
    max_day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool day_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required uint32 month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }

      // required uint32 year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_week_day;
        break;
      }

      // required uint32 week_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_day_)));
          set_has_week_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_day;
        break;
      }

      // required uint32 max_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_day_)));
          set_has_max_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void day_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // required uint32 year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->year(), output);
  }

  // required uint32 week_day = 4;
  if (has_week_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->week_day(), output);
  }

  // required uint32 max_day = 5;
  if (has_max_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* day_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // required uint32 year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->year(), target);
  }

  // required uint32 week_day = 4;
  if (has_week_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->week_day(), target);
  }

  // required uint32 max_day = 5;
  if (has_max_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int day_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // required uint32 week_day = 4;
    if (has_week_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_day());
    }

    // required uint32 max_day = 5;
    if (has_max_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void day_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const day_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const day_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void day_info::MergeFrom(const day_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_week_day()) {
      set_week_day(from.week_day());
    }
    if (from.has_max_day()) {
      set_max_day(from.max_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void day_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void day_info::CopyFrom(const day_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool day_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void day_info::Swap(day_info* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(month_, other->month_);
    std::swap(year_, other->year_);
    std::swap(week_day_, other->week_day_);
    std::swap(max_day_, other->max_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata day_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = day_info_descriptor_;
  metadata.reflection = day_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sign_list_req::kListTyeFieldNumber;
const int sign_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sign_list_req::sign_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sign_list_req::sign_list_req(const sign_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_list_req::SharedCtor() {
  _cached_size_ = 0;
  list_tye_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_list_req::~sign_list_req() {
  SharedDtor();
}

void sign_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sign_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_list_req_descriptor_;
}

const sign_list_req& sign_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

sign_list_req* sign_list_req::default_instance_ = NULL;

sign_list_req* sign_list_req::New() const {
  return new sign_list_req;
}

void sign_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_tye_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 list_tye = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_tye_)));
          set_has_list_tye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 list_tye = 1;
  if (has_list_tye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->list_tye(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 list_tye = 1;
  if (has_list_tye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->list_tye(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 list_tye = 1;
    if (has_list_tye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_tye());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_list_req::MergeFrom(const sign_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_tye()) {
      set_list_tye(from.list_tye());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_list_req::CopyFrom(const sign_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sign_list_req::Swap(sign_list_req* other) {
  if (other != this) {
    std::swap(list_tye_, other->list_tye_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_list_req_descriptor_;
  metadata.reflection = sign_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sign_list_rsp::kSignValueFieldNumber;
const int sign_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

sign_list_rsp::sign_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_list_rsp::InitAsDefaultInstance() {
}

sign_list_rsp::sign_list_rsp(const sign_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  sign_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_list_rsp::~sign_list_rsp() {
  SharedDtor();
}

void sign_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sign_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_list_rsp_descriptor_;
}

const sign_list_rsp& sign_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

sign_list_rsp* sign_list_rsp::default_instance_ = NULL;

sign_list_rsp* sign_list_rsp::New() const {
  return new sign_list_rsp;
}

void sign_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_value_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sign_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_value_)));
          set_has_sign_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.day_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sign_value = 1;
  if (has_sign_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_value(), output);
  }

  // repeated .client.day_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sign_value = 1;
  if (has_sign_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sign_value(), target);
  }

  // repeated .client.day_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sign_value = 1;
    if (has_sign_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_value());
    }

  }
  // repeated .client.day_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_list_rsp::MergeFrom(const sign_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_value()) {
      set_sign_value(from.sign_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_list_rsp::CopyFrom(const sign_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void sign_list_rsp::Swap(sign_list_rsp* other) {
  if (other != this) {
    std::swap(sign_value_, other->sign_value_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_list_rsp_descriptor_;
  metadata.reflection = sign_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sign_in_req::kSignDateFieldNumber;
const int sign_in_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sign_in_req::sign_in_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_in_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sign_in_req::sign_in_req(const sign_in_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_in_req::SharedCtor() {
  _cached_size_ = 0;
  sign_date_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_in_req::~sign_in_req() {
  SharedDtor();
}

void sign_in_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sign_in_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_in_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_in_req_descriptor_;
}

const sign_in_req& sign_in_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

sign_in_req* sign_in_req::default_instance_ = NULL;

sign_in_req* sign_in_req::New() const {
  return new sign_in_req;
}

void sign_in_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_date_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_in_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sign_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_date_)));
          set_has_sign_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_in_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sign_date = 1;
  if (has_sign_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_date(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_in_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sign_date = 1;
  if (has_sign_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sign_date(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_in_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sign_date = 1;
    if (has_sign_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_date());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_in_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_in_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_in_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_in_req::MergeFrom(const sign_in_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_date()) {
      set_sign_date(from.sign_date());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_in_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_in_req::CopyFrom(const sign_in_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_in_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sign_in_req::Swap(sign_in_req* other) {
  if (other != this) {
    std::swap(sign_date_, other->sign_date_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_in_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_in_req_descriptor_;
  metadata.reflection = sign_in_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sign_in_rsp::kResultTypeFieldNumber;
const int sign_in_rsp::kSignValueFieldNumber;
#endif  // !_MSC_VER

sign_in_rsp::sign_in_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_in_rsp::InitAsDefaultInstance() {
}

sign_in_rsp::sign_in_rsp(const sign_in_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_in_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  sign_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_in_rsp::~sign_in_rsp() {
  SharedDtor();
}

void sign_in_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sign_in_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_in_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_in_rsp_descriptor_;
}

const sign_in_rsp& sign_in_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

sign_in_rsp* sign_in_rsp::default_instance_ = NULL;

sign_in_rsp* sign_in_rsp::New() const {
  return new sign_in_rsp;
}

void sign_in_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    sign_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_in_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign_value;
        break;
      }

      // required uint32 sign_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_value_)));
          set_has_sign_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_in_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 sign_value = 2;
  if (has_sign_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_in_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 sign_value = 2;
  if (has_sign_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sign_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_in_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 sign_value = 2;
    if (has_sign_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_in_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_in_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_in_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_in_rsp::MergeFrom(const sign_in_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_sign_value()) {
      set_sign_value(from.sign_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_in_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_in_rsp::CopyFrom(const sign_in_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_in_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sign_in_rsp::Swap(sign_in_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(sign_value_, other->sign_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_in_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_in_rsp_descriptor_;
  metadata.reflection = sign_in_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_reward_req::kLandDayFieldNumber;
const int land_reward_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

land_reward_req::land_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_reward_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

land_reward_req::land_reward_req(const land_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_reward_req::SharedCtor() {
  _cached_size_ = 0;
  land_day_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_reward_req::~land_reward_req() {
  SharedDtor();
}

void land_reward_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void land_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_reward_req_descriptor_;
}

const land_reward_req& land_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

land_reward_req* land_reward_req::default_instance_ = NULL;

land_reward_req* land_reward_req::New() const {
  return new land_reward_req;
}

void land_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_day_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 land_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_day_)));
          set_has_land_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 land_day = 1;
  if (has_land_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->land_day(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 land_day = 1;
  if (has_land_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->land_day(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 land_day = 1;
    if (has_land_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_day());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_reward_req::MergeFrom(const land_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_day()) {
      set_land_day(from.land_day());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_reward_req::CopyFrom(const land_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_reward_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void land_reward_req::Swap(land_reward_req* other) {
  if (other != this) {
    std::swap(land_day_, other->land_day_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_reward_req_descriptor_;
  metadata.reflection = land_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_reward_rsp::kResultTypeFieldNumber;
const int land_reward_rsp::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

land_reward_rsp::land_reward_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_reward_rsp::InitAsDefaultInstance() {
}

land_reward_rsp::land_reward_rsp(const land_reward_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_reward_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_reward_rsp::~land_reward_rsp() {
  SharedDtor();
}

void land_reward_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_reward_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_reward_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_reward_rsp_descriptor_;
}

const land_reward_rsp& land_reward_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

land_reward_rsp* land_reward_rsp::default_instance_ = NULL;

land_reward_rsp* land_reward_rsp::New() const {
  return new land_reward_rsp;
}

void land_reward_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    reward_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_reward_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_flag;
        break;
      }

      // optional uint32 reward_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_reward_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional uint32 reward_flag = 2;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_reward_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional uint32 reward_flag = 2;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_reward_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 reward_flag = 2;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_reward_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_reward_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_reward_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_reward_rsp::MergeFrom(const land_reward_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_reward_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_reward_rsp::CopyFrom(const land_reward_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_reward_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void land_reward_rsp::Swap(land_reward_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_reward_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_reward_rsp_descriptor_;
  metadata.reflection = land_reward_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_reward_list_rsp::kLandDayFieldNumber;
const int land_reward_list_rsp::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

land_reward_list_rsp::land_reward_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_reward_list_rsp::InitAsDefaultInstance() {
}

land_reward_list_rsp::land_reward_list_rsp(const land_reward_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_reward_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  land_day_ = 0u;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_reward_list_rsp::~land_reward_list_rsp() {
  SharedDtor();
}

void land_reward_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_reward_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_reward_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_reward_list_rsp_descriptor_;
}

const land_reward_list_rsp& land_reward_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fstatis_2eproto();
  return *default_instance_;
}

land_reward_list_rsp* land_reward_list_rsp::default_instance_ = NULL;

land_reward_list_rsp* land_reward_list_rsp::New() const {
  return new land_reward_list_rsp;
}

void land_reward_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_day_ = 0u;
    reward_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_reward_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 land_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_day_)));
          set_has_land_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_flag;
        break;
      }

      // required uint32 reward_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_reward_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 land_day = 1;
  if (has_land_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->land_day(), output);
  }

  // required uint32 reward_flag = 2;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_reward_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 land_day = 1;
  if (has_land_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->land_day(), target);
  }

  // required uint32 reward_flag = 2;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_reward_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 land_day = 1;
    if (has_land_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_day());
    }

    // required uint32 reward_flag = 2;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_reward_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_reward_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_reward_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_reward_list_rsp::MergeFrom(const land_reward_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_day()) {
      set_land_day(from.land_day());
    }
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_reward_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_reward_list_rsp::CopyFrom(const land_reward_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_reward_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void land_reward_list_rsp::Swap(land_reward_list_rsp* other) {
  if (other != this) {
    std::swap(land_day_, other->land_day_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_reward_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_reward_list_rsp_descriptor_;
  metadata.reflection = land_reward_list_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
