// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_props.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_props.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* embed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  embed_reflection_ = NULL;
const ::google::protobuf::Descriptor* expend_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  expend_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* props_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  props_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* props_info_POS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* role_props_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_props_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_props_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_props_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_props_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_props_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_props_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_props_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_props_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_props_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* move_props_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  move_props_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_props_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_props_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_props_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_props_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* drop_props_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  drop_props_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* drop_props_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  drop_props_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* drop_props_msg_METHOD_descriptor_ = NULL;
const ::google::protobuf::Descriptor* pick_up_props_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pick_up_props_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pick_up_props_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pick_up_props_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pick_up_props_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* upgrade_equip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_equip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_equip_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_equip_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* upgrade_equip_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* melting_equip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  melting_equip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* melting_equip_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  melting_equip_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* melting_equip_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* cast_equip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cast_equip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cast_equip_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cast_equip_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cast_equip_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* treasure_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasure_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasure_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasure_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* baptize_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baptize_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* baptize_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baptize_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* baptize_save_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baptize_save_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* baptize_save_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baptize_save_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* collect_explore_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  collect_explore_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* collect_explore_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  collect_explore_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* record_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  record_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasure_db_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasure_db_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_db_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_db_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_reflesh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_reflesh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_reflesh_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_reflesh_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_buy_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_buy_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* black_shop_buy_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  black_shop_buy_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_props_show_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_props_show_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* record_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  record_attr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ITEM_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SELL_RESULT_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UPGRADE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BAPTIZE_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BAPTIZE_RESULT_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ITEM_USE_SUB_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ITEM_MEDICINCE_SUB_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* COLLECT_RESULT_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BLACK_SHOP_RESULT_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fprops_2eproto() {
  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_props.proto");
  GOOGLE_CHECK(file != NULL);
  embed_descriptor_ = file->message_type(0);
  static const int embed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(embed, hole_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(embed, gem_id_),
  };
  embed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      embed_descriptor_,
      embed::default_instance_,
      embed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(embed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(embed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(embed));
  expend_item_info_descriptor_ = file->message_type(1);
  static const int expend_item_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expend_item_info, expend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expend_item_info, expend_count_),
  };
  expend_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      expend_item_info_descriptor_,
      expend_item_info::default_instance_,
      expend_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expend_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expend_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(expend_item_info));
  props_info_descriptor_ = file->message_type(2);
  static const int props_info_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, props_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, hole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, authed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, last_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, upgrade_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, expend_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, to_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, is_due_),
  };
  props_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      props_info_descriptor_,
      props_info::default_instance_,
      props_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(props_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(props_info));
  props_info_POS_descriptor_ = props_info_descriptor_->enum_type(0);
  role_props_msg_descriptor_ = file->message_type(3);
  static const int role_props_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_props_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_props_msg, pi_),
  };
  role_props_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_props_msg_descriptor_,
      role_props_msg::default_instance_,
      role_props_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_props_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_props_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_props_msg));
  use_props_req_descriptor_ = file->message_type(4);
  static const int use_props_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, use_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, rds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, svr_head_),
  };
  use_props_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_props_req_descriptor_,
      use_props_req::default_instance_,
      use_props_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_props_req));
  use_props_rsp_descriptor_ = file->message_type(5);
  static const int use_props_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_rsp, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_rsp, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_rsp, rds_),
  };
  use_props_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_props_rsp_descriptor_,
      use_props_rsp::default_instance_,
      use_props_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_props_rsp));
  sell_props_req_descriptor_ = file->message_type(6);
  static const int sell_props_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_req, props_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_req, svr_head_),
  };
  sell_props_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_props_req_descriptor_,
      sell_props_req::default_instance_,
      sell_props_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_props_req));
  sell_props_rsp_descriptor_ = file->message_type(7);
  static const int sell_props_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_rsp, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_rsp, result_type_),
  };
  sell_props_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_props_rsp_descriptor_,
      sell_props_rsp::default_instance_,
      sell_props_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_props_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_props_rsp));
  move_props_req_descriptor_ = file->message_type(8);
  static const int move_props_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(move_props_req, src_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(move_props_req, dst_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(move_props_req, svr_head_),
  };
  move_props_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      move_props_req_descriptor_,
      move_props_req::default_instance_,
      move_props_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(move_props_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(move_props_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(move_props_req));
  equip_props_req_descriptor_ = file->message_type(9);
  static const int equip_props_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_req, src_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_req, dst_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_req, svr_head_),
  };
  equip_props_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_props_req_descriptor_,
      equip_props_req::default_instance_,
      equip_props_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_props_req));
  equip_props_rsp_descriptor_ = file->message_type(10);
  static const int equip_props_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_rsp, clear_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_rsp, add_grid_index_),
  };
  equip_props_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_props_rsp_descriptor_,
      equip_props_rsp::default_instance_,
      equip_props_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_props_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_props_rsp));
  drop_props_info_descriptor_ = file->message_type(11);
  static const int drop_props_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, belong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, protect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, pi_),
  };
  drop_props_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      drop_props_info_descriptor_,
      drop_props_info::default_instance_,
      drop_props_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(drop_props_info));
  drop_props_msg_descriptor_ = file->message_type(12);
  static const int drop_props_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_msg, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_msg, dpi_),
  };
  drop_props_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      drop_props_msg_descriptor_,
      drop_props_msg::default_instance_,
      drop_props_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_props_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(drop_props_msg));
  drop_props_msg_METHOD_descriptor_ = drop_props_msg_descriptor_->enum_type(0);
  pick_up_props_req_descriptor_ = file->message_type(13);
  static const int pick_up_props_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_req, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_req, svr_head_),
  };
  pick_up_props_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pick_up_props_req_descriptor_,
      pick_up_props_req::default_instance_,
      pick_up_props_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pick_up_props_req));
  pick_up_props_rsp_descriptor_ = file->message_type(14);
  static const int pick_up_props_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_rsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_rsp, ret_),
  };
  pick_up_props_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pick_up_props_rsp_descriptor_,
      pick_up_props_rsp::default_instance_,
      pick_up_props_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pick_up_props_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pick_up_props_rsp));
  pick_up_props_rsp_result_descriptor_ = pick_up_props_rsp_descriptor_->enum_type(0);
  upgrade_equip_req_descriptor_ = file->message_type(15);
  static const int upgrade_equip_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_req, target_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_req, svr_head_),
  };
  upgrade_equip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_equip_req_descriptor_,
      upgrade_equip_req::default_instance_,
      upgrade_equip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_equip_req));
  upgrade_equip_rsp_descriptor_ = file->message_type(16);
  static const int upgrade_equip_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_rsp, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_rsp, result_type_),
  };
  upgrade_equip_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_equip_rsp_descriptor_,
      upgrade_equip_rsp::default_instance_,
      upgrade_equip_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_equip_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_equip_rsp));
  upgrade_equip_rsp_result_descriptor_ = upgrade_equip_rsp_descriptor_->enum_type(0);
  melting_equip_req_descriptor_ = file->message_type(17);
  static const int melting_equip_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_req, melting_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_req, svr_head_),
  };
  melting_equip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      melting_equip_req_descriptor_,
      melting_equip_req::default_instance_,
      melting_equip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(melting_equip_req));
  melting_equip_rsp_descriptor_ = file->message_type(18);
  static const int melting_equip_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_rsp, result_type_),
  };
  melting_equip_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      melting_equip_rsp_descriptor_,
      melting_equip_rsp::default_instance_,
      melting_equip_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(melting_equip_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(melting_equip_rsp));
  melting_equip_rsp_result_descriptor_ = melting_equip_rsp_descriptor_->enum_type(0);
  cast_equip_req_descriptor_ = file->message_type(19);
  static const int cast_equip_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_req, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_req, svr_head_),
  };
  cast_equip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cast_equip_req_descriptor_,
      cast_equip_req::default_instance_,
      cast_equip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cast_equip_req));
  cast_equip_rsp_descriptor_ = file->message_type(20);
  static const int cast_equip_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_rsp, pi_),
  };
  cast_equip_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cast_equip_rsp_descriptor_,
      cast_equip_rsp::default_instance_,
      cast_equip_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cast_equip_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cast_equip_rsp));
  cast_equip_rsp_result_descriptor_ = cast_equip_rsp_descriptor_->enum_type(0);
  treasure_req_descriptor_ = file->message_type(21);
  static const int treasure_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_req, treasure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_req, svr_head_),
  };
  treasure_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasure_req_descriptor_,
      treasure_req::default_instance_,
      treasure_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasure_req));
  treasure_rsp_descriptor_ = file->message_type(22);
  static const int treasure_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_rsp, treasure_lost_),
  };
  treasure_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasure_rsp_descriptor_,
      treasure_rsp::default_instance_,
      treasure_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasure_rsp));
  baptize_req_descriptor_ = file->message_type(23);
  static const int baptize_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_req, baptize_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_req, svr_head_),
  };
  baptize_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baptize_req_descriptor_,
      baptize_req::default_instance_,
      baptize_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baptize_req));
  baptize_rsp_descriptor_ = file->message_type(24);
  static const int baptize_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_rsp, grid_index_),
  };
  baptize_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baptize_rsp_descriptor_,
      baptize_rsp::default_instance_,
      baptize_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baptize_rsp));
  baptize_save_req_descriptor_ = file->message_type(25);
  static const int baptize_save_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_req, svr_head_),
  };
  baptize_save_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baptize_save_req_descriptor_,
      baptize_save_req::default_instance_,
      baptize_save_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baptize_save_req));
  baptize_save_rsp_descriptor_ = file->message_type(26);
  static const int baptize_save_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_rsp, grid_index_),
  };
  baptize_save_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baptize_save_rsp_descriptor_,
      baptize_save_rsp::default_instance_,
      baptize_save_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baptize_save_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baptize_save_rsp));
  collect_explore_req_descriptor_ = file->message_type(27);
  static const int collect_explore_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_req, collect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_req, svr_head_),
  };
  collect_explore_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      collect_explore_req_descriptor_,
      collect_explore_req::default_instance_,
      collect_explore_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(collect_explore_req));
  collect_explore_rsp_descriptor_ = file->message_type(28);
  static const int collect_explore_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_rsp, result_type_),
  };
  collect_explore_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      collect_explore_rsp_descriptor_,
      collect_explore_rsp::default_instance_,
      collect_explore_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(collect_explore_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(collect_explore_rsp));
  record_item_info_descriptor_ = file->message_type(29);
  static const int record_item_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_item_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_item_info, item_count_),
  };
  record_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      record_item_info_descriptor_,
      record_item_info::default_instance_,
      record_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(record_item_info));
  treasure_db_info_descriptor_ = file->message_type(30);
  static const int treasure_db_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_db_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_db_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_db_info, shop_id_),
  };
  treasure_db_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasure_db_info_descriptor_,
      treasure_db_info::default_instance_,
      treasure_db_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_db_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasure_db_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasure_db_info));
  black_shop_db_info_descriptor_ = file->message_type(31);
  static const int black_shop_db_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, item_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, is_buy_),
  };
  black_shop_db_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_db_info_descriptor_,
      black_shop_db_info::default_instance_,
      black_shop_db_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_db_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_db_info));
  shop_info_descriptor_ = file->message_type(32);
  static const int shop_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, key_id_),
  };
  shop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_info_descriptor_,
      shop_info::default_instance_,
      shop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_info));
  black_shop_req_descriptor_ = file->message_type(33);
  static const int black_shop_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_req, svr_head_),
  };
  black_shop_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_req_descriptor_,
      black_shop_req::default_instance_,
      black_shop_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_req));
  black_shop_rsp_descriptor_ = file->message_type(34);
  static const int black_shop_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, reflesh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, info_),
  };
  black_shop_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_rsp_descriptor_,
      black_shop_rsp::default_instance_,
      black_shop_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_rsp));
  black_shop_reflesh_req_descriptor_ = file->message_type(35);
  static const int black_shop_reflesh_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_req, svr_head_),
  };
  black_shop_reflesh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_reflesh_req_descriptor_,
      black_shop_reflesh_req::default_instance_,
      black_shop_reflesh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_reflesh_req));
  black_shop_reflesh_rsp_descriptor_ = file->message_type(36);
  static const int black_shop_reflesh_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, reflesh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, info_),
  };
  black_shop_reflesh_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_reflesh_rsp_descriptor_,
      black_shop_reflesh_rsp::default_instance_,
      black_shop_reflesh_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_reflesh_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_reflesh_rsp));
  black_shop_buy_req_descriptor_ = file->message_type(37);
  static const int black_shop_buy_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_req, item_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_req, svr_head_),
  };
  black_shop_buy_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_buy_req_descriptor_,
      black_shop_buy_req::default_instance_,
      black_shop_buy_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_buy_req));
  black_shop_buy_rsp_descriptor_ = file->message_type(38);
  static const int black_shop_buy_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_rsp, item_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_rsp, info_),
  };
  black_shop_buy_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      black_shop_buy_rsp_descriptor_,
      black_shop_buy_rsp::default_instance_,
      black_shop_buy_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(black_shop_buy_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(black_shop_buy_rsp));
  use_props_show_rsp_descriptor_ = file->message_type(39);
  static const int use_props_show_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_show_rsp, rsp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_show_rsp, show_info_),
  };
  use_props_show_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_props_show_rsp_descriptor_,
      use_props_show_rsp::default_instance_,
      use_props_show_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_show_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_props_show_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_props_show_rsp));
  record_attr_descriptor_ = file->message_type(40);
  static const int record_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_attr, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_attr, new_value_),
  };
  record_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      record_attr_descriptor_,
      record_attr::default_instance_,
      record_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(record_attr));
  ITEM_OPERATE_TYPE_descriptor_ = file->enum_type(0);
  SELL_RESULT_E_descriptor_ = file->enum_type(1);
  UPGRADE_TYPE_descriptor_ = file->enum_type(2);
  BAPTIZE_TYPE_E_descriptor_ = file->enum_type(3);
  BAPTIZE_RESULT_TYPE_E_descriptor_ = file->enum_type(4);
  ITEM_USE_SUB_TYPE_E_descriptor_ = file->enum_type(5);
  ITEM_MEDICINCE_SUB_TYPE_E_descriptor_ = file->enum_type(6);
  COLLECT_RESULT_TYPE_E_descriptor_ = file->enum_type(7);
  BLACK_SHOP_RESULT_TYPE_E_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fprops_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    embed_descriptor_, &embed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    expend_item_info_descriptor_, &expend_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    props_info_descriptor_, &props_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_props_msg_descriptor_, &role_props_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_props_req_descriptor_, &use_props_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_props_rsp_descriptor_, &use_props_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_props_req_descriptor_, &sell_props_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_props_rsp_descriptor_, &sell_props_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    move_props_req_descriptor_, &move_props_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_props_req_descriptor_, &equip_props_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_props_rsp_descriptor_, &equip_props_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    drop_props_info_descriptor_, &drop_props_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    drop_props_msg_descriptor_, &drop_props_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pick_up_props_req_descriptor_, &pick_up_props_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pick_up_props_rsp_descriptor_, &pick_up_props_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_equip_req_descriptor_, &upgrade_equip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_equip_rsp_descriptor_, &upgrade_equip_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    melting_equip_req_descriptor_, &melting_equip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    melting_equip_rsp_descriptor_, &melting_equip_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cast_equip_req_descriptor_, &cast_equip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cast_equip_rsp_descriptor_, &cast_equip_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasure_req_descriptor_, &treasure_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasure_rsp_descriptor_, &treasure_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baptize_req_descriptor_, &baptize_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baptize_rsp_descriptor_, &baptize_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baptize_save_req_descriptor_, &baptize_save_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baptize_save_rsp_descriptor_, &baptize_save_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    collect_explore_req_descriptor_, &collect_explore_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    collect_explore_rsp_descriptor_, &collect_explore_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    record_item_info_descriptor_, &record_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasure_db_info_descriptor_, &treasure_db_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_db_info_descriptor_, &black_shop_db_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_info_descriptor_, &shop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_req_descriptor_, &black_shop_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_rsp_descriptor_, &black_shop_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_reflesh_req_descriptor_, &black_shop_reflesh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_reflesh_rsp_descriptor_, &black_shop_reflesh_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_buy_req_descriptor_, &black_shop_buy_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    black_shop_buy_rsp_descriptor_, &black_shop_buy_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_props_show_rsp_descriptor_, &use_props_show_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    record_attr_descriptor_, &record_attr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fprops_2eproto() {
  delete embed::default_instance_;
  delete embed_reflection_;
  delete expend_item_info::default_instance_;
  delete expend_item_info_reflection_;
  delete props_info::default_instance_;
  delete props_info_reflection_;
  delete role_props_msg::default_instance_;
  delete role_props_msg_reflection_;
  delete use_props_req::default_instance_;
  delete use_props_req_reflection_;
  delete use_props_rsp::default_instance_;
  delete use_props_rsp_reflection_;
  delete sell_props_req::default_instance_;
  delete sell_props_req_reflection_;
  delete sell_props_rsp::default_instance_;
  delete sell_props_rsp_reflection_;
  delete move_props_req::default_instance_;
  delete move_props_req_reflection_;
  delete equip_props_req::default_instance_;
  delete equip_props_req_reflection_;
  delete equip_props_rsp::default_instance_;
  delete equip_props_rsp_reflection_;
  delete drop_props_info::default_instance_;
  delete drop_props_info_reflection_;
  delete drop_props_msg::default_instance_;
  delete drop_props_msg_reflection_;
  delete pick_up_props_req::default_instance_;
  delete pick_up_props_req_reflection_;
  delete pick_up_props_rsp::default_instance_;
  delete pick_up_props_rsp_reflection_;
  delete upgrade_equip_req::default_instance_;
  delete upgrade_equip_req_reflection_;
  delete upgrade_equip_rsp::default_instance_;
  delete upgrade_equip_rsp_reflection_;
  delete melting_equip_req::default_instance_;
  delete melting_equip_req_reflection_;
  delete melting_equip_rsp::default_instance_;
  delete melting_equip_rsp_reflection_;
  delete cast_equip_req::default_instance_;
  delete cast_equip_req_reflection_;
  delete cast_equip_rsp::default_instance_;
  delete cast_equip_rsp_reflection_;
  delete treasure_req::default_instance_;
  delete treasure_req_reflection_;
  delete treasure_rsp::default_instance_;
  delete treasure_rsp_reflection_;
  delete baptize_req::default_instance_;
  delete baptize_req_reflection_;
  delete baptize_rsp::default_instance_;
  delete baptize_rsp_reflection_;
  delete baptize_save_req::default_instance_;
  delete baptize_save_req_reflection_;
  delete baptize_save_rsp::default_instance_;
  delete baptize_save_rsp_reflection_;
  delete collect_explore_req::default_instance_;
  delete collect_explore_req_reflection_;
  delete collect_explore_rsp::default_instance_;
  delete collect_explore_rsp_reflection_;
  delete record_item_info::default_instance_;
  delete record_item_info_reflection_;
  delete treasure_db_info::default_instance_;
  delete treasure_db_info_reflection_;
  delete black_shop_db_info::default_instance_;
  delete black_shop_db_info_reflection_;
  delete shop_info::default_instance_;
  delete shop_info_reflection_;
  delete black_shop_req::default_instance_;
  delete black_shop_req_reflection_;
  delete black_shop_rsp::default_instance_;
  delete black_shop_rsp_reflection_;
  delete black_shop_reflesh_req::default_instance_;
  delete black_shop_reflesh_req_reflection_;
  delete black_shop_reflesh_rsp::default_instance_;
  delete black_shop_reflesh_rsp_reflection_;
  delete black_shop_buy_req::default_instance_;
  delete black_shop_buy_req_reflection_;
  delete black_shop_buy_rsp::default_instance_;
  delete black_shop_buy_rsp_reflection_;
  delete use_props_show_rsp::default_instance_;
  delete use_props_show_rsp_reflection_;
  delete record_attr::default_instance_;
  delete record_attr_reflection_;
}

void protobuf_AddDesc_client_2erole_5fprops_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.role_props.proto\022\006client\032\021clien"
    "t.comm.proto\"(\n\005embed\022\017\n\007hole_id\030\001 \002(\r\022\016"
    "\n\006gem_id\030\002 \002(\r\";\n\020expend_item_info\022\021\n\tex"
    "pend_id\030\001 \001(\r\022\024\n\014expend_count\030\002 \001(\r\"\345\004\n\n"
    "props_info\022\013\n\003pos\030\001 \002(\r\022\022\n\ngrid_index\030\002 "
    "\002(\r\022\020\n\010props_id\030\003 \002(\r\022\020\n\005count\030\004 \002(\r:\0011\022"
    "\022\n\007quality\030\005 \002(\r:\0011\022\017\n\004bind\030\006 \002(\r:\0010\022\037\n\004"
    "attr\030\007 \003(\0132\021.client.attribute\022\032\n\003gem\030\010 \003"
    "(\0132\r.client.embed\022\017\n\004hole\030\t \001(\r:\0010\022\021\n\006au"
    "thed\030\n \001(\r:\0010\022\020\n\005level\030\013 \001(\r:\0010\022\025\n\ncreat"
    "or_id\030\014 \001(\r:\0010\022\026\n\013active_time\030\r \001(\r:\0010\022\023"
    "\n\010end_date\030\016 \001(\r:\0010\022$\n\tlast_attr\030\017 \003(\0132\021"
    ".client.attribute\022\'\n\014upgrade_attr\030\020 \003(\0132"
    "\021.client.attribute\022\024\n\014expend_money\030\021 \001(\r"
    "\022&\n\004info\030\022 \003(\0132\030.client.expend_item_info"
    "\022\024\n\tsystem_id\030\023 \001(\r:\0010\022\017\n\007to_type\030\024 \001(\r\022"
    "\017\n\007timeout\030\025 \001(\r\022\025\n\006is_due\030\026 \001(\010:\005false\""
    "Z\n\003POS\022\010\n\004SHOW\020\000\022\010\n\004PACK\020\001\022\t\n\005DEPOT\020\002\022\010\n"
    "\004ROLE\020\003\022\013\n\007EXPLORE\020\004\022\010\n\004TASK\020\005\022\t\n\005SCENE\020"
    "\006\022\010\n\004TEMP\020\007\"O\n\016role_props_msg\022\035\n\002rd\030\001 \002("
    "\0132\021.client.role_data\022\036\n\002pi\030\002 \003(\0132\022.clien"
    "t.props_info\"|\n\ruse_props_req\022\022\n\ngrid_in"
    "dex\030\001 \002(\r\022\017\n\007use_num\030\002 \002(\r\022\036\n\003rds\030\003 \001(\0132"
    "\021.client.role_data\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"p\n\ruse_props_rsp\022+\n\010o"
    "pt_type\030\001 \002(\0162\031.client.ITEM_OPERATE_TYPE"
    "\022\022\n\ngrid_index\030\002 \001(\r\022\036\n\003rds\030\003 \001(\0132\021.clie"
    "nt.role_data\"a\n\016sell_props_req\022\022\n\ngrid_i"
    "ndex\030\001 \002(\r\022\023\n\013props_count\030\002 \002(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"9\n\016sell_"
    "props_rsp\022\022\n\ngrid_index\030\001 \002(\r\022\023\n\013result_"
    "type\030\002 \002(\r\"h\n\016move_props_req\022\026\n\016src_grid"
    "_index\030\001 \002(\r\022\026\n\016dst_grid_index\030\002 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"i\n\017"
    "equip_props_req\022\026\n\016src_grid_index\030\001 \002(\r\022"
    "\026\n\016dst_grid_index\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"C\n\017equip_props_r"
    "sp\022\030\n\020clear_grid_index\030\001 \002(\r\022\026\n\016add_grid"
    "_index\030\002 \001(\r\"\231\001\n\017drop_props_info\022\016\n\006belo"
    "ng\030\001 \003(\r\022\r\n\005index\030\002 \002(\r\022\t\n\001x\030\003 \002(\r\022\t\n\001y\030"
    "\004 \002(\r\022\t\n\001z\030\005 \002(\r\022\020\n\010end_time\030\006 \002(\r\022\024\n\014pr"
    "otect_time\030\007 \002(\r\022\036\n\002pi\030\010 \002(\0132\022.client.pr"
    "ops_info\"|\n\016drop_props_msg\022(\n\001m\030\001 \002(\0162\035."
    "client.drop_props_msg.METHOD\022$\n\003dpi\030\002 \003("
    "\0132\027.client.drop_props_info\"\032\n\006METHOD\022\007\n\003"
    "ADD\020\001\022\007\n\003DEL\020\002\"J\n\021pick_up_props_req\022\r\n\005i"
    "ndex\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"\223\001\n\021pick_up_props_rsp\022\r\n\005inde"
    "x\030\001 \003(\r\022-\n\003ret\030\002 \002(\0162 .client.pick_up_pr"
    "ops_rsp.result\"@\n\006result\022\013\n\007success\020\001\022\014\n"
    "\010not_your\020\002\022\021\n\rbackpack_full\020\003\022\010\n\004null\020\004"
    "\"e\n\021upgrade_equip_req\022\022\n\ngrid_index\030\001 \002("
    "\r\022\024\n\014target_level\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"\201\001\n\021upgrade_equi"
    "p_rsp\022\022\n\ngrid_index\030\001 \002(\r\0225\n\013result_type"
    "\030\002 \002(\0162 .client.upgrade_equip_rsp.result"
    "\"!\n\006result\022\013\n\007success\020\001\022\n\n\006failed\020\002\"e\n\021m"
    "elting_equip_req\022\024\n\014melting_type\030\001 \002(\r\022\022"
    "\n\ngrid_index\030\002 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"m\n\021melting_equip_rsp\022"
    "5\n\013result_type\030\001 \002(\0162 .client.melting_eq"
    "uip_rsp.result\"!\n\006result\022\013\n\007success\020\001\022\n\n"
    "\006failed\020\002\"J\n\016cast_equip_req\022\020\n\010equip_id\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"\207\001\n\016cast_equip_rsp\0222\n\013result_type\030"
    "\001 \002(\0162\035.client.cast_equip_rsp.result\022\036\n\002"
    "pi\030\002 \002(\0132\022.client.props_info\"!\n\006result\022\013"
    "\n\007success\020\001\022\n\n\006failed\020\002\"N\n\014treasure_req\022"
    "\026\n\016treasure_count\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\":\n\014treasure_rsp\022"
    "\023\n\013result_type\030\001 \002(\r\022\025\n\rtreasure_lost\030\002 "
    "\003(\r\"_\n\013baptize_req\022\024\n\014baptize_type\030\001 \002(\r"
    "\022\022\n\ngrid_index\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"6\n\013baptize_rsp\022\023\n\013r"
    "esult_type\030\001 \002(\r\022\022\n\ngrid_index\030\002 \002(\r\"N\n\020"
    "baptize_save_req\022\022\n\ngrid_index\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\";\n\020"
    "baptize_save_rsp\022\023\n\013result_type\030\001 \002(\r\022\022\n"
    "\ngrid_index\030\002 \002(\r\"S\n\023collect_explore_req"
    "\022\024\n\014collect_type\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"*\n\023collect_explor"
    "e_rsp\022\023\n\013result_type\030\001 \002(\r\"7\n\020record_ite"
    "m_info\022\017\n\007item_id\030\001 \001(\r\022\022\n\nitem_count\030\002 "
    "\001(\r\"N\n\020treasure_db_info\022\022\n\007item_id\030\001 \001(\r"
    ":\0010\022\025\n\nitem_count\030\002 \001(\r:\0010\022\017\n\007shop_id\030\003 "
    "\001(\r\"s\n\022black_shop_db_info\022\021\n\titem_slot\030\001"
    " \001(\r\022\017\n\007item_id\030\002 \001(\r\022\022\n\nitem_count\030\003 \001("
    "\r\022\016\n\006key_id\030\004 \001(\r\022\025\n\006is_buy\030\005 \001(\010:\005false"
    "\"U\n\tshop_info\022\017\n\007item_id\030\001 \001(\r\022\022\n\nitem_c"
    "ount\030\002 \001(\r\022\023\n\013probability\030\003 \001(\r\022\016\n\006key_i"
    "d\030\004 \001(\r\"J\n\016black_shop_req\022\020\n\010unixtime\030\001 "
    "\002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_h"
    "ead\"t\n\016black_shop_rsp\022\023\n\013result_type\030\001 \002"
    "(\r\022\025\n\rreflesh_count\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\022"
    "(\n\004info\030\004 \003(\0132\032.client.black_shop_db_inf"
    "o\"R\n\026black_shop_reflesh_req\022\020\n\010unixtime\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"|\n\026black_shop_reflesh_rsp\022\023\n\013resul"
    "t_type\030\001 \002(\r\022\025\n\rreflesh_count\030\002 \001(\r\022\014\n\004t"
    "ime\030\003 \001(\r\022(\n\004info\030\004 \003(\0132\032.client.black_s"
    "hop_db_info\"O\n\022black_shop_buy_req\022\021\n\tite"
    "m_slot\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"f\n\022black_shop_buy_rsp\022\021\n\tit"
    "em_slot\030\001 \002(\r\022\023\n\013result_type\030\002 \002(\r\022(\n\004in"
    "fo\030\003 \003(\0132\032.client.black_shop_db_info\"M\n\022"
    "use_props_show_rsp\022\020\n\010rsp_type\030\001 \002(\r\022%\n\t"
    "show_info\030\002 \003(\0132\022.client.props_info\"3\n\013r"
    "ecord_attr\022\021\n\told_value\030\001 \001(\r\022\021\n\tnew_val"
    "ue\030\002 \001(\r*\326\002\n\021ITEM_OPERATE_TYPE\022\035\n\031ITEM_O"
    "PERATE_TYPE_SUCCESS\020\000\022!\n\035ITEM_OPERATE_TY"
    "PE_CONFIG_ERRO\020\001\022!\n\035ITEM_OPERATE_TYPE_OB"
    "JECT_NULL\020\002\022 \n\034ITEM_OPERATE_TYPE_HP_HAS_"
    "MAX\020\003\022&\n\"ITEM_OPERATE_TYPE_SPACE_NOT_ENO"
    "UGH\020\004\022\'\n#ITEM_OPERATE_TYPE_PET_LEVEL_HAS"
    "_MAX\020\005\022\037\n\033ITEM_OPERATE_TYPE_USE_LIMIT\020\006\022"
    "%\n!ITEM_OPERATE_TYPE_ITEM_NOT_ENOUGH\020\007\022!"
    "\n\035ITEM_OPERATE_TYPE_ITEM_IS_DUE\020\010*B\n\rSEL"
    "L_RESULT_E\022\027\n\023SELL_RESULT_SUCCESS\020\000\022\030\n\024S"
    "ELL_RESULT_NOT_SELL\020\001*0\n\014UPGRADE_TYPE\022\020\n"
    "\014UT_STRENGTHE\020\000\022\016\n\nUT_UPGRADE\020\001*T\n\016BAPTI"
    "ZE_TYPE_E\022\026\n\022BAPTIZE_TYPE_MONEY\020\001\022\024\n\020BAP"
    "TIZE_TYPE_ONE\020\002\022\024\n\020BAPTIZE_TYPE_TWO\020\003*V\n"
    "\025BAPTIZE_RESULT_TYPE_E\022\036\n\032BAPTIZE_RESULT"
    "_TYPE_SUCESS\020\000\022\035\n\031BAPTIZE_RESULT_TYPE_FA"
    "ILD\020\001*\231\002\n\023ITEM_USE_SUB_TYPE_E\022\032\n\026SUB_TYP"
    "E_ACQUIRE_SKILL\020\000\022\031\n\025SUB_TYPE_ACQUIRE_BU"
    "FF\020\001\022\031\n\025SUB_TYPE_ACQUIRE_TASK\020\002\022\026\n\022SUB_T"
    "YPE_OPEN_GIFT\020\003\022\032\n\026SUB_TYPE_MOUNT_UPGRAT"
    "E\020\022\022\030\n\024SUB_TYPE_PET_UPGRATE\020\023\022\026\n\022SUB_TYP"
    "E_DROP_PACK\020\032\022\030\n\024SUB_TYPE_BOW_UPGRATE\020\033\022"
    "\034\n\030SUB_TYPE_BOW_SKILL_STUDY\020\034\022\022\n\016SUB_TYP"
    "E_MONTH\020\035*\372\003\n\031ITEM_MEDICINCE_SUB_TYPE_E\022"
    "\032\n\026SUB_TYPE_CHANGE_HP_PRE\020\000\022\027\n\023SUB_TYPE_"
    "CHANGE_EXP\020\001\022\030\n\024SUB_TYPE_CHANGE_TAEL\020\002\022\034"
    "\n\030SUB_TYPE_CHANGE_STRATEGY\020\003\022\031\n\025SUB_TYPE"
    "_CHANGE_LEVEL\020\004\022\034\n\030SUB_TYPE_CHANGE_PK_VA"
    "LUE\020\005\022\032\n\026SUB_TYPE_CHANGE_RELIVE\020\006\022\037\n\033SUB"
    "_TYPE_CHANGE_MOUNT_BLESS\020\007\022\035\n\031SUB_TYPE_C"
    "HANGE_BOW_BLESS\020\010\022\033\n\027SUB_TYPE_CHANGE_EXP"
    "_PRE\020\t\022$\n SUB_TYPE_CHANGE_SOWAR_WEAPON_E"
    "XP\020\n\022!\n\035SUB_TYPE_CHANGE_MILITAR_VALUE\020\013\022"
    "\037\n\033SUB_TYPE_CHANGE_SHAP_CHANGE\020\014\022\036\n\032SUB_"
    "TYPE_CHANGE_CLEAN_SHAP\020\r\022\031\n\025SUB_TYPE_CHA"
    "NGE_POWER\020\016\022\031\n\025SUB_TYPE_CHANGE_INGOT\020\017*b"
    "\n\025COLLECT_RESULT_TYPE_E\022\037\n\033COLLECT_RESUL"
    "T_TYPE_SUCCESS\020\001\022(\n$COLLECT_RESULT_TYPE_"
    "NOT_ENOUGH_SPACE\020\002*\314\002\n\030BLACK_SHOP_RESULT"
    "_TYPE_E\022*\n&BLACK_SHOP_RESULT_TYPE_REFLES"
    "H_SUCCESS\020\001\022\"\n\036BLACK_SHOP_RESULT_TYPE_SU"
    "CCESS\020\002\022&\n\"BLACK_SHOP_RESULT_TYPE_CONFIG"
    "_ERRO\020\003\022*\n&BLACK_SHOP_RESULT_TYPE_ITEM_N"
    "OT_ENOUGH\020\004\022-\n)BLACK_SHOP_RESULT_TYPE_ME"
    "LTING_NOT_ENOUGH\020\005\0223\n/BLACK_SHOP_RESULT_"
    "TYPE_REFLESH_COUNT_NOT_ENGOUH\020\006\022(\n$BLACK"
    "_SHOP_RESULT_TYPE_REFLESH_FAILD\020\007", 6193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_props.proto", &protobuf_RegisterTypes);
  embed::default_instance_ = new embed();
  expend_item_info::default_instance_ = new expend_item_info();
  props_info::default_instance_ = new props_info();
  role_props_msg::default_instance_ = new role_props_msg();
  use_props_req::default_instance_ = new use_props_req();
  use_props_rsp::default_instance_ = new use_props_rsp();
  sell_props_req::default_instance_ = new sell_props_req();
  sell_props_rsp::default_instance_ = new sell_props_rsp();
  move_props_req::default_instance_ = new move_props_req();
  equip_props_req::default_instance_ = new equip_props_req();
  equip_props_rsp::default_instance_ = new equip_props_rsp();
  drop_props_info::default_instance_ = new drop_props_info();
  drop_props_msg::default_instance_ = new drop_props_msg();
  pick_up_props_req::default_instance_ = new pick_up_props_req();
  pick_up_props_rsp::default_instance_ = new pick_up_props_rsp();
  upgrade_equip_req::default_instance_ = new upgrade_equip_req();
  upgrade_equip_rsp::default_instance_ = new upgrade_equip_rsp();
  melting_equip_req::default_instance_ = new melting_equip_req();
  melting_equip_rsp::default_instance_ = new melting_equip_rsp();
  cast_equip_req::default_instance_ = new cast_equip_req();
  cast_equip_rsp::default_instance_ = new cast_equip_rsp();
  treasure_req::default_instance_ = new treasure_req();
  treasure_rsp::default_instance_ = new treasure_rsp();
  baptize_req::default_instance_ = new baptize_req();
  baptize_rsp::default_instance_ = new baptize_rsp();
  baptize_save_req::default_instance_ = new baptize_save_req();
  baptize_save_rsp::default_instance_ = new baptize_save_rsp();
  collect_explore_req::default_instance_ = new collect_explore_req();
  collect_explore_rsp::default_instance_ = new collect_explore_rsp();
  record_item_info::default_instance_ = new record_item_info();
  treasure_db_info::default_instance_ = new treasure_db_info();
  black_shop_db_info::default_instance_ = new black_shop_db_info();
  shop_info::default_instance_ = new shop_info();
  black_shop_req::default_instance_ = new black_shop_req();
  black_shop_rsp::default_instance_ = new black_shop_rsp();
  black_shop_reflesh_req::default_instance_ = new black_shop_reflesh_req();
  black_shop_reflesh_rsp::default_instance_ = new black_shop_reflesh_rsp();
  black_shop_buy_req::default_instance_ = new black_shop_buy_req();
  black_shop_buy_rsp::default_instance_ = new black_shop_buy_rsp();
  use_props_show_rsp::default_instance_ = new use_props_show_rsp();
  record_attr::default_instance_ = new record_attr();
  embed::default_instance_->InitAsDefaultInstance();
  expend_item_info::default_instance_->InitAsDefaultInstance();
  props_info::default_instance_->InitAsDefaultInstance();
  role_props_msg::default_instance_->InitAsDefaultInstance();
  use_props_req::default_instance_->InitAsDefaultInstance();
  use_props_rsp::default_instance_->InitAsDefaultInstance();
  sell_props_req::default_instance_->InitAsDefaultInstance();
  sell_props_rsp::default_instance_->InitAsDefaultInstance();
  move_props_req::default_instance_->InitAsDefaultInstance();
  equip_props_req::default_instance_->InitAsDefaultInstance();
  equip_props_rsp::default_instance_->InitAsDefaultInstance();
  drop_props_info::default_instance_->InitAsDefaultInstance();
  drop_props_msg::default_instance_->InitAsDefaultInstance();
  pick_up_props_req::default_instance_->InitAsDefaultInstance();
  pick_up_props_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_equip_req::default_instance_->InitAsDefaultInstance();
  upgrade_equip_rsp::default_instance_->InitAsDefaultInstance();
  melting_equip_req::default_instance_->InitAsDefaultInstance();
  melting_equip_rsp::default_instance_->InitAsDefaultInstance();
  cast_equip_req::default_instance_->InitAsDefaultInstance();
  cast_equip_rsp::default_instance_->InitAsDefaultInstance();
  treasure_req::default_instance_->InitAsDefaultInstance();
  treasure_rsp::default_instance_->InitAsDefaultInstance();
  baptize_req::default_instance_->InitAsDefaultInstance();
  baptize_rsp::default_instance_->InitAsDefaultInstance();
  baptize_save_req::default_instance_->InitAsDefaultInstance();
  baptize_save_rsp::default_instance_->InitAsDefaultInstance();
  collect_explore_req::default_instance_->InitAsDefaultInstance();
  collect_explore_rsp::default_instance_->InitAsDefaultInstance();
  record_item_info::default_instance_->InitAsDefaultInstance();
  treasure_db_info::default_instance_->InitAsDefaultInstance();
  black_shop_db_info::default_instance_->InitAsDefaultInstance();
  shop_info::default_instance_->InitAsDefaultInstance();
  black_shop_req::default_instance_->InitAsDefaultInstance();
  black_shop_rsp::default_instance_->InitAsDefaultInstance();
  black_shop_reflesh_req::default_instance_->InitAsDefaultInstance();
  black_shop_reflesh_rsp::default_instance_->InitAsDefaultInstance();
  black_shop_buy_req::default_instance_->InitAsDefaultInstance();
  black_shop_buy_rsp::default_instance_->InitAsDefaultInstance();
  use_props_show_rsp::default_instance_->InitAsDefaultInstance();
  record_attr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fprops_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fprops_2eproto {
  StaticDescriptorInitializer_client_2erole_5fprops_2eproto() {
    protobuf_AddDesc_client_2erole_5fprops_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fprops_2eproto_;
const ::google::protobuf::EnumDescriptor* ITEM_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEM_OPERATE_TYPE_descriptor_;
}
bool ITEM_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SELL_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SELL_RESULT_E_descriptor_;
}
bool SELL_RESULT_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UPGRADE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPGRADE_TYPE_descriptor_;
}
bool UPGRADE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BAPTIZE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BAPTIZE_TYPE_E_descriptor_;
}
bool BAPTIZE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BAPTIZE_RESULT_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BAPTIZE_RESULT_TYPE_E_descriptor_;
}
bool BAPTIZE_RESULT_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ITEM_USE_SUB_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEM_USE_SUB_TYPE_E_descriptor_;
}
bool ITEM_USE_SUB_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 18:
    case 19:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ITEM_MEDICINCE_SUB_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEM_MEDICINCE_SUB_TYPE_E_descriptor_;
}
bool ITEM_MEDICINCE_SUB_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* COLLECT_RESULT_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLLECT_RESULT_TYPE_E_descriptor_;
}
bool COLLECT_RESULT_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BLACK_SHOP_RESULT_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLACK_SHOP_RESULT_TYPE_E_descriptor_;
}
bool BLACK_SHOP_RESULT_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int embed::kHoleIdFieldNumber;
const int embed::kGemIdFieldNumber;
#endif  // !_MSC_VER

embed::embed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void embed::InitAsDefaultInstance() {
}

embed::embed(const embed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void embed::SharedCtor() {
  _cached_size_ = 0;
  hole_id_ = 0u;
  gem_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

embed::~embed() {
  SharedDtor();
}

void embed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void embed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* embed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return embed_descriptor_;
}

const embed& embed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

embed* embed::default_instance_ = NULL;

embed* embed::New() const {
  return new embed;
}

void embed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_id_ = 0u;
    gem_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool embed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hole_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_id_)));
          set_has_hole_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_id;
        break;
      }

      // required uint32 gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void embed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hole_id = 1;
  if (has_hole_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_id(), output);
  }

  // required uint32 gem_id = 2;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gem_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* embed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hole_id = 1;
  if (has_hole_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_id(), target);
  }

  // required uint32 gem_id = 2;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gem_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int embed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hole_id = 1;
    if (has_hole_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_id());
    }

    // required uint32 gem_id = 2;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void embed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const embed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const embed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void embed::MergeFrom(const embed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_id()) {
      set_hole_id(from.hole_id());
    }
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void embed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void embed::CopyFrom(const embed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool embed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void embed::Swap(embed* other) {
  if (other != this) {
    std::swap(hole_id_, other->hole_id_);
    std::swap(gem_id_, other->gem_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata embed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = embed_descriptor_;
  metadata.reflection = embed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int expend_item_info::kExpendIdFieldNumber;
const int expend_item_info::kExpendCountFieldNumber;
#endif  // !_MSC_VER

expend_item_info::expend_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void expend_item_info::InitAsDefaultInstance() {
}

expend_item_info::expend_item_info(const expend_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void expend_item_info::SharedCtor() {
  _cached_size_ = 0;
  expend_id_ = 0u;
  expend_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expend_item_info::~expend_item_info() {
  SharedDtor();
}

void expend_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void expend_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* expend_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return expend_item_info_descriptor_;
}

const expend_item_info& expend_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

expend_item_info* expend_item_info::default_instance_ = NULL;

expend_item_info* expend_item_info::New() const {
  return new expend_item_info;
}

void expend_item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expend_id_ = 0u;
    expend_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool expend_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expend_id_)));
          set_has_expend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expend_count;
        break;
      }

      // optional uint32 expend_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expend_count_)));
          set_has_expend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void expend_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expend_id = 1;
  if (has_expend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expend_id(), output);
  }

  // optional uint32 expend_count = 2;
  if (has_expend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expend_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* expend_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expend_id = 1;
  if (has_expend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expend_id(), target);
  }

  // optional uint32 expend_count = 2;
  if (has_expend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expend_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int expend_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expend_id = 1;
    if (has_expend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expend_id());
    }

    // optional uint32 expend_count = 2;
    if (has_expend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expend_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expend_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const expend_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const expend_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void expend_item_info::MergeFrom(const expend_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expend_id()) {
      set_expend_id(from.expend_id());
    }
    if (from.has_expend_count()) {
      set_expend_count(from.expend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void expend_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void expend_item_info::CopyFrom(const expend_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expend_item_info::IsInitialized() const {

  return true;
}

void expend_item_info::Swap(expend_item_info* other) {
  if (other != this) {
    std::swap(expend_id_, other->expend_id_);
    std::swap(expend_count_, other->expend_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata expend_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = expend_item_info_descriptor_;
  metadata.reflection = expend_item_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* props_info_POS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return props_info_POS_descriptor_;
}
bool props_info_POS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const props_info_POS props_info::SHOW;
const props_info_POS props_info::PACK;
const props_info_POS props_info::DEPOT;
const props_info_POS props_info::ROLE;
const props_info_POS props_info::EXPLORE;
const props_info_POS props_info::TASK;
const props_info_POS props_info::SCENE;
const props_info_POS props_info::TEMP;
const props_info_POS props_info::POS_MIN;
const props_info_POS props_info::POS_MAX;
const int props_info::POS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int props_info::kPosFieldNumber;
const int props_info::kGridIndexFieldNumber;
const int props_info::kPropsIdFieldNumber;
const int props_info::kCountFieldNumber;
const int props_info::kQualityFieldNumber;
const int props_info::kBindFieldNumber;
const int props_info::kAttrFieldNumber;
const int props_info::kGemFieldNumber;
const int props_info::kHoleFieldNumber;
const int props_info::kAuthedFieldNumber;
const int props_info::kLevelFieldNumber;
const int props_info::kCreatorIdFieldNumber;
const int props_info::kActiveTimeFieldNumber;
const int props_info::kEndDateFieldNumber;
const int props_info::kLastAttrFieldNumber;
const int props_info::kUpgradeAttrFieldNumber;
const int props_info::kExpendMoneyFieldNumber;
const int props_info::kInfoFieldNumber;
const int props_info::kSystemIdFieldNumber;
const int props_info::kToTypeFieldNumber;
const int props_info::kTimeoutFieldNumber;
const int props_info::kIsDueFieldNumber;
#endif  // !_MSC_VER

props_info::props_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void props_info::InitAsDefaultInstance() {
}

props_info::props_info(const props_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void props_info::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  grid_index_ = 0u;
  props_id_ = 0u;
  count_ = 1u;
  quality_ = 1u;
  bind_ = 0u;
  hole_ = 0u;
  authed_ = 0u;
  level_ = 0u;
  creator_id_ = 0u;
  active_time_ = 0u;
  end_date_ = 0u;
  expend_money_ = 0u;
  system_id_ = 0u;
  to_type_ = 0u;
  timeout_ = 0u;
  is_due_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

props_info::~props_info() {
  SharedDtor();
}

void props_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void props_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* props_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return props_info_descriptor_;
}

const props_info& props_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

props_info* props_info::default_instance_ = NULL;

props_info* props_info::New() const {
  return new props_info;
}

void props_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    grid_index_ = 0u;
    props_id_ = 0u;
    count_ = 1u;
    quality_ = 1u;
    bind_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hole_ = 0u;
    authed_ = 0u;
    level_ = 0u;
    creator_id_ = 0u;
    active_time_ = 0u;
    end_date_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    expend_money_ = 0u;
    system_id_ = 0u;
    to_type_ = 0u;
    timeout_ = 0u;
    is_due_ = false;
  }
  attr_.Clear();
  gem_.Clear();
  last_attr_.Clear();
  upgrade_attr_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool props_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // required uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_props_id;
        break;
      }

      // required uint32 props_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_props_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_id_)));
          set_has_props_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required uint32 quality = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bind;
        break;
      }

      // required uint32 bind = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        break;
      }

      // repeated .client.attribute attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        if (input->ExpectTag(66)) goto parse_gem;
        break;
      }

      // repeated .client.embed gem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gem;
        if (input->ExpectTag(72)) goto parse_hole;
        break;
      }

      // optional uint32 hole = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_)));
          set_has_hole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_authed;
        break;
      }

      // optional uint32 authed = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authed_)));
          set_has_authed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // optional uint32 level = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_creator_id;
        break;
      }

      // optional uint32 creator_id = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_active_time;
        break;
      }

      // optional uint32 active_time = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_end_date;
        break;
      }

      // optional uint32 end_date = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_last_attr;
        break;
      }

      // repeated .client.attribute last_attr = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_last_attr;
        if (input->ExpectTag(130)) goto parse_upgrade_attr;
        break;
      }

      // repeated .client.attribute upgrade_attr = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgrade_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgrade_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_upgrade_attr;
        if (input->ExpectTag(136)) goto parse_expend_money;
        break;
      }

      // optional uint32 expend_money = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expend_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expend_money_)));
          set_has_expend_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_info;
        break;
      }

      // repeated .client.expend_item_info info = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_info;
        if (input->ExpectTag(152)) goto parse_system_id;
        break;
      }

      // optional uint32 system_id = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_id_)));
          set_has_system_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_to_type;
        break;
      }

      // optional uint32 to_type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_type_)));
          set_has_to_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_is_due;
        break;
      }

      // optional bool is_due = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_due:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_due_)));
          set_has_is_due();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void props_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_index(), output);
  }

  // required uint32 props_id = 3;
  if (has_props_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->props_id(), output);
  }

  // required uint32 count = 4 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // required uint32 quality = 5 [default = 1];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quality(), output);
  }

  // required uint32 bind = 6 [default = 0];
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bind(), output);
  }

  // repeated .client.attribute attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attr(i), output);
  }

  // repeated .client.embed gem = 8;
  for (int i = 0; i < this->gem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gem(i), output);
  }

  // optional uint32 hole = 9 [default = 0];
  if (has_hole()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hole(), output);
  }

  // optional uint32 authed = 10 [default = 0];
  if (has_authed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->authed(), output);
  }

  // optional uint32 level = 11 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // optional uint32 creator_id = 12 [default = 0];
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->creator_id(), output);
  }

  // optional uint32 active_time = 13 [default = 0];
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->active_time(), output);
  }

  // optional uint32 end_date = 14 [default = 0];
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->end_date(), output);
  }

  // repeated .client.attribute last_attr = 15;
  for (int i = 0; i < this->last_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->last_attr(i), output);
  }

  // repeated .client.attribute upgrade_attr = 16;
  for (int i = 0; i < this->upgrade_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->upgrade_attr(i), output);
  }

  // optional uint32 expend_money = 17;
  if (has_expend_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->expend_money(), output);
  }

  // repeated .client.expend_item_info info = 18;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->info(i), output);
  }

  // optional uint32 system_id = 19 [default = 0];
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->system_id(), output);
  }

  // optional uint32 to_type = 20;
  if (has_to_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->to_type(), output);
  }

  // optional uint32 timeout = 21;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->timeout(), output);
  }

  // optional bool is_due = 22 [default = false];
  if (has_is_due()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_due(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* props_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_index(), target);
  }

  // required uint32 props_id = 3;
  if (has_props_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->props_id(), target);
  }

  // required uint32 count = 4 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // required uint32 quality = 5 [default = 1];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quality(), target);
  }

  // required uint32 bind = 6 [default = 0];
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bind(), target);
  }

  // repeated .client.attribute attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attr(i), target);
  }

  // repeated .client.embed gem = 8;
  for (int i = 0; i < this->gem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gem(i), target);
  }

  // optional uint32 hole = 9 [default = 0];
  if (has_hole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hole(), target);
  }

  // optional uint32 authed = 10 [default = 0];
  if (has_authed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->authed(), target);
  }

  // optional uint32 level = 11 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  // optional uint32 creator_id = 12 [default = 0];
  if (has_creator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->creator_id(), target);
  }

  // optional uint32 active_time = 13 [default = 0];
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->active_time(), target);
  }

  // optional uint32 end_date = 14 [default = 0];
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->end_date(), target);
  }

  // repeated .client.attribute last_attr = 15;
  for (int i = 0; i < this->last_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->last_attr(i), target);
  }

  // repeated .client.attribute upgrade_attr = 16;
  for (int i = 0; i < this->upgrade_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->upgrade_attr(i), target);
  }

  // optional uint32 expend_money = 17;
  if (has_expend_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->expend_money(), target);
  }

  // repeated .client.expend_item_info info = 18;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->info(i), target);
  }

  // optional uint32 system_id = 19 [default = 0];
  if (has_system_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->system_id(), target);
  }

  // optional uint32 to_type = 20;
  if (has_to_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->to_type(), target);
  }

  // optional uint32 timeout = 21;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->timeout(), target);
  }

  // optional bool is_due = 22 [default = false];
  if (has_is_due()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_due(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int props_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 grid_index = 2;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 props_id = 3;
    if (has_props_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props_id());
    }

    // required uint32 count = 4 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 quality = 5 [default = 1];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 bind = 6 [default = 0];
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hole = 9 [default = 0];
    if (has_hole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole());
    }

    // optional uint32 authed = 10 [default = 0];
    if (has_authed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authed());
    }

    // optional uint32 level = 11 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 creator_id = 12 [default = 0];
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // optional uint32 active_time = 13 [default = 0];
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_time());
    }

    // optional uint32 end_date = 14 [default = 0];
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 expend_money = 17;
    if (has_expend_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expend_money());
    }

    // optional uint32 system_id = 19 [default = 0];
    if (has_system_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_id());
    }

    // optional uint32 to_type = 20;
    if (has_to_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_type());
    }

    // optional uint32 timeout = 21;
    if (has_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool is_due = 22 [default = false];
    if (has_is_due()) {
      total_size += 2 + 1;
    }

  }
  // repeated .client.attribute attr = 7;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .client.embed gem = 8;
  total_size += 1 * this->gem_size();
  for (int i = 0; i < this->gem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem(i));
  }

  // repeated .client.attribute last_attr = 15;
  total_size += 1 * this->last_attr_size();
  for (int i = 0; i < this->last_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_attr(i));
  }

  // repeated .client.attribute upgrade_attr = 16;
  total_size += 2 * this->upgrade_attr_size();
  for (int i = 0; i < this->upgrade_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrade_attr(i));
  }

  // repeated .client.expend_item_info info = 18;
  total_size += 2 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void props_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const props_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const props_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void props_info::MergeFrom(const props_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  gem_.MergeFrom(from.gem_);
  last_attr_.MergeFrom(from.last_attr_);
  upgrade_attr_.MergeFrom(from.upgrade_attr_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_props_id()) {
      set_props_id(from.props_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hole()) {
      set_hole(from.hole());
    }
    if (from.has_authed()) {
      set_authed(from.authed());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_expend_money()) {
      set_expend_money(from.expend_money());
    }
    if (from.has_system_id()) {
      set_system_id(from.system_id());
    }
    if (from.has_to_type()) {
      set_to_type(from.to_type());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_is_due()) {
      set_is_due(from.is_due());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void props_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void props_info::CopyFrom(const props_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool props_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gem_size(); i++) {
    if (!this->gem(i).IsInitialized()) return false;
  }
  for (int i = 0; i < last_attr_size(); i++) {
    if (!this->last_attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < upgrade_attr_size(); i++) {
    if (!this->upgrade_attr(i).IsInitialized()) return false;
  }
  return true;
}

void props_info::Swap(props_info* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(props_id_, other->props_id_);
    std::swap(count_, other->count_);
    std::swap(quality_, other->quality_);
    std::swap(bind_, other->bind_);
    attr_.Swap(&other->attr_);
    gem_.Swap(&other->gem_);
    std::swap(hole_, other->hole_);
    std::swap(authed_, other->authed_);
    std::swap(level_, other->level_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(active_time_, other->active_time_);
    std::swap(end_date_, other->end_date_);
    last_attr_.Swap(&other->last_attr_);
    upgrade_attr_.Swap(&other->upgrade_attr_);
    std::swap(expend_money_, other->expend_money_);
    info_.Swap(&other->info_);
    std::swap(system_id_, other->system_id_);
    std::swap(to_type_, other->to_type_);
    std::swap(timeout_, other->timeout_);
    std::swap(is_due_, other->is_due_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata props_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = props_info_descriptor_;
  metadata.reflection = props_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_props_msg::kRdFieldNumber;
const int role_props_msg::kPiFieldNumber;
#endif  // !_MSC_VER

role_props_msg::role_props_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_props_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

role_props_msg::role_props_msg(const role_props_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_props_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_props_msg::~role_props_msg() {
  SharedDtor();
}

void role_props_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void role_props_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_props_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_props_msg_descriptor_;
}

const role_props_msg& role_props_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

role_props_msg* role_props_msg::default_instance_ = NULL;

role_props_msg* role_props_msg::New() const {
  return new role_props_msg;
}

void role_props_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  pi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_props_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pi;
        break;
      }

      // repeated .client.props_info pi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_props_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // repeated .client.props_info pi = 2;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_props_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // repeated .client.props_info pi = 2;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_props_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.props_info pi = 2;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_props_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_props_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_props_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_props_msg::MergeFrom(const role_props_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pi_.MergeFrom(from.pi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_props_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_props_msg::CopyFrom(const role_props_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_props_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  return true;
}

void role_props_msg::Swap(role_props_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    pi_.Swap(&other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_props_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_props_msg_descriptor_;
  metadata.reflection = role_props_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_props_req::kGridIndexFieldNumber;
const int use_props_req::kUseNumFieldNumber;
const int use_props_req::kRdsFieldNumber;
const int use_props_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

use_props_req::use_props_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_props_req::InitAsDefaultInstance() {
  rds_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

use_props_req::use_props_req(const use_props_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_props_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  use_num_ = 0u;
  rds_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_props_req::~use_props_req() {
  SharedDtor();
}

void use_props_req::SharedDtor() {
  if (this != default_instance_) {
    delete rds_;
    delete svr_head_;
  }
}

void use_props_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_props_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_props_req_descriptor_;
}

const use_props_req& use_props_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

use_props_req* use_props_req::default_instance_ = NULL;

use_props_req* use_props_req::New() const {
  return new use_props_req;
}

void use_props_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    use_num_ = 0u;
    if (has_rds()) {
      if (rds_ != NULL) rds_->::client::role_data::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_props_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_num;
        break;
      }

      // required uint32 use_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_num_)));
          set_has_use_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rds;
        break;
      }

      // optional .client.role_data rds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_props_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 use_num = 2;
  if (has_use_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_num(), output);
  }

  // optional .client.role_data rds = 3;
  if (has_rds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rds(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_props_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 use_num = 2;
  if (has_use_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_num(), target);
  }

  // optional .client.role_data rds = 3;
  if (has_rds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rds(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_props_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 use_num = 2;
    if (has_use_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_num());
    }

    // optional .client.role_data rds = 3;
    if (has_rds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rds());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_props_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_props_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_props_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_props_req::MergeFrom(const use_props_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_use_num()) {
      set_use_num(from.use_num());
    }
    if (from.has_rds()) {
      mutable_rds()->::client::role_data::MergeFrom(from.rds());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_props_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_props_req::CopyFrom(const use_props_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_props_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rds()) {
    if (!this->rds().IsInitialized()) return false;
  }
  return true;
}

void use_props_req::Swap(use_props_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(use_num_, other->use_num_);
    std::swap(rds_, other->rds_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_props_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_props_req_descriptor_;
  metadata.reflection = use_props_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_props_rsp::kOptTypeFieldNumber;
const int use_props_rsp::kGridIndexFieldNumber;
const int use_props_rsp::kRdsFieldNumber;
#endif  // !_MSC_VER

use_props_rsp::use_props_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_props_rsp::InitAsDefaultInstance() {
  rds_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

use_props_rsp::use_props_rsp(const use_props_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_props_rsp::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0;
  grid_index_ = 0u;
  rds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_props_rsp::~use_props_rsp() {
  SharedDtor();
}

void use_props_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete rds_;
  }
}

void use_props_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_props_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_props_rsp_descriptor_;
}

const use_props_rsp& use_props_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

use_props_rsp* use_props_rsp::default_instance_ = NULL;

use_props_rsp* use_props_rsp::New() const {
  return new use_props_rsp;
}

void use_props_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_type_ = 0;
    grid_index_ = 0u;
    if (has_rds()) {
      if (rds_ != NULL) rds_->::client::role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_props_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.ITEM_OPERATE_TYPE opt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::ITEM_OPERATE_TYPE_IsValid(value)) {
            set_opt_type(static_cast< ::client::ITEM_OPERATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // optional uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rds;
        break;
      }

      // optional .client.role_data rds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_props_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.ITEM_OPERATE_TYPE opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opt_type(), output);
  }

  // optional uint32 grid_index = 2;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_index(), output);
  }

  // optional .client.role_data rds = 3;
  if (has_rds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_props_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.ITEM_OPERATE_TYPE opt_type = 1;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opt_type(), target);
  }

  // optional uint32 grid_index = 2;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_index(), target);
  }

  // optional .client.role_data rds = 3;
  if (has_rds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_props_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.ITEM_OPERATE_TYPE opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_type());
    }

    // optional uint32 grid_index = 2;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // optional .client.role_data rds = 3;
    if (has_rds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_props_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_props_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_props_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_props_rsp::MergeFrom(const use_props_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_rds()) {
      mutable_rds()->::client::role_data::MergeFrom(from.rds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_props_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_props_rsp::CopyFrom(const use_props_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_props_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rds()) {
    if (!this->rds().IsInitialized()) return false;
  }
  return true;
}

void use_props_rsp::Swap(use_props_rsp* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(rds_, other->rds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_props_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_props_rsp_descriptor_;
  metadata.reflection = use_props_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_props_req::kGridIndexFieldNumber;
const int sell_props_req::kPropsCountFieldNumber;
const int sell_props_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sell_props_req::sell_props_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sell_props_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sell_props_req::sell_props_req(const sell_props_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sell_props_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  props_count_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_props_req::~sell_props_req() {
  SharedDtor();
}

void sell_props_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sell_props_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_props_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_props_req_descriptor_;
}

const sell_props_req& sell_props_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

sell_props_req* sell_props_req::default_instance_ = NULL;

sell_props_req* sell_props_req::New() const {
  return new sell_props_req;
}

void sell_props_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    props_count_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_props_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_props_count;
        break;
      }

      // required uint32 props_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_props_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_count_)));
          set_has_props_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sell_props_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 props_count = 2;
  if (has_props_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->props_count(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sell_props_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 props_count = 2;
  if (has_props_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->props_count(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sell_props_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 props_count = 2;
    if (has_props_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props_count());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_props_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_props_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_props_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_props_req::MergeFrom(const sell_props_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_props_count()) {
      set_props_count(from.props_count());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_props_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_props_req::CopyFrom(const sell_props_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_props_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sell_props_req::Swap(sell_props_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(props_count_, other->props_count_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_props_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_props_req_descriptor_;
  metadata.reflection = sell_props_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_props_rsp::kGridIndexFieldNumber;
const int sell_props_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

sell_props_rsp::sell_props_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sell_props_rsp::InitAsDefaultInstance() {
}

sell_props_rsp::sell_props_rsp(const sell_props_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sell_props_rsp::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_props_rsp::~sell_props_rsp() {
  SharedDtor();
}

void sell_props_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sell_props_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_props_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_props_rsp_descriptor_;
}

const sell_props_rsp& sell_props_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

sell_props_rsp* sell_props_rsp::default_instance_ = NULL;

sell_props_rsp* sell_props_rsp::New() const {
  return new sell_props_rsp;
}

void sell_props_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_props_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sell_props_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sell_props_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sell_props_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_props_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_props_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_props_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_props_rsp::MergeFrom(const sell_props_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_props_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_props_rsp::CopyFrom(const sell_props_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_props_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sell_props_rsp::Swap(sell_props_rsp* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_props_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_props_rsp_descriptor_;
  metadata.reflection = sell_props_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int move_props_req::kSrcGridIndexFieldNumber;
const int move_props_req::kDstGridIndexFieldNumber;
const int move_props_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

move_props_req::move_props_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void move_props_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

move_props_req::move_props_req(const move_props_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void move_props_req::SharedCtor() {
  _cached_size_ = 0;
  src_grid_index_ = 0u;
  dst_grid_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

move_props_req::~move_props_req() {
  SharedDtor();
}

void move_props_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void move_props_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* move_props_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return move_props_req_descriptor_;
}

const move_props_req& move_props_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

move_props_req* move_props_req::default_instance_ = NULL;

move_props_req* move_props_req::New() const {
  return new move_props_req;
}

void move_props_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_grid_index_ = 0u;
    dst_grid_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool move_props_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_grid_index_)));
          set_has_src_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_grid_index;
        break;
      }

      // required uint32 dst_grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_grid_index_)));
          set_has_dst_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void move_props_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_grid_index = 1;
  if (has_src_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_grid_index(), output);
  }

  // required uint32 dst_grid_index = 2;
  if (has_dst_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_grid_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* move_props_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_grid_index = 1;
  if (has_src_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_grid_index(), target);
  }

  // required uint32 dst_grid_index = 2;
  if (has_dst_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_grid_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int move_props_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_grid_index = 1;
    if (has_src_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_grid_index());
    }

    // required uint32 dst_grid_index = 2;
    if (has_dst_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_grid_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void move_props_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const move_props_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const move_props_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void move_props_req::MergeFrom(const move_props_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_grid_index()) {
      set_src_grid_index(from.src_grid_index());
    }
    if (from.has_dst_grid_index()) {
      set_dst_grid_index(from.dst_grid_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void move_props_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void move_props_req::CopyFrom(const move_props_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool move_props_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void move_props_req::Swap(move_props_req* other) {
  if (other != this) {
    std::swap(src_grid_index_, other->src_grid_index_);
    std::swap(dst_grid_index_, other->dst_grid_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata move_props_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = move_props_req_descriptor_;
  metadata.reflection = move_props_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_props_req::kSrcGridIndexFieldNumber;
const int equip_props_req::kDstGridIndexFieldNumber;
const int equip_props_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

equip_props_req::equip_props_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equip_props_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

equip_props_req::equip_props_req(const equip_props_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equip_props_req::SharedCtor() {
  _cached_size_ = 0;
  src_grid_index_ = 0u;
  dst_grid_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_props_req::~equip_props_req() {
  SharedDtor();
}

void equip_props_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void equip_props_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_props_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_props_req_descriptor_;
}

const equip_props_req& equip_props_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

equip_props_req* equip_props_req::default_instance_ = NULL;

equip_props_req* equip_props_req::New() const {
  return new equip_props_req;
}

void equip_props_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_grid_index_ = 0u;
    dst_grid_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_props_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_grid_index_)));
          set_has_src_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_grid_index;
        break;
      }

      // required uint32 dst_grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_grid_index_)));
          set_has_dst_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equip_props_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_grid_index = 1;
  if (has_src_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_grid_index(), output);
  }

  // required uint32 dst_grid_index = 2;
  if (has_dst_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_grid_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equip_props_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_grid_index = 1;
  if (has_src_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_grid_index(), target);
  }

  // required uint32 dst_grid_index = 2;
  if (has_dst_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_grid_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equip_props_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_grid_index = 1;
    if (has_src_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_grid_index());
    }

    // required uint32 dst_grid_index = 2;
    if (has_dst_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_grid_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_props_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_props_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_props_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_props_req::MergeFrom(const equip_props_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_grid_index()) {
      set_src_grid_index(from.src_grid_index());
    }
    if (from.has_dst_grid_index()) {
      set_dst_grid_index(from.dst_grid_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_props_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_props_req::CopyFrom(const equip_props_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_props_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void equip_props_req::Swap(equip_props_req* other) {
  if (other != this) {
    std::swap(src_grid_index_, other->src_grid_index_);
    std::swap(dst_grid_index_, other->dst_grid_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_props_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_props_req_descriptor_;
  metadata.reflection = equip_props_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_props_rsp::kClearGridIndexFieldNumber;
const int equip_props_rsp::kAddGridIndexFieldNumber;
#endif  // !_MSC_VER

equip_props_rsp::equip_props_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equip_props_rsp::InitAsDefaultInstance() {
}

equip_props_rsp::equip_props_rsp(const equip_props_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equip_props_rsp::SharedCtor() {
  _cached_size_ = 0;
  clear_grid_index_ = 0u;
  add_grid_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_props_rsp::~equip_props_rsp() {
  SharedDtor();
}

void equip_props_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_props_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_props_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_props_rsp_descriptor_;
}

const equip_props_rsp& equip_props_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

equip_props_rsp* equip_props_rsp::default_instance_ = NULL;

equip_props_rsp* equip_props_rsp::New() const {
  return new equip_props_rsp;
}

void equip_props_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clear_grid_index_ = 0u;
    add_grid_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_props_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clear_grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_grid_index_)));
          set_has_clear_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_grid_index;
        break;
      }

      // optional uint32 add_grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_grid_index_)));
          set_has_add_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equip_props_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clear_grid_index = 1;
  if (has_clear_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clear_grid_index(), output);
  }

  // optional uint32 add_grid_index = 2;
  if (has_add_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_grid_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equip_props_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clear_grid_index = 1;
  if (has_clear_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clear_grid_index(), target);
  }

  // optional uint32 add_grid_index = 2;
  if (has_add_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_grid_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equip_props_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clear_grid_index = 1;
    if (has_clear_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_grid_index());
    }

    // optional uint32 add_grid_index = 2;
    if (has_add_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_grid_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_props_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_props_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_props_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_props_rsp::MergeFrom(const equip_props_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_grid_index()) {
      set_clear_grid_index(from.clear_grid_index());
    }
    if (from.has_add_grid_index()) {
      set_add_grid_index(from.add_grid_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_props_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_props_rsp::CopyFrom(const equip_props_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_props_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void equip_props_rsp::Swap(equip_props_rsp* other) {
  if (other != this) {
    std::swap(clear_grid_index_, other->clear_grid_index_);
    std::swap(add_grid_index_, other->add_grid_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_props_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_props_rsp_descriptor_;
  metadata.reflection = equip_props_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int drop_props_info::kBelongFieldNumber;
const int drop_props_info::kIndexFieldNumber;
const int drop_props_info::kXFieldNumber;
const int drop_props_info::kYFieldNumber;
const int drop_props_info::kZFieldNumber;
const int drop_props_info::kEndTimeFieldNumber;
const int drop_props_info::kProtectTimeFieldNumber;
const int drop_props_info::kPiFieldNumber;
#endif  // !_MSC_VER

drop_props_info::drop_props_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void drop_props_info::InitAsDefaultInstance() {
  pi_ = const_cast< ::client::props_info*>(&::client::props_info::default_instance());
}

drop_props_info::drop_props_info(const drop_props_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void drop_props_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  end_time_ = 0u;
  protect_time_ = 0u;
  pi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

drop_props_info::~drop_props_info() {
  SharedDtor();
}

void drop_props_info::SharedDtor() {
  if (this != default_instance_) {
    delete pi_;
  }
}

void drop_props_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drop_props_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_props_info_descriptor_;
}

const drop_props_info& drop_props_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

drop_props_info* drop_props_info::default_instance_ = NULL;

drop_props_info* drop_props_info::New() const {
  return new drop_props_info;
}

void drop_props_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    index_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    end_time_ = 0u;
    protect_time_ = 0u;
    if (has_pi()) {
      if (pi_ != NULL) pi_->::client::props_info::Clear();
    }
  }
  belong_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool drop_props_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 belong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_belong())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_belong())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_belong;
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // required uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // required uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_z;
        break;
      }

      // required uint32 z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_protect_time;
        break;
      }

      // required uint32 protect_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protect_time_)));
          set_has_protect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pi;
        break;
      }

      // required .client.props_info pi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void drop_props_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 belong = 1;
  for (int i = 0; i < this->belong_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->belong(i), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // required uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // required uint32 z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->z(), output);
  }

  // required uint32 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_time(), output);
  }

  // required uint32 protect_time = 7;
  if (has_protect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->protect_time(), output);
  }

  // required .client.props_info pi = 8;
  if (has_pi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* drop_props_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 belong = 1;
  for (int i = 0; i < this->belong_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->belong(i), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // required uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // required uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // required uint32 z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->z(), target);
  }

  // required uint32 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_time(), target);
  }

  // required uint32 protect_time = 7;
  if (has_protect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->protect_time(), target);
  }

  // required .client.props_info pi = 8;
  if (has_pi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int drop_props_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // required uint32 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required uint32 protect_time = 7;
    if (has_protect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protect_time());
    }

    // required .client.props_info pi = 8;
    if (has_pi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pi());
    }

  }
  // repeated uint32 belong = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->belong_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->belong(i));
    }
    total_size += 1 * this->belong_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drop_props_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const drop_props_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const drop_props_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void drop_props_info::MergeFrom(const drop_props_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  belong_.MergeFrom(from.belong_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_protect_time()) {
      set_protect_time(from.protect_time());
    }
    if (from.has_pi()) {
      mutable_pi()->::client::props_info::MergeFrom(from.pi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void drop_props_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_props_info::CopyFrom(const drop_props_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_props_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;

  if (has_pi()) {
    if (!this->pi().IsInitialized()) return false;
  }
  return true;
}

void drop_props_info::Swap(drop_props_info* other) {
  if (other != this) {
    belong_.Swap(&other->belong_);
    std::swap(index_, other->index_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(end_time_, other->end_time_);
    std::swap(protect_time_, other->protect_time_);
    std::swap(pi_, other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata drop_props_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = drop_props_info_descriptor_;
  metadata.reflection = drop_props_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* drop_props_msg_METHOD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_props_msg_METHOD_descriptor_;
}
bool drop_props_msg_METHOD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const drop_props_msg_METHOD drop_props_msg::ADD;
const drop_props_msg_METHOD drop_props_msg::DEL;
const drop_props_msg_METHOD drop_props_msg::METHOD_MIN;
const drop_props_msg_METHOD drop_props_msg::METHOD_MAX;
const int drop_props_msg::METHOD_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int drop_props_msg::kMFieldNumber;
const int drop_props_msg::kDpiFieldNumber;
#endif  // !_MSC_VER

drop_props_msg::drop_props_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void drop_props_msg::InitAsDefaultInstance() {
}

drop_props_msg::drop_props_msg(const drop_props_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void drop_props_msg::SharedCtor() {
  _cached_size_ = 0;
  m_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

drop_props_msg::~drop_props_msg() {
  SharedDtor();
}

void drop_props_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void drop_props_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drop_props_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_props_msg_descriptor_;
}

const drop_props_msg& drop_props_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

drop_props_msg* drop_props_msg::default_instance_ = NULL;

drop_props_msg* drop_props_msg::New() const {
  return new drop_props_msg;
}

void drop_props_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ = 1;
  }
  dpi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool drop_props_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.drop_props_msg.METHOD m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::drop_props_msg_METHOD_IsValid(value)) {
            set_m(static_cast< ::client::drop_props_msg_METHOD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dpi;
        break;
      }

      // repeated .client.drop_props_info dpi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dpi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dpi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dpi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void drop_props_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.drop_props_msg.METHOD m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m(), output);
  }

  // repeated .client.drop_props_info dpi = 2;
  for (int i = 0; i < this->dpi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dpi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* drop_props_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.drop_props_msg.METHOD m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m(), target);
  }

  // repeated .client.drop_props_info dpi = 2;
  for (int i = 0; i < this->dpi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dpi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int drop_props_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.drop_props_msg.METHOD m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m());
    }

  }
  // repeated .client.drop_props_info dpi = 2;
  total_size += 1 * this->dpi_size();
  for (int i = 0; i < this->dpi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dpi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drop_props_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const drop_props_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const drop_props_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void drop_props_msg::MergeFrom(const drop_props_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dpi_.MergeFrom(from.dpi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void drop_props_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_props_msg::CopyFrom(const drop_props_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_props_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < dpi_size(); i++) {
    if (!this->dpi(i).IsInitialized()) return false;
  }
  return true;
}

void drop_props_msg::Swap(drop_props_msg* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    dpi_.Swap(&other->dpi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata drop_props_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = drop_props_msg_descriptor_;
  metadata.reflection = drop_props_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pick_up_props_req::kIndexFieldNumber;
const int pick_up_props_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pick_up_props_req::pick_up_props_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pick_up_props_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pick_up_props_req::pick_up_props_req(const pick_up_props_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pick_up_props_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pick_up_props_req::~pick_up_props_req() {
  SharedDtor();
}

void pick_up_props_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pick_up_props_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pick_up_props_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_up_props_req_descriptor_;
}

const pick_up_props_req& pick_up_props_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

pick_up_props_req* pick_up_props_req::default_instance_ = NULL;

pick_up_props_req* pick_up_props_req::New() const {
  return new pick_up_props_req;
}

void pick_up_props_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pick_up_props_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_index;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pick_up_props_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->index(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pick_up_props_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->index(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pick_up_props_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pick_up_props_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pick_up_props_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pick_up_props_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pick_up_props_req::MergeFrom(const pick_up_props_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pick_up_props_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pick_up_props_req::CopyFrom(const pick_up_props_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pick_up_props_req::IsInitialized() const {

  return true;
}

void pick_up_props_req::Swap(pick_up_props_req* other) {
  if (other != this) {
    index_.Swap(&other->index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pick_up_props_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pick_up_props_req_descriptor_;
  metadata.reflection = pick_up_props_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* pick_up_props_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_up_props_rsp_result_descriptor_;
}
bool pick_up_props_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const pick_up_props_rsp_result pick_up_props_rsp::success;
const pick_up_props_rsp_result pick_up_props_rsp::not_your;
const pick_up_props_rsp_result pick_up_props_rsp::backpack_full;
const pick_up_props_rsp_result pick_up_props_rsp::null;
const pick_up_props_rsp_result pick_up_props_rsp::result_MIN;
const pick_up_props_rsp_result pick_up_props_rsp::result_MAX;
const int pick_up_props_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int pick_up_props_rsp::kIndexFieldNumber;
const int pick_up_props_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

pick_up_props_rsp::pick_up_props_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pick_up_props_rsp::InitAsDefaultInstance() {
}

pick_up_props_rsp::pick_up_props_rsp(const pick_up_props_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pick_up_props_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pick_up_props_rsp::~pick_up_props_rsp() {
  SharedDtor();
}

void pick_up_props_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pick_up_props_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pick_up_props_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pick_up_props_rsp_descriptor_;
}

const pick_up_props_rsp& pick_up_props_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

pick_up_props_rsp* pick_up_props_rsp::default_instance_ = NULL;

pick_up_props_rsp* pick_up_props_rsp::New() const {
  return new pick_up_props_rsp;
}

void pick_up_props_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 1;
  }
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pick_up_props_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_index;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.pick_up_props_rsp.result ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::pick_up_props_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::pick_up_props_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pick_up_props_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->index(i), output);
  }

  // required .client.pick_up_props_rsp.result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pick_up_props_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->index(i), target);
  }

  // required .client.pick_up_props_rsp.result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pick_up_props_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .client.pick_up_props_rsp.result ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated uint32 index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pick_up_props_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pick_up_props_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pick_up_props_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pick_up_props_rsp::MergeFrom(const pick_up_props_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pick_up_props_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pick_up_props_rsp::CopyFrom(const pick_up_props_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pick_up_props_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void pick_up_props_rsp::Swap(pick_up_props_rsp* other) {
  if (other != this) {
    index_.Swap(&other->index_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pick_up_props_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pick_up_props_rsp_descriptor_;
  metadata.reflection = pick_up_props_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_equip_req::kGridIndexFieldNumber;
const int upgrade_equip_req::kTargetLevelFieldNumber;
const int upgrade_equip_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_equip_req::upgrade_equip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_equip_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_equip_req::upgrade_equip_req(const upgrade_equip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_equip_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  target_level_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_equip_req::~upgrade_equip_req() {
  SharedDtor();
}

void upgrade_equip_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_equip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_equip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_equip_req_descriptor_;
}

const upgrade_equip_req& upgrade_equip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

upgrade_equip_req* upgrade_equip_req::default_instance_ = NULL;

upgrade_equip_req* upgrade_equip_req::New() const {
  return new upgrade_equip_req;
}

void upgrade_equip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    target_level_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_equip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_level;
        break;
      }

      // required uint32 target_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_level_)));
          set_has_target_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_equip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 target_level = 2;
  if (has_target_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_level(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_equip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 target_level = 2;
  if (has_target_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_level(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_equip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 target_level = 2;
    if (has_target_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_level());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_equip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_equip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_equip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_equip_req::MergeFrom(const upgrade_equip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_target_level()) {
      set_target_level(from.target_level());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_equip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_equip_req::CopyFrom(const upgrade_equip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_equip_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upgrade_equip_req::Swap(upgrade_equip_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(target_level_, other->target_level_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_equip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_equip_req_descriptor_;
  metadata.reflection = upgrade_equip_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* upgrade_equip_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_equip_rsp_result_descriptor_;
}
bool upgrade_equip_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const upgrade_equip_rsp_result upgrade_equip_rsp::success;
const upgrade_equip_rsp_result upgrade_equip_rsp::failed;
const upgrade_equip_rsp_result upgrade_equip_rsp::result_MIN;
const upgrade_equip_rsp_result upgrade_equip_rsp::result_MAX;
const int upgrade_equip_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int upgrade_equip_rsp::kGridIndexFieldNumber;
const int upgrade_equip_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

upgrade_equip_rsp::upgrade_equip_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_equip_rsp::InitAsDefaultInstance() {
}

upgrade_equip_rsp::upgrade_equip_rsp(const upgrade_equip_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_equip_rsp::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  result_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_equip_rsp::~upgrade_equip_rsp() {
  SharedDtor();
}

void upgrade_equip_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upgrade_equip_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_equip_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_equip_rsp_descriptor_;
}

const upgrade_equip_rsp& upgrade_equip_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

upgrade_equip_rsp* upgrade_equip_rsp::default_instance_ = NULL;

upgrade_equip_rsp* upgrade_equip_rsp::New() const {
  return new upgrade_equip_rsp;
}

void upgrade_equip_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    result_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_equip_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required .client.upgrade_equip_rsp.result result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::upgrade_equip_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::upgrade_equip_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_equip_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required .client.upgrade_equip_rsp.result result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_equip_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required .client.upgrade_equip_rsp.result result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_equip_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required .client.upgrade_equip_rsp.result result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_equip_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_equip_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_equip_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_equip_rsp::MergeFrom(const upgrade_equip_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_equip_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_equip_rsp::CopyFrom(const upgrade_equip_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_equip_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upgrade_equip_rsp::Swap(upgrade_equip_rsp* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_equip_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_equip_rsp_descriptor_;
  metadata.reflection = upgrade_equip_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int melting_equip_req::kMeltingTypeFieldNumber;
const int melting_equip_req::kGridIndexFieldNumber;
const int melting_equip_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

melting_equip_req::melting_equip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void melting_equip_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

melting_equip_req::melting_equip_req(const melting_equip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void melting_equip_req::SharedCtor() {
  _cached_size_ = 0;
  melting_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

melting_equip_req::~melting_equip_req() {
  SharedDtor();
}

void melting_equip_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void melting_equip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* melting_equip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return melting_equip_req_descriptor_;
}

const melting_equip_req& melting_equip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

melting_equip_req* melting_equip_req::default_instance_ = NULL;

melting_equip_req* melting_equip_req::New() const {
  return new melting_equip_req;
}

void melting_equip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    melting_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  grid_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool melting_equip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 melting_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &melting_type_)));
          set_has_melting_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // repeated uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_grid_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grid_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void melting_equip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 melting_type = 1;
  if (has_melting_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->melting_type(), output);
  }

  // repeated uint32 grid_index = 2;
  for (int i = 0; i < this->grid_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->grid_index(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* melting_equip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 melting_type = 1;
  if (has_melting_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->melting_type(), target);
  }

  // repeated uint32 grid_index = 2;
  for (int i = 0; i < this->grid_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->grid_index(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int melting_equip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 melting_type = 1;
    if (has_melting_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->melting_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 grid_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->grid_index(i));
    }
    total_size += 1 * this->grid_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void melting_equip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const melting_equip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const melting_equip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void melting_equip_req::MergeFrom(const melting_equip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_index_.MergeFrom(from.grid_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_melting_type()) {
      set_melting_type(from.melting_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void melting_equip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void melting_equip_req::CopyFrom(const melting_equip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool melting_equip_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void melting_equip_req::Swap(melting_equip_req* other) {
  if (other != this) {
    std::swap(melting_type_, other->melting_type_);
    grid_index_.Swap(&other->grid_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata melting_equip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = melting_equip_req_descriptor_;
  metadata.reflection = melting_equip_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* melting_equip_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return melting_equip_rsp_result_descriptor_;
}
bool melting_equip_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const melting_equip_rsp_result melting_equip_rsp::success;
const melting_equip_rsp_result melting_equip_rsp::failed;
const melting_equip_rsp_result melting_equip_rsp::result_MIN;
const melting_equip_rsp_result melting_equip_rsp::result_MAX;
const int melting_equip_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int melting_equip_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

melting_equip_rsp::melting_equip_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void melting_equip_rsp::InitAsDefaultInstance() {
}

melting_equip_rsp::melting_equip_rsp(const melting_equip_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void melting_equip_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

melting_equip_rsp::~melting_equip_rsp() {
  SharedDtor();
}

void melting_equip_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void melting_equip_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* melting_equip_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return melting_equip_rsp_descriptor_;
}

const melting_equip_rsp& melting_equip_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

melting_equip_rsp* melting_equip_rsp::default_instance_ = NULL;

melting_equip_rsp* melting_equip_rsp::New() const {
  return new melting_equip_rsp;
}

void melting_equip_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool melting_equip_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.melting_equip_rsp.result result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::melting_equip_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::melting_equip_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void melting_equip_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.melting_equip_rsp.result result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* melting_equip_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.melting_equip_rsp.result result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int melting_equip_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.melting_equip_rsp.result result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void melting_equip_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const melting_equip_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const melting_equip_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void melting_equip_rsp::MergeFrom(const melting_equip_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void melting_equip_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void melting_equip_rsp::CopyFrom(const melting_equip_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool melting_equip_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void melting_equip_rsp::Swap(melting_equip_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata melting_equip_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = melting_equip_rsp_descriptor_;
  metadata.reflection = melting_equip_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cast_equip_req::kEquipIdFieldNumber;
const int cast_equip_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

cast_equip_req::cast_equip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cast_equip_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

cast_equip_req::cast_equip_req(const cast_equip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cast_equip_req::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cast_equip_req::~cast_equip_req() {
  SharedDtor();
}

void cast_equip_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void cast_equip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cast_equip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cast_equip_req_descriptor_;
}

const cast_equip_req& cast_equip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

cast_equip_req* cast_equip_req::default_instance_ = NULL;

cast_equip_req* cast_equip_req::New() const {
  return new cast_equip_req;
}

void cast_equip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cast_equip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cast_equip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cast_equip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cast_equip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cast_equip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cast_equip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cast_equip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cast_equip_req::MergeFrom(const cast_equip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cast_equip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cast_equip_req::CopyFrom(const cast_equip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cast_equip_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cast_equip_req::Swap(cast_equip_req* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cast_equip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cast_equip_req_descriptor_;
  metadata.reflection = cast_equip_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* cast_equip_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cast_equip_rsp_result_descriptor_;
}
bool cast_equip_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const cast_equip_rsp_result cast_equip_rsp::success;
const cast_equip_rsp_result cast_equip_rsp::failed;
const cast_equip_rsp_result cast_equip_rsp::result_MIN;
const cast_equip_rsp_result cast_equip_rsp::result_MAX;
const int cast_equip_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int cast_equip_rsp::kResultTypeFieldNumber;
const int cast_equip_rsp::kPiFieldNumber;
#endif  // !_MSC_VER

cast_equip_rsp::cast_equip_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cast_equip_rsp::InitAsDefaultInstance() {
  pi_ = const_cast< ::client::props_info*>(&::client::props_info::default_instance());
}

cast_equip_rsp::cast_equip_rsp(const cast_equip_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cast_equip_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  pi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cast_equip_rsp::~cast_equip_rsp() {
  SharedDtor();
}

void cast_equip_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete pi_;
  }
}

void cast_equip_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cast_equip_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cast_equip_rsp_descriptor_;
}

const cast_equip_rsp& cast_equip_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

cast_equip_rsp* cast_equip_rsp::default_instance_ = NULL;

cast_equip_rsp* cast_equip_rsp::New() const {
  return new cast_equip_rsp;
}

void cast_equip_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 1;
    if (has_pi()) {
      if (pi_ != NULL) pi_->::client::props_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cast_equip_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.cast_equip_rsp.result result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::cast_equip_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::cast_equip_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pi;
        break;
      }

      // required .client.props_info pi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cast_equip_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.cast_equip_rsp.result result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // required .client.props_info pi = 2;
  if (has_pi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cast_equip_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.cast_equip_rsp.result result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // required .client.props_info pi = 2;
  if (has_pi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cast_equip_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.cast_equip_rsp.result result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // required .client.props_info pi = 2;
    if (has_pi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cast_equip_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cast_equip_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cast_equip_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cast_equip_rsp::MergeFrom(const cast_equip_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_pi()) {
      mutable_pi()->::client::props_info::MergeFrom(from.pi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cast_equip_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cast_equip_rsp::CopyFrom(const cast_equip_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cast_equip_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pi()) {
    if (!this->pi().IsInitialized()) return false;
  }
  return true;
}

void cast_equip_rsp::Swap(cast_equip_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(pi_, other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cast_equip_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cast_equip_rsp_descriptor_;
  metadata.reflection = cast_equip_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasure_req::kTreasureCountFieldNumber;
const int treasure_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

treasure_req::treasure_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasure_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

treasure_req::treasure_req(const treasure_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasure_req::SharedCtor() {
  _cached_size_ = 0;
  treasure_count_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasure_req::~treasure_req() {
  SharedDtor();
}

void treasure_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void treasure_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasure_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasure_req_descriptor_;
}

const treasure_req& treasure_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

treasure_req* treasure_req::default_instance_ = NULL;

treasure_req* treasure_req::New() const {
  return new treasure_req;
}

void treasure_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasure_count_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasure_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treasure_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasure_count_)));
          set_has_treasure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasure_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 treasure_count = 1;
  if (has_treasure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treasure_count(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasure_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 treasure_count = 1;
  if (has_treasure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treasure_count(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasure_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treasure_count = 1;
    if (has_treasure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasure_count());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasure_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasure_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasure_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasure_req::MergeFrom(const treasure_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasure_count()) {
      set_treasure_count(from.treasure_count());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasure_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasure_req::CopyFrom(const treasure_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasure_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void treasure_req::Swap(treasure_req* other) {
  if (other != this) {
    std::swap(treasure_count_, other->treasure_count_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasure_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasure_req_descriptor_;
  metadata.reflection = treasure_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasure_rsp::kResultTypeFieldNumber;
const int treasure_rsp::kTreasureLostFieldNumber;
#endif  // !_MSC_VER

treasure_rsp::treasure_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasure_rsp::InitAsDefaultInstance() {
}

treasure_rsp::treasure_rsp(const treasure_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasure_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasure_rsp::~treasure_rsp() {
  SharedDtor();
}

void treasure_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasure_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasure_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasure_rsp_descriptor_;
}

const treasure_rsp& treasure_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

treasure_rsp* treasure_rsp::default_instance_ = NULL;

treasure_rsp* treasure_rsp::New() const {
  return new treasure_rsp;
}

void treasure_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  treasure_lost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasure_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasure_lost;
        break;
      }

      // repeated uint32 treasure_lost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_treasure_lost())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_treasure_lost())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasure_lost;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasure_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // repeated uint32 treasure_lost = 2;
  for (int i = 0; i < this->treasure_lost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->treasure_lost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasure_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // repeated uint32 treasure_lost = 2;
  for (int i = 0; i < this->treasure_lost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->treasure_lost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasure_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  // repeated uint32 treasure_lost = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->treasure_lost_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->treasure_lost(i));
    }
    total_size += 1 * this->treasure_lost_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasure_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasure_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasure_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasure_rsp::MergeFrom(const treasure_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasure_lost_.MergeFrom(from.treasure_lost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasure_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasure_rsp::CopyFrom(const treasure_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasure_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void treasure_rsp::Swap(treasure_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    treasure_lost_.Swap(&other->treasure_lost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasure_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasure_rsp_descriptor_;
  metadata.reflection = treasure_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baptize_req::kBaptizeTypeFieldNumber;
const int baptize_req::kGridIndexFieldNumber;
const int baptize_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

baptize_req::baptize_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baptize_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

baptize_req::baptize_req(const baptize_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baptize_req::SharedCtor() {
  _cached_size_ = 0;
  baptize_type_ = 0u;
  grid_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baptize_req::~baptize_req() {
  SharedDtor();
}

void baptize_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void baptize_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baptize_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baptize_req_descriptor_;
}

const baptize_req& baptize_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

baptize_req* baptize_req::default_instance_ = NULL;

baptize_req* baptize_req::New() const {
  return new baptize_req;
}

void baptize_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    baptize_type_ = 0u;
    grid_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baptize_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 baptize_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baptize_type_)));
          set_has_baptize_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // required uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baptize_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 baptize_type = 1;
  if (has_baptize_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baptize_type(), output);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baptize_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 baptize_type = 1;
  if (has_baptize_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baptize_type(), target);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baptize_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 baptize_type = 1;
    if (has_baptize_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baptize_type());
    }

    // required uint32 grid_index = 2;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baptize_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baptize_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baptize_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baptize_req::MergeFrom(const baptize_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baptize_type()) {
      set_baptize_type(from.baptize_type());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baptize_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baptize_req::CopyFrom(const baptize_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baptize_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void baptize_req::Swap(baptize_req* other) {
  if (other != this) {
    std::swap(baptize_type_, other->baptize_type_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baptize_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baptize_req_descriptor_;
  metadata.reflection = baptize_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baptize_rsp::kResultTypeFieldNumber;
const int baptize_rsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

baptize_rsp::baptize_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baptize_rsp::InitAsDefaultInstance() {
}

baptize_rsp::baptize_rsp(const baptize_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baptize_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  grid_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baptize_rsp::~baptize_rsp() {
  SharedDtor();
}

void baptize_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void baptize_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baptize_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baptize_rsp_descriptor_;
}

const baptize_rsp& baptize_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

baptize_rsp* baptize_rsp::default_instance_ = NULL;

baptize_rsp* baptize_rsp::New() const {
  return new baptize_rsp;
}

void baptize_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    grid_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baptize_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // required uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baptize_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baptize_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baptize_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 grid_index = 2;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baptize_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baptize_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baptize_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baptize_rsp::MergeFrom(const baptize_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baptize_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baptize_rsp::CopyFrom(const baptize_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baptize_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void baptize_rsp::Swap(baptize_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baptize_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baptize_rsp_descriptor_;
  metadata.reflection = baptize_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baptize_save_req::kGridIndexFieldNumber;
const int baptize_save_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

baptize_save_req::baptize_save_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baptize_save_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

baptize_save_req::baptize_save_req(const baptize_save_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baptize_save_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baptize_save_req::~baptize_save_req() {
  SharedDtor();
}

void baptize_save_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void baptize_save_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baptize_save_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baptize_save_req_descriptor_;
}

const baptize_save_req& baptize_save_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

baptize_save_req* baptize_save_req::default_instance_ = NULL;

baptize_save_req* baptize_save_req::New() const {
  return new baptize_save_req;
}

void baptize_save_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baptize_save_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baptize_save_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baptize_save_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baptize_save_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baptize_save_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baptize_save_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baptize_save_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baptize_save_req::MergeFrom(const baptize_save_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baptize_save_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baptize_save_req::CopyFrom(const baptize_save_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baptize_save_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void baptize_save_req::Swap(baptize_save_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baptize_save_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baptize_save_req_descriptor_;
  metadata.reflection = baptize_save_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baptize_save_rsp::kResultTypeFieldNumber;
const int baptize_save_rsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

baptize_save_rsp::baptize_save_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baptize_save_rsp::InitAsDefaultInstance() {
}

baptize_save_rsp::baptize_save_rsp(const baptize_save_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baptize_save_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  grid_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baptize_save_rsp::~baptize_save_rsp() {
  SharedDtor();
}

void baptize_save_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void baptize_save_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baptize_save_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baptize_save_rsp_descriptor_;
}

const baptize_save_rsp& baptize_save_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

baptize_save_rsp* baptize_save_rsp::default_instance_ = NULL;

baptize_save_rsp* baptize_save_rsp::New() const {
  return new baptize_save_rsp;
}

void baptize_save_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    grid_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baptize_save_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_index;
        break;
      }

      // required uint32 grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baptize_save_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baptize_save_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 grid_index = 2;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baptize_save_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 grid_index = 2;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baptize_save_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baptize_save_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baptize_save_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baptize_save_rsp::MergeFrom(const baptize_save_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baptize_save_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baptize_save_rsp::CopyFrom(const baptize_save_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baptize_save_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void baptize_save_rsp::Swap(baptize_save_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baptize_save_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baptize_save_rsp_descriptor_;
  metadata.reflection = baptize_save_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int collect_explore_req::kCollectTypeFieldNumber;
const int collect_explore_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

collect_explore_req::collect_explore_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void collect_explore_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

collect_explore_req::collect_explore_req(const collect_explore_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void collect_explore_req::SharedCtor() {
  _cached_size_ = 0;
  collect_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

collect_explore_req::~collect_explore_req() {
  SharedDtor();
}

void collect_explore_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void collect_explore_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* collect_explore_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return collect_explore_req_descriptor_;
}

const collect_explore_req& collect_explore_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

collect_explore_req* collect_explore_req::default_instance_ = NULL;

collect_explore_req* collect_explore_req::New() const {
  return new collect_explore_req;
}

void collect_explore_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collect_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool collect_explore_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 collect_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_type_)));
          set_has_collect_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void collect_explore_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 collect_type = 1;
  if (has_collect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->collect_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* collect_explore_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 collect_type = 1;
  if (has_collect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->collect_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int collect_explore_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 collect_type = 1;
    if (has_collect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void collect_explore_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const collect_explore_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const collect_explore_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void collect_explore_req::MergeFrom(const collect_explore_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collect_type()) {
      set_collect_type(from.collect_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void collect_explore_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void collect_explore_req::CopyFrom(const collect_explore_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool collect_explore_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void collect_explore_req::Swap(collect_explore_req* other) {
  if (other != this) {
    std::swap(collect_type_, other->collect_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata collect_explore_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = collect_explore_req_descriptor_;
  metadata.reflection = collect_explore_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int collect_explore_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

collect_explore_rsp::collect_explore_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void collect_explore_rsp::InitAsDefaultInstance() {
}

collect_explore_rsp::collect_explore_rsp(const collect_explore_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void collect_explore_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

collect_explore_rsp::~collect_explore_rsp() {
  SharedDtor();
}

void collect_explore_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void collect_explore_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* collect_explore_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return collect_explore_rsp_descriptor_;
}

const collect_explore_rsp& collect_explore_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

collect_explore_rsp* collect_explore_rsp::default_instance_ = NULL;

collect_explore_rsp* collect_explore_rsp::New() const {
  return new collect_explore_rsp;
}

void collect_explore_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool collect_explore_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void collect_explore_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* collect_explore_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int collect_explore_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void collect_explore_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const collect_explore_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const collect_explore_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void collect_explore_rsp::MergeFrom(const collect_explore_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void collect_explore_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void collect_explore_rsp::CopyFrom(const collect_explore_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool collect_explore_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void collect_explore_rsp::Swap(collect_explore_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata collect_explore_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = collect_explore_rsp_descriptor_;
  metadata.reflection = collect_explore_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int record_item_info::kItemIdFieldNumber;
const int record_item_info::kItemCountFieldNumber;
#endif  // !_MSC_VER

record_item_info::record_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void record_item_info::InitAsDefaultInstance() {
}

record_item_info::record_item_info(const record_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void record_item_info::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

record_item_info::~record_item_info() {
  SharedDtor();
}

void record_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void record_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* record_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_item_info_descriptor_;
}

const record_item_info& record_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

record_item_info* record_item_info::default_instance_ = NULL;

record_item_info* record_item_info::New() const {
  return new record_item_info;
}

void record_item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool record_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void record_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* record_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int record_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void record_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const record_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const record_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void record_item_info::MergeFrom(const record_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void record_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record_item_info::CopyFrom(const record_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record_item_info::IsInitialized() const {

  return true;
}

void record_item_info::Swap(record_item_info* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata record_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = record_item_info_descriptor_;
  metadata.reflection = record_item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasure_db_info::kItemIdFieldNumber;
const int treasure_db_info::kItemCountFieldNumber;
const int treasure_db_info::kShopIdFieldNumber;
#endif  // !_MSC_VER

treasure_db_info::treasure_db_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasure_db_info::InitAsDefaultInstance() {
}

treasure_db_info::treasure_db_info(const treasure_db_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasure_db_info::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  shop_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasure_db_info::~treasure_db_info() {
  SharedDtor();
}

void treasure_db_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasure_db_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasure_db_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasure_db_info_descriptor_;
}

const treasure_db_info& treasure_db_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

treasure_db_info* treasure_db_info::default_instance_ = NULL;

treasure_db_info* treasure_db_info::New() const {
  return new treasure_db_info;
}

void treasure_db_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
    shop_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasure_db_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_id;
        break;
      }

      // optional uint32 shop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasure_db_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1 [default = 0];
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_count = 2 [default = 0];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  // optional uint32 shop_id = 3;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasure_db_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1 [default = 0];
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_count = 2 [default = 0];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  // optional uint32 shop_id = 3;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasure_db_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1 [default = 0];
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 2 [default = 0];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 shop_id = 3;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasure_db_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasure_db_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasure_db_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasure_db_info::MergeFrom(const treasure_db_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasure_db_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasure_db_info::CopyFrom(const treasure_db_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasure_db_info::IsInitialized() const {

  return true;
}

void treasure_db_info::Swap(treasure_db_info* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(shop_id_, other->shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasure_db_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasure_db_info_descriptor_;
  metadata.reflection = treasure_db_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_db_info::kItemSlotFieldNumber;
const int black_shop_db_info::kItemIdFieldNumber;
const int black_shop_db_info::kItemCountFieldNumber;
const int black_shop_db_info::kKeyIdFieldNumber;
const int black_shop_db_info::kIsBuyFieldNumber;
#endif  // !_MSC_VER

black_shop_db_info::black_shop_db_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_db_info::InitAsDefaultInstance() {
}

black_shop_db_info::black_shop_db_info(const black_shop_db_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_db_info::SharedCtor() {
  _cached_size_ = 0;
  item_slot_ = 0u;
  item_id_ = 0u;
  item_count_ = 0u;
  key_id_ = 0u;
  is_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_db_info::~black_shop_db_info() {
  SharedDtor();
}

void black_shop_db_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_db_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_db_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_db_info_descriptor_;
}

const black_shop_db_info& black_shop_db_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_db_info* black_shop_db_info::default_instance_ = NULL;

black_shop_db_info* black_shop_db_info::New() const {
  return new black_shop_db_info;
}

void black_shop_db_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_slot_ = 0u;
    item_id_ = 0u;
    item_count_ = 0u;
    key_id_ = 0u;
    is_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_db_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_slot_)));
          set_has_item_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_id;
        break;
      }

      // optional uint32 key_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_buy;
        break;
      }

      // optional bool is_buy = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_db_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_slot = 1;
  if (has_item_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_slot(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_id(), output);
  }

  // optional bool is_buy = 5 [default = false];
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_db_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_slot = 1;
  if (has_item_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_slot(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // optional uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_id(), target);
  }

  // optional bool is_buy = 5 [default = false];
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_db_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_slot = 1;
    if (has_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_slot());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 key_id = 4;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

    // optional bool is_buy = 5 [default = false];
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_db_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_db_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_db_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_db_info::MergeFrom(const black_shop_db_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_slot()) {
      set_item_slot(from.item_slot());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_db_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_db_info::CopyFrom(const black_shop_db_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_db_info::IsInitialized() const {

  return true;
}

void black_shop_db_info::Swap(black_shop_db_info* other) {
  if (other != this) {
    std::swap(item_slot_, other->item_slot_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(key_id_, other->key_id_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_db_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_db_info_descriptor_;
  metadata.reflection = black_shop_db_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_info::kItemIdFieldNumber;
const int shop_info::kItemCountFieldNumber;
const int shop_info::kProbabilityFieldNumber;
const int shop_info::kKeyIdFieldNumber;
#endif  // !_MSC_VER

shop_info::shop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_info::InitAsDefaultInstance() {
}

shop_info::shop_info(const shop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_info::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  probability_ = 0u;
  key_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_info::~shop_info() {
  SharedDtor();
}

void shop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_info_descriptor_;
}

const shop_info& shop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

shop_info* shop_info::default_instance_ = NULL;

shop_info* shop_info::New() const {
  return new shop_info;
}

void shop_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
    probability_ = 0u;
    key_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_probability;
        break;
      }

      // optional uint32 probability = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_id;
        break;
      }

      // optional uint32 key_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  // optional uint32 probability = 3;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->probability(), output);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  // optional uint32 probability = 3;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->probability(), target);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 probability = 3;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probability());
    }

    // optional uint32 key_id = 4;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_info::MergeFrom(const shop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_info::CopyFrom(const shop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_info::IsInitialized() const {

  return true;
}

void shop_info::Swap(shop_info* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(probability_, other->probability_);
    std::swap(key_id_, other->key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_info_descriptor_;
  metadata.reflection = shop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_req::kUnixtimeFieldNumber;
const int black_shop_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

black_shop_req::black_shop_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

black_shop_req::black_shop_req(const black_shop_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_req::~black_shop_req() {
  SharedDtor();
}

void black_shop_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void black_shop_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_req_descriptor_;
}

const black_shop_req& black_shop_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_req* black_shop_req::default_instance_ = NULL;

black_shop_req* black_shop_req::New() const {
  return new black_shop_req;
}

void black_shop_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_req::MergeFrom(const black_shop_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_req::CopyFrom(const black_shop_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void black_shop_req::Swap(black_shop_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_req_descriptor_;
  metadata.reflection = black_shop_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_rsp::kResultTypeFieldNumber;
const int black_shop_rsp::kRefleshCountFieldNumber;
const int black_shop_rsp::kTimeFieldNumber;
const int black_shop_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

black_shop_rsp::black_shop_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_rsp::InitAsDefaultInstance() {
}

black_shop_rsp::black_shop_rsp(const black_shop_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  reflesh_count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_rsp::~black_shop_rsp() {
  SharedDtor();
}

void black_shop_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_rsp_descriptor_;
}

const black_shop_rsp& black_shop_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_rsp* black_shop_rsp::default_instance_ = NULL;

black_shop_rsp* black_shop_rsp::New() const {
  return new black_shop_rsp;
}

void black_shop_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    reflesh_count_ = 0u;
    time_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reflesh_count;
        break;
      }

      // optional uint32 reflesh_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reflesh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reflesh_count_)));
          set_has_reflesh_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .client.black_shop_db_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional uint32 reflesh_count = 2;
  if (has_reflesh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reflesh_count(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // repeated .client.black_shop_db_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional uint32 reflesh_count = 2;
  if (has_reflesh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reflesh_count(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // repeated .client.black_shop_db_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 reflesh_count = 2;
    if (has_reflesh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reflesh_count());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .client.black_shop_db_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_rsp::MergeFrom(const black_shop_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_reflesh_count()) {
      set_reflesh_count(from.reflesh_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_rsp::CopyFrom(const black_shop_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void black_shop_rsp::Swap(black_shop_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(reflesh_count_, other->reflesh_count_);
    std::swap(time_, other->time_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_rsp_descriptor_;
  metadata.reflection = black_shop_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_reflesh_req::kUnixtimeFieldNumber;
const int black_shop_reflesh_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

black_shop_reflesh_req::black_shop_reflesh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_reflesh_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

black_shop_reflesh_req::black_shop_reflesh_req(const black_shop_reflesh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_reflesh_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_reflesh_req::~black_shop_reflesh_req() {
  SharedDtor();
}

void black_shop_reflesh_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void black_shop_reflesh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_reflesh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_reflesh_req_descriptor_;
}

const black_shop_reflesh_req& black_shop_reflesh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_reflesh_req* black_shop_reflesh_req::default_instance_ = NULL;

black_shop_reflesh_req* black_shop_reflesh_req::New() const {
  return new black_shop_reflesh_req;
}

void black_shop_reflesh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_reflesh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_reflesh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_reflesh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_reflesh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_reflesh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_reflesh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_reflesh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_reflesh_req::MergeFrom(const black_shop_reflesh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_reflesh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_reflesh_req::CopyFrom(const black_shop_reflesh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_reflesh_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void black_shop_reflesh_req::Swap(black_shop_reflesh_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_reflesh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_reflesh_req_descriptor_;
  metadata.reflection = black_shop_reflesh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_reflesh_rsp::kResultTypeFieldNumber;
const int black_shop_reflesh_rsp::kRefleshCountFieldNumber;
const int black_shop_reflesh_rsp::kTimeFieldNumber;
const int black_shop_reflesh_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

black_shop_reflesh_rsp::black_shop_reflesh_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_reflesh_rsp::InitAsDefaultInstance() {
}

black_shop_reflesh_rsp::black_shop_reflesh_rsp(const black_shop_reflesh_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_reflesh_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  reflesh_count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_reflesh_rsp::~black_shop_reflesh_rsp() {
  SharedDtor();
}

void black_shop_reflesh_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_reflesh_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_reflesh_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_reflesh_rsp_descriptor_;
}

const black_shop_reflesh_rsp& black_shop_reflesh_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_reflesh_rsp* black_shop_reflesh_rsp::default_instance_ = NULL;

black_shop_reflesh_rsp* black_shop_reflesh_rsp::New() const {
  return new black_shop_reflesh_rsp;
}

void black_shop_reflesh_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    reflesh_count_ = 0u;
    time_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_reflesh_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reflesh_count;
        break;
      }

      // optional uint32 reflesh_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reflesh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reflesh_count_)));
          set_has_reflesh_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .client.black_shop_db_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_reflesh_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional uint32 reflesh_count = 2;
  if (has_reflesh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reflesh_count(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // repeated .client.black_shop_db_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_reflesh_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional uint32 reflesh_count = 2;
  if (has_reflesh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reflesh_count(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // repeated .client.black_shop_db_info info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_reflesh_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 reflesh_count = 2;
    if (has_reflesh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reflesh_count());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .client.black_shop_db_info info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_reflesh_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_reflesh_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_reflesh_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_reflesh_rsp::MergeFrom(const black_shop_reflesh_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_reflesh_count()) {
      set_reflesh_count(from.reflesh_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_reflesh_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_reflesh_rsp::CopyFrom(const black_shop_reflesh_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_reflesh_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void black_shop_reflesh_rsp::Swap(black_shop_reflesh_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(reflesh_count_, other->reflesh_count_);
    std::swap(time_, other->time_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_reflesh_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_reflesh_rsp_descriptor_;
  metadata.reflection = black_shop_reflesh_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_buy_req::kItemSlotFieldNumber;
const int black_shop_buy_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

black_shop_buy_req::black_shop_buy_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_buy_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

black_shop_buy_req::black_shop_buy_req(const black_shop_buy_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_buy_req::SharedCtor() {
  _cached_size_ = 0;
  item_slot_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_buy_req::~black_shop_buy_req() {
  SharedDtor();
}

void black_shop_buy_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void black_shop_buy_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_buy_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_buy_req_descriptor_;
}

const black_shop_buy_req& black_shop_buy_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_buy_req* black_shop_buy_req::default_instance_ = NULL;

black_shop_buy_req* black_shop_buy_req::New() const {
  return new black_shop_buy_req;
}

void black_shop_buy_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_slot_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_buy_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_slot_)));
          set_has_item_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_buy_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_slot = 1;
  if (has_item_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_slot(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_buy_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_slot = 1;
  if (has_item_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_slot(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_buy_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_slot = 1;
    if (has_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_slot());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_buy_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_buy_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_buy_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_buy_req::MergeFrom(const black_shop_buy_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_slot()) {
      set_item_slot(from.item_slot());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_buy_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_buy_req::CopyFrom(const black_shop_buy_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_buy_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void black_shop_buy_req::Swap(black_shop_buy_req* other) {
  if (other != this) {
    std::swap(item_slot_, other->item_slot_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_buy_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_buy_req_descriptor_;
  metadata.reflection = black_shop_buy_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int black_shop_buy_rsp::kItemSlotFieldNumber;
const int black_shop_buy_rsp::kResultTypeFieldNumber;
const int black_shop_buy_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

black_shop_buy_rsp::black_shop_buy_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void black_shop_buy_rsp::InitAsDefaultInstance() {
}

black_shop_buy_rsp::black_shop_buy_rsp(const black_shop_buy_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void black_shop_buy_rsp::SharedCtor() {
  _cached_size_ = 0;
  item_slot_ = 0u;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

black_shop_buy_rsp::~black_shop_buy_rsp() {
  SharedDtor();
}

void black_shop_buy_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void black_shop_buy_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* black_shop_buy_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return black_shop_buy_rsp_descriptor_;
}

const black_shop_buy_rsp& black_shop_buy_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

black_shop_buy_rsp* black_shop_buy_rsp::default_instance_ = NULL;

black_shop_buy_rsp* black_shop_buy_rsp::New() const {
  return new black_shop_buy_rsp;
}

void black_shop_buy_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_slot_ = 0u;
    result_type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool black_shop_buy_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_slot_)));
          set_has_item_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .client.black_shop_db_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void black_shop_buy_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_slot = 1;
  if (has_item_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_slot(), output);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_type(), output);
  }

  // repeated .client.black_shop_db_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* black_shop_buy_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_slot = 1;
  if (has_item_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_slot(), target);
  }

  // required uint32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_type(), target);
  }

  // repeated .client.black_shop_db_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int black_shop_buy_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_slot = 1;
    if (has_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_slot());
    }

    // required uint32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  // repeated .client.black_shop_db_info info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void black_shop_buy_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const black_shop_buy_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const black_shop_buy_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void black_shop_buy_rsp::MergeFrom(const black_shop_buy_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_slot()) {
      set_item_slot(from.item_slot());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void black_shop_buy_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void black_shop_buy_rsp::CopyFrom(const black_shop_buy_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool black_shop_buy_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void black_shop_buy_rsp::Swap(black_shop_buy_rsp* other) {
  if (other != this) {
    std::swap(item_slot_, other->item_slot_);
    std::swap(result_type_, other->result_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata black_shop_buy_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = black_shop_buy_rsp_descriptor_;
  metadata.reflection = black_shop_buy_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_props_show_rsp::kRspTypeFieldNumber;
const int use_props_show_rsp::kShowInfoFieldNumber;
#endif  // !_MSC_VER

use_props_show_rsp::use_props_show_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_props_show_rsp::InitAsDefaultInstance() {
}

use_props_show_rsp::use_props_show_rsp(const use_props_show_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_props_show_rsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_props_show_rsp::~use_props_show_rsp() {
  SharedDtor();
}

void use_props_show_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void use_props_show_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_props_show_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_props_show_rsp_descriptor_;
}

const use_props_show_rsp& use_props_show_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

use_props_show_rsp* use_props_show_rsp::default_instance_ = NULL;

use_props_show_rsp* use_props_show_rsp::New() const {
  return new use_props_show_rsp;
}

void use_props_show_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_type_ = 0u;
  }
  show_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_props_show_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rsp_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rsp_type_)));
          set_has_rsp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show_info;
        break;
      }

      // repeated .client.props_info show_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_props_show_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rsp_type = 1;
  if (has_rsp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rsp_type(), output);
  }

  // repeated .client.props_info show_info = 2;
  for (int i = 0; i < this->show_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_props_show_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rsp_type = 1;
  if (has_rsp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rsp_type(), target);
  }

  // repeated .client.props_info show_info = 2;
  for (int i = 0; i < this->show_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_props_show_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rsp_type = 1;
    if (has_rsp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rsp_type());
    }

  }
  // repeated .client.props_info show_info = 2;
  total_size += 1 * this->show_info_size();
  for (int i = 0; i < this->show_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_props_show_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_props_show_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_props_show_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_props_show_rsp::MergeFrom(const use_props_show_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_info_.MergeFrom(from.show_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_type()) {
      set_rsp_type(from.rsp_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_props_show_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_props_show_rsp::CopyFrom(const use_props_show_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_props_show_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < show_info_size(); i++) {
    if (!this->show_info(i).IsInitialized()) return false;
  }
  return true;
}

void use_props_show_rsp::Swap(use_props_show_rsp* other) {
  if (other != this) {
    std::swap(rsp_type_, other->rsp_type_);
    show_info_.Swap(&other->show_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_props_show_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_props_show_rsp_descriptor_;
  metadata.reflection = use_props_show_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int record_attr::kOldValueFieldNumber;
const int record_attr::kNewValueFieldNumber;
#endif  // !_MSC_VER

record_attr::record_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void record_attr::InitAsDefaultInstance() {
}

record_attr::record_attr(const record_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void record_attr::SharedCtor() {
  _cached_size_ = 0;
  old_value_ = 0u;
  new_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

record_attr::~record_attr() {
  SharedDtor();
}

void record_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void record_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* record_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_attr_descriptor_;
}

const record_attr& record_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fprops_2eproto();
  return *default_instance_;
}

record_attr* record_attr::default_instance_ = NULL;

record_attr* record_attr::New() const {
  return new record_attr;
}

void record_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_value_ = 0u;
    new_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool record_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 old_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_value_)));
          set_has_old_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_value;
        break;
      }

      // optional uint32 new_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_value_)));
          set_has_new_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void record_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 old_value = 1;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_value(), output);
  }

  // optional uint32 new_value = 2;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* record_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 old_value = 1;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_value(), target);
  }

  // optional uint32 new_value = 2;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int record_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 old_value = 1;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_value());
    }

    // optional uint32 new_value = 2;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void record_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const record_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const record_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void record_attr::MergeFrom(const record_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
    if (from.has_new_value()) {
      set_new_value(from.new_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void record_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record_attr::CopyFrom(const record_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record_attr::IsInitialized() const {

  return true;
}

void record_attr::Swap(record_attr* other) {
  if (other != this) {
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata record_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = record_attr_descriptor_;
  metadata.reflection = record_attr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
