// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.scene_ready.proto

#ifndef PROTOBUF_client_2escene_5fready_2eproto__INCLUDED
#define PROTOBUF_client_2escene_5fready_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2escene_5fready_2eproto();
void protobuf_AssignDesc_client_2escene_5fready_2eproto();
void protobuf_ShutdownFile_client_2escene_5fready_2eproto();

class scene_ready;

enum scene_ready_READY_OCCASION {
  scene_ready_READY_OCCASION_LOGIN = 0,
  scene_ready_READY_OCCASION_JUMP = 1
};
bool scene_ready_READY_OCCASION_IsValid(int value);
const scene_ready_READY_OCCASION scene_ready_READY_OCCASION_READY_OCCASION_MIN = scene_ready_READY_OCCASION_LOGIN;
const scene_ready_READY_OCCASION scene_ready_READY_OCCASION_READY_OCCASION_MAX = scene_ready_READY_OCCASION_JUMP;
const int scene_ready_READY_OCCASION_READY_OCCASION_ARRAYSIZE = scene_ready_READY_OCCASION_READY_OCCASION_MAX + 1;

const ::google::protobuf::EnumDescriptor* scene_ready_READY_OCCASION_descriptor();
inline const ::std::string& scene_ready_READY_OCCASION_Name(scene_ready_READY_OCCASION value) {
  return ::google::protobuf::internal::NameOfEnum(
    scene_ready_READY_OCCASION_descriptor(), value);
}
inline bool scene_ready_READY_OCCASION_Parse(
    const ::std::string& name, scene_ready_READY_OCCASION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<scene_ready_READY_OCCASION>(
    scene_ready_READY_OCCASION_descriptor(), name, value);
}
// ===================================================================

class scene_ready : public ::google::protobuf::Message {
 public:
  scene_ready();
  virtual ~scene_ready();

  scene_ready(const scene_ready& from);

  inline scene_ready& operator=(const scene_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_ready& default_instance();

  void Swap(scene_ready* other);

  // implements Message ----------------------------------------------

  scene_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_ready& from);
  void MergeFrom(const scene_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef scene_ready_READY_OCCASION READY_OCCASION;
  static const READY_OCCASION LOGIN = scene_ready_READY_OCCASION_LOGIN;
  static const READY_OCCASION JUMP = scene_ready_READY_OCCASION_JUMP;
  static inline bool READY_OCCASION_IsValid(int value) {
    return scene_ready_READY_OCCASION_IsValid(value);
  }
  static const READY_OCCASION READY_OCCASION_MIN =
    scene_ready_READY_OCCASION_READY_OCCASION_MIN;
  static const READY_OCCASION READY_OCCASION_MAX =
    scene_ready_READY_OCCASION_READY_OCCASION_MAX;
  static const int READY_OCCASION_ARRAYSIZE =
    scene_ready_READY_OCCASION_READY_OCCASION_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  READY_OCCASION_descriptor() {
    return scene_ready_READY_OCCASION_descriptor();
  }
  static inline const ::std::string& READY_OCCASION_Name(READY_OCCASION value) {
    return scene_ready_READY_OCCASION_Name(value);
  }
  static inline bool READY_OCCASION_Parse(const ::std::string& name,
      READY_OCCASION* value) {
    return scene_ready_READY_OCCASION_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 time_now = 1;
  inline bool has_time_now() const;
  inline void clear_time_now();
  static const int kTimeNowFieldNumber = 1;
  inline ::google::protobuf::uint32 time_now() const;
  inline void set_time_now(::google::protobuf::uint32 value);

  // optional .client.scene_ready.READY_OCCASION ro = 2;
  inline bool has_ro() const;
  inline void clear_ro();
  static const int kRoFieldNumber = 2;
  inline ::client::scene_ready_READY_OCCASION ro() const;
  inline void set_ro(::client::scene_ready_READY_OCCASION value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.scene_ready)
 private:
  inline void set_has_time_now();
  inline void clear_has_time_now();
  inline void set_has_ro();
  inline void clear_has_ro();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_now_;
  int ro_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2escene_5fready_2eproto();
  friend void protobuf_AssignDesc_client_2escene_5fready_2eproto();
  friend void protobuf_ShutdownFile_client_2escene_5fready_2eproto();

  void InitAsDefaultInstance();
  static scene_ready* default_instance_;
};
// ===================================================================


// ===================================================================

// scene_ready

// required uint32 time_now = 1;
inline bool scene_ready::has_time_now() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scene_ready::set_has_time_now() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scene_ready::clear_has_time_now() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scene_ready::clear_time_now() {
  time_now_ = 0u;
  clear_has_time_now();
}
inline ::google::protobuf::uint32 scene_ready::time_now() const {
  return time_now_;
}
inline void scene_ready::set_time_now(::google::protobuf::uint32 value) {
  set_has_time_now();
  time_now_ = value;
}

// optional .client.scene_ready.READY_OCCASION ro = 2;
inline bool scene_ready::has_ro() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scene_ready::set_has_ro() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scene_ready::clear_has_ro() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scene_ready::clear_ro() {
  ro_ = 0;
  clear_has_ro();
}
inline ::client::scene_ready_READY_OCCASION scene_ready::ro() const {
  return static_cast< ::client::scene_ready_READY_OCCASION >(ro_);
}
inline void scene_ready::set_ro(::client::scene_ready_READY_OCCASION value) {
  assert(::client::scene_ready_READY_OCCASION_IsValid(value));
  set_has_ro();
  ro_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool scene_ready::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scene_ready::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scene_ready::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scene_ready::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& scene_ready::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* scene_ready::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* scene_ready::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void scene_ready::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::scene_ready_READY_OCCASION>() {
  return ::client::scene_ready_READY_OCCASION_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2escene_5fready_2eproto__INCLUDED
