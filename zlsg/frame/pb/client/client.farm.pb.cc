// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.farm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.farm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* farm_land_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_land_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_slave_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_slave_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_farm_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_farm_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_record_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_record_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_create_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_create_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_create_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_create_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_enter_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_enter_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_entered_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_entered_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_sow_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_sow_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_sow_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_sow_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_steal_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_steal_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_steal_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_steal_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_stolen_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_stolen_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_steal_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_steal_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_improve_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_improve_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_improve_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_improve_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* farmer_role_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farmer_role_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_money_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_money_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* farm_gain_money_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  farm_gain_money_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FARM_OPERATE_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FARM_PARAM_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FARM_OPERATE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FARM_CROP_STATUS_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FARM_IMPROVE_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2efarm_2eproto() {
  protobuf_AddDesc_client_2efarm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.farm.proto");
  GOOGLE_CHECK(file != NULL);
  farm_land_info_descriptor_ = file->message_type(0);
  static const int farm_land_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, land_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, sow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, total_fruit_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, steal_fruit_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, steal_role_id_),
  };
  farm_land_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_land_info_descriptor_,
      farm_land_info::default_instance_,
      farm_land_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_land_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_land_info));
  farm_slave_info_descriptor_ = file->message_type(1);
  static const int farm_slave_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_slave_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_slave_info, time_end_),
  };
  farm_slave_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_slave_info_descriptor_,
      farm_slave_info::default_instance_,
      farm_slave_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_slave_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_slave_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_slave_info));
  farm_info_descriptor_ = file->message_type(2);
  static const int farm_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, money_tree_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, fli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, fsi_),
  };
  farm_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_info_descriptor_,
      farm_info::default_instance_,
      farm_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_info));
  update_farm_info_descriptor_ = file->message_type(3);
  static const int update_farm_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_farm_info, is_create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_farm_info, fi_),
  };
  update_farm_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_farm_info_descriptor_,
      update_farm_info::default_instance_,
      update_farm_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_farm_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_farm_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_farm_info));
  farm_info_req_descriptor_ = file->message_type(4);
  static const int farm_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_req, svr_head_),
  };
  farm_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_info_req_descriptor_,
      farm_info_req::default_instance_,
      farm_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_info_req));
  farm_info_rsp_descriptor_ = file->message_type(5);
  static const int farm_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_rsp, fis_),
  };
  farm_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_info_rsp_descriptor_,
      farm_info_rsp::default_instance_,
      farm_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_info_rsp));
  farm_record_descriptor_ = file->message_type(6);
  static const int farm_record_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, serial_),
  };
  farm_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_record_descriptor_,
      farm_record::default_instance_,
      farm_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_record));
  farm_record_req_descriptor_ = file->message_type(7);
  static const int farm_record_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_req, svr_head_),
  };
  farm_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_record_req_descriptor_,
      farm_record_req::default_instance_,
      farm_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_record_req));
  farm_record_rsp_descriptor_ = file->message_type(8);
  static const int farm_record_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_rsp, frs_),
  };
  farm_record_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_record_rsp_descriptor_,
      farm_record_rsp::default_instance_,
      farm_record_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_record_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_record_rsp));
  farm_create_req_descriptor_ = file->message_type(9);
  static const int farm_create_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_req, advanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_req, svr_head_),
  };
  farm_create_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_create_req_descriptor_,
      farm_create_req::default_instance_,
      farm_create_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_create_req));
  farm_create_rsp_descriptor_ = file->message_type(10);
  static const int farm_create_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_rsp, fi_),
  };
  farm_create_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_create_rsp_descriptor_,
      farm_create_rsp::default_instance_,
      farm_create_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_create_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_create_rsp));
  farm_enter_req_descriptor_ = file->message_type(11);
  static const int farm_enter_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_req, svr_head_),
  };
  farm_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_enter_req_descriptor_,
      farm_enter_req::default_instance_,
      farm_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_enter_req));
  farm_enter_rsp_descriptor_ = file->message_type(12);
  static const int farm_enter_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_rsp, ret_),
  };
  farm_enter_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_enter_rsp_descriptor_,
      farm_enter_rsp::default_instance_,
      farm_enter_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_enter_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_enter_rsp));
  farm_entered_msg_descriptor_ = file->message_type(13);
  static const int farm_entered_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_entered_msg, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_entered_msg, farmer_id_),
  };
  farm_entered_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_entered_msg_descriptor_,
      farm_entered_msg::default_instance_,
      farm_entered_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_entered_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_entered_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_entered_msg));
  farm_sow_req_descriptor_ = file->message_type(14);
  static const int farm_sow_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_req, land_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_req, svr_head_),
  };
  farm_sow_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_sow_req_descriptor_,
      farm_sow_req::default_instance_,
      farm_sow_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_sow_req));
  farm_sow_rsp_descriptor_ = file->message_type(15);
  static const int farm_sow_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_rsp, fli_),
  };
  farm_sow_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_sow_rsp_descriptor_,
      farm_sow_rsp::default_instance_,
      farm_sow_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_sow_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_sow_rsp));
  farm_steal_req_descriptor_ = file->message_type(16);
  static const int farm_steal_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_req, land_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_req, svr_head_),
  };
  farm_steal_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_steal_req_descriptor_,
      farm_steal_req::default_instance_,
      farm_steal_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_steal_req));
  farm_steal_msg_descriptor_ = file->message_type(17);
  static const int farm_steal_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_msg, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_msg, farm_role_id_),
  };
  farm_steal_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_steal_msg_descriptor_,
      farm_steal_msg::default_instance_,
      farm_steal_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_steal_msg));
  farm_stolen_msg_descriptor_ = file->message_type(18);
  static const int farm_stolen_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, farm_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, thief_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, steal_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, steal_num_),
  };
  farm_stolen_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_stolen_msg_descriptor_,
      farm_stolen_msg::default_instance_,
      farm_stolen_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_stolen_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_stolen_msg));
  farm_steal_rsp_descriptor_ = file->message_type(19);
  static const int farm_steal_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_rsp, lose_money_),
  };
  farm_steal_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_steal_rsp_descriptor_,
      farm_steal_rsp::default_instance_,
      farm_steal_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_steal_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_steal_rsp));
  farm_gain_req_descriptor_ = file->message_type(20);
  static const int farm_gain_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_req, land_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_req, svr_head_),
  };
  farm_gain_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_req_descriptor_,
      farm_gain_req::default_instance_,
      farm_gain_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_req));
  farm_gain_rsp_descriptor_ = file->message_type(21);
  static const int farm_gain_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_rsp, add_score_),
  };
  farm_gain_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_rsp_descriptor_,
      farm_gain_rsp::default_instance_,
      farm_gain_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_rsp));
  farm_gain_unit_descriptor_ = file->message_type(22);
  static const int farm_gain_unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_unit, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_unit, goods_num_),
  };
  farm_gain_unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_unit_descriptor_,
      farm_gain_unit::default_instance_,
      farm_gain_unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_unit));
  farm_gain_msg_descriptor_ = file->message_type(23);
  static const int farm_gain_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_msg, farm_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_msg, fgus_),
  };
  farm_gain_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_msg_descriptor_,
      farm_gain_msg::default_instance_,
      farm_gain_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_msg));
  farm_improve_req_descriptor_ = file->message_type(24);
  static const int farm_improve_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, land_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, svr_head_),
  };
  farm_improve_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_improve_req_descriptor_,
      farm_improve_req::default_instance_,
      farm_improve_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_improve_req));
  farm_improve_rsp_descriptor_ = file->message_type(25);
  static const int farm_improve_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_rsp, improve_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_rsp, fli_),
  };
  farm_improve_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_improve_rsp_descriptor_,
      farm_improve_rsp::default_instance_,
      farm_improve_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_improve_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_improve_rsp));
  farmer_role_msg_descriptor_ = file->message_type(26);
  static const int farmer_role_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farmer_role_msg, role_id_),
  };
  farmer_role_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farmer_role_msg_descriptor_,
      farmer_role_msg::default_instance_,
      farmer_role_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farmer_role_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farmer_role_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farmer_role_msg));
  farm_gain_money_req_descriptor_ = file->message_type(27);
  static const int farm_gain_money_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_req, svr_head_),
  };
  farm_gain_money_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_money_req_descriptor_,
      farm_gain_money_req::default_instance_,
      farm_gain_money_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_money_req));
  farm_gain_money_rsp_descriptor_ = file->message_type(28);
  static const int farm_gain_money_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_rsp, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_rsp, role_id_),
  };
  farm_gain_money_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      farm_gain_money_rsp_descriptor_,
      farm_gain_money_rsp::default_instance_,
      farm_gain_money_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(farm_gain_money_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(farm_gain_money_rsp));
  FARM_OPERATE_TYPE_E_descriptor_ = file->enum_type(0);
  FARM_PARAM_E_descriptor_ = file->enum_type(1);
  FARM_OPERATE_E_descriptor_ = file->enum_type(2);
  FARM_CROP_STATUS_E_descriptor_ = file->enum_type(3);
  FARM_IMPROVE_TYPE_E_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2efarm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_land_info_descriptor_, &farm_land_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_slave_info_descriptor_, &farm_slave_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_info_descriptor_, &farm_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_farm_info_descriptor_, &update_farm_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_info_req_descriptor_, &farm_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_info_rsp_descriptor_, &farm_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_record_descriptor_, &farm_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_record_req_descriptor_, &farm_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_record_rsp_descriptor_, &farm_record_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_create_req_descriptor_, &farm_create_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_create_rsp_descriptor_, &farm_create_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_enter_req_descriptor_, &farm_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_enter_rsp_descriptor_, &farm_enter_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_entered_msg_descriptor_, &farm_entered_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_sow_req_descriptor_, &farm_sow_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_sow_rsp_descriptor_, &farm_sow_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_steal_req_descriptor_, &farm_steal_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_steal_msg_descriptor_, &farm_steal_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_stolen_msg_descriptor_, &farm_stolen_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_steal_rsp_descriptor_, &farm_steal_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_req_descriptor_, &farm_gain_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_rsp_descriptor_, &farm_gain_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_unit_descriptor_, &farm_gain_unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_msg_descriptor_, &farm_gain_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_improve_req_descriptor_, &farm_improve_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_improve_rsp_descriptor_, &farm_improve_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farmer_role_msg_descriptor_, &farmer_role_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_money_req_descriptor_, &farm_gain_money_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    farm_gain_money_rsp_descriptor_, &farm_gain_money_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2efarm_2eproto() {
  delete farm_land_info::default_instance_;
  delete farm_land_info_reflection_;
  delete farm_slave_info::default_instance_;
  delete farm_slave_info_reflection_;
  delete farm_info::default_instance_;
  delete farm_info_reflection_;
  delete update_farm_info::default_instance_;
  delete update_farm_info_reflection_;
  delete farm_info_req::default_instance_;
  delete farm_info_req_reflection_;
  delete farm_info_rsp::default_instance_;
  delete farm_info_rsp_reflection_;
  delete farm_record::default_instance_;
  delete farm_record_reflection_;
  delete farm_record_req::default_instance_;
  delete farm_record_req_reflection_;
  delete farm_record_rsp::default_instance_;
  delete farm_record_rsp_reflection_;
  delete farm_create_req::default_instance_;
  delete farm_create_req_reflection_;
  delete farm_create_rsp::default_instance_;
  delete farm_create_rsp_reflection_;
  delete farm_enter_req::default_instance_;
  delete farm_enter_req_reflection_;
  delete farm_enter_rsp::default_instance_;
  delete farm_enter_rsp_reflection_;
  delete farm_entered_msg::default_instance_;
  delete farm_entered_msg_reflection_;
  delete farm_sow_req::default_instance_;
  delete farm_sow_req_reflection_;
  delete farm_sow_rsp::default_instance_;
  delete farm_sow_rsp_reflection_;
  delete farm_steal_req::default_instance_;
  delete farm_steal_req_reflection_;
  delete farm_steal_msg::default_instance_;
  delete farm_steal_msg_reflection_;
  delete farm_stolen_msg::default_instance_;
  delete farm_stolen_msg_reflection_;
  delete farm_steal_rsp::default_instance_;
  delete farm_steal_rsp_reflection_;
  delete farm_gain_req::default_instance_;
  delete farm_gain_req_reflection_;
  delete farm_gain_rsp::default_instance_;
  delete farm_gain_rsp_reflection_;
  delete farm_gain_unit::default_instance_;
  delete farm_gain_unit_reflection_;
  delete farm_gain_msg::default_instance_;
  delete farm_gain_msg_reflection_;
  delete farm_improve_req::default_instance_;
  delete farm_improve_req_reflection_;
  delete farm_improve_rsp::default_instance_;
  delete farm_improve_rsp_reflection_;
  delete farmer_role_msg::default_instance_;
  delete farmer_role_msg_reflection_;
  delete farm_gain_money_req::default_instance_;
  delete farm_gain_money_req_reflection_;
  delete farm_gain_money_rsp::default_instance_;
  delete farm_gain_money_rsp_reflection_;
}

void protobuf_AddDesc_client_2efarm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.farm.proto\022\006client\032\021client.comm"
    ".proto\"\350\001\n\016farm_land_info\022\022\n\007land_id\030\001 \002"
    "(\r:\0010\022\021\n\006serial\030\002 \002(\r:\0010\022\023\n\010sow_time\030\003 \001"
    "(\r:\0010\0225\n\006status\030\004 \001(\0162\032.client.FARM_CROP"
    "_STATUS_E:\tFCSE_NULL\022\024\n\tcountdown\030\005 \001(\r:"
    "\0010\022\032\n\017total_fruit_num\030\006 \001(\r:\0010\022\032\n\017steal_"
    "fruit_num\030\007 \001(\r:\0010\022\025\n\rsteal_role_id\030\010 \003("
    "\r\"4\n\017farm_slave_info\022\017\n\007role_id\030\001 \002(\r\022\020\n"
    "\010time_end\030\002 \002(\r\"\303\001\n\tfarm_info\022\022\n\007role_id"
    "\030\001 \002(\r:\0010\022\020\n\005level\030\002 \002(\r:\0010\022\020\n\005score\030\003 \002"
    "(\r:\0010\022\026\n\013total_score\030\004 \002(\r:\0010\022\033\n\020money_t"
    "ree_times\030\005 \002(\r:\0010\022#\n\003fli\030\006 \003(\0132\026.client"
    ".farm_land_info\022$\n\003fsi\030\007 \001(\0132\027.client.fa"
    "rm_slave_info\"K\n\020update_farm_info\022\030\n\tis_"
    "create\030\001 \002(\010:\005false\022\035\n\002fi\030\002 \002(\0132\021.client"
    ".farm_info\"I\n\rfarm_info_req\022\020\n\010svr_time\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"T\n\rfarm_info_rsp\022#\n\003ret\030\001 \002(\0162\026.cl"
    "ient.FARM_OPERATE_E\022\036\n\003fis\030\002 \003(\0132\021.clien"
    "t.farm_info\"\203\001\n\013farm_record\022\014\n\004time\030\001 \002("
    "\r\022)\n\004type\030\002 \002(\0162\033.client.FARM_OPERATE_TY"
    "PE_E\022\017\n\007role_id\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\r\n\005ti"
    "mes\030\005 \001(\r\022\016\n\006serial\030\006 \001(\r\"K\n\017farm_record"
    "_req\022\020\n\010svr_time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"3\n\017farm_record_rs"
    "p\022 \n\003frs\030\001 \003(\0132\023.client.farm_record\"K\n\017f"
    "arm_create_req\022\020\n\010advanced\030\001 \002(\010\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"U\n\017farm"
    "_create_rsp\022#\n\003ret\030\001 \002(\0162\026.client.FARM_O"
    "PERATE_E\022\035\n\002fi\030\002 \001(\0132\021.client.farm_info\""
    "L\n\016farm_enter_req\022\022\n\007role_id\030\001 \002(\r:\0010\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head\"5\n"
    "\016farm_enter_rsp\022#\n\003ret\030\001 \002(\0162\026.client.FA"
    "RM_OPERATE_E\"9\n\020farm_entered_msg\022\017\n\007role"
    "_id\030\001 \002(\r\022\024\n\tfarmer_id\030\002 \001(\r:\0010\"W\n\014farm_"
    "sow_req\022\017\n\007land_id\030\001 \002(\r\022\016\n\006serial\030\002 \002(\r"
    "\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head"
    "\"X\n\014farm_sow_rsp\022#\n\003ret\030\001 \002(\0162\026.client.F"
    "ARM_OPERATE_E\022#\n\003fli\030\002 \001(\0132\026.client.farm"
    "_land_info\"I\n\016farm_steal_req\022\017\n\007land_id\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"K\n\016farm_steal_msg\022#\n\003req\030\001 \002(\0132\026.c"
    "lient.farm_steal_req\022\024\n\014farm_role_id\030\002 \002"
    "(\r\"i\n\017farm_stolen_msg\022\024\n\014farm_role_id\030\001 "
    "\002(\r\022\025\n\rthief_role_id\030\002 \002(\r\022\026\n\016steal_good"
    "s_id\030\003 \002(\r\022\021\n\tsteal_num\030\004 \002(\r\"I\n\016farm_st"
    "eal_rsp\022#\n\003ret\030\001 \002(\0162\026.client.FARM_OPERA"
    "TE_E\022\022\n\nlose_money\030\002 \001(\r\"H\n\rfarm_gain_re"
    "q\022\017\n\007land_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"G\n\rfarm_gain_rsp\022#\n\003r"
    "et\030\001 \002(\0162\026.client.FARM_OPERATE_E\022\021\n\tadd_"
    "score\030\002 \001(\r\"5\n\016farm_gain_unit\022\020\n\010goods_i"
    "d\030\001 \002(\r\022\021\n\tgoods_num\030\002 \002(\r\"K\n\rfarm_gain_"
    "msg\022\024\n\014farm_role_id\030\001 \002(\r\022$\n\004fgus\030\002 \003(\0132"
    "\026.client.farm_gain_unit\"\207\001\n\020farm_improve"
    "_req\022\017\n\007role_id\030\001 \002(\r\022\017\n\007land_id\030\002 \002(\r\022)"
    "\n\004type\030\003 \002(\0162\033.client.FARM_IMPROVE_TYPE_"
    "E\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"u\n\020farm_improve_rsp\022#\n\003ret\030\001 \002(\0162\026.cli"
    "ent.FARM_OPERATE_E\022\027\n\017improve_role_id\030\002 "
    "\001(\r\022#\n\003fli\030\003 \001(\0132\026.client.farm_land_info"
    "\"%\n\017farmer_role_msg\022\022\n\007role_id\030\001 \002(\r:\0010\""
    "O\n\023farm_gain_money_req\022\020\n\010svr_time\030\001 \002(\r"
    "\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head"
    "\"Z\n\023farm_gain_money_rsp\022#\n\003ret\030\001 \002(\0162\026.c"
    "lient.FARM_OPERATE_E\022\r\n\005money\030\002 \001(\r\022\017\n\007r"
    "ole_id\030\003 \001(\r*\204\001\n\023FARM_OPERATE_TYPE_E\022\r\n\t"
    "FOTE_NULL\020\000\022\017\n\013FOTE_CREATE\020\001\022\014\n\010FOTE_SOW"
    "\020\002\022\016\n\nFOTE_ENTER\020\003\022\016\n\nFOTE_STEAL\020\004\022\020\n\014FO"
    "TE_IMPROVE\020\005\022\r\n\tFOTE_GAIN\020\006*)\n\014FARM_PARA"
    "M_E\022\031\n\025FPE_MAX_FARM_LAND_NUM\020\022*\350\003\n\016FARM_"
    "OPERATE_E\022\017\n\013FOE_SUCCESS\020\000\022\017\n\013FOE_NO_FAR"
    "M\020\001\022\026\n\022FOE_NO_ENTER_TIMES\020\002\022\026\n\022FOE_NO_ST"
    "EAL_TIMES\020\003\022\022\n\016FOE_CANT_STEAL\020\004\022\021\n\rFOE_N"
    "O_MATURE\020\005\022\017\n\013FOE_NO_SEED\020\006\022\030\n\024FOE_SEED_"
    "LEVEL_LIMIT\020\007\022\024\n\020FOE_STEAL_FAILED\020\010\022\022\n\016F"
    "OE_NOT_BELONG\020\n\022\020\n\014FOE_NO_LCHOR\020\013\022\024\n\020FOE"
    "_STEAL_KILLED\020\014\022\017\n\013FOE_STEALED\020\r\022\027\n\023FOE_"
    "STEAL_NUM_LIMIT\020\016\022\030\n\024FOE_ENTER_TIME_LIMI"
    "T\020\017\022\023\n\017FOE_LEVEL_LIMIT\020\020\022\025\n\021FOE_SOW_NUM_"
    "LIMIT\020\021\022\021\n\rFOE_SYS_ERROR\020\022\022\027\n\023FOE_CANT_S"
    "TEAL_SELF\020\023\022\026\n\022FOE_NOT_EXIST_FARM\020\024\022\027\n\023F"
    "OE_MONEY_TIMELIMIT\020\025\022\023\n\017FOE_MONEY_LIMIT\020"
    "\026*T\n\022FARM_CROP_STATUS_E\022\r\n\tFCSE_NULL\020\000\022\r"
    "\n\tFCSE_SEED\020\001\022\017\n\013FCSE_GROWUP\020\002\022\017\n\013FCSE_M"
    "ATURE\020\003*O\n\023FARM_IMPROVE_TYPE_E\022\021\n\rFITE_O"
    "NE_HOUR\020\001\022\021\n\rFITE_TWO_HOUR\020\002\022\022\n\016FITE_FIV"
    "E_HOUR\020\003", 3488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.farm.proto", &protobuf_RegisterTypes);
  farm_land_info::default_instance_ = new farm_land_info();
  farm_slave_info::default_instance_ = new farm_slave_info();
  farm_info::default_instance_ = new farm_info();
  update_farm_info::default_instance_ = new update_farm_info();
  farm_info_req::default_instance_ = new farm_info_req();
  farm_info_rsp::default_instance_ = new farm_info_rsp();
  farm_record::default_instance_ = new farm_record();
  farm_record_req::default_instance_ = new farm_record_req();
  farm_record_rsp::default_instance_ = new farm_record_rsp();
  farm_create_req::default_instance_ = new farm_create_req();
  farm_create_rsp::default_instance_ = new farm_create_rsp();
  farm_enter_req::default_instance_ = new farm_enter_req();
  farm_enter_rsp::default_instance_ = new farm_enter_rsp();
  farm_entered_msg::default_instance_ = new farm_entered_msg();
  farm_sow_req::default_instance_ = new farm_sow_req();
  farm_sow_rsp::default_instance_ = new farm_sow_rsp();
  farm_steal_req::default_instance_ = new farm_steal_req();
  farm_steal_msg::default_instance_ = new farm_steal_msg();
  farm_stolen_msg::default_instance_ = new farm_stolen_msg();
  farm_steal_rsp::default_instance_ = new farm_steal_rsp();
  farm_gain_req::default_instance_ = new farm_gain_req();
  farm_gain_rsp::default_instance_ = new farm_gain_rsp();
  farm_gain_unit::default_instance_ = new farm_gain_unit();
  farm_gain_msg::default_instance_ = new farm_gain_msg();
  farm_improve_req::default_instance_ = new farm_improve_req();
  farm_improve_rsp::default_instance_ = new farm_improve_rsp();
  farmer_role_msg::default_instance_ = new farmer_role_msg();
  farm_gain_money_req::default_instance_ = new farm_gain_money_req();
  farm_gain_money_rsp::default_instance_ = new farm_gain_money_rsp();
  farm_land_info::default_instance_->InitAsDefaultInstance();
  farm_slave_info::default_instance_->InitAsDefaultInstance();
  farm_info::default_instance_->InitAsDefaultInstance();
  update_farm_info::default_instance_->InitAsDefaultInstance();
  farm_info_req::default_instance_->InitAsDefaultInstance();
  farm_info_rsp::default_instance_->InitAsDefaultInstance();
  farm_record::default_instance_->InitAsDefaultInstance();
  farm_record_req::default_instance_->InitAsDefaultInstance();
  farm_record_rsp::default_instance_->InitAsDefaultInstance();
  farm_create_req::default_instance_->InitAsDefaultInstance();
  farm_create_rsp::default_instance_->InitAsDefaultInstance();
  farm_enter_req::default_instance_->InitAsDefaultInstance();
  farm_enter_rsp::default_instance_->InitAsDefaultInstance();
  farm_entered_msg::default_instance_->InitAsDefaultInstance();
  farm_sow_req::default_instance_->InitAsDefaultInstance();
  farm_sow_rsp::default_instance_->InitAsDefaultInstance();
  farm_steal_req::default_instance_->InitAsDefaultInstance();
  farm_steal_msg::default_instance_->InitAsDefaultInstance();
  farm_stolen_msg::default_instance_->InitAsDefaultInstance();
  farm_steal_rsp::default_instance_->InitAsDefaultInstance();
  farm_gain_req::default_instance_->InitAsDefaultInstance();
  farm_gain_rsp::default_instance_->InitAsDefaultInstance();
  farm_gain_unit::default_instance_->InitAsDefaultInstance();
  farm_gain_msg::default_instance_->InitAsDefaultInstance();
  farm_improve_req::default_instance_->InitAsDefaultInstance();
  farm_improve_rsp::default_instance_->InitAsDefaultInstance();
  farmer_role_msg::default_instance_->InitAsDefaultInstance();
  farm_gain_money_req::default_instance_->InitAsDefaultInstance();
  farm_gain_money_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2efarm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2efarm_2eproto {
  StaticDescriptorInitializer_client_2efarm_2eproto() {
    protobuf_AddDesc_client_2efarm_2eproto();
  }
} static_descriptor_initializer_client_2efarm_2eproto_;
const ::google::protobuf::EnumDescriptor* FARM_OPERATE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FARM_OPERATE_TYPE_E_descriptor_;
}
bool FARM_OPERATE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FARM_PARAM_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FARM_PARAM_E_descriptor_;
}
bool FARM_PARAM_E_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FARM_OPERATE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FARM_OPERATE_E_descriptor_;
}
bool FARM_OPERATE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FARM_CROP_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FARM_CROP_STATUS_E_descriptor_;
}
bool FARM_CROP_STATUS_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FARM_IMPROVE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FARM_IMPROVE_TYPE_E_descriptor_;
}
bool FARM_IMPROVE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int farm_land_info::kLandIdFieldNumber;
const int farm_land_info::kSerialFieldNumber;
const int farm_land_info::kSowTimeFieldNumber;
const int farm_land_info::kStatusFieldNumber;
const int farm_land_info::kCountdownFieldNumber;
const int farm_land_info::kTotalFruitNumFieldNumber;
const int farm_land_info::kStealFruitNumFieldNumber;
const int farm_land_info::kStealRoleIdFieldNumber;
#endif  // !_MSC_VER

farm_land_info::farm_land_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_land_info::InitAsDefaultInstance() {
}

farm_land_info::farm_land_info(const farm_land_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_land_info::SharedCtor() {
  _cached_size_ = 0;
  land_id_ = 0u;
  serial_ = 0u;
  sow_time_ = 0u;
  status_ = 0;
  countdown_ = 0u;
  total_fruit_num_ = 0u;
  steal_fruit_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_land_info::~farm_land_info() {
  SharedDtor();
}

void farm_land_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_land_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_land_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_land_info_descriptor_;
}

const farm_land_info& farm_land_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_land_info* farm_land_info::default_instance_ = NULL;

farm_land_info* farm_land_info::New() const {
  return new farm_land_info;
}

void farm_land_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_id_ = 0u;
    serial_ = 0u;
    sow_time_ = 0u;
    status_ = 0;
    countdown_ = 0u;
    total_fruit_num_ = 0u;
    steal_fruit_num_ = 0u;
  }
  steal_role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_land_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 land_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_id_)));
          set_has_land_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // required uint32 serial = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sow_time;
        break;
      }

      // optional uint32 sow_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sow_time_)));
          set_has_sow_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_CROP_STATUS_E_IsValid(value)) {
            set_status(static_cast< ::client::FARM_CROP_STATUS_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_countdown;
        break;
      }

      // optional uint32 countdown = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_fruit_num;
        break;
      }

      // optional uint32 total_fruit_num = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_fruit_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_fruit_num_)));
          set_has_total_fruit_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_steal_fruit_num;
        break;
      }

      // optional uint32 steal_fruit_num = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steal_fruit_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steal_fruit_num_)));
          set_has_steal_fruit_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_steal_role_id;
        break;
      }

      // repeated uint32 steal_role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steal_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_steal_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steal_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_steal_role_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_land_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 land_id = 1 [default = 0];
  if (has_land_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->land_id(), output);
  }

  // required uint32 serial = 2 [default = 0];
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial(), output);
  }

  // optional uint32 sow_time = 3 [default = 0];
  if (has_sow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sow_time(), output);
  }

  // optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional uint32 countdown = 5 [default = 0];
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countdown(), output);
  }

  // optional uint32 total_fruit_num = 6 [default = 0];
  if (has_total_fruit_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_fruit_num(), output);
  }

  // optional uint32 steal_fruit_num = 7 [default = 0];
  if (has_steal_fruit_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->steal_fruit_num(), output);
  }

  // repeated uint32 steal_role_id = 8;
  for (int i = 0; i < this->steal_role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->steal_role_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_land_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 land_id = 1 [default = 0];
  if (has_land_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->land_id(), target);
  }

  // required uint32 serial = 2 [default = 0];
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial(), target);
  }

  // optional uint32 sow_time = 3 [default = 0];
  if (has_sow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sow_time(), target);
  }

  // optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional uint32 countdown = 5 [default = 0];
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countdown(), target);
  }

  // optional uint32 total_fruit_num = 6 [default = 0];
  if (has_total_fruit_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_fruit_num(), target);
  }

  // optional uint32 steal_fruit_num = 7 [default = 0];
  if (has_steal_fruit_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->steal_fruit_num(), target);
  }

  // repeated uint32 steal_role_id = 8;
  for (int i = 0; i < this->steal_role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->steal_role_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_land_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 land_id = 1 [default = 0];
    if (has_land_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_id());
    }

    // required uint32 serial = 2 [default = 0];
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // optional uint32 sow_time = 3 [default = 0];
    if (has_sow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sow_time());
    }

    // optional .client.FARM_CROP_STATUS_E status = 4 [default = FCSE_NULL];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 countdown = 5 [default = 0];
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // optional uint32 total_fruit_num = 6 [default = 0];
    if (has_total_fruit_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_fruit_num());
    }

    // optional uint32 steal_fruit_num = 7 [default = 0];
    if (has_steal_fruit_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steal_fruit_num());
    }

  }
  // repeated uint32 steal_role_id = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->steal_role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->steal_role_id(i));
    }
    total_size += 1 * this->steal_role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_land_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_land_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_land_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_land_info::MergeFrom(const farm_land_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  steal_role_id_.MergeFrom(from.steal_role_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_id()) {
      set_land_id(from.land_id());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_sow_time()) {
      set_sow_time(from.sow_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_total_fruit_num()) {
      set_total_fruit_num(from.total_fruit_num());
    }
    if (from.has_steal_fruit_num()) {
      set_steal_fruit_num(from.steal_fruit_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_land_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_land_info::CopyFrom(const farm_land_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_land_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void farm_land_info::Swap(farm_land_info* other) {
  if (other != this) {
    std::swap(land_id_, other->land_id_);
    std::swap(serial_, other->serial_);
    std::swap(sow_time_, other->sow_time_);
    std::swap(status_, other->status_);
    std::swap(countdown_, other->countdown_);
    std::swap(total_fruit_num_, other->total_fruit_num_);
    std::swap(steal_fruit_num_, other->steal_fruit_num_);
    steal_role_id_.Swap(&other->steal_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_land_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_land_info_descriptor_;
  metadata.reflection = farm_land_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_slave_info::kRoleIdFieldNumber;
const int farm_slave_info::kTimeEndFieldNumber;
#endif  // !_MSC_VER

farm_slave_info::farm_slave_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_slave_info::InitAsDefaultInstance() {
}

farm_slave_info::farm_slave_info(const farm_slave_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_slave_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  time_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_slave_info::~farm_slave_info() {
  SharedDtor();
}

void farm_slave_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_slave_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_slave_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_slave_info_descriptor_;
}

const farm_slave_info& farm_slave_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_slave_info* farm_slave_info::default_instance_ = NULL;

farm_slave_info* farm_slave_info::New() const {
  return new farm_slave_info;
}

void farm_slave_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    time_end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_slave_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_end;
        break;
      }

      // required uint32 time_end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_end_)));
          set_has_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_slave_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 time_end = 2;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_slave_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 time_end = 2;
  if (has_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_slave_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 time_end = 2;
    if (has_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_slave_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_slave_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_slave_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_slave_info::MergeFrom(const farm_slave_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_slave_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_slave_info::CopyFrom(const farm_slave_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_slave_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void farm_slave_info::Swap(farm_slave_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(time_end_, other->time_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_slave_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_slave_info_descriptor_;
  metadata.reflection = farm_slave_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_info::kRoleIdFieldNumber;
const int farm_info::kLevelFieldNumber;
const int farm_info::kScoreFieldNumber;
const int farm_info::kTotalScoreFieldNumber;
const int farm_info::kMoneyTreeTimesFieldNumber;
const int farm_info::kFliFieldNumber;
const int farm_info::kFsiFieldNumber;
#endif  // !_MSC_VER

farm_info::farm_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_info::InitAsDefaultInstance() {
  fsi_ = const_cast< ::client::farm_slave_info*>(&::client::farm_slave_info::default_instance());
}

farm_info::farm_info(const farm_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  score_ = 0u;
  total_score_ = 0u;
  money_tree_times_ = 0u;
  fsi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_info::~farm_info() {
  SharedDtor();
}

void farm_info::SharedDtor() {
  if (this != default_instance_) {
    delete fsi_;
  }
}

void farm_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_info_descriptor_;
}

const farm_info& farm_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_info* farm_info::default_instance_ = NULL;

farm_info* farm_info::New() const {
  return new farm_info;
}

void farm_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    score_ = 0u;
    total_score_ = 0u;
    money_tree_times_ = 0u;
    if (has_fsi()) {
      if (fsi_ != NULL) fsi_->::client::farm_slave_info::Clear();
    }
  }
  fli_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required uint32 score = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_score;
        break;
      }

      // required uint32 total_score = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_tree_times;
        break;
      }

      // required uint32 money_tree_times = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_tree_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_tree_times_)));
          set_has_money_tree_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fli;
        break;
      }

      // repeated .client.farm_land_info fli = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fli;
        if (input->ExpectTag(58)) goto parse_fsi;
        break;
      }

      // optional .client.farm_slave_info fsi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 score = 3 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // required uint32 total_score = 4 [default = 0];
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_score(), output);
  }

  // required uint32 money_tree_times = 5 [default = 0];
  if (has_money_tree_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->money_tree_times(), output);
  }

  // repeated .client.farm_land_info fli = 6;
  for (int i = 0; i < this->fli_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fli(i), output);
  }

  // optional .client.farm_slave_info fsi = 7;
  if (has_fsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fsi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 score = 3 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // required uint32 total_score = 4 [default = 0];
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_score(), target);
  }

  // required uint32 money_tree_times = 5 [default = 0];
  if (has_money_tree_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->money_tree_times(), target);
  }

  // repeated .client.farm_land_info fli = 6;
  for (int i = 0; i < this->fli_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fli(i), target);
  }

  // optional .client.farm_slave_info fsi = 7;
  if (has_fsi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fsi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 score = 3 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 total_score = 4 [default = 0];
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_score());
    }

    // required uint32 money_tree_times = 5 [default = 0];
    if (has_money_tree_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_tree_times());
    }

    // optional .client.farm_slave_info fsi = 7;
    if (has_fsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fsi());
    }

  }
  // repeated .client.farm_land_info fli = 6;
  total_size += 1 * this->fli_size();
  for (int i = 0; i < this->fli_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fli(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_info::MergeFrom(const farm_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  fli_.MergeFrom(from.fli_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_money_tree_times()) {
      set_money_tree_times(from.money_tree_times());
    }
    if (from.has_fsi()) {
      mutable_fsi()->::client::farm_slave_info::MergeFrom(from.fsi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_info::CopyFrom(const farm_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < fli_size(); i++) {
    if (!this->fli(i).IsInitialized()) return false;
  }
  if (has_fsi()) {
    if (!this->fsi().IsInitialized()) return false;
  }
  return true;
}

void farm_info::Swap(farm_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(total_score_, other->total_score_);
    std::swap(money_tree_times_, other->money_tree_times_);
    fli_.Swap(&other->fli_);
    std::swap(fsi_, other->fsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_info_descriptor_;
  metadata.reflection = farm_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_farm_info::kIsCreateFieldNumber;
const int update_farm_info::kFiFieldNumber;
#endif  // !_MSC_VER

update_farm_info::update_farm_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_farm_info::InitAsDefaultInstance() {
  fi_ = const_cast< ::client::farm_info*>(&::client::farm_info::default_instance());
}

update_farm_info::update_farm_info(const update_farm_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_farm_info::SharedCtor() {
  _cached_size_ = 0;
  is_create_ = false;
  fi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_farm_info::~update_farm_info() {
  SharedDtor();
}

void update_farm_info::SharedDtor() {
  if (this != default_instance_) {
    delete fi_;
  }
}

void update_farm_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_farm_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_farm_info_descriptor_;
}

const update_farm_info& update_farm_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

update_farm_info* update_farm_info::default_instance_ = NULL;

update_farm_info* update_farm_info::New() const {
  return new update_farm_info;
}

void update_farm_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_create_ = false;
    if (has_fi()) {
      if (fi_ != NULL) fi_->::client::farm_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_farm_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_create = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_create_)));
          set_has_is_create();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fi;
        break;
      }

      // required .client.farm_info fi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_farm_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_create = 1 [default = false];
  if (has_is_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_create(), output);
  }

  // required .client.farm_info fi = 2;
  if (has_fi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_farm_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_create = 1 [default = false];
  if (has_is_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_create(), target);
  }

  // required .client.farm_info fi = 2;
  if (has_fi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_farm_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_create = 1 [default = false];
    if (has_is_create()) {
      total_size += 1 + 1;
    }

    // required .client.farm_info fi = 2;
    if (has_fi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_farm_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_farm_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_farm_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_farm_info::MergeFrom(const update_farm_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_create()) {
      set_is_create(from.is_create());
    }
    if (from.has_fi()) {
      mutable_fi()->::client::farm_info::MergeFrom(from.fi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_farm_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_farm_info::CopyFrom(const update_farm_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_farm_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fi()) {
    if (!this->fi().IsInitialized()) return false;
  }
  return true;
}

void update_farm_info::Swap(update_farm_info* other) {
  if (other != this) {
    std::swap(is_create_, other->is_create_);
    std::swap(fi_, other->fi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_farm_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_farm_info_descriptor_;
  metadata.reflection = update_farm_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_info_req::kSvrTimeFieldNumber;
const int farm_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_info_req::farm_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_info_req::farm_info_req(const farm_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_info_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_info_req::~farm_info_req() {
  SharedDtor();
}

void farm_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_info_req_descriptor_;
}

const farm_info_req& farm_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_info_req* farm_info_req::default_instance_ = NULL;

farm_info_req* farm_info_req::New() const {
  return new farm_info_req;
}

void farm_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_info_req::MergeFrom(const farm_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_info_req::CopyFrom(const farm_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_info_req::Swap(farm_info_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_info_req_descriptor_;
  metadata.reflection = farm_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_info_rsp::kRetFieldNumber;
const int farm_info_rsp::kFisFieldNumber;
#endif  // !_MSC_VER

farm_info_rsp::farm_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_info_rsp::InitAsDefaultInstance() {
}

farm_info_rsp::farm_info_rsp(const farm_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_info_rsp::~farm_info_rsp() {
  SharedDtor();
}

void farm_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_info_rsp_descriptor_;
}

const farm_info_rsp& farm_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_info_rsp* farm_info_rsp::default_instance_ = NULL;

farm_info_rsp* farm_info_rsp::New() const {
  return new farm_info_rsp;
}

void farm_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  fis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fis;
        break;
      }

      // repeated .client.farm_info fis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fis;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // repeated .client.farm_info fis = 2;
  for (int i = 0; i < this->fis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // repeated .client.farm_info fis = 2;
  for (int i = 0; i < this->fis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .client.farm_info fis = 2;
  total_size += 1 * this->fis_size();
  for (int i = 0; i < this->fis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_info_rsp::MergeFrom(const farm_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fis_.MergeFrom(from.fis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_info_rsp::CopyFrom(const farm_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fis_size(); i++) {
    if (!this->fis(i).IsInitialized()) return false;
  }
  return true;
}

void farm_info_rsp::Swap(farm_info_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    fis_.Swap(&other->fis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_info_rsp_descriptor_;
  metadata.reflection = farm_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_record::kTimeFieldNumber;
const int farm_record::kTypeFieldNumber;
const int farm_record::kRoleIdFieldNumber;
const int farm_record::kNumFieldNumber;
const int farm_record::kTimesFieldNumber;
const int farm_record::kSerialFieldNumber;
#endif  // !_MSC_VER

farm_record::farm_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_record::InitAsDefaultInstance() {
}

farm_record::farm_record(const farm_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_record::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  type_ = 0;
  role_id_ = 0u;
  num_ = 0u;
  times_ = 0u;
  serial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_record::~farm_record() {
  SharedDtor();
}

void farm_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_record_descriptor_;
}

const farm_record& farm_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_record* farm_record::default_instance_ = NULL;

farm_record* farm_record::New() const {
  return new farm_record;
}

void farm_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    type_ = 0;
    role_id_ = 0u;
    num_ = 0u;
    times_ = 0u;
    serial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.FARM_OPERATE_TYPE_E type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::FARM_OPERATE_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional uint32 times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serial;
        break;
      }

      // optional uint32 serial = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required .client.FARM_OPERATE_TYPE_E type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times(), output);
  }

  // optional uint32 serial = 6;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required .client.FARM_OPERATE_TYPE_E type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times(), target);
  }

  // optional uint32 serial = 6;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required .client.FARM_OPERATE_TYPE_E type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 serial = 6;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_record::MergeFrom(const farm_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_record::CopyFrom(const farm_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void farm_record::Swap(farm_record* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(num_, other->num_);
    std::swap(times_, other->times_);
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_record_descriptor_;
  metadata.reflection = farm_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_record_req::kSvrTimeFieldNumber;
const int farm_record_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_record_req::farm_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_record_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_record_req::farm_record_req(const farm_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_record_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_record_req::~farm_record_req() {
  SharedDtor();
}

void farm_record_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_record_req_descriptor_;
}

const farm_record_req& farm_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_record_req* farm_record_req::default_instance_ = NULL;

farm_record_req* farm_record_req::New() const {
  return new farm_record_req;
}

void farm_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_record_req::MergeFrom(const farm_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_record_req::CopyFrom(const farm_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_record_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_record_req::Swap(farm_record_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_record_req_descriptor_;
  metadata.reflection = farm_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_record_rsp::kFrsFieldNumber;
#endif  // !_MSC_VER

farm_record_rsp::farm_record_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_record_rsp::InitAsDefaultInstance() {
}

farm_record_rsp::farm_record_rsp(const farm_record_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_record_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_record_rsp::~farm_record_rsp() {
  SharedDtor();
}

void farm_record_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_record_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_record_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_record_rsp_descriptor_;
}

const farm_record_rsp& farm_record_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_record_rsp* farm_record_rsp::default_instance_ = NULL;

farm_record_rsp* farm_record_rsp::New() const {
  return new farm_record_rsp;
}

void farm_record_rsp::Clear() {
  frs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_record_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.farm_record frs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_frs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_record_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.farm_record frs = 1;
  for (int i = 0; i < this->frs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_record_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.farm_record frs = 1;
  for (int i = 0; i < this->frs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_record_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.farm_record frs = 1;
  total_size += 1 * this->frs_size();
  for (int i = 0; i < this->frs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_record_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_record_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_record_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_record_rsp::MergeFrom(const farm_record_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  frs_.MergeFrom(from.frs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_record_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_record_rsp::CopyFrom(const farm_record_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_record_rsp::IsInitialized() const {

  for (int i = 0; i < frs_size(); i++) {
    if (!this->frs(i).IsInitialized()) return false;
  }
  return true;
}

void farm_record_rsp::Swap(farm_record_rsp* other) {
  if (other != this) {
    frs_.Swap(&other->frs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_record_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_record_rsp_descriptor_;
  metadata.reflection = farm_record_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_create_req::kAdvancedFieldNumber;
const int farm_create_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_create_req::farm_create_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_create_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_create_req::farm_create_req(const farm_create_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_create_req::SharedCtor() {
  _cached_size_ = 0;
  advanced_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_create_req::~farm_create_req() {
  SharedDtor();
}

void farm_create_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_create_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_create_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_create_req_descriptor_;
}

const farm_create_req& farm_create_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_create_req* farm_create_req::default_instance_ = NULL;

farm_create_req* farm_create_req::New() const {
  return new farm_create_req;
}

void farm_create_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advanced_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_create_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool advanced = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advanced_)));
          set_has_advanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_create_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool advanced = 1;
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->advanced(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_create_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool advanced = 1;
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->advanced(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_create_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool advanced = 1;
    if (has_advanced()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_create_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_create_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_create_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_create_req::MergeFrom(const farm_create_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advanced()) {
      set_advanced(from.advanced());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_create_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_create_req::CopyFrom(const farm_create_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_create_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_create_req::Swap(farm_create_req* other) {
  if (other != this) {
    std::swap(advanced_, other->advanced_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_create_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_create_req_descriptor_;
  metadata.reflection = farm_create_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_create_rsp::kRetFieldNumber;
const int farm_create_rsp::kFiFieldNumber;
#endif  // !_MSC_VER

farm_create_rsp::farm_create_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_create_rsp::InitAsDefaultInstance() {
  fi_ = const_cast< ::client::farm_info*>(&::client::farm_info::default_instance());
}

farm_create_rsp::farm_create_rsp(const farm_create_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_create_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  fi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_create_rsp::~farm_create_rsp() {
  SharedDtor();
}

void farm_create_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete fi_;
  }
}

void farm_create_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_create_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_create_rsp_descriptor_;
}

const farm_create_rsp& farm_create_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_create_rsp* farm_create_rsp::default_instance_ = NULL;

farm_create_rsp* farm_create_rsp::New() const {
  return new farm_create_rsp;
}

void farm_create_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_fi()) {
      if (fi_ != NULL) fi_->::client::farm_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_create_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fi;
        break;
      }

      // optional .client.farm_info fi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_create_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .client.farm_info fi = 2;
  if (has_fi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_create_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .client.farm_info fi = 2;
  if (has_fi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_create_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .client.farm_info fi = 2;
    if (has_fi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_create_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_create_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_create_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_create_rsp::MergeFrom(const farm_create_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_fi()) {
      mutable_fi()->::client::farm_info::MergeFrom(from.fi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_create_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_create_rsp::CopyFrom(const farm_create_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_create_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fi()) {
    if (!this->fi().IsInitialized()) return false;
  }
  return true;
}

void farm_create_rsp::Swap(farm_create_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(fi_, other->fi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_create_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_create_rsp_descriptor_;
  metadata.reflection = farm_create_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_enter_req::kRoleIdFieldNumber;
const int farm_enter_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_enter_req::farm_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_enter_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_enter_req::farm_enter_req(const farm_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_enter_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_enter_req::~farm_enter_req() {
  SharedDtor();
}

void farm_enter_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_enter_req_descriptor_;
}

const farm_enter_req& farm_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_enter_req* farm_enter_req::default_instance_ = NULL;

farm_enter_req* farm_enter_req::New() const {
  return new farm_enter_req;
}

void farm_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_enter_req::MergeFrom(const farm_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_enter_req::CopyFrom(const farm_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_enter_req::Swap(farm_enter_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_enter_req_descriptor_;
  metadata.reflection = farm_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_enter_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

farm_enter_rsp::farm_enter_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_enter_rsp::InitAsDefaultInstance() {
}

farm_enter_rsp::farm_enter_rsp(const farm_enter_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_enter_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_enter_rsp::~farm_enter_rsp() {
  SharedDtor();
}

void farm_enter_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_enter_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_enter_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_enter_rsp_descriptor_;
}

const farm_enter_rsp& farm_enter_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_enter_rsp* farm_enter_rsp::default_instance_ = NULL;

farm_enter_rsp* farm_enter_rsp::New() const {
  return new farm_enter_rsp;
}

void farm_enter_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_enter_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_enter_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_enter_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_enter_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_enter_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_enter_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_enter_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_enter_rsp::MergeFrom(const farm_enter_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_enter_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_enter_rsp::CopyFrom(const farm_enter_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_enter_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_enter_rsp::Swap(farm_enter_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_enter_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_enter_rsp_descriptor_;
  metadata.reflection = farm_enter_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_entered_msg::kRoleIdFieldNumber;
const int farm_entered_msg::kFarmerIdFieldNumber;
#endif  // !_MSC_VER

farm_entered_msg::farm_entered_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_entered_msg::InitAsDefaultInstance() {
}

farm_entered_msg::farm_entered_msg(const farm_entered_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_entered_msg::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  farmer_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_entered_msg::~farm_entered_msg() {
  SharedDtor();
}

void farm_entered_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_entered_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_entered_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_entered_msg_descriptor_;
}

const farm_entered_msg& farm_entered_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_entered_msg* farm_entered_msg::default_instance_ = NULL;

farm_entered_msg* farm_entered_msg::New() const {
  return new farm_entered_msg;
}

void farm_entered_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    farmer_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_entered_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_farmer_id;
        break;
      }

      // optional uint32 farmer_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_farmer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &farmer_id_)));
          set_has_farmer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_entered_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 farmer_id = 2 [default = 0];
  if (has_farmer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->farmer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_entered_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 farmer_id = 2 [default = 0];
  if (has_farmer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->farmer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_entered_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 farmer_id = 2 [default = 0];
    if (has_farmer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->farmer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_entered_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_entered_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_entered_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_entered_msg::MergeFrom(const farm_entered_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_farmer_id()) {
      set_farmer_id(from.farmer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_entered_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_entered_msg::CopyFrom(const farm_entered_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_entered_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_entered_msg::Swap(farm_entered_msg* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(farmer_id_, other->farmer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_entered_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_entered_msg_descriptor_;
  metadata.reflection = farm_entered_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_sow_req::kLandIdFieldNumber;
const int farm_sow_req::kSerialFieldNumber;
const int farm_sow_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_sow_req::farm_sow_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_sow_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_sow_req::farm_sow_req(const farm_sow_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_sow_req::SharedCtor() {
  _cached_size_ = 0;
  land_id_ = 0u;
  serial_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_sow_req::~farm_sow_req() {
  SharedDtor();
}

void farm_sow_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_sow_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_sow_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_sow_req_descriptor_;
}

const farm_sow_req& farm_sow_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_sow_req* farm_sow_req::default_instance_ = NULL;

farm_sow_req* farm_sow_req::New() const {
  return new farm_sow_req;
}

void farm_sow_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_id_ = 0u;
    serial_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_sow_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 land_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_id_)));
          set_has_land_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // required uint32 serial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_sow_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 land_id = 1;
  if (has_land_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->land_id(), output);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_sow_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 land_id = 1;
  if (has_land_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->land_id(), target);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_sow_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 land_id = 1;
    if (has_land_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_id());
    }

    // required uint32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_sow_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_sow_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_sow_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_sow_req::MergeFrom(const farm_sow_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_id()) {
      set_land_id(from.land_id());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_sow_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_sow_req::CopyFrom(const farm_sow_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_sow_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void farm_sow_req::Swap(farm_sow_req* other) {
  if (other != this) {
    std::swap(land_id_, other->land_id_);
    std::swap(serial_, other->serial_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_sow_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_sow_req_descriptor_;
  metadata.reflection = farm_sow_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_sow_rsp::kRetFieldNumber;
const int farm_sow_rsp::kFliFieldNumber;
#endif  // !_MSC_VER

farm_sow_rsp::farm_sow_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_sow_rsp::InitAsDefaultInstance() {
  fli_ = const_cast< ::client::farm_land_info*>(&::client::farm_land_info::default_instance());
}

farm_sow_rsp::farm_sow_rsp(const farm_sow_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_sow_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  fli_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_sow_rsp::~farm_sow_rsp() {
  SharedDtor();
}

void farm_sow_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete fli_;
  }
}

void farm_sow_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_sow_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_sow_rsp_descriptor_;
}

const farm_sow_rsp& farm_sow_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_sow_rsp* farm_sow_rsp::default_instance_ = NULL;

farm_sow_rsp* farm_sow_rsp::New() const {
  return new farm_sow_rsp;
}

void farm_sow_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_fli()) {
      if (fli_ != NULL) fli_->::client::farm_land_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_sow_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fli;
        break;
      }

      // optional .client.farm_land_info fli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_sow_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .client.farm_land_info fli = 2;
  if (has_fli()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_sow_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .client.farm_land_info fli = 2;
  if (has_fli()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_sow_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .client.farm_land_info fli = 2;
    if (has_fli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_sow_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_sow_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_sow_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_sow_rsp::MergeFrom(const farm_sow_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_fli()) {
      mutable_fli()->::client::farm_land_info::MergeFrom(from.fli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_sow_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_sow_rsp::CopyFrom(const farm_sow_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_sow_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fli()) {
    if (!this->fli().IsInitialized()) return false;
  }
  return true;
}

void farm_sow_rsp::Swap(farm_sow_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(fli_, other->fli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_sow_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_sow_rsp_descriptor_;
  metadata.reflection = farm_sow_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_steal_req::kLandIdFieldNumber;
const int farm_steal_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_steal_req::farm_steal_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_steal_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_steal_req::farm_steal_req(const farm_steal_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_steal_req::SharedCtor() {
  _cached_size_ = 0;
  land_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_steal_req::~farm_steal_req() {
  SharedDtor();
}

void farm_steal_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_steal_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_steal_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_steal_req_descriptor_;
}

const farm_steal_req& farm_steal_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_steal_req* farm_steal_req::default_instance_ = NULL;

farm_steal_req* farm_steal_req::New() const {
  return new farm_steal_req;
}

void farm_steal_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_steal_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 land_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_id_)));
          set_has_land_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_steal_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 land_id = 1;
  if (has_land_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->land_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_steal_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 land_id = 1;
  if (has_land_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->land_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_steal_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 land_id = 1;
    if (has_land_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_steal_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_steal_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_steal_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_steal_req::MergeFrom(const farm_steal_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_id()) {
      set_land_id(from.land_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_steal_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_steal_req::CopyFrom(const farm_steal_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_steal_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_steal_req::Swap(farm_steal_req* other) {
  if (other != this) {
    std::swap(land_id_, other->land_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_steal_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_steal_req_descriptor_;
  metadata.reflection = farm_steal_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_steal_msg::kReqFieldNumber;
const int farm_steal_msg::kFarmRoleIdFieldNumber;
#endif  // !_MSC_VER

farm_steal_msg::farm_steal_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_steal_msg::InitAsDefaultInstance() {
  req_ = const_cast< ::client::farm_steal_req*>(&::client::farm_steal_req::default_instance());
}

farm_steal_msg::farm_steal_msg(const farm_steal_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_steal_msg::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  farm_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_steal_msg::~farm_steal_msg() {
  SharedDtor();
}

void farm_steal_msg::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void farm_steal_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_steal_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_steal_msg_descriptor_;
}

const farm_steal_msg& farm_steal_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_steal_msg* farm_steal_msg::default_instance_ = NULL;

farm_steal_msg* farm_steal_msg::New() const {
  return new farm_steal_msg;
}

void farm_steal_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::client::farm_steal_req::Clear();
    }
    farm_role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_steal_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.farm_steal_req req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_farm_role_id;
        break;
      }

      // required uint32 farm_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_farm_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &farm_role_id_)));
          set_has_farm_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_steal_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.farm_steal_req req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required uint32 farm_role_id = 2;
  if (has_farm_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->farm_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_steal_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.farm_steal_req req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required uint32 farm_role_id = 2;
  if (has_farm_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->farm_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_steal_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.farm_steal_req req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required uint32 farm_role_id = 2;
    if (has_farm_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->farm_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_steal_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_steal_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_steal_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_steal_msg::MergeFrom(const farm_steal_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::client::farm_steal_req::MergeFrom(from.req());
    }
    if (from.has_farm_role_id()) {
      set_farm_role_id(from.farm_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_steal_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_steal_msg::CopyFrom(const farm_steal_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_steal_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void farm_steal_msg::Swap(farm_steal_msg* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(farm_role_id_, other->farm_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_steal_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_steal_msg_descriptor_;
  metadata.reflection = farm_steal_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_stolen_msg::kFarmRoleIdFieldNumber;
const int farm_stolen_msg::kThiefRoleIdFieldNumber;
const int farm_stolen_msg::kStealGoodsIdFieldNumber;
const int farm_stolen_msg::kStealNumFieldNumber;
#endif  // !_MSC_VER

farm_stolen_msg::farm_stolen_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_stolen_msg::InitAsDefaultInstance() {
}

farm_stolen_msg::farm_stolen_msg(const farm_stolen_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_stolen_msg::SharedCtor() {
  _cached_size_ = 0;
  farm_role_id_ = 0u;
  thief_role_id_ = 0u;
  steal_goods_id_ = 0u;
  steal_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_stolen_msg::~farm_stolen_msg() {
  SharedDtor();
}

void farm_stolen_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_stolen_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_stolen_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_stolen_msg_descriptor_;
}

const farm_stolen_msg& farm_stolen_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_stolen_msg* farm_stolen_msg::default_instance_ = NULL;

farm_stolen_msg* farm_stolen_msg::New() const {
  return new farm_stolen_msg;
}

void farm_stolen_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    farm_role_id_ = 0u;
    thief_role_id_ = 0u;
    steal_goods_id_ = 0u;
    steal_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_stolen_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 farm_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &farm_role_id_)));
          set_has_farm_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thief_role_id;
        break;
      }

      // required uint32 thief_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thief_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thief_role_id_)));
          set_has_thief_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_steal_goods_id;
        break;
      }

      // required uint32 steal_goods_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steal_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steal_goods_id_)));
          set_has_steal_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steal_num;
        break;
      }

      // required uint32 steal_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steal_num_)));
          set_has_steal_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_stolen_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 farm_role_id = 1;
  if (has_farm_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->farm_role_id(), output);
  }

  // required uint32 thief_role_id = 2;
  if (has_thief_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thief_role_id(), output);
  }

  // required uint32 steal_goods_id = 3;
  if (has_steal_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->steal_goods_id(), output);
  }

  // required uint32 steal_num = 4;
  if (has_steal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steal_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_stolen_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 farm_role_id = 1;
  if (has_farm_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->farm_role_id(), target);
  }

  // required uint32 thief_role_id = 2;
  if (has_thief_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thief_role_id(), target);
  }

  // required uint32 steal_goods_id = 3;
  if (has_steal_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->steal_goods_id(), target);
  }

  // required uint32 steal_num = 4;
  if (has_steal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steal_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_stolen_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 farm_role_id = 1;
    if (has_farm_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->farm_role_id());
    }

    // required uint32 thief_role_id = 2;
    if (has_thief_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thief_role_id());
    }

    // required uint32 steal_goods_id = 3;
    if (has_steal_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steal_goods_id());
    }

    // required uint32 steal_num = 4;
    if (has_steal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steal_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_stolen_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_stolen_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_stolen_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_stolen_msg::MergeFrom(const farm_stolen_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_farm_role_id()) {
      set_farm_role_id(from.farm_role_id());
    }
    if (from.has_thief_role_id()) {
      set_thief_role_id(from.thief_role_id());
    }
    if (from.has_steal_goods_id()) {
      set_steal_goods_id(from.steal_goods_id());
    }
    if (from.has_steal_num()) {
      set_steal_num(from.steal_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_stolen_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_stolen_msg::CopyFrom(const farm_stolen_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_stolen_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void farm_stolen_msg::Swap(farm_stolen_msg* other) {
  if (other != this) {
    std::swap(farm_role_id_, other->farm_role_id_);
    std::swap(thief_role_id_, other->thief_role_id_);
    std::swap(steal_goods_id_, other->steal_goods_id_);
    std::swap(steal_num_, other->steal_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_stolen_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_stolen_msg_descriptor_;
  metadata.reflection = farm_stolen_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_steal_rsp::kRetFieldNumber;
const int farm_steal_rsp::kLoseMoneyFieldNumber;
#endif  // !_MSC_VER

farm_steal_rsp::farm_steal_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_steal_rsp::InitAsDefaultInstance() {
}

farm_steal_rsp::farm_steal_rsp(const farm_steal_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_steal_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lose_money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_steal_rsp::~farm_steal_rsp() {
  SharedDtor();
}

void farm_steal_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_steal_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_steal_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_steal_rsp_descriptor_;
}

const farm_steal_rsp& farm_steal_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_steal_rsp* farm_steal_rsp::default_instance_ = NULL;

farm_steal_rsp* farm_steal_rsp::New() const {
  return new farm_steal_rsp;
}

void farm_steal_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lose_money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_steal_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lose_money;
        break;
      }

      // optional uint32 lose_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_money_)));
          set_has_lose_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_steal_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 lose_money = 2;
  if (has_lose_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_steal_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 lose_money = 2;
  if (has_lose_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_steal_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 lose_money = 2;
    if (has_lose_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_steal_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_steal_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_steal_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_steal_rsp::MergeFrom(const farm_steal_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lose_money()) {
      set_lose_money(from.lose_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_steal_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_steal_rsp::CopyFrom(const farm_steal_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_steal_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_steal_rsp::Swap(farm_steal_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lose_money_, other->lose_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_steal_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_steal_rsp_descriptor_;
  metadata.reflection = farm_steal_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_req::kLandIdFieldNumber;
const int farm_gain_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_gain_req::farm_gain_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_gain_req::farm_gain_req(const farm_gain_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_req::~farm_gain_req() {
  SharedDtor();
}

void farm_gain_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_gain_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_req_descriptor_;
}

const farm_gain_req& farm_gain_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_req* farm_gain_req::default_instance_ = NULL;

farm_gain_req* farm_gain_req::New() const {
  return new farm_gain_req;
}

void farm_gain_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  land_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 land_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_land_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_land_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_land_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 land_id = 1;
  for (int i = 0; i < this->land_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->land_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 land_id = 1;
  for (int i = 0; i < this->land_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->land_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 land_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->land_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->land_id(i));
    }
    total_size += 1 * this->land_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_req::MergeFrom(const farm_gain_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  land_id_.MergeFrom(from.land_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_req::CopyFrom(const farm_gain_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_req::IsInitialized() const {

  return true;
}

void farm_gain_req::Swap(farm_gain_req* other) {
  if (other != this) {
    land_id_.Swap(&other->land_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_req_descriptor_;
  metadata.reflection = farm_gain_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_rsp::kRetFieldNumber;
const int farm_gain_rsp::kAddScoreFieldNumber;
#endif  // !_MSC_VER

farm_gain_rsp::farm_gain_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_rsp::InitAsDefaultInstance() {
}

farm_gain_rsp::farm_gain_rsp(const farm_gain_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  add_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_rsp::~farm_gain_rsp() {
  SharedDtor();
}

void farm_gain_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_gain_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_rsp_descriptor_;
}

const farm_gain_rsp& farm_gain_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_rsp* farm_gain_rsp::default_instance_ = NULL;

farm_gain_rsp* farm_gain_rsp::New() const {
  return new farm_gain_rsp;
}

void farm_gain_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    add_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_score;
        break;
      }

      // optional uint32 add_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 add_score = 2;
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 add_score = 2;
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 add_score = 2;
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_rsp::MergeFrom(const farm_gain_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_rsp::CopyFrom(const farm_gain_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_gain_rsp::Swap(farm_gain_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(add_score_, other->add_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_rsp_descriptor_;
  metadata.reflection = farm_gain_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_unit::kGoodsIdFieldNumber;
const int farm_gain_unit::kGoodsNumFieldNumber;
#endif  // !_MSC_VER

farm_gain_unit::farm_gain_unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_unit::InitAsDefaultInstance() {
}

farm_gain_unit::farm_gain_unit(const farm_gain_unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_unit::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  goods_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_unit::~farm_gain_unit() {
  SharedDtor();
}

void farm_gain_unit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_gain_unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_unit_descriptor_;
}

const farm_gain_unit& farm_gain_unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_unit* farm_gain_unit::default_instance_ = NULL;

farm_gain_unit* farm_gain_unit::New() const {
  return new farm_gain_unit;
}

void farm_gain_unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    goods_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_num;
        break;
      }

      // required uint32 goods_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 goods_num = 2;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_unit::MergeFrom(const farm_gain_unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_unit::CopyFrom(const farm_gain_unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void farm_gain_unit::Swap(farm_gain_unit* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_unit_descriptor_;
  metadata.reflection = farm_gain_unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_msg::kFarmRoleIdFieldNumber;
const int farm_gain_msg::kFgusFieldNumber;
#endif  // !_MSC_VER

farm_gain_msg::farm_gain_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_msg::InitAsDefaultInstance() {
}

farm_gain_msg::farm_gain_msg(const farm_gain_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_msg::SharedCtor() {
  _cached_size_ = 0;
  farm_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_msg::~farm_gain_msg() {
  SharedDtor();
}

void farm_gain_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_gain_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_msg_descriptor_;
}

const farm_gain_msg& farm_gain_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_msg* farm_gain_msg::default_instance_ = NULL;

farm_gain_msg* farm_gain_msg::New() const {
  return new farm_gain_msg;
}

void farm_gain_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    farm_role_id_ = 0u;
  }
  fgus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 farm_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &farm_role_id_)));
          set_has_farm_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fgus;
        break;
      }

      // repeated .client.farm_gain_unit fgus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fgus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fgus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fgus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 farm_role_id = 1;
  if (has_farm_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->farm_role_id(), output);
  }

  // repeated .client.farm_gain_unit fgus = 2;
  for (int i = 0; i < this->fgus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fgus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 farm_role_id = 1;
  if (has_farm_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->farm_role_id(), target);
  }

  // repeated .client.farm_gain_unit fgus = 2;
  for (int i = 0; i < this->fgus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fgus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 farm_role_id = 1;
    if (has_farm_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->farm_role_id());
    }

  }
  // repeated .client.farm_gain_unit fgus = 2;
  total_size += 1 * this->fgus_size();
  for (int i = 0; i < this->fgus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fgus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_msg::MergeFrom(const farm_gain_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  fgus_.MergeFrom(from.fgus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_farm_role_id()) {
      set_farm_role_id(from.farm_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_msg::CopyFrom(const farm_gain_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fgus_size(); i++) {
    if (!this->fgus(i).IsInitialized()) return false;
  }
  return true;
}

void farm_gain_msg::Swap(farm_gain_msg* other) {
  if (other != this) {
    std::swap(farm_role_id_, other->farm_role_id_);
    fgus_.Swap(&other->fgus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_msg_descriptor_;
  metadata.reflection = farm_gain_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_improve_req::kRoleIdFieldNumber;
const int farm_improve_req::kLandIdFieldNumber;
const int farm_improve_req::kTypeFieldNumber;
const int farm_improve_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_improve_req::farm_improve_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_improve_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_improve_req::farm_improve_req(const farm_improve_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_improve_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  land_id_ = 0u;
  type_ = 1;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_improve_req::~farm_improve_req() {
  SharedDtor();
}

void farm_improve_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_improve_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_improve_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_improve_req_descriptor_;
}

const farm_improve_req& farm_improve_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_improve_req* farm_improve_req::default_instance_ = NULL;

farm_improve_req* farm_improve_req::New() const {
  return new farm_improve_req;
}

void farm_improve_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    land_id_ = 0u;
    type_ = 1;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_improve_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_land_id;
        break;
      }

      // required uint32 land_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_id_)));
          set_has_land_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .client.FARM_IMPROVE_TYPE_E type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_IMPROVE_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::FARM_IMPROVE_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_improve_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 land_id = 2;
  if (has_land_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->land_id(), output);
  }

  // required .client.FARM_IMPROVE_TYPE_E type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_improve_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 land_id = 2;
  if (has_land_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->land_id(), target);
  }

  // required .client.FARM_IMPROVE_TYPE_E type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_improve_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 land_id = 2;
    if (has_land_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_id());
    }

    // required .client.FARM_IMPROVE_TYPE_E type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_improve_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_improve_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_improve_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_improve_req::MergeFrom(const farm_improve_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_land_id()) {
      set_land_id(from.land_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_improve_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_improve_req::CopyFrom(const farm_improve_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_improve_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void farm_improve_req::Swap(farm_improve_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(land_id_, other->land_id_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_improve_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_improve_req_descriptor_;
  metadata.reflection = farm_improve_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_improve_rsp::kRetFieldNumber;
const int farm_improve_rsp::kImproveRoleIdFieldNumber;
const int farm_improve_rsp::kFliFieldNumber;
#endif  // !_MSC_VER

farm_improve_rsp::farm_improve_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_improve_rsp::InitAsDefaultInstance() {
  fli_ = const_cast< ::client::farm_land_info*>(&::client::farm_land_info::default_instance());
}

farm_improve_rsp::farm_improve_rsp(const farm_improve_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_improve_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  improve_role_id_ = 0u;
  fli_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_improve_rsp::~farm_improve_rsp() {
  SharedDtor();
}

void farm_improve_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete fli_;
  }
}

void farm_improve_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_improve_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_improve_rsp_descriptor_;
}

const farm_improve_rsp& farm_improve_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_improve_rsp* farm_improve_rsp::default_instance_ = NULL;

farm_improve_rsp* farm_improve_rsp::New() const {
  return new farm_improve_rsp;
}

void farm_improve_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    improve_role_id_ = 0u;
    if (has_fli()) {
      if (fli_ != NULL) fli_->::client::farm_land_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_improve_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_improve_role_id;
        break;
      }

      // optional uint32 improve_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_improve_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &improve_role_id_)));
          set_has_improve_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fli;
        break;
      }

      // optional .client.farm_land_info fli = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_improve_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 improve_role_id = 2;
  if (has_improve_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->improve_role_id(), output);
  }

  // optional .client.farm_land_info fli = 3;
  if (has_fli()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_improve_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 improve_role_id = 2;
  if (has_improve_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->improve_role_id(), target);
  }

  // optional .client.farm_land_info fli = 3;
  if (has_fli()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_improve_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 improve_role_id = 2;
    if (has_improve_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->improve_role_id());
    }

    // optional .client.farm_land_info fli = 3;
    if (has_fli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_improve_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_improve_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_improve_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_improve_rsp::MergeFrom(const farm_improve_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_improve_role_id()) {
      set_improve_role_id(from.improve_role_id());
    }
    if (from.has_fli()) {
      mutable_fli()->::client::farm_land_info::MergeFrom(from.fli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_improve_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_improve_rsp::CopyFrom(const farm_improve_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_improve_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fli()) {
    if (!this->fli().IsInitialized()) return false;
  }
  return true;
}

void farm_improve_rsp::Swap(farm_improve_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(improve_role_id_, other->improve_role_id_);
    std::swap(fli_, other->fli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_improve_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_improve_rsp_descriptor_;
  metadata.reflection = farm_improve_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farmer_role_msg::kRoleIdFieldNumber;
#endif  // !_MSC_VER

farmer_role_msg::farmer_role_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farmer_role_msg::InitAsDefaultInstance() {
}

farmer_role_msg::farmer_role_msg(const farmer_role_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farmer_role_msg::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farmer_role_msg::~farmer_role_msg() {
  SharedDtor();
}

void farmer_role_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farmer_role_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farmer_role_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farmer_role_msg_descriptor_;
}

const farmer_role_msg& farmer_role_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farmer_role_msg* farmer_role_msg::default_instance_ = NULL;

farmer_role_msg* farmer_role_msg::New() const {
  return new farmer_role_msg;
}

void farmer_role_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farmer_role_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farmer_role_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farmer_role_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farmer_role_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farmer_role_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farmer_role_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farmer_role_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farmer_role_msg::MergeFrom(const farmer_role_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farmer_role_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farmer_role_msg::CopyFrom(const farmer_role_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farmer_role_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farmer_role_msg::Swap(farmer_role_msg* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farmer_role_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farmer_role_msg_descriptor_;
  metadata.reflection = farmer_role_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_money_req::kSvrTimeFieldNumber;
const int farm_gain_money_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

farm_gain_money_req::farm_gain_money_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_money_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

farm_gain_money_req::farm_gain_money_req(const farm_gain_money_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_money_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_money_req::~farm_gain_money_req() {
  SharedDtor();
}

void farm_gain_money_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void farm_gain_money_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_money_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_money_req_descriptor_;
}

const farm_gain_money_req& farm_gain_money_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_money_req* farm_gain_money_req::default_instance_ = NULL;

farm_gain_money_req* farm_gain_money_req::New() const {
  return new farm_gain_money_req;
}

void farm_gain_money_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_money_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_money_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_money_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_money_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_money_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_money_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_money_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_money_req::MergeFrom(const farm_gain_money_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_money_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_money_req::CopyFrom(const farm_gain_money_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_money_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_gain_money_req::Swap(farm_gain_money_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_money_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_money_req_descriptor_;
  metadata.reflection = farm_gain_money_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int farm_gain_money_rsp::kRetFieldNumber;
const int farm_gain_money_rsp::kMoneyFieldNumber;
const int farm_gain_money_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

farm_gain_money_rsp::farm_gain_money_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void farm_gain_money_rsp::InitAsDefaultInstance() {
}

farm_gain_money_rsp::farm_gain_money_rsp(const farm_gain_money_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void farm_gain_money_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  money_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

farm_gain_money_rsp::~farm_gain_money_rsp() {
  SharedDtor();
}

void farm_gain_money_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void farm_gain_money_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* farm_gain_money_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return farm_gain_money_rsp_descriptor_;
}

const farm_gain_money_rsp& farm_gain_money_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efarm_2eproto();
  return *default_instance_;
}

farm_gain_money_rsp* farm_gain_money_rsp::default_instance_ = NULL;

farm_gain_money_rsp* farm_gain_money_rsp::New() const {
  return new farm_gain_money_rsp;
}

void farm_gain_money_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    money_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool farm_gain_money_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FARM_OPERATE_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FARM_OPERATE_E_IsValid(value)) {
            set_ret(static_cast< ::client::FARM_OPERATE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void farm_gain_money_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* farm_gain_money_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FARM_OPERATE_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int farm_gain_money_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FARM_OPERATE_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void farm_gain_money_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const farm_gain_money_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const farm_gain_money_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void farm_gain_money_rsp::MergeFrom(const farm_gain_money_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void farm_gain_money_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void farm_gain_money_rsp::CopyFrom(const farm_gain_money_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool farm_gain_money_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void farm_gain_money_rsp::Swap(farm_gain_money_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(money_, other->money_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata farm_gain_money_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = farm_gain_money_rsp_descriptor_;
  metadata.reflection = farm_gain_money_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
