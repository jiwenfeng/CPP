// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_fight_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_fight_ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_personal_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_personal_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_personal_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_personal_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_record_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_record_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_refresh_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_refresh_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_speed_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_speed_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_speed_up_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_speed_up_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_challenge_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_challenge_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_challenge_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_challenge_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* robot_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  robot_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_target_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_target_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_target_data_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_target_data_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_online_target_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_online_target_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* reward_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reward_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_reward_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_reward_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_reward_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_reward_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_rank_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_rank_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_list_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_list_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_rank_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_rank_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_fight_begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_fight_begin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FIGHT_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2earena_2eproto() {
  protobuf_AddDesc_client_2earena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.arena.proto");
  GOOGLE_CHECK(file != NULL);
  role_info_descriptor_ = file->message_type(0);
  static const int role_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, fighting_power_),
  };
  role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_descriptor_,
      role_info::default_instance_,
      role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info));
  arena_fight_ret_descriptor_ = file->message_type(1);
  static const int arena_fight_ret_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, r_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, t_name_),
  };
  arena_fight_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_fight_ret_descriptor_,
      arena_fight_ret::default_instance_,
      arena_fight_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_fight_ret));
  arena_info_req_descriptor_ = file->message_type(2);
  static const int arena_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_req, svr_head_),
  };
  arena_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_info_req_descriptor_,
      arena_info_req::default_instance_,
      arena_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_info_req));
  arena_info_rsp_descriptor_ = file->message_type(3);
  static const int arena_info_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, ri_),
  };
  arena_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_info_rsp_descriptor_,
      arena_info_rsp::default_instance_,
      arena_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_info_rsp));
  arena_personal_info_req_descriptor_ = file->message_type(4);
  static const int arena_personal_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_req, svr_head_),
  };
  arena_personal_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_personal_info_req_descriptor_,
      arena_personal_info_req::default_instance_,
      arena_personal_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_personal_info_req));
  arena_personal_info_rsp_descriptor_ = file->message_type(5);
  static const int arena_personal_info_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, timelong_),
  };
  arena_personal_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_personal_info_rsp_descriptor_,
      arena_personal_info_rsp::default_instance_,
      arena_personal_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_personal_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_personal_info_rsp));
  arena_record_req_descriptor_ = file->message_type(6);
  static const int arena_record_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_req, svr_head_),
  };
  arena_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_record_req_descriptor_,
      arena_record_req::default_instance_,
      arena_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_record_req));
  arena_record_info_descriptor_ = file->message_type(7);
  static const int arena_record_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, name_),
  };
  arena_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_record_info_descriptor_,
      arena_record_info::default_instance_,
      arena_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_record_info));
  arena_record_rsp_descriptor_ = file->message_type(8);
  static const int arena_record_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_rsp, ar_),
  };
  arena_record_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_record_rsp_descriptor_,
      arena_record_rsp::default_instance_,
      arena_record_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_record_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_record_rsp));
  arena_refresh_req_descriptor_ = file->message_type(9);
  static const int arena_refresh_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_req, svr_head_),
  };
  arena_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_refresh_req_descriptor_,
      arena_refresh_req::default_instance_,
      arena_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_refresh_req));
  arena_refresh_rsp_descriptor_ = file->message_type(10);
  static const int arena_refresh_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_rsp, times_),
  };
  arena_refresh_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_refresh_rsp_descriptor_,
      arena_refresh_rsp::default_instance_,
      arena_refresh_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_refresh_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_refresh_rsp));
  arena_speed_up_req_descriptor_ = file->message_type(11);
  static const int arena_speed_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_req, svr_head_),
  };
  arena_speed_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_speed_up_req_descriptor_,
      arena_speed_up_req::default_instance_,
      arena_speed_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_speed_up_req));
  arena_speed_up_rsp_descriptor_ = file->message_type(12);
  static const int arena_speed_up_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_rsp, time_),
  };
  arena_speed_up_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_speed_up_rsp_descriptor_,
      arena_speed_up_rsp::default_instance_,
      arena_speed_up_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_speed_up_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_speed_up_rsp));
  arena_challenge_req_descriptor_ = file->message_type(13);
  static const int arena_challenge_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_req, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_req, svr_head_),
  };
  arena_challenge_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_challenge_req_descriptor_,
      arena_challenge_req::default_instance_,
      arena_challenge_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_challenge_req));
  arena_challenge_result_descriptor_ = file->message_type(14);
  static const int arena_challenge_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, status_),
  };
  arena_challenge_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_challenge_result_descriptor_,
      arena_challenge_result::default_instance_,
      arena_challenge_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_challenge_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_challenge_result));
  robot_attr_descriptor_ = file->message_type(15);
  static const int robot_attr_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, hp_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, attack_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, attack_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, defense_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, defense_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, stable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, sk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, backup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, vip_level_),
  };
  robot_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      robot_attr_descriptor_,
      robot_attr::default_instance_,
      robot_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(robot_attr));
  load_target_data_req_descriptor_ = file->message_type(16);
  static const int load_target_data_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_req, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_req, role_id_),
  };
  load_target_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_target_data_req_descriptor_,
      load_target_data_req::default_instance_,
      load_target_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_target_data_req));
  load_target_data_rsp_descriptor_ = file->message_type(17);
  static const int load_target_data_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_rsp, attr_),
  };
  load_target_data_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_target_data_rsp_descriptor_,
      load_target_data_rsp::default_instance_,
      load_target_data_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_target_data_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_target_data_rsp));
  load_online_target_data_req_descriptor_ = file->message_type(18);
  static const int load_online_target_data_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_online_target_data_req, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_online_target_data_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_online_target_data_req, svr_scene_id_),
  };
  load_online_target_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_online_target_data_req_descriptor_,
      load_online_target_data_req::default_instance_,
      load_online_target_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_online_target_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_online_target_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_online_target_data_req));
  arena_reward_req_descriptor_ = file->message_type(19);
  static const int arena_reward_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_req, svr_head_),
  };
  arena_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_reward_req_descriptor_,
      arena_reward_req::default_instance_,
      arena_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_reward_req));
  reward_info_descriptor_ = file->message_type(20);
  static const int reward_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, value_),
  };
  reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reward_info_descriptor_,
      reward_info::default_instance_,
      reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reward_info));
  arena_reward_item_descriptor_ = file->message_type(21);
  static const int arena_reward_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_item, min_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_item, max_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_item, ri_),
  };
  arena_reward_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_reward_item_descriptor_,
      arena_reward_item::default_instance_,
      arena_reward_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_reward_item));
  arena_reward_rsp_descriptor_ = file->message_type(22);
  static const int arena_reward_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_rsp, ari_),
  };
  arena_reward_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_reward_rsp_descriptor_,
      arena_reward_rsp::default_instance_,
      arena_reward_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_reward_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_reward_rsp));
  arena_rank_list_req_descriptor_ = file->message_type(23);
  static const int arena_rank_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_req, svr_head_),
  };
  arena_rank_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_rank_list_req_descriptor_,
      arena_rank_list_req::default_instance_,
      arena_rank_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_rank_list_req));
  rank_list_item_descriptor_ = file->message_type(24);
  static const int rank_list_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_item, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_item, power_),
  };
  rank_list_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_list_item_descriptor_,
      rank_list_item::default_instance_,
      rank_list_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_list_item));
  arena_rank_list_rsp_descriptor_ = file->message_type(25);
  static const int arena_rank_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_rsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_rsp, rli_),
  };
  arena_rank_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_rank_list_rsp_descriptor_,
      arena_rank_list_rsp::default_instance_,
      arena_rank_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_rank_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_rank_list_rsp));
  arena_fight_begin_descriptor_ = file->message_type(26);
  static const int arena_fight_begin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_begin, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_begin, svr_head_),
  };
  arena_fight_begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_fight_begin_descriptor_,
      arena_fight_begin::default_instance_,
      arena_fight_begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_fight_begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_fight_begin));
  FIGHT_RET_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2earena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_descriptor_, &role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_fight_ret_descriptor_, &arena_fight_ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_info_req_descriptor_, &arena_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_info_rsp_descriptor_, &arena_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_personal_info_req_descriptor_, &arena_personal_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_personal_info_rsp_descriptor_, &arena_personal_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_record_req_descriptor_, &arena_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_record_info_descriptor_, &arena_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_record_rsp_descriptor_, &arena_record_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_refresh_req_descriptor_, &arena_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_refresh_rsp_descriptor_, &arena_refresh_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_speed_up_req_descriptor_, &arena_speed_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_speed_up_rsp_descriptor_, &arena_speed_up_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_challenge_req_descriptor_, &arena_challenge_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_challenge_result_descriptor_, &arena_challenge_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    robot_attr_descriptor_, &robot_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_target_data_req_descriptor_, &load_target_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_target_data_rsp_descriptor_, &load_target_data_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_online_target_data_req_descriptor_, &load_online_target_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_reward_req_descriptor_, &arena_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reward_info_descriptor_, &reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_reward_item_descriptor_, &arena_reward_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_reward_rsp_descriptor_, &arena_reward_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_rank_list_req_descriptor_, &arena_rank_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_list_item_descriptor_, &rank_list_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_rank_list_rsp_descriptor_, &arena_rank_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_fight_begin_descriptor_, &arena_fight_begin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2earena_2eproto() {
  delete role_info::default_instance_;
  delete role_info_reflection_;
  delete arena_fight_ret::default_instance_;
  delete arena_fight_ret_reflection_;
  delete arena_info_req::default_instance_;
  delete arena_info_req_reflection_;
  delete arena_info_rsp::default_instance_;
  delete arena_info_rsp_reflection_;
  delete arena_personal_info_req::default_instance_;
  delete arena_personal_info_req_reflection_;
  delete arena_personal_info_rsp::default_instance_;
  delete arena_personal_info_rsp_reflection_;
  delete arena_record_req::default_instance_;
  delete arena_record_req_reflection_;
  delete arena_record_info::default_instance_;
  delete arena_record_info_reflection_;
  delete arena_record_rsp::default_instance_;
  delete arena_record_rsp_reflection_;
  delete arena_refresh_req::default_instance_;
  delete arena_refresh_req_reflection_;
  delete arena_refresh_rsp::default_instance_;
  delete arena_refresh_rsp_reflection_;
  delete arena_speed_up_req::default_instance_;
  delete arena_speed_up_req_reflection_;
  delete arena_speed_up_rsp::default_instance_;
  delete arena_speed_up_rsp_reflection_;
  delete arena_challenge_req::default_instance_;
  delete arena_challenge_req_reflection_;
  delete arena_challenge_result::default_instance_;
  delete arena_challenge_result_reflection_;
  delete robot_attr::default_instance_;
  delete robot_attr_reflection_;
  delete load_target_data_req::default_instance_;
  delete load_target_data_req_reflection_;
  delete load_target_data_rsp::default_instance_;
  delete load_target_data_rsp_reflection_;
  delete load_online_target_data_req::default_instance_;
  delete load_online_target_data_req_reflection_;
  delete arena_reward_req::default_instance_;
  delete arena_reward_req_reflection_;
  delete reward_info::default_instance_;
  delete reward_info_reflection_;
  delete arena_reward_item::default_instance_;
  delete arena_reward_item_reflection_;
  delete arena_reward_rsp::default_instance_;
  delete arena_reward_rsp_reflection_;
  delete arena_rank_list_req::default_instance_;
  delete arena_rank_list_req_reflection_;
  delete rank_list_item::default_instance_;
  delete rank_list_item_reflection_;
  delete arena_rank_list_rsp::default_instance_;
  delete arena_rank_list_rsp_reflection_;
  delete arena_fight_begin::default_instance_;
  delete arena_fight_begin_reflection_;
}

void protobuf_AddDesc_client_2earena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2epets_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client.arena.proto\022\006client\032\021client.com"
    "m.proto\032\021client.pets.proto\032\033client.role_"
    "skill_msg.proto\"\244\001\n\trole_info\022\017\n\007role_id"
    "\030\001 \002(\r\022\014\n\004rank\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\014\n\004na"
    "me\030\004 \001(\t\022\022\n\nprofession\030\005 \001(\r\022\013\n\003sex\030\006 \001("
    "\r\022\021\n\tweapon_id\030\007 \001(\r\022\020\n\010armor_id\030\010 \001(\r\022\026"
    "\n\016fighting_power\030\t \001(\r\"t\n\017arena_fight_re"
    "t\022\017\n\007role_id\030\001 \002(\r\022\016\n\006target\030\002 \002(\r\022 \n\003re"
    "t\030\003 \002(\0162\023.client.FIGHT_RET_E\022\016\n\006r_name\030\004"
    " \001(\t\022\016\n\006t_name\030\005 \001(\t\"F\n\016arena_info_req\022\014"
    "\n\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"^\n\016arena_info_rsp\022\017\n\007histor"
    "y\030\001 \002(\r\022\014\n\004rank\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\035\n"
    "\002ri\030\004 \003(\0132\021.client.role_info\"R\n\027arena_pe"
    "rsonal_info_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"V\n\027aren"
    "a_personal_info_rsp\022\014\n\004used\030\001 \002(\r\022\r\n\005tot"
    "al\030\002 \002(\r\022\014\n\004left\030\003 \002(\r\022\020\n\010timelong\030\004 \001(\r"
    "\"H\n\020arena_record_req\022\014\n\004time\030\001 \002(\r\022&\n\010sv"
    "r_head\030\350\007 \001(\0132\023.client.server_head\"Z\n\021ar"
    "ena_record_info\022\014\n\004time\030\001 \002(\r\022\016\n\006action\030"
    "\002 \002(\r\022\013\n\003ret\030\003 \002(\005\022\014\n\004rank\030\004 \002(\005\022\014\n\004name"
    "\030\005 \002(\t\"9\n\020arena_record_rsp\022%\n\002ar\030\001 \003(\0132\031"
    ".client.arena_record_info\"I\n\021arena_refre"
    "sh_req\022\014\n\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"\"\n\021arena_refresh_rs"
    "p\022\r\n\005times\030\001 \002(\r\"J\n\022arena_speed_up_req\022\014"
    "\n\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"\"\n\022arena_speed_up_rsp\022\014\n\004ti"
    "me\030\001 \002(\r\"[\n\023arena_challenge_req\022\016\n\006targe"
    "t\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"y\n\026arena_challenge"
    "_result\022\013\n\003num\030\001 \002(\r\022 \n\003ret\030\002 \002(\0162\023.clie"
    "nt.FIGHT_RET_E\022\017\n\007history\030\003 \001(\r\022\017\n\007curre"
    "nt\030\004 \001(\r\022\016\n\006status\030\005 \001(\r\"\224\004\n\nrobot_attr\022"
    "\017\n\007role_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\r\n\005l"
    "evel\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\022\n\nprofession\030\005 "
    "\001(\r\022\026\n\016fighting_power\030\006 \001(\r\022\016\n\006hp_max\030\007 "
    "\001(\r\022\022\n\nattack_min\030\010 \001(\r\022\022\n\nattack_max\030\t "
    "\001(\r\022\023\n\013defense_min\030\n \001(\r\022\023\n\013defense_max\030"
    "\013 \001(\r\022\013\n\003hit\030\014 \001(\r\022\r\n\005dodge\030\r \001(\r\022\017\n\007rec"
    "over\030\016 \001(\r\022\022\n\nmove_speed\030\017 \001(\r\022\016\n\006stable"
    "\030\020 \001(\r\022\020\n\010mount_id\030\021 \001(\r\022\021\n\tweapon_id\030\022 "
    "\001(\r\022\020\n\010armor_id\030\023 \001(\r\022 \n\003pet\030\024 \001(\0132\023.cli"
    "ent.pet_db_info\022\021\n\tconfig_id\030\025 \001(\r\022\032\n\002sk"
    "\030\026 \001(\0132\016.client.skills\022#\n\006backup\030\027 \001(\0132\023"
    ".client.pet_db_info\022\t\n\001x\030\030 \001(\r\022\t\n\001y\030\031 \001("
    "\r\022\021\n\tfamily_id\030\032 \001(\r\022\021\n\tvip_level\030\033 \001(\r\""
    "I\n\024load_target_data_req\022\016\n\006target\030\001 \002(\r\022"
    "\020\n\010scene_id\030\002 \002(\r\022\017\n\007role_id\030\003 \002(\r\"I\n\024lo"
    "ad_target_data_rsp\022\017\n\007role_id\030\001 \002(\r\022 \n\004a"
    "ttr\030\002 \002(\0132\022.client.robot_attr\"T\n\033load_on"
    "line_target_data_req\022\016\n\006target\030\001 \002(\r\022\017\n\007"
    "role_id\030\002 \002(\r\022\024\n\014svr_scene_id\030\003 \002(\r\"K\n\020a"
    "rena_reward_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"*\n\013rewa"
    "rd_info\022\014\n\004type\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"X\n\021"
    "arena_reward_item\022\020\n\010min_rank\030\001 \002(\r\022\020\n\010m"
    "ax_rank\030\002 \002(\r\022\037\n\002ri\030\003 \003(\0132\023.client.rewar"
    "d_info\":\n\020arena_reward_rsp\022&\n\003ari\030\001 \003(\0132"
    "\031.client.arena_reward_item\"N\n\023arena_rank"
    "_list_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"<\n\016rank_list_"
    "item\022\014\n\004name\030\001 \002(\t\022\r\n\005level\030\002 \002(\r\022\r\n\005pow"
    "er\030\003 \002(\r\"H\n\023arena_rank_list_rsp\022\014\n\004rank\030"
    "\001 \002(\005\022#\n\003rli\030\002 \003(\0132\026.client.rank_list_it"
    "em\"I\n\021arena_fight_begin\022\014\n\004time\030\001 \002(\r\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head*,\n"
    "\013FIGHT_RET_E\022\r\n\tFIGHT_WIN\020\000\022\016\n\nFIGHT_LOS"
    "E\020\001", 2763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.arena.proto", &protobuf_RegisterTypes);
  role_info::default_instance_ = new role_info();
  arena_fight_ret::default_instance_ = new arena_fight_ret();
  arena_info_req::default_instance_ = new arena_info_req();
  arena_info_rsp::default_instance_ = new arena_info_rsp();
  arena_personal_info_req::default_instance_ = new arena_personal_info_req();
  arena_personal_info_rsp::default_instance_ = new arena_personal_info_rsp();
  arena_record_req::default_instance_ = new arena_record_req();
  arena_record_info::default_instance_ = new arena_record_info();
  arena_record_rsp::default_instance_ = new arena_record_rsp();
  arena_refresh_req::default_instance_ = new arena_refresh_req();
  arena_refresh_rsp::default_instance_ = new arena_refresh_rsp();
  arena_speed_up_req::default_instance_ = new arena_speed_up_req();
  arena_speed_up_rsp::default_instance_ = new arena_speed_up_rsp();
  arena_challenge_req::default_instance_ = new arena_challenge_req();
  arena_challenge_result::default_instance_ = new arena_challenge_result();
  robot_attr::default_instance_ = new robot_attr();
  load_target_data_req::default_instance_ = new load_target_data_req();
  load_target_data_rsp::default_instance_ = new load_target_data_rsp();
  load_online_target_data_req::default_instance_ = new load_online_target_data_req();
  arena_reward_req::default_instance_ = new arena_reward_req();
  reward_info::default_instance_ = new reward_info();
  arena_reward_item::default_instance_ = new arena_reward_item();
  arena_reward_rsp::default_instance_ = new arena_reward_rsp();
  arena_rank_list_req::default_instance_ = new arena_rank_list_req();
  rank_list_item::default_instance_ = new rank_list_item();
  arena_rank_list_rsp::default_instance_ = new arena_rank_list_rsp();
  arena_fight_begin::default_instance_ = new arena_fight_begin();
  role_info::default_instance_->InitAsDefaultInstance();
  arena_fight_ret::default_instance_->InitAsDefaultInstance();
  arena_info_req::default_instance_->InitAsDefaultInstance();
  arena_info_rsp::default_instance_->InitAsDefaultInstance();
  arena_personal_info_req::default_instance_->InitAsDefaultInstance();
  arena_personal_info_rsp::default_instance_->InitAsDefaultInstance();
  arena_record_req::default_instance_->InitAsDefaultInstance();
  arena_record_info::default_instance_->InitAsDefaultInstance();
  arena_record_rsp::default_instance_->InitAsDefaultInstance();
  arena_refresh_req::default_instance_->InitAsDefaultInstance();
  arena_refresh_rsp::default_instance_->InitAsDefaultInstance();
  arena_speed_up_req::default_instance_->InitAsDefaultInstance();
  arena_speed_up_rsp::default_instance_->InitAsDefaultInstance();
  arena_challenge_req::default_instance_->InitAsDefaultInstance();
  arena_challenge_result::default_instance_->InitAsDefaultInstance();
  robot_attr::default_instance_->InitAsDefaultInstance();
  load_target_data_req::default_instance_->InitAsDefaultInstance();
  load_target_data_rsp::default_instance_->InitAsDefaultInstance();
  load_online_target_data_req::default_instance_->InitAsDefaultInstance();
  arena_reward_req::default_instance_->InitAsDefaultInstance();
  reward_info::default_instance_->InitAsDefaultInstance();
  arena_reward_item::default_instance_->InitAsDefaultInstance();
  arena_reward_rsp::default_instance_->InitAsDefaultInstance();
  arena_rank_list_req::default_instance_->InitAsDefaultInstance();
  rank_list_item::default_instance_->InitAsDefaultInstance();
  arena_rank_list_rsp::default_instance_->InitAsDefaultInstance();
  arena_fight_begin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2earena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2earena_2eproto {
  StaticDescriptorInitializer_client_2earena_2eproto() {
    protobuf_AddDesc_client_2earena_2eproto();
  }
} static_descriptor_initializer_client_2earena_2eproto_;
const ::google::protobuf::EnumDescriptor* FIGHT_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIGHT_RET_E_descriptor_;
}
bool FIGHT_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int role_info::kRoleIdFieldNumber;
const int role_info::kRankFieldNumber;
const int role_info::kTypeFieldNumber;
const int role_info::kNameFieldNumber;
const int role_info::kProfessionFieldNumber;
const int role_info::kSexFieldNumber;
const int role_info::kWeaponIdFieldNumber;
const int role_info::kArmorIdFieldNumber;
const int role_info::kFightingPowerFieldNumber;
#endif  // !_MSC_VER

role_info::role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info::InitAsDefaultInstance() {
}

role_info::role_info(const role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  rank_ = 0u;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0u;
  sex_ = 0u;
  weapon_id_ = 0u;
  armor_id_ = 0u;
  fighting_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info::~role_info() {
  SharedDtor();
}

void role_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_descriptor_;
}

const role_info& role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

role_info* role_info::default_instance_ = NULL;

role_info* role_info::New() const {
  return new role_info;
}

void role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    rank_ = 0u;
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0u;
    sex_ = 0u;
    weapon_id_ = 0u;
    armor_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fighting_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_armor_id;
        break;
      }

      // optional uint32 armor_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fighting_power;
        break;
      }

      // optional uint32 fighting_power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->profession(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 weapon_id = 7;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->weapon_id(), output);
  }

  // optional uint32 armor_id = 8;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->armor_id(), output);
  }

  // optional uint32 fighting_power = 9;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fighting_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->profession(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 weapon_id = 7;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->weapon_id(), target);
  }

  // optional uint32 armor_id = 8;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->armor_id(), target);
  }

  // optional uint32 fighting_power = 9;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fighting_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 weapon_id = 7;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 armor_id = 8;
    if (has_armor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fighting_power = 9;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info::MergeFrom(const role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info::CopyFrom(const role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void role_info::Swap(role_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_descriptor_;
  metadata.reflection = role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_fight_ret::kRoleIdFieldNumber;
const int arena_fight_ret::kTargetFieldNumber;
const int arena_fight_ret::kRetFieldNumber;
const int arena_fight_ret::kRNameFieldNumber;
const int arena_fight_ret::kTNameFieldNumber;
#endif  // !_MSC_VER

arena_fight_ret::arena_fight_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_fight_ret::InitAsDefaultInstance() {
}

arena_fight_ret::arena_fight_ret(const arena_fight_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_fight_ret::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  target_ = 0u;
  ret_ = 0;
  r_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_fight_ret::~arena_fight_ret() {
  SharedDtor();
}

void arena_fight_ret::SharedDtor() {
  if (r_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_name_;
  }
  if (t_name_ != &::google::protobuf::internal::kEmptyString) {
    delete t_name_;
  }
  if (this != default_instance_) {
  }
}

void arena_fight_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_fight_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_fight_ret_descriptor_;
}

const arena_fight_ret& arena_fight_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_fight_ret* arena_fight_ret::default_instance_ = NULL;

arena_fight_ret* arena_fight_ret::New() const {
  return new arena_fight_ret;
}

void arena_fight_ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    target_ = 0u;
    ret_ = 0;
    if (has_r_name()) {
      if (r_name_ != &::google::protobuf::internal::kEmptyString) {
        r_name_->clear();
      }
    }
    if (has_t_name()) {
      if (t_name_ != &::google::protobuf::internal::kEmptyString) {
        t_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_fight_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // required uint32 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .client.FIGHT_RET_E ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FIGHT_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::FIGHT_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_r_name;
        break;
      }

      // optional string r_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_r_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_name().data(), this->r_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_t_name;
        break;
      }

      // optional string t_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_name().data(), this->t_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_fight_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target(), output);
  }

  // required .client.FIGHT_RET_E ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  // optional string r_name = 4;
  if (has_r_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_name().data(), this->r_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->r_name(), output);
  }

  // optional string t_name = 5;
  if (has_t_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_name().data(), this->t_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->t_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_fight_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target(), target);
  }

  // required .client.FIGHT_RET_E ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  // optional string r_name = 4;
  if (has_r_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_name().data(), this->r_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->r_name(), target);
  }

  // optional string t_name = 5;
  if (has_t_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_name().data(), this->t_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->t_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_fight_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required .client.FIGHT_RET_E ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional string r_name = 4;
    if (has_r_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_name());
    }

    // optional string t_name = 5;
    if (has_t_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_fight_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_fight_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_fight_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_fight_ret::MergeFrom(const arena_fight_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_r_name()) {
      set_r_name(from.r_name());
    }
    if (from.has_t_name()) {
      set_t_name(from.t_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_fight_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_fight_ret::CopyFrom(const arena_fight_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_fight_ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void arena_fight_ret::Swap(arena_fight_ret* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(target_, other->target_);
    std::swap(ret_, other->ret_);
    std::swap(r_name_, other->r_name_);
    std::swap(t_name_, other->t_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_fight_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_fight_ret_descriptor_;
  metadata.reflection = arena_fight_ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_info_req::kTimeFieldNumber;
const int arena_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_info_req::arena_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_info_req::arena_info_req(const arena_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_info_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_info_req::~arena_info_req() {
  SharedDtor();
}

void arena_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_info_req_descriptor_;
}

const arena_info_req& arena_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_info_req* arena_info_req::default_instance_ = NULL;

arena_info_req* arena_info_req::New() const {
  return new arena_info_req;
}

void arena_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_info_req::MergeFrom(const arena_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_info_req::CopyFrom(const arena_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_info_req::Swap(arena_info_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_info_req_descriptor_;
  metadata.reflection = arena_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_info_rsp::kHistoryFieldNumber;
const int arena_info_rsp::kRankFieldNumber;
const int arena_info_rsp::kStatusFieldNumber;
const int arena_info_rsp::kRiFieldNumber;
#endif  // !_MSC_VER

arena_info_rsp::arena_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_info_rsp::InitAsDefaultInstance() {
}

arena_info_rsp::arena_info_rsp(const arena_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  history_ = 0u;
  rank_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_info_rsp::~arena_info_rsp() {
  SharedDtor();
}

void arena_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_info_rsp_descriptor_;
}

const arena_info_rsp& arena_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_info_rsp* arena_info_rsp::default_instance_ = NULL;

arena_info_rsp* arena_info_rsp::New() const {
  return new arena_info_rsp;
}

void arena_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_ = 0u;
    rank_ = 0u;
    status_ = 0u;
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 history = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ri;
        break;
      }

      // repeated .client.role_info ri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 history = 1;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->history(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // repeated .client.role_info ri = 4;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 history = 1;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->history(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // repeated .client.role_info ri = 4;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 history = 1;
    if (has_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .client.role_info ri = 4;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_info_rsp::MergeFrom(const arena_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history()) {
      set_history(from.history());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_info_rsp::CopyFrom(const arena_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void arena_info_rsp::Swap(arena_info_rsp* other) {
  if (other != this) {
    std::swap(history_, other->history_);
    std::swap(rank_, other->rank_);
    std::swap(status_, other->status_);
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_info_rsp_descriptor_;
  metadata.reflection = arena_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_personal_info_req::kRoleIdFieldNumber;
const int arena_personal_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_personal_info_req::arena_personal_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_personal_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_personal_info_req::arena_personal_info_req(const arena_personal_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_personal_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_personal_info_req::~arena_personal_info_req() {
  SharedDtor();
}

void arena_personal_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_personal_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_personal_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_personal_info_req_descriptor_;
}

const arena_personal_info_req& arena_personal_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_personal_info_req* arena_personal_info_req::default_instance_ = NULL;

arena_personal_info_req* arena_personal_info_req::New() const {
  return new arena_personal_info_req;
}

void arena_personal_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_personal_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_personal_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_personal_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_personal_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_personal_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_personal_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_personal_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_personal_info_req::MergeFrom(const arena_personal_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_personal_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_personal_info_req::CopyFrom(const arena_personal_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_personal_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_personal_info_req::Swap(arena_personal_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_personal_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_personal_info_req_descriptor_;
  metadata.reflection = arena_personal_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_personal_info_rsp::kUsedFieldNumber;
const int arena_personal_info_rsp::kTotalFieldNumber;
const int arena_personal_info_rsp::kLeftFieldNumber;
const int arena_personal_info_rsp::kTimelongFieldNumber;
#endif  // !_MSC_VER

arena_personal_info_rsp::arena_personal_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_personal_info_rsp::InitAsDefaultInstance() {
}

arena_personal_info_rsp::arena_personal_info_rsp(const arena_personal_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_personal_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  used_ = 0u;
  total_ = 0u;
  left_ = 0u;
  timelong_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_personal_info_rsp::~arena_personal_info_rsp() {
  SharedDtor();
}

void arena_personal_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_personal_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_personal_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_personal_info_rsp_descriptor_;
}

const arena_personal_info_rsp& arena_personal_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_personal_info_rsp* arena_personal_info_rsp::default_instance_ = NULL;

arena_personal_info_rsp* arena_personal_info_rsp::New() const {
  return new arena_personal_info_rsp;
}

void arena_personal_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    used_ = 0u;
    total_ = 0u;
    left_ = 0u;
    timelong_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_personal_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 used = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // required uint32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }

      // required uint32 left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timelong;
        break;
      }

      // optional uint32 timelong = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timelong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelong_)));
          set_has_timelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_personal_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 used = 1;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->used(), output);
  }

  // required uint32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  // required uint32 left = 3;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left(), output);
  }

  // optional uint32 timelong = 4;
  if (has_timelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timelong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_personal_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 used = 1;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->used(), target);
  }

  // required uint32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  // required uint32 left = 3;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left(), target);
  }

  // optional uint32 timelong = 4;
  if (has_timelong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timelong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_personal_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 used = 1;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used());
    }

    // required uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // required uint32 left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }

    // optional uint32 timelong = 4;
    if (has_timelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_personal_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_personal_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_personal_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_personal_info_rsp::MergeFrom(const arena_personal_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_used()) {
      set_used(from.used());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_timelong()) {
      set_timelong(from.timelong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_personal_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_personal_info_rsp::CopyFrom(const arena_personal_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_personal_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void arena_personal_info_rsp::Swap(arena_personal_info_rsp* other) {
  if (other != this) {
    std::swap(used_, other->used_);
    std::swap(total_, other->total_);
    std::swap(left_, other->left_);
    std::swap(timelong_, other->timelong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_personal_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_personal_info_rsp_descriptor_;
  metadata.reflection = arena_personal_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_record_req::kTimeFieldNumber;
const int arena_record_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_record_req::arena_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_record_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_record_req::arena_record_req(const arena_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_record_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_record_req::~arena_record_req() {
  SharedDtor();
}

void arena_record_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_record_req_descriptor_;
}

const arena_record_req& arena_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_record_req* arena_record_req::default_instance_ = NULL;

arena_record_req* arena_record_req::New() const {
  return new arena_record_req;
}

void arena_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_record_req::MergeFrom(const arena_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_record_req::CopyFrom(const arena_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_record_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_record_req::Swap(arena_record_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_record_req_descriptor_;
  metadata.reflection = arena_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_record_info::kTimeFieldNumber;
const int arena_record_info::kActionFieldNumber;
const int arena_record_info::kRetFieldNumber;
const int arena_record_info::kRankFieldNumber;
const int arena_record_info::kNameFieldNumber;
#endif  // !_MSC_VER

arena_record_info::arena_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_record_info::InitAsDefaultInstance() {
}

arena_record_info::arena_record_info(const arena_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_record_info::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  action_ = 0u;
  ret_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_record_info::~arena_record_info() {
  SharedDtor();
}

void arena_record_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void arena_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_record_info_descriptor_;
}

const arena_record_info& arena_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_record_info* arena_record_info::default_instance_ = NULL;

arena_record_info* arena_record_info::New() const {
  return new arena_record_info;
}

void arena_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    action_ = 0u;
    ret_ = 0;
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // required uint32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // required int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // required int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_record_info::MergeFrom(const arena_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_record_info::CopyFrom(const arena_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_record_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void arena_record_info::Swap(arena_record_info* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(action_, other->action_);
    std::swap(ret_, other->ret_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_record_info_descriptor_;
  metadata.reflection = arena_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_record_rsp::kArFieldNumber;
#endif  // !_MSC_VER

arena_record_rsp::arena_record_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_record_rsp::InitAsDefaultInstance() {
}

arena_record_rsp::arena_record_rsp(const arena_record_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_record_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_record_rsp::~arena_record_rsp() {
  SharedDtor();
}

void arena_record_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_record_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_record_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_record_rsp_descriptor_;
}

const arena_record_rsp& arena_record_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_record_rsp* arena_record_rsp::default_instance_ = NULL;

arena_record_rsp* arena_record_rsp::New() const {
  return new arena_record_rsp;
}

void arena_record_rsp::Clear() {
  ar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_record_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.arena_record_info ar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_record_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.arena_record_info ar = 1;
  for (int i = 0; i < this->ar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_record_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.arena_record_info ar = 1;
  for (int i = 0; i < this->ar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_record_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.arena_record_info ar = 1;
  total_size += 1 * this->ar_size();
  for (int i = 0; i < this->ar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_record_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_record_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_record_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_record_rsp::MergeFrom(const arena_record_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ar_.MergeFrom(from.ar_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_record_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_record_rsp::CopyFrom(const arena_record_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_record_rsp::IsInitialized() const {

  for (int i = 0; i < ar_size(); i++) {
    if (!this->ar(i).IsInitialized()) return false;
  }
  return true;
}

void arena_record_rsp::Swap(arena_record_rsp* other) {
  if (other != this) {
    ar_.Swap(&other->ar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_record_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_record_rsp_descriptor_;
  metadata.reflection = arena_record_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_refresh_req::kTimeFieldNumber;
const int arena_refresh_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_refresh_req::arena_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_refresh_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_refresh_req::arena_refresh_req(const arena_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_refresh_req::~arena_refresh_req() {
  SharedDtor();
}

void arena_refresh_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_refresh_req_descriptor_;
}

const arena_refresh_req& arena_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_refresh_req* arena_refresh_req::default_instance_ = NULL;

arena_refresh_req* arena_refresh_req::New() const {
  return new arena_refresh_req;
}

void arena_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_refresh_req::MergeFrom(const arena_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_refresh_req::CopyFrom(const arena_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_refresh_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_refresh_req::Swap(arena_refresh_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_refresh_req_descriptor_;
  metadata.reflection = arena_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_refresh_rsp::kTimesFieldNumber;
#endif  // !_MSC_VER

arena_refresh_rsp::arena_refresh_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_refresh_rsp::InitAsDefaultInstance() {
}

arena_refresh_rsp::arena_refresh_rsp(const arena_refresh_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_refresh_rsp::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_refresh_rsp::~arena_refresh_rsp() {
  SharedDtor();
}

void arena_refresh_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_refresh_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_refresh_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_refresh_rsp_descriptor_;
}

const arena_refresh_rsp& arena_refresh_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_refresh_rsp* arena_refresh_rsp::default_instance_ = NULL;

arena_refresh_rsp* arena_refresh_rsp::New() const {
  return new arena_refresh_rsp;
}

void arena_refresh_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_refresh_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_refresh_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_refresh_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_refresh_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_refresh_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_refresh_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_refresh_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_refresh_rsp::MergeFrom(const arena_refresh_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_refresh_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_refresh_rsp::CopyFrom(const arena_refresh_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_refresh_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_refresh_rsp::Swap(arena_refresh_rsp* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_refresh_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_refresh_rsp_descriptor_;
  metadata.reflection = arena_refresh_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_speed_up_req::kTimeFieldNumber;
const int arena_speed_up_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_speed_up_req::arena_speed_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_speed_up_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_speed_up_req::arena_speed_up_req(const arena_speed_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_speed_up_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_speed_up_req::~arena_speed_up_req() {
  SharedDtor();
}

void arena_speed_up_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_speed_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_speed_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_speed_up_req_descriptor_;
}

const arena_speed_up_req& arena_speed_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_speed_up_req* arena_speed_up_req::default_instance_ = NULL;

arena_speed_up_req* arena_speed_up_req::New() const {
  return new arena_speed_up_req;
}

void arena_speed_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_speed_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_speed_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_speed_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_speed_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_speed_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_speed_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_speed_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_speed_up_req::MergeFrom(const arena_speed_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_speed_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_speed_up_req::CopyFrom(const arena_speed_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_speed_up_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_speed_up_req::Swap(arena_speed_up_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_speed_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_speed_up_req_descriptor_;
  metadata.reflection = arena_speed_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_speed_up_rsp::kTimeFieldNumber;
#endif  // !_MSC_VER

arena_speed_up_rsp::arena_speed_up_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_speed_up_rsp::InitAsDefaultInstance() {
}

arena_speed_up_rsp::arena_speed_up_rsp(const arena_speed_up_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_speed_up_rsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_speed_up_rsp::~arena_speed_up_rsp() {
  SharedDtor();
}

void arena_speed_up_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_speed_up_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_speed_up_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_speed_up_rsp_descriptor_;
}

const arena_speed_up_rsp& arena_speed_up_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_speed_up_rsp* arena_speed_up_rsp::default_instance_ = NULL;

arena_speed_up_rsp* arena_speed_up_rsp::New() const {
  return new arena_speed_up_rsp;
}

void arena_speed_up_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_speed_up_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_speed_up_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_speed_up_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_speed_up_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_speed_up_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_speed_up_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_speed_up_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_speed_up_rsp::MergeFrom(const arena_speed_up_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_speed_up_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_speed_up_rsp::CopyFrom(const arena_speed_up_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_speed_up_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_speed_up_rsp::Swap(arena_speed_up_rsp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_speed_up_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_speed_up_rsp_descriptor_;
  metadata.reflection = arena_speed_up_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_challenge_req::kTargetFieldNumber;
const int arena_challenge_req::kTypeFieldNumber;
const int arena_challenge_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_challenge_req::arena_challenge_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_challenge_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_challenge_req::arena_challenge_req(const arena_challenge_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_challenge_req::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0u;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_challenge_req::~arena_challenge_req() {
  SharedDtor();
}

void arena_challenge_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_challenge_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_challenge_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_challenge_req_descriptor_;
}

const arena_challenge_req& arena_challenge_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_challenge_req* arena_challenge_req::default_instance_ = NULL;

arena_challenge_req* arena_challenge_req::New() const {
  return new arena_challenge_req;
}

void arena_challenge_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0u;
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_challenge_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_challenge_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_challenge_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_challenge_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_challenge_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_challenge_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_challenge_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_challenge_req::MergeFrom(const arena_challenge_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_challenge_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_challenge_req::CopyFrom(const arena_challenge_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_challenge_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void arena_challenge_req::Swap(arena_challenge_req* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_challenge_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_challenge_req_descriptor_;
  metadata.reflection = arena_challenge_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_challenge_result::kNumFieldNumber;
const int arena_challenge_result::kRetFieldNumber;
const int arena_challenge_result::kHistoryFieldNumber;
const int arena_challenge_result::kCurrentFieldNumber;
const int arena_challenge_result::kStatusFieldNumber;
#endif  // !_MSC_VER

arena_challenge_result::arena_challenge_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_challenge_result::InitAsDefaultInstance() {
}

arena_challenge_result::arena_challenge_result(const arena_challenge_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_challenge_result::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ret_ = 0;
  history_ = 0u;
  current_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_challenge_result::~arena_challenge_result() {
  SharedDtor();
}

void arena_challenge_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_challenge_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_challenge_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_challenge_result_descriptor_;
}

const arena_challenge_result& arena_challenge_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_challenge_result* arena_challenge_result::default_instance_ = NULL;

arena_challenge_result* arena_challenge_result::New() const {
  return new arena_challenge_result;
}

void arena_challenge_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    ret_ = 0;
    history_ = 0u;
    current_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_challenge_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.FIGHT_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FIGHT_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::FIGHT_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_history;
        break;
      }

      // optional uint32 history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current;
        break;
      }

      // optional uint32 current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_challenge_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // required .client.FIGHT_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // optional uint32 history = 3;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->history(), output);
  }

  // optional uint32 current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_challenge_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // required .client.FIGHT_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // optional uint32 history = 3;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->history(), target);
  }

  // optional uint32 current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_challenge_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required .client.FIGHT_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 history = 3;
    if (has_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history());
    }

    // optional uint32 current = 4;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_challenge_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_challenge_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_challenge_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_challenge_result::MergeFrom(const arena_challenge_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_challenge_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_challenge_result::CopyFrom(const arena_challenge_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_challenge_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void arena_challenge_result::Swap(arena_challenge_result* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(ret_, other->ret_);
    std::swap(history_, other->history_);
    std::swap(current_, other->current_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_challenge_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_challenge_result_descriptor_;
  metadata.reflection = arena_challenge_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int robot_attr::kRoleIdFieldNumber;
const int robot_attr::kRoleNameFieldNumber;
const int robot_attr::kLevelFieldNumber;
const int robot_attr::kSexFieldNumber;
const int robot_attr::kProfessionFieldNumber;
const int robot_attr::kFightingPowerFieldNumber;
const int robot_attr::kHpMaxFieldNumber;
const int robot_attr::kAttackMinFieldNumber;
const int robot_attr::kAttackMaxFieldNumber;
const int robot_attr::kDefenseMinFieldNumber;
const int robot_attr::kDefenseMaxFieldNumber;
const int robot_attr::kHitFieldNumber;
const int robot_attr::kDodgeFieldNumber;
const int robot_attr::kRecoverFieldNumber;
const int robot_attr::kMoveSpeedFieldNumber;
const int robot_attr::kStableFieldNumber;
const int robot_attr::kMountIdFieldNumber;
const int robot_attr::kWeaponIdFieldNumber;
const int robot_attr::kArmorIdFieldNumber;
const int robot_attr::kPetFieldNumber;
const int robot_attr::kConfigIdFieldNumber;
const int robot_attr::kSkFieldNumber;
const int robot_attr::kBackupFieldNumber;
const int robot_attr::kXFieldNumber;
const int robot_attr::kYFieldNumber;
const int robot_attr::kFamilyIdFieldNumber;
const int robot_attr::kVipLevelFieldNumber;
#endif  // !_MSC_VER

robot_attr::robot_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void robot_attr::InitAsDefaultInstance() {
  pet_ = const_cast< ::client::pet_db_info*>(&::client::pet_db_info::default_instance());
  sk_ = const_cast< ::client::skills*>(&::client::skills::default_instance());
  backup_ = const_cast< ::client::pet_db_info*>(&::client::pet_db_info::default_instance());
}

robot_attr::robot_attr(const robot_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void robot_attr::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  sex_ = 0u;
  profession_ = 0u;
  fighting_power_ = 0u;
  hp_max_ = 0u;
  attack_min_ = 0u;
  attack_max_ = 0u;
  defense_min_ = 0u;
  defense_max_ = 0u;
  hit_ = 0u;
  dodge_ = 0u;
  recover_ = 0u;
  move_speed_ = 0u;
  stable_ = 0u;
  mount_id_ = 0u;
  weapon_id_ = 0u;
  armor_id_ = 0u;
  pet_ = NULL;
  config_id_ = 0u;
  sk_ = NULL;
  backup_ = NULL;
  x_ = 0u;
  y_ = 0u;
  family_id_ = 0u;
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

robot_attr::~robot_attr() {
  SharedDtor();
}

void robot_attr::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
    delete pet_;
    delete sk_;
    delete backup_;
  }
}

void robot_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* robot_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return robot_attr_descriptor_;
}

const robot_attr& robot_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

robot_attr* robot_attr::default_instance_ = NULL;

robot_attr* robot_attr::New() const {
  return new robot_attr;
}

void robot_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    level_ = 0u;
    sex_ = 0u;
    profession_ = 0u;
    fighting_power_ = 0u;
    hp_max_ = 0u;
    attack_min_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attack_max_ = 0u;
    defense_min_ = 0u;
    defense_max_ = 0u;
    hit_ = 0u;
    dodge_ = 0u;
    recover_ = 0u;
    move_speed_ = 0u;
    stable_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mount_id_ = 0u;
    weapon_id_ = 0u;
    armor_id_ = 0u;
    if (has_pet()) {
      if (pet_ != NULL) pet_->::client::pet_db_info::Clear();
    }
    config_id_ = 0u;
    if (has_sk()) {
      if (sk_ != NULL) sk_->::client::skills::Clear();
    }
    if (has_backup()) {
      if (backup_ != NULL) backup_->::client::pet_db_info::Clear();
    }
    x_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    y_ = 0u;
    family_id_ = 0u;
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool robot_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fighting_power;
        break;
      }

      // optional uint32 fighting_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp_max;
        break;
      }

      // optional uint32 hp_max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_max_)));
          set_has_hp_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attack_min;
        break;
      }

      // optional uint32 attack_min = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_min_)));
          set_has_attack_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attack_max;
        break;
      }

      // optional uint32 attack_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_max_)));
          set_has_attack_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_defense_min;
        break;
      }

      // optional uint32 defense_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_min_)));
          set_has_defense_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defense_max;
        break;
      }

      // optional uint32 defense_max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_max_)));
          set_has_defense_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hit;
        break;
      }

      // optional uint32 hit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dodge;
        break;
      }

      // optional uint32 dodge = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_recover;
        break;
      }

      // optional uint32 recover = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_)));
          set_has_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_speed;
        break;
      }

      // optional uint32 move_speed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_stable;
        break;
      }

      // optional uint32 stable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stable_)));
          set_has_stable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_mount_id;
        break;
      }

      // optional uint32 mount_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_armor_id;
        break;
      }

      // optional uint32 armor_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pet;
        break;
      }

      // optional .client.pet_db_info pet = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_sk;
        break;
      }

      // optional .client.skills sk = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_backup;
        break;
      }

      // optional .client.pet_db_info backup = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_x;
        break;
      }

      // optional uint32 x = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_y;
        break;
      }

      // optional uint32 y = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void robot_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->profession(), output);
  }

  // optional uint32 fighting_power = 6;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fighting_power(), output);
  }

  // optional uint32 hp_max = 7;
  if (has_hp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hp_max(), output);
  }

  // optional uint32 attack_min = 8;
  if (has_attack_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->attack_min(), output);
  }

  // optional uint32 attack_max = 9;
  if (has_attack_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attack_max(), output);
  }

  // optional uint32 defense_min = 10;
  if (has_defense_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->defense_min(), output);
  }

  // optional uint32 defense_max = 11;
  if (has_defense_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->defense_max(), output);
  }

  // optional uint32 hit = 12;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hit(), output);
  }

  // optional uint32 dodge = 13;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dodge(), output);
  }

  // optional uint32 recover = 14;
  if (has_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->recover(), output);
  }

  // optional uint32 move_speed = 15;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->move_speed(), output);
  }

  // optional uint32 stable = 16;
  if (has_stable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->stable(), output);
  }

  // optional uint32 mount_id = 17;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->mount_id(), output);
  }

  // optional uint32 weapon_id = 18;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->weapon_id(), output);
  }

  // optional uint32 armor_id = 19;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->armor_id(), output);
  }

  // optional .client.pet_db_info pet = 20;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pet(), output);
  }

  // optional uint32 config_id = 21;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->config_id(), output);
  }

  // optional .client.skills sk = 22;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->sk(), output);
  }

  // optional .client.pet_db_info backup = 23;
  if (has_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->backup(), output);
  }

  // optional uint32 x = 24;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->x(), output);
  }

  // optional uint32 y = 25;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->y(), output);
  }

  // optional uint32 family_id = 26;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->family_id(), output);
  }

  // optional uint32 vip_level = 27;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* robot_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->profession(), target);
  }

  // optional uint32 fighting_power = 6;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fighting_power(), target);
  }

  // optional uint32 hp_max = 7;
  if (has_hp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hp_max(), target);
  }

  // optional uint32 attack_min = 8;
  if (has_attack_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->attack_min(), target);
  }

  // optional uint32 attack_max = 9;
  if (has_attack_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->attack_max(), target);
  }

  // optional uint32 defense_min = 10;
  if (has_defense_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->defense_min(), target);
  }

  // optional uint32 defense_max = 11;
  if (has_defense_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->defense_max(), target);
  }

  // optional uint32 hit = 12;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hit(), target);
  }

  // optional uint32 dodge = 13;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dodge(), target);
  }

  // optional uint32 recover = 14;
  if (has_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->recover(), target);
  }

  // optional uint32 move_speed = 15;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->move_speed(), target);
  }

  // optional uint32 stable = 16;
  if (has_stable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->stable(), target);
  }

  // optional uint32 mount_id = 17;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->mount_id(), target);
  }

  // optional uint32 weapon_id = 18;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->weapon_id(), target);
  }

  // optional uint32 armor_id = 19;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->armor_id(), target);
  }

  // optional .client.pet_db_info pet = 20;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pet(), target);
  }

  // optional uint32 config_id = 21;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->config_id(), target);
  }

  // optional .client.skills sk = 22;
  if (has_sk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->sk(), target);
  }

  // optional .client.pet_db_info backup = 23;
  if (has_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->backup(), target);
  }

  // optional uint32 x = 24;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->x(), target);
  }

  // optional uint32 y = 25;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->y(), target);
  }

  // optional uint32 family_id = 26;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->family_id(), target);
  }

  // optional uint32 vip_level = 27;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int robot_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 fighting_power = 6;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // optional uint32 hp_max = 7;
    if (has_hp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp_max());
    }

    // optional uint32 attack_min = 8;
    if (has_attack_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_min());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attack_max = 9;
    if (has_attack_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_max());
    }

    // optional uint32 defense_min = 10;
    if (has_defense_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_min());
    }

    // optional uint32 defense_max = 11;
    if (has_defense_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_max());
    }

    // optional uint32 hit = 12;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // optional uint32 dodge = 13;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // optional uint32 recover = 14;
    if (has_recover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover());
    }

    // optional uint32 move_speed = 15;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed());
    }

    // optional uint32 stable = 16;
    if (has_stable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stable());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 mount_id = 17;
    if (has_mount_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

    // optional uint32 weapon_id = 18;
    if (has_weapon_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 armor_id = 19;
    if (has_armor_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

    // optional .client.pet_db_info pet = 20;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional uint32 config_id = 21;
    if (has_config_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional .client.skills sk = 22;
    if (has_sk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sk());
    }

    // optional .client.pet_db_info backup = 23;
    if (has_backup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup());
    }

    // optional uint32 x = 24;
    if (has_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 y = 25;
    if (has_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 family_id = 26;
    if (has_family_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional uint32 vip_level = 27;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void robot_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const robot_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const robot_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void robot_attr::MergeFrom(const robot_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_hp_max()) {
      set_hp_max(from.hp_max());
    }
    if (from.has_attack_min()) {
      set_attack_min(from.attack_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attack_max()) {
      set_attack_max(from.attack_max());
    }
    if (from.has_defense_min()) {
      set_defense_min(from.defense_min());
    }
    if (from.has_defense_max()) {
      set_defense_max(from.defense_max());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_recover()) {
      set_recover(from.recover());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_stable()) {
      set_stable(from.stable());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
    if (from.has_pet()) {
      mutable_pet()->::client::pet_db_info::MergeFrom(from.pet());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_sk()) {
      mutable_sk()->::client::skills::MergeFrom(from.sk());
    }
    if (from.has_backup()) {
      mutable_backup()->::client::pet_db_info::MergeFrom(from.backup());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void robot_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robot_attr::CopyFrom(const robot_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robot_attr::IsInitialized() const {

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_sk()) {
    if (!this->sk().IsInitialized()) return false;
  }
  if (has_backup()) {
    if (!this->backup().IsInitialized()) return false;
  }
  return true;
}

void robot_attr::Swap(robot_attr* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(hp_max_, other->hp_max_);
    std::swap(attack_min_, other->attack_min_);
    std::swap(attack_max_, other->attack_max_);
    std::swap(defense_min_, other->defense_min_);
    std::swap(defense_max_, other->defense_max_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(recover_, other->recover_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(stable_, other->stable_);
    std::swap(mount_id_, other->mount_id_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(pet_, other->pet_);
    std::swap(config_id_, other->config_id_);
    std::swap(sk_, other->sk_);
    std::swap(backup_, other->backup_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(family_id_, other->family_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata robot_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = robot_attr_descriptor_;
  metadata.reflection = robot_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_target_data_req::kTargetFieldNumber;
const int load_target_data_req::kSceneIdFieldNumber;
const int load_target_data_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

load_target_data_req::load_target_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_target_data_req::InitAsDefaultInstance() {
}

load_target_data_req::load_target_data_req(const load_target_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_target_data_req::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0u;
  scene_id_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_target_data_req::~load_target_data_req() {
  SharedDtor();
}

void load_target_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void load_target_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_target_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_target_data_req_descriptor_;
}

const load_target_data_req& load_target_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

load_target_data_req* load_target_data_req::default_instance_ = NULL;

load_target_data_req* load_target_data_req::New() const {
  return new load_target_data_req;
}

void load_target_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0u;
    scene_id_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_target_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_target_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_target_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_target_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_target_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_target_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_target_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_target_data_req::MergeFrom(const load_target_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_target_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_target_data_req::CopyFrom(const load_target_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_target_data_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void load_target_data_req::Swap(load_target_data_req* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_target_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_target_data_req_descriptor_;
  metadata.reflection = load_target_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_target_data_rsp::kRoleIdFieldNumber;
const int load_target_data_rsp::kAttrFieldNumber;
#endif  // !_MSC_VER

load_target_data_rsp::load_target_data_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_target_data_rsp::InitAsDefaultInstance() {
  attr_ = const_cast< ::client::robot_attr*>(&::client::robot_attr::default_instance());
}

load_target_data_rsp::load_target_data_rsp(const load_target_data_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_target_data_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_target_data_rsp::~load_target_data_rsp() {
  SharedDtor();
}

void load_target_data_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void load_target_data_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_target_data_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_target_data_rsp_descriptor_;
}

const load_target_data_rsp& load_target_data_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

load_target_data_rsp* load_target_data_rsp::default_instance_ = NULL;

load_target_data_rsp* load_target_data_rsp::New() const {
  return new load_target_data_rsp;
}

void load_target_data_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::client::robot_attr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_target_data_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .client.robot_attr attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_target_data_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required .client.robot_attr attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_target_data_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required .client.robot_attr attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_target_data_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required .client.robot_attr attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_target_data_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_target_data_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_target_data_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_target_data_rsp::MergeFrom(const load_target_data_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_attr()) {
      mutable_attr()->::client::robot_attr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_target_data_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_target_data_rsp::CopyFrom(const load_target_data_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_target_data_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void load_target_data_rsp::Swap(load_target_data_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_target_data_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_target_data_rsp_descriptor_;
  metadata.reflection = load_target_data_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_online_target_data_req::kTargetFieldNumber;
const int load_online_target_data_req::kRoleIdFieldNumber;
const int load_online_target_data_req::kSvrSceneIdFieldNumber;
#endif  // !_MSC_VER

load_online_target_data_req::load_online_target_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_online_target_data_req::InitAsDefaultInstance() {
}

load_online_target_data_req::load_online_target_data_req(const load_online_target_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_online_target_data_req::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0u;
  role_id_ = 0u;
  svr_scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_online_target_data_req::~load_online_target_data_req() {
  SharedDtor();
}

void load_online_target_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void load_online_target_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_online_target_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_online_target_data_req_descriptor_;
}

const load_online_target_data_req& load_online_target_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

load_online_target_data_req* load_online_target_data_req::default_instance_ = NULL;

load_online_target_data_req* load_online_target_data_req::New() const {
  return new load_online_target_data_req;
}

void load_online_target_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0u;
    role_id_ = 0u;
    svr_scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_online_target_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svr_scene_id;
        break;
      }

      // required uint32 svr_scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_scene_id_)));
          set_has_svr_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_online_target_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 svr_scene_id = 3;
  if (has_svr_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svr_scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_online_target_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 svr_scene_id = 3;
  if (has_svr_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svr_scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_online_target_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 svr_scene_id = 3;
    if (has_svr_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_online_target_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_online_target_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_online_target_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_online_target_data_req::MergeFrom(const load_online_target_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_scene_id()) {
      set_svr_scene_id(from.svr_scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_online_target_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_online_target_data_req::CopyFrom(const load_online_target_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_online_target_data_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void load_online_target_data_req::Swap(load_online_target_data_req* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(role_id_, other->role_id_);
    std::swap(svr_scene_id_, other->svr_scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_online_target_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_online_target_data_req_descriptor_;
  metadata.reflection = load_online_target_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_reward_req::kRoleIdFieldNumber;
const int arena_reward_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_reward_req::arena_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_reward_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_reward_req::arena_reward_req(const arena_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_reward_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_reward_req::~arena_reward_req() {
  SharedDtor();
}

void arena_reward_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_reward_req_descriptor_;
}

const arena_reward_req& arena_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_reward_req* arena_reward_req::default_instance_ = NULL;

arena_reward_req* arena_reward_req::New() const {
  return new arena_reward_req;
}

void arena_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_reward_req::MergeFrom(const arena_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_reward_req::CopyFrom(const arena_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_reward_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_reward_req::Swap(arena_reward_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_reward_req_descriptor_;
  metadata.reflection = arena_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reward_info::kTypeFieldNumber;
const int reward_info::kValueFieldNumber;
#endif  // !_MSC_VER

reward_info::reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reward_info::InitAsDefaultInstance() {
}

reward_info::reward_info(const reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reward_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reward_info::~reward_info() {
  SharedDtor();
}

void reward_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reward_info_descriptor_;
}

const reward_info& reward_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

reward_info* reward_info::default_instance_ = NULL;

reward_info* reward_info::New() const {
  return new reward_info;
}

void reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reward_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reward_info::MergeFrom(const reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reward_info::CopyFrom(const reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reward_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void reward_info::Swap(reward_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reward_info_descriptor_;
  metadata.reflection = reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_reward_item::kMinRankFieldNumber;
const int arena_reward_item::kMaxRankFieldNumber;
const int arena_reward_item::kRiFieldNumber;
#endif  // !_MSC_VER

arena_reward_item::arena_reward_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_reward_item::InitAsDefaultInstance() {
}

arena_reward_item::arena_reward_item(const arena_reward_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_reward_item::SharedCtor() {
  _cached_size_ = 0;
  min_rank_ = 0u;
  max_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_reward_item::~arena_reward_item() {
  SharedDtor();
}

void arena_reward_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_reward_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_reward_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_reward_item_descriptor_;
}

const arena_reward_item& arena_reward_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_reward_item* arena_reward_item::default_instance_ = NULL;

arena_reward_item* arena_reward_item::New() const {
  return new arena_reward_item;
}

void arena_reward_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_rank_ = 0u;
    max_rank_ = 0u;
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_reward_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 min_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_rank_)));
          set_has_min_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_rank;
        break;
      }

      // required uint32 max_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rank_)));
          set_has_max_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ri;
        break;
      }

      // repeated .client.reward_info ri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_reward_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 min_rank = 1;
  if (has_min_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_rank(), output);
  }

  // required uint32 max_rank = 2;
  if (has_max_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_rank(), output);
  }

  // repeated .client.reward_info ri = 3;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_reward_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 min_rank = 1;
  if (has_min_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_rank(), target);
  }

  // required uint32 max_rank = 2;
  if (has_max_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_rank(), target);
  }

  // repeated .client.reward_info ri = 3;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_reward_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 min_rank = 1;
    if (has_min_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_rank());
    }

    // required uint32 max_rank = 2;
    if (has_max_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_rank());
    }

  }
  // repeated .client.reward_info ri = 3;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_reward_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_reward_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_reward_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_reward_item::MergeFrom(const arena_reward_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_rank()) {
      set_min_rank(from.min_rank());
    }
    if (from.has_max_rank()) {
      set_max_rank(from.max_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_reward_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_reward_item::CopyFrom(const arena_reward_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_reward_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void arena_reward_item::Swap(arena_reward_item* other) {
  if (other != this) {
    std::swap(min_rank_, other->min_rank_);
    std::swap(max_rank_, other->max_rank_);
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_reward_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_reward_item_descriptor_;
  metadata.reflection = arena_reward_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_reward_rsp::kAriFieldNumber;
#endif  // !_MSC_VER

arena_reward_rsp::arena_reward_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_reward_rsp::InitAsDefaultInstance() {
}

arena_reward_rsp::arena_reward_rsp(const arena_reward_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_reward_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_reward_rsp::~arena_reward_rsp() {
  SharedDtor();
}

void arena_reward_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_reward_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_reward_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_reward_rsp_descriptor_;
}

const arena_reward_rsp& arena_reward_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_reward_rsp* arena_reward_rsp::default_instance_ = NULL;

arena_reward_rsp* arena_reward_rsp::New() const {
  return new arena_reward_rsp;
}

void arena_reward_rsp::Clear() {
  ari_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_reward_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.arena_reward_item ari = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ari:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ari()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ari;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_reward_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.arena_reward_item ari = 1;
  for (int i = 0; i < this->ari_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ari(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_reward_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.arena_reward_item ari = 1;
  for (int i = 0; i < this->ari_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ari(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_reward_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.arena_reward_item ari = 1;
  total_size += 1 * this->ari_size();
  for (int i = 0; i < this->ari_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ari(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_reward_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_reward_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_reward_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_reward_rsp::MergeFrom(const arena_reward_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ari_.MergeFrom(from.ari_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_reward_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_reward_rsp::CopyFrom(const arena_reward_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_reward_rsp::IsInitialized() const {

  for (int i = 0; i < ari_size(); i++) {
    if (!this->ari(i).IsInitialized()) return false;
  }
  return true;
}

void arena_reward_rsp::Swap(arena_reward_rsp* other) {
  if (other != this) {
    ari_.Swap(&other->ari_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_reward_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_reward_rsp_descriptor_;
  metadata.reflection = arena_reward_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_rank_list_req::kRoleIdFieldNumber;
const int arena_rank_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_rank_list_req::arena_rank_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_rank_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_rank_list_req::arena_rank_list_req(const arena_rank_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_rank_list_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_rank_list_req::~arena_rank_list_req() {
  SharedDtor();
}

void arena_rank_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_rank_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_rank_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_rank_list_req_descriptor_;
}

const arena_rank_list_req& arena_rank_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_rank_list_req* arena_rank_list_req::default_instance_ = NULL;

arena_rank_list_req* arena_rank_list_req::New() const {
  return new arena_rank_list_req;
}

void arena_rank_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_rank_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_rank_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_rank_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_rank_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_rank_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_rank_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_rank_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_rank_list_req::MergeFrom(const arena_rank_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_rank_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_rank_list_req::CopyFrom(const arena_rank_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_rank_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_rank_list_req::Swap(arena_rank_list_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_rank_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_rank_list_req_descriptor_;
  metadata.reflection = arena_rank_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_list_item::kNameFieldNumber;
const int rank_list_item::kLevelFieldNumber;
const int rank_list_item::kPowerFieldNumber;
#endif  // !_MSC_VER

rank_list_item::rank_list_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_list_item::InitAsDefaultInstance() {
}

rank_list_item::rank_list_item(const rank_list_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_list_item::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_list_item::~rank_list_item() {
  SharedDtor();
}

void rank_list_item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void rank_list_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_list_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_list_item_descriptor_;
}

const rank_list_item& rank_list_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

rank_list_item* rank_list_item::default_instance_ = NULL;

rank_list_item* rank_list_item::New() const {
  return new rank_list_item;
}

void rank_list_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_list_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // required uint32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_list_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_list_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_list_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_list_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_list_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_list_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_list_item::MergeFrom(const rank_list_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_list_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_list_item::CopyFrom(const rank_list_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_list_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void rank_list_item::Swap(rank_list_item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_list_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_list_item_descriptor_;
  metadata.reflection = rank_list_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_rank_list_rsp::kRankFieldNumber;
const int arena_rank_list_rsp::kRliFieldNumber;
#endif  // !_MSC_VER

arena_rank_list_rsp::arena_rank_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_rank_list_rsp::InitAsDefaultInstance() {
}

arena_rank_list_rsp::arena_rank_list_rsp(const arena_rank_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_rank_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_rank_list_rsp::~arena_rank_list_rsp() {
  SharedDtor();
}

void arena_rank_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arena_rank_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_rank_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_rank_list_rsp_descriptor_;
}

const arena_rank_list_rsp& arena_rank_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_rank_list_rsp* arena_rank_list_rsp::default_instance_ = NULL;

arena_rank_list_rsp* arena_rank_list_rsp::New() const {
  return new arena_rank_list_rsp;
}

void arena_rank_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
  }
  rli_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_rank_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rli;
        break;
      }

      // repeated .client.rank_list_item rli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rli;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_rank_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated .client.rank_list_item rli = 2;
  for (int i = 0; i < this->rli_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rli(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_rank_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated .client.rank_list_item rli = 2;
  for (int i = 0; i < this->rli_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rli(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_rank_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated .client.rank_list_item rli = 2;
  total_size += 1 * this->rli_size();
  for (int i = 0; i < this->rli_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rli(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_rank_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_rank_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_rank_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_rank_list_rsp::MergeFrom(const arena_rank_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rli_.MergeFrom(from.rli_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_rank_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_rank_list_rsp::CopyFrom(const arena_rank_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_rank_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rli_size(); i++) {
    if (!this->rli(i).IsInitialized()) return false;
  }
  return true;
}

void arena_rank_list_rsp::Swap(arena_rank_list_rsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    rli_.Swap(&other->rli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_rank_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_rank_list_rsp_descriptor_;
  metadata.reflection = arena_rank_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_fight_begin::kTimeFieldNumber;
const int arena_fight_begin::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

arena_fight_begin::arena_fight_begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_fight_begin::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

arena_fight_begin::arena_fight_begin(const arena_fight_begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_fight_begin::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_fight_begin::~arena_fight_begin() {
  SharedDtor();
}

void arena_fight_begin::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void arena_fight_begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_fight_begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_fight_begin_descriptor_;
}

const arena_fight_begin& arena_fight_begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2earena_2eproto();
  return *default_instance_;
}

arena_fight_begin* arena_fight_begin::default_instance_ = NULL;

arena_fight_begin* arena_fight_begin::New() const {
  return new arena_fight_begin;
}

void arena_fight_begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_fight_begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_fight_begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_fight_begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_fight_begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_fight_begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_fight_begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_fight_begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_fight_begin::MergeFrom(const arena_fight_begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_fight_begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_fight_begin::CopyFrom(const arena_fight_begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_fight_begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void arena_fight_begin::Swap(arena_fight_begin* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_fight_begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_fight_begin_descriptor_;
  metadata.reflection = arena_fight_begin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
