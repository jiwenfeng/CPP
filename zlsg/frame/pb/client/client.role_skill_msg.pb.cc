// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_skill_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_skill_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* skill_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_skill_effect_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_skill_effect_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_skill_effect_upgrade_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_skill_effect_upgrade_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_skill_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_skill_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* skills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skills_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_skill_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_skill_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_skill_upgrade_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_skill_upgrade_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* role_skill_upgrade_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* set_default_skill_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_default_skill_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_default_skill_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_default_skill_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_default_skill_rsp_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* skill_point_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_point_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_point_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_point_time_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_skill_study_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_skill_study_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_skill_study_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_skill_study_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_skill_replace_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_skill_replace_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gem_skill_replace_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gem_skill_replace_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* bows_skill_studt_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bows_skill_studt_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto() {
  protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_skill_msg.proto");
  GOOGLE_CHECK(file != NULL);
  skill_data_descriptor_ = file->message_type(0);
  static const int skill_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, mas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, effect_id_),
  };
  skill_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_data_descriptor_,
      skill_data::default_instance_,
      skill_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_data));
  role_skill_effect_upgrade_req_descriptor_ = file->message_type(1);
  static const int role_skill_effect_upgrade_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_req, svr_head_),
  };
  role_skill_effect_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_skill_effect_upgrade_req_descriptor_,
      role_skill_effect_upgrade_req::default_instance_,
      role_skill_effect_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_skill_effect_upgrade_req));
  role_skill_effect_upgrade_rsp_descriptor_ = file->message_type(2);
  static const int role_skill_effect_upgrade_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_rsp, old_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_rsp, new_skill_),
  };
  role_skill_effect_upgrade_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_skill_effect_upgrade_rsp_descriptor_,
      role_skill_effect_upgrade_rsp::default_instance_,
      role_skill_effect_upgrade_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_effect_upgrade_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_skill_effect_upgrade_rsp));
  role_skill_msg_descriptor_ = file->message_type(3);
  static const int role_skill_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_msg, sk_),
  };
  role_skill_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_skill_msg_descriptor_,
      role_skill_msg::default_instance_,
      role_skill_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_skill_msg));
  skills_descriptor_ = file->message_type(4);
  static const int skills_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skills, sk_),
  };
  skills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skills_descriptor_,
      skills::default_instance_,
      skills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skills));
  role_skill_upgrade_req_descriptor_ = file->message_type(5);
  static const int role_skill_upgrade_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_req, ser_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_req, svr_head_),
  };
  role_skill_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_skill_upgrade_req_descriptor_,
      role_skill_upgrade_req::default_instance_,
      role_skill_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_skill_upgrade_req));
  role_skill_upgrade_rsp_descriptor_ = file->message_type(6);
  static const int role_skill_upgrade_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_rsp, old_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_rsp, new_skill_),
  };
  role_skill_upgrade_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_skill_upgrade_rsp_descriptor_,
      role_skill_upgrade_rsp::default_instance_,
      role_skill_upgrade_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_skill_upgrade_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_skill_upgrade_rsp));
  role_skill_upgrade_rsp_RET_descriptor_ = role_skill_upgrade_rsp_descriptor_->enum_type(0);
  set_default_skill_req_descriptor_ = file->message_type(7);
  static const int set_default_skill_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_req, svr_head_),
  };
  set_default_skill_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_default_skill_req_descriptor_,
      set_default_skill_req::default_instance_,
      set_default_skill_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_default_skill_req));
  set_default_skill_rsp_descriptor_ = file->message_type(8);
  static const int set_default_skill_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_rsp, skill_id_),
  };
  set_default_skill_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_default_skill_rsp_descriptor_,
      set_default_skill_rsp::default_instance_,
      set_default_skill_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_default_skill_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_default_skill_rsp));
  set_default_skill_rsp_RET_descriptor_ = set_default_skill_rsp_descriptor_->enum_type(0);
  skill_point_time_req_descriptor_ = file->message_type(9);
  static const int skill_point_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_req, svr_head_),
  };
  skill_point_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_point_time_req_descriptor_,
      skill_point_time_req::default_instance_,
      skill_point_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_point_time_req));
  skill_point_time_rsp_descriptor_ = file->message_type(10);
  static const int skill_point_time_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_rsp, remain_time_),
  };
  skill_point_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_point_time_rsp_descriptor_,
      skill_point_time_rsp::default_instance_,
      skill_point_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_point_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_point_time_rsp));
  gem_skill_study_req_descriptor_ = file->message_type(11);
  static const int gem_skill_study_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_req, ser_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_req, svr_head_),
  };
  gem_skill_study_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_skill_study_req_descriptor_,
      gem_skill_study_req::default_instance_,
      gem_skill_study_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_skill_study_req));
  gem_skill_study_rsp_descriptor_ = file->message_type(12);
  static const int gem_skill_study_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_rsp, ser_index_),
  };
  gem_skill_study_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_skill_study_rsp_descriptor_,
      gem_skill_study_rsp::default_instance_,
      gem_skill_study_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_study_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_skill_study_rsp));
  gem_skill_replace_req_descriptor_ = file->message_type(13);
  static const int gem_skill_replace_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, ser_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, svr_head_),
  };
  gem_skill_replace_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_skill_replace_req_descriptor_,
      gem_skill_replace_req::default_instance_,
      gem_skill_replace_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_skill_replace_req));
  gem_skill_replace_rsp_descriptor_ = file->message_type(14);
  static const int gem_skill_replace_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_rsp, old_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_rsp, new_skill_),
  };
  gem_skill_replace_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gem_skill_replace_rsp_descriptor_,
      gem_skill_replace_rsp::default_instance_,
      gem_skill_replace_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gem_skill_replace_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gem_skill_replace_rsp));
  bows_skill_studt_rsp_descriptor_ = file->message_type(15);
  static const int bows_skill_studt_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_studt_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_studt_rsp, old_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_studt_rsp, new_skill_),
  };
  bows_skill_studt_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bows_skill_studt_rsp_descriptor_,
      bows_skill_studt_rsp::default_instance_,
      bows_skill_studt_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_studt_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bows_skill_studt_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bows_skill_studt_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fskill_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_data_descriptor_, &skill_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_skill_effect_upgrade_req_descriptor_, &role_skill_effect_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_skill_effect_upgrade_rsp_descriptor_, &role_skill_effect_upgrade_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_skill_msg_descriptor_, &role_skill_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skills_descriptor_, &skills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_skill_upgrade_req_descriptor_, &role_skill_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_skill_upgrade_rsp_descriptor_, &role_skill_upgrade_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_default_skill_req_descriptor_, &set_default_skill_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_default_skill_rsp_descriptor_, &set_default_skill_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_point_time_req_descriptor_, &skill_point_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_point_time_rsp_descriptor_, &skill_point_time_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_skill_study_req_descriptor_, &gem_skill_study_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_skill_study_rsp_descriptor_, &gem_skill_study_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_skill_replace_req_descriptor_, &gem_skill_replace_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gem_skill_replace_rsp_descriptor_, &gem_skill_replace_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bows_skill_studt_rsp_descriptor_, &bows_skill_studt_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto() {
  delete skill_data::default_instance_;
  delete skill_data_reflection_;
  delete role_skill_effect_upgrade_req::default_instance_;
  delete role_skill_effect_upgrade_req_reflection_;
  delete role_skill_effect_upgrade_rsp::default_instance_;
  delete role_skill_effect_upgrade_rsp_reflection_;
  delete role_skill_msg::default_instance_;
  delete role_skill_msg_reflection_;
  delete skills::default_instance_;
  delete skills_reflection_;
  delete role_skill_upgrade_req::default_instance_;
  delete role_skill_upgrade_req_reflection_;
  delete role_skill_upgrade_rsp::default_instance_;
  delete role_skill_upgrade_rsp_reflection_;
  delete set_default_skill_req::default_instance_;
  delete set_default_skill_req_reflection_;
  delete set_default_skill_rsp::default_instance_;
  delete set_default_skill_rsp_reflection_;
  delete skill_point_time_req::default_instance_;
  delete skill_point_time_req_reflection_;
  delete skill_point_time_rsp::default_instance_;
  delete skill_point_time_rsp_reflection_;
  delete gem_skill_study_req::default_instance_;
  delete gem_skill_study_req_reflection_;
  delete gem_skill_study_rsp::default_instance_;
  delete gem_skill_study_rsp_reflection_;
  delete gem_skill_replace_req::default_instance_;
  delete gem_skill_replace_req_reflection_;
  delete gem_skill_replace_rsp::default_instance_;
  delete gem_skill_replace_rsp_reflection_;
  delete bows_skill_studt_rsp::default_instance_;
  delete bows_skill_studt_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033client.role_skill_msg.proto\022\006client\032\021c"
    "lient.comm.proto\"c\n\nskill_data\022\n\n\002id\030\001 \002"
    "(\r\022\n\n\002cd\030\002 \002(\r\022\013\n\003mas\030\003 \002(\r\022\016\n\006serial\030\004 "
    "\002(\r\022\r\n\005level\030\005 \002(\r\022\021\n\teffect_id\030\006 \002(\r\"i\n"
    "\035role_skill_effect_upgrade_req\022\020\n\010skill_"
    "id\030\001 \002(\r\022\016\n\006pet_id\030\002 \001(\r\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head\"\202\001\n\035role_skill_"
    "effect_upgrade_rsp\022\023\n\013result_type\030\001 \002(\r\022"
    "%\n\told_skill\030\002 \001(\0132\022.client.skill_data\022%"
    "\n\tnew_skill\030\003 \001(\0132\022.client.skill_data\"O\n"
    "\016role_skill_msg\022\035\n\002rd\030\001 \002(\0132\021.client.rol"
    "e_data\022\036\n\002sk\030\002 \003(\0132\022.client.skill_data\"("
    "\n\006skills\022\036\n\002sk\030\001 \003(\0132\022.client.skill_data"
    "\"e\n\026role_skill_upgrade_req\022\020\n\010skill_id\030\001"
    " \002(\r\022\021\n\tser_index\030\002 \001(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"\255\002\n\026role_skill_u"
    "pgrade_rsp\022/\n\003ret\030\001 \002(\0162\".client.role_sk"
    "ill_upgrade_rsp.RET\022%\n\told_skill\030\002 \001(\0132\022"
    ".client.skill_data\022%\n\tnew_skill\030\003 \001(\0132\022."
    "client.skill_data\"\223\001\n\003RET\022\013\n\007SUCCESS\020\000\022\017"
    "\n\013LIMIT_MONEY\020\001\022\017\n\013LIMIT_SKILL\020\002\022\r\n\tLIMI"
    "T_MAX\020\003\022\r\n\tLIMIT_LVL\020\004\022\016\n\nLIMIT_BOOK\020\005\022\017"
    "\n\013LIMIT_YUNLI\020\006\022\016\n\nLIMIT_ITEM\020\007\022\016\n\nLIMIT"
    "_CONF\020\010\"Q\n\025set_default_skill_req\022\020\n\010skil"
    "l_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"\240\001\n\025set_default_skill_rsp\022.\n\003"
    "ret\030\001 \002(\0162!.client.set_default_skill_rsp"
    ".RET\022\020\n\010skill_id\030\002 \001(\r\"E\n\003RET\022\013\n\007SUCCESS"
    "\020\000\022\017\n\013ERROR_SKILL\020\001\022\017\n\013ERROR_RESET\020\002\022\017\n\013"
    "ERROR_LIMIT\020\003\"P\n\024skill_point_time_req\022\020\n"
    "\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"+\n\024skill_point_time_rsp\022"
    "\023\n\013remain_time\030\001 \002(\r\"a\n\023gem_skill_study_"
    "req\022\017\n\007item_id\030\001 \002(\r\022\021\n\tser_index\030\002 \002(\r\022"
    "&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\""
    "=\n\023gem_skill_study_rsp\022\023\n\013result_type\030\001 "
    "\002(\r\022\021\n\tser_index\030\002 \001(\r\"u\n\025gem_skill_repl"
    "ace_req\022\020\n\010skill_id\030\001 \002(\r\022\021\n\tser_index\030\002"
    " \002(\r\022\017\n\007item_id\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"z\n\025gem_skill_repla"
    "ce_rsp\022\023\n\013result_type\030\001 \002(\r\022%\n\told_skill"
    "\030\002 \001(\0132\022.client.skill_data\022%\n\tnew_skill\030"
    "\003 \001(\0132\022.client.skill_data\"y\n\024bows_skill_"
    "studt_rsp\022\023\n\013result_type\030\001 \002(\r\022%\n\told_sk"
    "ill\030\002 \001(\0132\022.client.skill_data\022%\n\tnew_ski"
    "ll\030\003 \001(\0132\022.client.skill_data", 1828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_skill_msg.proto", &protobuf_RegisterTypes);
  skill_data::default_instance_ = new skill_data();
  role_skill_effect_upgrade_req::default_instance_ = new role_skill_effect_upgrade_req();
  role_skill_effect_upgrade_rsp::default_instance_ = new role_skill_effect_upgrade_rsp();
  role_skill_msg::default_instance_ = new role_skill_msg();
  skills::default_instance_ = new skills();
  role_skill_upgrade_req::default_instance_ = new role_skill_upgrade_req();
  role_skill_upgrade_rsp::default_instance_ = new role_skill_upgrade_rsp();
  set_default_skill_req::default_instance_ = new set_default_skill_req();
  set_default_skill_rsp::default_instance_ = new set_default_skill_rsp();
  skill_point_time_req::default_instance_ = new skill_point_time_req();
  skill_point_time_rsp::default_instance_ = new skill_point_time_rsp();
  gem_skill_study_req::default_instance_ = new gem_skill_study_req();
  gem_skill_study_rsp::default_instance_ = new gem_skill_study_rsp();
  gem_skill_replace_req::default_instance_ = new gem_skill_replace_req();
  gem_skill_replace_rsp::default_instance_ = new gem_skill_replace_rsp();
  bows_skill_studt_rsp::default_instance_ = new bows_skill_studt_rsp();
  skill_data::default_instance_->InitAsDefaultInstance();
  role_skill_effect_upgrade_req::default_instance_->InitAsDefaultInstance();
  role_skill_effect_upgrade_rsp::default_instance_->InitAsDefaultInstance();
  role_skill_msg::default_instance_->InitAsDefaultInstance();
  skills::default_instance_->InitAsDefaultInstance();
  role_skill_upgrade_req::default_instance_->InitAsDefaultInstance();
  role_skill_upgrade_rsp::default_instance_->InitAsDefaultInstance();
  set_default_skill_req::default_instance_->InitAsDefaultInstance();
  set_default_skill_rsp::default_instance_->InitAsDefaultInstance();
  skill_point_time_req::default_instance_->InitAsDefaultInstance();
  skill_point_time_rsp::default_instance_->InitAsDefaultInstance();
  gem_skill_study_req::default_instance_->InitAsDefaultInstance();
  gem_skill_study_rsp::default_instance_->InitAsDefaultInstance();
  gem_skill_replace_req::default_instance_->InitAsDefaultInstance();
  gem_skill_replace_rsp::default_instance_->InitAsDefaultInstance();
  bows_skill_studt_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fskill_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fskill_5fmsg_2eproto {
  StaticDescriptorInitializer_client_2erole_5fskill_5fmsg_2eproto() {
    protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fskill_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int skill_data::kIdFieldNumber;
const int skill_data::kCdFieldNumber;
const int skill_data::kMasFieldNumber;
const int skill_data::kSerialFieldNumber;
const int skill_data::kLevelFieldNumber;
const int skill_data::kEffectIdFieldNumber;
#endif  // !_MSC_VER

skill_data::skill_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_data::InitAsDefaultInstance() {
}

skill_data::skill_data(const skill_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cd_ = 0u;
  mas_ = 0u;
  serial_ = 0u;
  level_ = 0u;
  effect_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_data::~skill_data() {
  SharedDtor();
}

void skill_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_data_descriptor_;
}

const skill_data& skill_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

skill_data* skill_data::default_instance_ = NULL;

skill_data* skill_data::New() const {
  return new skill_data;
}

void skill_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cd_ = 0u;
    mas_ = 0u;
    serial_ = 0u;
    level_ = 0u;
    effect_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required uint32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mas;
        break;
      }

      // required uint32 mas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mas_)));
          set_has_mas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serial;
        break;
      }

      // required uint32 serial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_effect_id;
        break;
      }

      // required uint32 effect_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // required uint32 mas = 3;
  if (has_mas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mas(), output);
  }

  // required uint32 serial = 4;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serial(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required uint32 effect_id = 6;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // required uint32 mas = 3;
  if (has_mas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mas(), target);
  }

  // required uint32 serial = 4;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serial(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required uint32 effect_id = 6;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 mas = 3;
    if (has_mas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mas());
    }

    // required uint32 serial = 4;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 effect_id = 6;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_data::MergeFrom(const skill_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_mas()) {
      set_mas(from.mas());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_data::CopyFrom(const skill_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void skill_data::Swap(skill_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cd_, other->cd_);
    std::swap(mas_, other->mas_);
    std::swap(serial_, other->serial_);
    std::swap(level_, other->level_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_data_descriptor_;
  metadata.reflection = skill_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_skill_effect_upgrade_req::kSkillIdFieldNumber;
const int role_skill_effect_upgrade_req::kPetIdFieldNumber;
const int role_skill_effect_upgrade_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

role_skill_effect_upgrade_req::role_skill_effect_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_skill_effect_upgrade_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

role_skill_effect_upgrade_req::role_skill_effect_upgrade_req(const role_skill_effect_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_skill_effect_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_skill_effect_upgrade_req::~role_skill_effect_upgrade_req() {
  SharedDtor();
}

void role_skill_effect_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void role_skill_effect_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_skill_effect_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_effect_upgrade_req_descriptor_;
}

const role_skill_effect_upgrade_req& role_skill_effect_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

role_skill_effect_upgrade_req* role_skill_effect_upgrade_req::default_instance_ = NULL;

role_skill_effect_upgrade_req* role_skill_effect_upgrade_req::New() const {
  return new role_skill_effect_upgrade_req;
}

void role_skill_effect_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_skill_effect_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional uint32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_skill_effect_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_skill_effect_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_skill_effect_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_skill_effect_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_skill_effect_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_skill_effect_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_skill_effect_upgrade_req::MergeFrom(const role_skill_effect_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_skill_effect_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_skill_effect_upgrade_req::CopyFrom(const role_skill_effect_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_skill_effect_upgrade_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void role_skill_effect_upgrade_req::Swap(role_skill_effect_upgrade_req* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_skill_effect_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_skill_effect_upgrade_req_descriptor_;
  metadata.reflection = role_skill_effect_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_skill_effect_upgrade_rsp::kResultTypeFieldNumber;
const int role_skill_effect_upgrade_rsp::kOldSkillFieldNumber;
const int role_skill_effect_upgrade_rsp::kNewSkillFieldNumber;
#endif  // !_MSC_VER

role_skill_effect_upgrade_rsp::role_skill_effect_upgrade_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_skill_effect_upgrade_rsp::InitAsDefaultInstance() {
  old_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
  new_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
}

role_skill_effect_upgrade_rsp::role_skill_effect_upgrade_rsp(const role_skill_effect_upgrade_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_skill_effect_upgrade_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  old_skill_ = NULL;
  new_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_skill_effect_upgrade_rsp::~role_skill_effect_upgrade_rsp() {
  SharedDtor();
}

void role_skill_effect_upgrade_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete old_skill_;
    delete new_skill_;
  }
}

void role_skill_effect_upgrade_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_skill_effect_upgrade_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_effect_upgrade_rsp_descriptor_;
}

const role_skill_effect_upgrade_rsp& role_skill_effect_upgrade_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

role_skill_effect_upgrade_rsp* role_skill_effect_upgrade_rsp::default_instance_ = NULL;

role_skill_effect_upgrade_rsp* role_skill_effect_upgrade_rsp::New() const {
  return new role_skill_effect_upgrade_rsp;
}

void role_skill_effect_upgrade_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_old_skill()) {
      if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
    }
    if (has_new_skill()) {
      if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_skill_effect_upgrade_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_skill;
        break;
      }

      // optional .client.skill_data old_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_skill;
        break;
      }

      // optional .client.skill_data new_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_skill_effect_upgrade_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_skill(), output);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_skill_effect_upgrade_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_skill(), target);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_skill_effect_upgrade_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.skill_data old_skill = 2;
    if (has_old_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_skill());
    }

    // optional .client.skill_data new_skill = 3;
    if (has_new_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_skill_effect_upgrade_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_skill_effect_upgrade_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_skill_effect_upgrade_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_skill_effect_upgrade_rsp::MergeFrom(const role_skill_effect_upgrade_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_old_skill()) {
      mutable_old_skill()->::client::skill_data::MergeFrom(from.old_skill());
    }
    if (from.has_new_skill()) {
      mutable_new_skill()->::client::skill_data::MergeFrom(from.new_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_skill_effect_upgrade_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_skill_effect_upgrade_rsp::CopyFrom(const role_skill_effect_upgrade_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_skill_effect_upgrade_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_old_skill()) {
    if (!this->old_skill().IsInitialized()) return false;
  }
  if (has_new_skill()) {
    if (!this->new_skill().IsInitialized()) return false;
  }
  return true;
}

void role_skill_effect_upgrade_rsp::Swap(role_skill_effect_upgrade_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(old_skill_, other->old_skill_);
    std::swap(new_skill_, other->new_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_skill_effect_upgrade_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_skill_effect_upgrade_rsp_descriptor_;
  metadata.reflection = role_skill_effect_upgrade_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_skill_msg::kRdFieldNumber;
const int role_skill_msg::kSkFieldNumber;
#endif  // !_MSC_VER

role_skill_msg::role_skill_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_skill_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

role_skill_msg::role_skill_msg(const role_skill_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_skill_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_skill_msg::~role_skill_msg() {
  SharedDtor();
}

void role_skill_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void role_skill_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_skill_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_msg_descriptor_;
}

const role_skill_msg& role_skill_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

role_skill_msg* role_skill_msg::default_instance_ = NULL;

role_skill_msg* role_skill_msg::New() const {
  return new role_skill_msg;
}

void role_skill_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  sk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_skill_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sk;
        break;
      }

      // repeated .client.skill_data sk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sk;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_skill_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // repeated .client.skill_data sk = 2;
  for (int i = 0; i < this->sk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sk(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_skill_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // repeated .client.skill_data sk = 2;
  for (int i = 0; i < this->sk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sk(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_skill_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.skill_data sk = 2;
  total_size += 1 * this->sk_size();
  for (int i = 0; i < this->sk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sk(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_skill_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_skill_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_skill_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_skill_msg::MergeFrom(const role_skill_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  sk_.MergeFrom(from.sk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_skill_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_skill_msg::CopyFrom(const role_skill_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_skill_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < sk_size(); i++) {
    if (!this->sk(i).IsInitialized()) return false;
  }
  return true;
}

void role_skill_msg::Swap(role_skill_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    sk_.Swap(&other->sk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_skill_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_skill_msg_descriptor_;
  metadata.reflection = role_skill_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skills::kSkFieldNumber;
#endif  // !_MSC_VER

skills::skills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skills::InitAsDefaultInstance() {
}

skills::skills(const skills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skills::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skills::~skills() {
  SharedDtor();
}

void skills::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skills_descriptor_;
}

const skills& skills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

skills* skills::default_instance_ = NULL;

skills* skills::New() const {
  return new skills;
}

void skills::Clear() {
  sk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.skill_data sk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sk;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.skill_data sk = 1;
  for (int i = 0; i < this->sk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sk(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.skill_data sk = 1;
  for (int i = 0; i < this->sk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sk(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skills::ByteSize() const {
  int total_size = 0;

  // repeated .client.skill_data sk = 1;
  total_size += 1 * this->sk_size();
  for (int i = 0; i < this->sk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sk(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skills::MergeFrom(const skills& from) {
  GOOGLE_CHECK_NE(&from, this);
  sk_.MergeFrom(from.sk_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skills::CopyFrom(const skills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skills::IsInitialized() const {

  for (int i = 0; i < sk_size(); i++) {
    if (!this->sk(i).IsInitialized()) return false;
  }
  return true;
}

void skills::Swap(skills* other) {
  if (other != this) {
    sk_.Swap(&other->sk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skills_descriptor_;
  metadata.reflection = skills_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_skill_upgrade_req::kSkillIdFieldNumber;
const int role_skill_upgrade_req::kSerIndexFieldNumber;
const int role_skill_upgrade_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

role_skill_upgrade_req::role_skill_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_skill_upgrade_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

role_skill_upgrade_req::role_skill_upgrade_req(const role_skill_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_skill_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  ser_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_skill_upgrade_req::~role_skill_upgrade_req() {
  SharedDtor();
}

void role_skill_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void role_skill_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_skill_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_upgrade_req_descriptor_;
}

const role_skill_upgrade_req& role_skill_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

role_skill_upgrade_req* role_skill_upgrade_req::default_instance_ = NULL;

role_skill_upgrade_req* role_skill_upgrade_req::New() const {
  return new role_skill_upgrade_req;
}

void role_skill_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    ser_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_skill_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ser_index;
        break;
      }

      // optional uint32 ser_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ser_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ser_index_)));
          set_has_ser_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_skill_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 ser_index = 2;
  if (has_ser_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ser_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_skill_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 ser_index = 2;
  if (has_ser_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ser_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_skill_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 ser_index = 2;
    if (has_ser_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ser_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_skill_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_skill_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_skill_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_skill_upgrade_req::MergeFrom(const role_skill_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ser_index()) {
      set_ser_index(from.ser_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_skill_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_skill_upgrade_req::CopyFrom(const role_skill_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_skill_upgrade_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void role_skill_upgrade_req::Swap(role_skill_upgrade_req* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(ser_index_, other->ser_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_skill_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_skill_upgrade_req_descriptor_;
  metadata.reflection = role_skill_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* role_skill_upgrade_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_upgrade_rsp_RET_descriptor_;
}
bool role_skill_upgrade_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::SUCCESS;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_MONEY;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_SKILL;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_MAX;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_LVL;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_BOOK;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_YUNLI;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_ITEM;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::LIMIT_CONF;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::RET_MIN;
const role_skill_upgrade_rsp_RET role_skill_upgrade_rsp::RET_MAX;
const int role_skill_upgrade_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int role_skill_upgrade_rsp::kRetFieldNumber;
const int role_skill_upgrade_rsp::kOldSkillFieldNumber;
const int role_skill_upgrade_rsp::kNewSkillFieldNumber;
#endif  // !_MSC_VER

role_skill_upgrade_rsp::role_skill_upgrade_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_skill_upgrade_rsp::InitAsDefaultInstance() {
  old_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
  new_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
}

role_skill_upgrade_rsp::role_skill_upgrade_rsp(const role_skill_upgrade_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_skill_upgrade_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  old_skill_ = NULL;
  new_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_skill_upgrade_rsp::~role_skill_upgrade_rsp() {
  SharedDtor();
}

void role_skill_upgrade_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete old_skill_;
    delete new_skill_;
  }
}

void role_skill_upgrade_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_skill_upgrade_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_skill_upgrade_rsp_descriptor_;
}

const role_skill_upgrade_rsp& role_skill_upgrade_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

role_skill_upgrade_rsp* role_skill_upgrade_rsp::default_instance_ = NULL;

role_skill_upgrade_rsp* role_skill_upgrade_rsp::New() const {
  return new role_skill_upgrade_rsp;
}

void role_skill_upgrade_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_old_skill()) {
      if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
    }
    if (has_new_skill()) {
      if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_skill_upgrade_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_skill_upgrade_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::role_skill_upgrade_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::role_skill_upgrade_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_skill;
        break;
      }

      // optional .client.skill_data old_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_skill;
        break;
      }

      // optional .client.skill_data new_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_skill_upgrade_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_skill_upgrade_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_skill(), output);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_skill_upgrade_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_skill_upgrade_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_skill(), target);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_skill_upgrade_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_skill_upgrade_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .client.skill_data old_skill = 2;
    if (has_old_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_skill());
    }

    // optional .client.skill_data new_skill = 3;
    if (has_new_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_skill_upgrade_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_skill_upgrade_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_skill_upgrade_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_skill_upgrade_rsp::MergeFrom(const role_skill_upgrade_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_old_skill()) {
      mutable_old_skill()->::client::skill_data::MergeFrom(from.old_skill());
    }
    if (from.has_new_skill()) {
      mutable_new_skill()->::client::skill_data::MergeFrom(from.new_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_skill_upgrade_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_skill_upgrade_rsp::CopyFrom(const role_skill_upgrade_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_skill_upgrade_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_old_skill()) {
    if (!this->old_skill().IsInitialized()) return false;
  }
  if (has_new_skill()) {
    if (!this->new_skill().IsInitialized()) return false;
  }
  return true;
}

void role_skill_upgrade_rsp::Swap(role_skill_upgrade_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(old_skill_, other->old_skill_);
    std::swap(new_skill_, other->new_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_skill_upgrade_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_skill_upgrade_rsp_descriptor_;
  metadata.reflection = role_skill_upgrade_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_default_skill_req::kSkillIdFieldNumber;
const int set_default_skill_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

set_default_skill_req::set_default_skill_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_default_skill_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

set_default_skill_req::set_default_skill_req(const set_default_skill_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_default_skill_req::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_default_skill_req::~set_default_skill_req() {
  SharedDtor();
}

void set_default_skill_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void set_default_skill_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_default_skill_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_default_skill_req_descriptor_;
}

const set_default_skill_req& set_default_skill_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

set_default_skill_req* set_default_skill_req::default_instance_ = NULL;

set_default_skill_req* set_default_skill_req::New() const {
  return new set_default_skill_req;
}

void set_default_skill_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_default_skill_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_default_skill_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_default_skill_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_default_skill_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_default_skill_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_default_skill_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_default_skill_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_default_skill_req::MergeFrom(const set_default_skill_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_default_skill_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_default_skill_req::CopyFrom(const set_default_skill_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_default_skill_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_default_skill_req::Swap(set_default_skill_req* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_default_skill_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_default_skill_req_descriptor_;
  metadata.reflection = set_default_skill_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_default_skill_rsp_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_default_skill_rsp_RET_descriptor_;
}
bool set_default_skill_rsp_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_default_skill_rsp_RET set_default_skill_rsp::SUCCESS;
const set_default_skill_rsp_RET set_default_skill_rsp::ERROR_SKILL;
const set_default_skill_rsp_RET set_default_skill_rsp::ERROR_RESET;
const set_default_skill_rsp_RET set_default_skill_rsp::ERROR_LIMIT;
const set_default_skill_rsp_RET set_default_skill_rsp::RET_MIN;
const set_default_skill_rsp_RET set_default_skill_rsp::RET_MAX;
const int set_default_skill_rsp::RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_default_skill_rsp::kRetFieldNumber;
const int set_default_skill_rsp::kSkillIdFieldNumber;
#endif  // !_MSC_VER

set_default_skill_rsp::set_default_skill_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_default_skill_rsp::InitAsDefaultInstance() {
}

set_default_skill_rsp::set_default_skill_rsp(const set_default_skill_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_default_skill_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_default_skill_rsp::~set_default_skill_rsp() {
  SharedDtor();
}

void set_default_skill_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_default_skill_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_default_skill_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_default_skill_rsp_descriptor_;
}

const set_default_skill_rsp& set_default_skill_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

set_default_skill_rsp* set_default_skill_rsp::default_instance_ = NULL;

set_default_skill_rsp* set_default_skill_rsp::New() const {
  return new set_default_skill_rsp;
}

void set_default_skill_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    skill_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_default_skill_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.set_default_skill_rsp.RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::set_default_skill_rsp_RET_IsValid(value)) {
            set_ret(static_cast< ::client::set_default_skill_rsp_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_default_skill_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.set_default_skill_rsp.RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_default_skill_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.set_default_skill_rsp.RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_default_skill_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.set_default_skill_rsp.RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_default_skill_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_default_skill_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_default_skill_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_default_skill_rsp::MergeFrom(const set_default_skill_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_default_skill_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_default_skill_rsp::CopyFrom(const set_default_skill_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_default_skill_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_default_skill_rsp::Swap(set_default_skill_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_default_skill_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_default_skill_rsp_descriptor_;
  metadata.reflection = set_default_skill_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_point_time_req::kUnixtimeFieldNumber;
const int skill_point_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

skill_point_time_req::skill_point_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_point_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

skill_point_time_req::skill_point_time_req(const skill_point_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_point_time_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_point_time_req::~skill_point_time_req() {
  SharedDtor();
}

void skill_point_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void skill_point_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_point_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_point_time_req_descriptor_;
}

const skill_point_time_req& skill_point_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

skill_point_time_req* skill_point_time_req::default_instance_ = NULL;

skill_point_time_req* skill_point_time_req::New() const {
  return new skill_point_time_req;
}

void skill_point_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_point_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_point_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_point_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_point_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_point_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_point_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_point_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_point_time_req::MergeFrom(const skill_point_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_point_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_point_time_req::CopyFrom(const skill_point_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_point_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void skill_point_time_req::Swap(skill_point_time_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_point_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_point_time_req_descriptor_;
  metadata.reflection = skill_point_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_point_time_rsp::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

skill_point_time_rsp::skill_point_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_point_time_rsp::InitAsDefaultInstance() {
}

skill_point_time_rsp::skill_point_time_rsp(const skill_point_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_point_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  remain_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_point_time_rsp::~skill_point_time_rsp() {
  SharedDtor();
}

void skill_point_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_point_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_point_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_point_time_rsp_descriptor_;
}

const skill_point_time_rsp& skill_point_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

skill_point_time_rsp* skill_point_time_rsp::default_instance_ = NULL;

skill_point_time_rsp* skill_point_time_rsp::New() const {
  return new skill_point_time_rsp;
}

void skill_point_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remain_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_point_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remain_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_point_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_point_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 remain_time = 1;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_point_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remain_time = 1;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_point_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_point_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_point_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_point_time_rsp::MergeFrom(const skill_point_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_point_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_point_time_rsp::CopyFrom(const skill_point_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_point_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void skill_point_time_rsp::Swap(skill_point_time_rsp* other) {
  if (other != this) {
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_point_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_point_time_rsp_descriptor_;
  metadata.reflection = skill_point_time_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_skill_study_req::kItemIdFieldNumber;
const int gem_skill_study_req::kSerIndexFieldNumber;
const int gem_skill_study_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

gem_skill_study_req::gem_skill_study_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_skill_study_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

gem_skill_study_req::gem_skill_study_req(const gem_skill_study_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_skill_study_req::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  ser_index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_skill_study_req::~gem_skill_study_req() {
  SharedDtor();
}

void gem_skill_study_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void gem_skill_study_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_skill_study_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_skill_study_req_descriptor_;
}

const gem_skill_study_req& gem_skill_study_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

gem_skill_study_req* gem_skill_study_req::default_instance_ = NULL;

gem_skill_study_req* gem_skill_study_req::New() const {
  return new gem_skill_study_req;
}

void gem_skill_study_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    ser_index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_skill_study_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ser_index;
        break;
      }

      // required uint32 ser_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ser_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ser_index_)));
          set_has_ser_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_skill_study_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 ser_index = 2;
  if (has_ser_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ser_index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_skill_study_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 ser_index = 2;
  if (has_ser_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ser_index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_skill_study_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 ser_index = 2;
    if (has_ser_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ser_index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_skill_study_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_skill_study_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_skill_study_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_skill_study_req::MergeFrom(const gem_skill_study_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_ser_index()) {
      set_ser_index(from.ser_index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_skill_study_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_skill_study_req::CopyFrom(const gem_skill_study_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_skill_study_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gem_skill_study_req::Swap(gem_skill_study_req* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(ser_index_, other->ser_index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_skill_study_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_skill_study_req_descriptor_;
  metadata.reflection = gem_skill_study_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_skill_study_rsp::kResultTypeFieldNumber;
const int gem_skill_study_rsp::kSerIndexFieldNumber;
#endif  // !_MSC_VER

gem_skill_study_rsp::gem_skill_study_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_skill_study_rsp::InitAsDefaultInstance() {
}

gem_skill_study_rsp::gem_skill_study_rsp(const gem_skill_study_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_skill_study_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ser_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_skill_study_rsp::~gem_skill_study_rsp() {
  SharedDtor();
}

void gem_skill_study_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gem_skill_study_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_skill_study_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_skill_study_rsp_descriptor_;
}

const gem_skill_study_rsp& gem_skill_study_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

gem_skill_study_rsp* gem_skill_study_rsp::default_instance_ = NULL;

gem_skill_study_rsp* gem_skill_study_rsp::New() const {
  return new gem_skill_study_rsp;
}

void gem_skill_study_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    ser_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_skill_study_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ser_index;
        break;
      }

      // optional uint32 ser_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ser_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ser_index_)));
          set_has_ser_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_skill_study_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional uint32 ser_index = 2;
  if (has_ser_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ser_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_skill_study_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional uint32 ser_index = 2;
  if (has_ser_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ser_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_skill_study_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 ser_index = 2;
    if (has_ser_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ser_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_skill_study_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_skill_study_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_skill_study_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_skill_study_rsp::MergeFrom(const gem_skill_study_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_ser_index()) {
      set_ser_index(from.ser_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_skill_study_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_skill_study_rsp::CopyFrom(const gem_skill_study_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_skill_study_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gem_skill_study_rsp::Swap(gem_skill_study_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(ser_index_, other->ser_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_skill_study_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_skill_study_rsp_descriptor_;
  metadata.reflection = gem_skill_study_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_skill_replace_req::kSkillIdFieldNumber;
const int gem_skill_replace_req::kSerIndexFieldNumber;
const int gem_skill_replace_req::kItemIdFieldNumber;
const int gem_skill_replace_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

gem_skill_replace_req::gem_skill_replace_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_skill_replace_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

gem_skill_replace_req::gem_skill_replace_req(const gem_skill_replace_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_skill_replace_req::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  ser_index_ = 0u;
  item_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_skill_replace_req::~gem_skill_replace_req() {
  SharedDtor();
}

void gem_skill_replace_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void gem_skill_replace_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_skill_replace_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_skill_replace_req_descriptor_;
}

const gem_skill_replace_req& gem_skill_replace_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

gem_skill_replace_req* gem_skill_replace_req::default_instance_ = NULL;

gem_skill_replace_req* gem_skill_replace_req::New() const {
  return new gem_skill_replace_req;
}

void gem_skill_replace_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    ser_index_ = 0u;
    item_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_skill_replace_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ser_index;
        break;
      }

      // required uint32 ser_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ser_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ser_index_)));
          set_has_ser_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_skill_replace_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 ser_index = 2;
  if (has_ser_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ser_index(), output);
  }

  // required uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_skill_replace_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 ser_index = 2;
  if (has_ser_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ser_index(), target);
  }

  // required uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_skill_replace_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 ser_index = 2;
    if (has_ser_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ser_index());
    }

    // required uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_skill_replace_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_skill_replace_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_skill_replace_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_skill_replace_req::MergeFrom(const gem_skill_replace_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ser_index()) {
      set_ser_index(from.ser_index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_skill_replace_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_skill_replace_req::CopyFrom(const gem_skill_replace_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_skill_replace_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gem_skill_replace_req::Swap(gem_skill_replace_req* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(ser_index_, other->ser_index_);
    std::swap(item_id_, other->item_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_skill_replace_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_skill_replace_req_descriptor_;
  metadata.reflection = gem_skill_replace_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gem_skill_replace_rsp::kResultTypeFieldNumber;
const int gem_skill_replace_rsp::kOldSkillFieldNumber;
const int gem_skill_replace_rsp::kNewSkillFieldNumber;
#endif  // !_MSC_VER

gem_skill_replace_rsp::gem_skill_replace_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gem_skill_replace_rsp::InitAsDefaultInstance() {
  old_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
  new_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
}

gem_skill_replace_rsp::gem_skill_replace_rsp(const gem_skill_replace_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gem_skill_replace_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  old_skill_ = NULL;
  new_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gem_skill_replace_rsp::~gem_skill_replace_rsp() {
  SharedDtor();
}

void gem_skill_replace_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete old_skill_;
    delete new_skill_;
  }
}

void gem_skill_replace_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gem_skill_replace_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gem_skill_replace_rsp_descriptor_;
}

const gem_skill_replace_rsp& gem_skill_replace_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

gem_skill_replace_rsp* gem_skill_replace_rsp::default_instance_ = NULL;

gem_skill_replace_rsp* gem_skill_replace_rsp::New() const {
  return new gem_skill_replace_rsp;
}

void gem_skill_replace_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_old_skill()) {
      if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
    }
    if (has_new_skill()) {
      if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gem_skill_replace_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_skill;
        break;
      }

      // optional .client.skill_data old_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_skill;
        break;
      }

      // optional .client.skill_data new_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gem_skill_replace_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_skill(), output);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gem_skill_replace_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_skill(), target);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gem_skill_replace_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.skill_data old_skill = 2;
    if (has_old_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_skill());
    }

    // optional .client.skill_data new_skill = 3;
    if (has_new_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gem_skill_replace_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gem_skill_replace_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gem_skill_replace_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gem_skill_replace_rsp::MergeFrom(const gem_skill_replace_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_old_skill()) {
      mutable_old_skill()->::client::skill_data::MergeFrom(from.old_skill());
    }
    if (from.has_new_skill()) {
      mutable_new_skill()->::client::skill_data::MergeFrom(from.new_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gem_skill_replace_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gem_skill_replace_rsp::CopyFrom(const gem_skill_replace_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gem_skill_replace_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_old_skill()) {
    if (!this->old_skill().IsInitialized()) return false;
  }
  if (has_new_skill()) {
    if (!this->new_skill().IsInitialized()) return false;
  }
  return true;
}

void gem_skill_replace_rsp::Swap(gem_skill_replace_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(old_skill_, other->old_skill_);
    std::swap(new_skill_, other->new_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gem_skill_replace_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gem_skill_replace_rsp_descriptor_;
  metadata.reflection = gem_skill_replace_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bows_skill_studt_rsp::kResultTypeFieldNumber;
const int bows_skill_studt_rsp::kOldSkillFieldNumber;
const int bows_skill_studt_rsp::kNewSkillFieldNumber;
#endif  // !_MSC_VER

bows_skill_studt_rsp::bows_skill_studt_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bows_skill_studt_rsp::InitAsDefaultInstance() {
  old_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
  new_skill_ = const_cast< ::client::skill_data*>(&::client::skill_data::default_instance());
}

bows_skill_studt_rsp::bows_skill_studt_rsp(const bows_skill_studt_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bows_skill_studt_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  old_skill_ = NULL;
  new_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bows_skill_studt_rsp::~bows_skill_studt_rsp() {
  SharedDtor();
}

void bows_skill_studt_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete old_skill_;
    delete new_skill_;
  }
}

void bows_skill_studt_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bows_skill_studt_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bows_skill_studt_rsp_descriptor_;
}

const bows_skill_studt_rsp& bows_skill_studt_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fskill_5fmsg_2eproto();
  return *default_instance_;
}

bows_skill_studt_rsp* bows_skill_studt_rsp::default_instance_ = NULL;

bows_skill_studt_rsp* bows_skill_studt_rsp::New() const {
  return new bows_skill_studt_rsp;
}

void bows_skill_studt_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_old_skill()) {
      if (old_skill_ != NULL) old_skill_->::client::skill_data::Clear();
    }
    if (has_new_skill()) {
      if (new_skill_ != NULL) new_skill_->::client::skill_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bows_skill_studt_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_skill;
        break;
      }

      // optional .client.skill_data old_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_skill;
        break;
      }

      // optional .client.skill_data new_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bows_skill_studt_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_skill(), output);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bows_skill_studt_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.skill_data old_skill = 2;
  if (has_old_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_skill(), target);
  }

  // optional .client.skill_data new_skill = 3;
  if (has_new_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bows_skill_studt_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.skill_data old_skill = 2;
    if (has_old_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_skill());
    }

    // optional .client.skill_data new_skill = 3;
    if (has_new_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bows_skill_studt_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bows_skill_studt_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bows_skill_studt_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bows_skill_studt_rsp::MergeFrom(const bows_skill_studt_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_old_skill()) {
      mutable_old_skill()->::client::skill_data::MergeFrom(from.old_skill());
    }
    if (from.has_new_skill()) {
      mutable_new_skill()->::client::skill_data::MergeFrom(from.new_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bows_skill_studt_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bows_skill_studt_rsp::CopyFrom(const bows_skill_studt_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bows_skill_studt_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_old_skill()) {
    if (!this->old_skill().IsInitialized()) return false;
  }
  if (has_new_skill()) {
    if (!this->new_skill().IsInitialized()) return false;
  }
  return true;
}

void bows_skill_studt_rsp::Swap(bows_skill_studt_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(old_skill_, other->old_skill_);
    std::swap(new_skill_, other->new_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bows_skill_studt_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bows_skill_studt_rsp_descriptor_;
  metadata.reflection = bows_skill_studt_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
