// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.operate_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.operate_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* mail_head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_head_reflection_ = NULL;
const ::google::protobuf::Descriptor* content_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  content_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_body_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* delivery_mail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  delivery_mail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* new_mail_recv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_mail_recv_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_open_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_open_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_open_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_open_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_attachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_attachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* send_mail_rsp_SEND_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* extract_attachment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  extract_attachment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* extract_attachment_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  extract_attachment_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* extract_attachment_rsp_EXTRACT_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* remove_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  remove_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* remove_mail_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  remove_mail_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* remove_mail_rsp_REMOVE_RET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* send_mail_check_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_check_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_check_complete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_check_complete_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_area_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_area_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_area_to_center_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_area_to_center_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_msg_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_msg_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_backdoor_area_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_backdoor_area_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MAIL_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MAIL_LIST_UPDATE_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto() {
  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.operate_mail.proto");
  GOOGLE_CHECK(file != NULL);
  mail_head_descriptor_ = file->message_type(0);
  static const int mail_head_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, recv_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, send_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, send_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, past_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, attachment_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, is_take_),
  };
  mail_head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_head_descriptor_,
      mail_head::default_instance_,
      mail_head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_head));
  content_data_descriptor_ = file->message_type(1);
  static const int content_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_data, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_data, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_data, f_),
  };
  content_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      content_data_descriptor_,
      content_data::default_instance_,
      content_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(content_data));
  mail_body_descriptor_ = file->message_type(2);
  static const int mail_body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_body, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_body, data_),
  };
  mail_body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_body_descriptor_,
      mail_body::default_instance_,
      mail_body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_body));
  mail_attr_descriptor_ = file->message_type(3);
  static const int mail_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attr, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attr, attr_value_),
  };
  mail_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_attr_descriptor_,
      mail_attr::default_instance_,
      mail_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_attr));
  mail_info_descriptor_ = file->message_type(4);
  static const int mail_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, mh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, ma_),
  };
  mail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_info_descriptor_,
      mail_info::default_instance_,
      mail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_info));
  delivery_mail_info_descriptor_ = file->message_type(5);
  static const int delivery_mail_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_mail_info, mi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_mail_info, recv_name_),
  };
  delivery_mail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      delivery_mail_info_descriptor_,
      delivery_mail_info::default_instance_,
      delivery_mail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_mail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_mail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(delivery_mail_info));
  new_mail_recv_descriptor_ = file->message_type(6);
  static const int new_mail_recv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_mail_recv, mh_),
  };
  new_mail_recv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_mail_recv_descriptor_,
      new_mail_recv::default_instance_,
      new_mail_recv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_mail_recv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_mail_recv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_mail_recv));
  mail_list_req_descriptor_ = file->message_type(7);
  static const int mail_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_req, svr_head_),
  };
  mail_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_list_req_descriptor_,
      mail_list_req::default_instance_,
      mail_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_list_req));
  mail_list_rsp_descriptor_ = file->message_type(8);
  static const int mail_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_rsp, mh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_rsp, update_type_),
  };
  mail_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_list_rsp_descriptor_,
      mail_list_rsp::default_instance_,
      mail_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_list_rsp));
  mail_open_req_descriptor_ = file->message_type(9);
  static const int mail_open_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_req, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_req, svr_head_),
  };
  mail_open_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_open_req_descriptor_,
      mail_open_req::default_instance_,
      mail_open_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_open_req));
  mail_open_rsp_descriptor_ = file->message_type(10);
  static const int mail_open_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, ma_),
  };
  mail_open_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_open_rsp_descriptor_,
      mail_open_rsp::default_instance_,
      mail_open_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_open_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_open_rsp));
  send_mail_attachment_descriptor_ = file->message_type(11);
  static const int send_mail_attachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_attachment, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_attachment, num_),
  };
  send_mail_attachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_attachment_descriptor_,
      send_mail_attachment::default_instance_,
      send_mail_attachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_attachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_attachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_attachment));
  send_mail_req_descriptor_ = file->message_type(12);
  static const int send_mail_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req, recv_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req, svr_head_),
  };
  send_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_req_descriptor_,
      send_mail_req::default_instance_,
      send_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_req));
  send_mail_rsp_descriptor_ = file->message_type(13);
  static const int send_mail_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp, err_code_),
  };
  send_mail_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_rsp_descriptor_,
      send_mail_rsp::default_instance_,
      send_mail_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_rsp));
  send_mail_rsp_SEND_RET_descriptor_ = send_mail_rsp_descriptor_->enum_type(0);
  extract_attachment_req_descriptor_ = file->message_type(14);
  static const int extract_attachment_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_req, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_req, svr_head_),
  };
  extract_attachment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      extract_attachment_req_descriptor_,
      extract_attachment_req::default_instance_,
      extract_attachment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(extract_attachment_req));
  extract_attachment_rsp_descriptor_ = file->message_type(15);
  static const int extract_attachment_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_rsp, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_rsp, ret_),
  };
  extract_attachment_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      extract_attachment_rsp_descriptor_,
      extract_attachment_rsp::default_instance_,
      extract_attachment_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extract_attachment_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(extract_attachment_rsp));
  extract_attachment_rsp_EXTRACT_RET_descriptor_ = extract_attachment_rsp_descriptor_->enum_type(0);
  remove_mail_req_descriptor_ = file->message_type(16);
  static const int remove_mail_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_req, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_req, svr_head_),
  };
  remove_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      remove_mail_req_descriptor_,
      remove_mail_req::default_instance_,
      remove_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(remove_mail_req));
  remove_mail_rsp_descriptor_ = file->message_type(17);
  static const int remove_mail_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_rsp, ret_),
  };
  remove_mail_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      remove_mail_rsp_descriptor_,
      remove_mail_rsp::default_instance_,
      remove_mail_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_mail_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(remove_mail_rsp));
  remove_mail_rsp_REMOVE_RET_descriptor_ = remove_mail_rsp_descriptor_->enum_type(0);
  send_mail_check_role_descriptor_ = file->message_type(18);
  static const int send_mail_check_role_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_role, smr_),
  };
  send_mail_check_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_check_role_descriptor_,
      send_mail_check_role::default_instance_,
      send_mail_check_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_check_role));
  send_mail_check_complete_descriptor_ = file->message_type(19);
  static const int send_mail_check_complete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_complete, smr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_complete, pass_),
  };
  send_mail_check_complete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_check_complete_descriptor_,
      send_mail_check_complete::default_instance_,
      send_mail_check_complete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_complete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_check_complete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_check_complete));
  broadcast_area_rsp_descriptor_ = file->message_type(20);
  static const int broadcast_area_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_rsp, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_rsp, area_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_rsp, broadcast_count_),
  };
  broadcast_area_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_area_rsp_descriptor_,
      broadcast_area_rsp::default_instance_,
      broadcast_area_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_area_rsp));
  broadcast_area_to_center_descriptor_ = file->message_type(21);
  static const int broadcast_area_to_center_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_to_center, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_to_center, broadcast_info_),
  };
  broadcast_area_to_center_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_area_to_center_descriptor_,
      broadcast_area_to_center::default_instance_,
      broadcast_area_to_center_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_to_center, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_area_to_center, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_area_to_center));
  broadcast_msg_req_descriptor_ = file->message_type(22);
  static const int broadcast_msg_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_msg_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_msg_req, data_),
  };
  broadcast_msg_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_msg_req_descriptor_,
      broadcast_msg_req::default_instance_,
      broadcast_msg_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_msg_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_msg_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_msg_req));
  broadcast_backdoor_area_req_descriptor_ = file->message_type(23);
  static const int broadcast_backdoor_area_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, area_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, broadcast_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, svr_head_),
  };
  broadcast_backdoor_area_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_backdoor_area_req_descriptor_,
      broadcast_backdoor_area_req::default_instance_,
      broadcast_backdoor_area_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_backdoor_area_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_backdoor_area_req));
  MAIL_TYPE_E_descriptor_ = file->enum_type(0);
  MAIL_LIST_UPDATE_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eoperate_5fmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_head_descriptor_, &mail_head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    content_data_descriptor_, &content_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_body_descriptor_, &mail_body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_attr_descriptor_, &mail_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_info_descriptor_, &mail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    delivery_mail_info_descriptor_, &delivery_mail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_mail_recv_descriptor_, &new_mail_recv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_list_req_descriptor_, &mail_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_list_rsp_descriptor_, &mail_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_open_req_descriptor_, &mail_open_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_open_rsp_descriptor_, &mail_open_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_attachment_descriptor_, &send_mail_attachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_req_descriptor_, &send_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_rsp_descriptor_, &send_mail_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    extract_attachment_req_descriptor_, &extract_attachment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    extract_attachment_rsp_descriptor_, &extract_attachment_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    remove_mail_req_descriptor_, &remove_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    remove_mail_rsp_descriptor_, &remove_mail_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_check_role_descriptor_, &send_mail_check_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_check_complete_descriptor_, &send_mail_check_complete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_area_rsp_descriptor_, &broadcast_area_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_area_to_center_descriptor_, &broadcast_area_to_center::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_msg_req_descriptor_, &broadcast_msg_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_backdoor_area_req_descriptor_, &broadcast_backdoor_area_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto() {
  delete mail_head::default_instance_;
  delete mail_head_reflection_;
  delete content_data::default_instance_;
  delete content_data_reflection_;
  delete mail_body::default_instance_;
  delete mail_body_reflection_;
  delete mail_attr::default_instance_;
  delete mail_attr_reflection_;
  delete mail_info::default_instance_;
  delete mail_info_reflection_;
  delete delivery_mail_info::default_instance_;
  delete delivery_mail_info_reflection_;
  delete new_mail_recv::default_instance_;
  delete new_mail_recv_reflection_;
  delete mail_list_req::default_instance_;
  delete mail_list_req_reflection_;
  delete mail_list_rsp::default_instance_;
  delete mail_list_rsp_reflection_;
  delete mail_open_req::default_instance_;
  delete mail_open_req_reflection_;
  delete mail_open_rsp::default_instance_;
  delete mail_open_rsp_reflection_;
  delete send_mail_attachment::default_instance_;
  delete send_mail_attachment_reflection_;
  delete send_mail_req::default_instance_;
  delete send_mail_req_reflection_;
  delete send_mail_rsp::default_instance_;
  delete send_mail_rsp_reflection_;
  delete extract_attachment_req::default_instance_;
  delete extract_attachment_req_reflection_;
  delete extract_attachment_rsp::default_instance_;
  delete extract_attachment_rsp_reflection_;
  delete remove_mail_req::default_instance_;
  delete remove_mail_req_reflection_;
  delete remove_mail_rsp::default_instance_;
  delete remove_mail_rsp_reflection_;
  delete send_mail_check_role::default_instance_;
  delete send_mail_check_role_reflection_;
  delete send_mail_check_complete::default_instance_;
  delete send_mail_check_complete_reflection_;
  delete broadcast_area_rsp::default_instance_;
  delete broadcast_area_rsp_reflection_;
  delete broadcast_area_to_center::default_instance_;
  delete broadcast_area_to_center_reflection_;
  delete broadcast_msg_req::default_instance_;
  delete broadcast_msg_req_reflection_;
  delete broadcast_backdoor_area_req::default_instance_;
  delete broadcast_backdoor_area_req_reflection_;
}

void protobuf_AddDesc_client_2eoperate_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031client.operate_mail.proto\022\006client\032\021cli"
    "ent.comm.proto\032\027client.role_props.proto\""
    "\355\001\n\tmail_head\022\022\n\007mail_id\030\001 \002(\r:\0010\022\024\n\tmai"
    "l_type\030\002 \002(\r:\0010\022\027\n\014recv_role_id\030\003 \002(\r:\0010"
    "\022\027\n\014send_role_id\030\004 \002(\r:\0010\022\r\n\005title\030\005 \002(\t"
    "\022\026\n\016send_role_name\030\006 \001(\t\022\021\n\tsend_time\030\007 "
    "\001(\r\022\021\n\tpast_time\030\010 \001(\r\022\026\n\016attachment_num"
    "\030\t \001(\r\022\016\n\006opened\030\n \001(\010\022\017\n\007is_take\030\013 \001(\010\""
    "/\n\014content_data\022\t\n\001n\030\001 \001(\r\022\t\n\001s\030\002 \001(\t\022\t\n"
    "\001f\030\003 \001(\002\"@\n\tmail_body\022\017\n\007content\030\001 \001(\t\022\""
    "\n\004data\030\002 \003(\0132\024.client.content_data\"2\n\tma"
    "il_attr\022\021\n\tattr_type\030\001 \001(\r\022\022\n\nattr_value"
    "\030\002 \001(\r\"\212\001\n\tmail_info\022\035\n\002mh\030\001 \002(\0132\021.clien"
    "t.mail_head\022\035\n\002mb\030\002 \001(\0132\021.client.mail_bo"
    "dy\022\037\n\004attr\030\003 \003(\0132\021.client.mail_attr\022\036\n\002m"
    "a\030\004 \003(\0132\022.client.props_info\"F\n\022delivery_"
    "mail_info\022\035\n\002mi\030\001 \002(\0132\021.client.mail_info"
    "\022\021\n\trecv_name\030\002 \002(\t\".\n\rnew_mail_recv\022\035\n\002"
    "mh\030\001 \003(\0132\021.client.mail_head\"I\n\rmail_list"
    "_req\022\020\n\010svr_time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"b\n\rmail_list_rsp\022"
    "\035\n\002mh\030\001 \003(\0132\021.client.mail_head\0222\n\013update"
    "_type\030\002 \001(\0162\035.client.MAIL_LIST_UPDATE_TY"
    "PE\"H\n\rmail_open_req\022\017\n\007mail_id\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"\200\001\n"
    "\rmail_open_rsp\022\017\n\007mail_id\030\001 \002(\r\022\035\n\002mb\030\002 "
    "\001(\0132\021.client.mail_body\022\037\n\004attr\030\003 \003(\0132\021.c"
    "lient.mail_attr\022\036\n\002ma\030\004 \003(\0132\022.client.pro"
    "ps_info\"7\n\024send_mail_attachment\022\022\n\ngrid_"
    "index\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"k\n\rsend_mail_re"
    "q\022\037\n\004info\030\001 \002(\0132\021.client.mail_info\022\021\n\tre"
    "cv_name\030\002 \002(\t\022&\n\010svr_head\030\350\007 \001(\0132\023.clien"
    "t.server_head\"\224\001\n\rsend_mail_rsp\022+\n\003ret\030\001"
    " \002(\0162\036.client.send_mail_rsp.SEND_RET\022\020\n\010"
    "err_code\030\002 \001(\r\"D\n\010SEND_RET\022\020\n\014SRET_SUCCE"
    "SS\020\000\022\021\n\rSRET_RECV_ERR\020\001\022\023\n\017SRET_ATTACH_E"
    "RR\020\002\"Q\n\026extract_attachment_req\022\017\n\007mail_i"
    "d\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"\277\001\n\026extract_attachment_rsp\022\017\n\007ma"
    "il_id\030\001 \002(\r\0227\n\003ret\030\002 \002(\0162*.client.extrac"
    "t_attachment_rsp.EXTRACT_RET\"[\n\013EXTRACT_"
    "RET\022\020\n\014ERET_SUCCESS\020\000\022\022\n\016ERET_PACK_FULL\020"
    "\001\022\023\n\017ERET_ATTACH_ERR\020\002\022\021\n\rERET_TIME_OUT\020"
    "\003\"J\n\017remove_mail_req\022\017\n\007mail_id\030\001 \003(\r\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head\"\211\001"
    "\n\017remove_mail_rsp\022/\n\003ret\030\001 \002(\0162\".client."
    "remove_mail_rsp.REMOVE_RET\"E\n\nREMOVE_RET"
    "\022\020\n\014RRET_SUCCESS\020\000\022\020\n\014RRET_SYS_ERR\020\001\022\023\n\017"
    "RRET_ATTACH_ERR\020\002\":\n\024send_mail_check_rol"
    "e\022\"\n\003smr\030\001 \002(\0132\025.client.send_mail_req\"L\n"
    "\030send_mail_check_complete\022\"\n\003smr\030\001 \002(\0132\025"
    ".client.send_mail_req\022\014\n\004pass\030\002 \002(\010\"f\n\022b"
    "roadcast_area_rsp\022\017\n\007area_id\030\001 \002(\r\022#\n\010ar"
    "ea_msg\030\002 \001(\0132\021.client.mail_body\022\032\n\017broad"
    "cast_count\030\003 \001(\r:\0011\"_\n\030broadcast_area_to"
    "_center\022\017\n\007role_id\030\001 \002(\r\0222\n\016broadcast_in"
    "fo\030\002 \001(\0132\032.client.broadcast_area_rsp\"H\n\021"
    "broadcast_msg_req\022\017\n\007area_id\030\001 \002(\r\022\"\n\004da"
    "ta\030\002 \003(\0132\024.client.content_data\"\227\001\n\033broad"
    "cast_backdoor_area_req\022\017\n\007area_id\030\001 \002(\r\022"
    "#\n\010area_msg\030\002 \001(\0132\021.client.mail_body\022\032\n\017"
    "broadcast_count\030\003 \001(\r:\0011\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head*x\n\013MAIL_TYPE_E\022"
    "\024\n\020MAIL_TYPE_SYSTEM\020\000\022\024\n\020MAIL_TYPE_PLAYE"
    "R\020\001\022\023\n\017MAIL_TYPE_ADMIN\020\002\022\024\n\020MAIL_TYPE_FA"
    "MILY\020\003\022\022\n\016MAIL_TYPE_ARMY\020\004*t\n\025MAIL_LIST_"
    "UPDATE_TYPE\022\035\n\031MAIL_LIST_UPDATE_TYPE_ALL"
    "\020\001\022\035\n\031MAIL_LIST_UPDATE_TYPE_DEL\020\002\022\035\n\031MAI"
    "L_LIST_UPDATE_TYPE_ADD\020\003", 2744);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.operate_mail.proto", &protobuf_RegisterTypes);
  mail_head::default_instance_ = new mail_head();
  content_data::default_instance_ = new content_data();
  mail_body::default_instance_ = new mail_body();
  mail_attr::default_instance_ = new mail_attr();
  mail_info::default_instance_ = new mail_info();
  delivery_mail_info::default_instance_ = new delivery_mail_info();
  new_mail_recv::default_instance_ = new new_mail_recv();
  mail_list_req::default_instance_ = new mail_list_req();
  mail_list_rsp::default_instance_ = new mail_list_rsp();
  mail_open_req::default_instance_ = new mail_open_req();
  mail_open_rsp::default_instance_ = new mail_open_rsp();
  send_mail_attachment::default_instance_ = new send_mail_attachment();
  send_mail_req::default_instance_ = new send_mail_req();
  send_mail_rsp::default_instance_ = new send_mail_rsp();
  extract_attachment_req::default_instance_ = new extract_attachment_req();
  extract_attachment_rsp::default_instance_ = new extract_attachment_rsp();
  remove_mail_req::default_instance_ = new remove_mail_req();
  remove_mail_rsp::default_instance_ = new remove_mail_rsp();
  send_mail_check_role::default_instance_ = new send_mail_check_role();
  send_mail_check_complete::default_instance_ = new send_mail_check_complete();
  broadcast_area_rsp::default_instance_ = new broadcast_area_rsp();
  broadcast_area_to_center::default_instance_ = new broadcast_area_to_center();
  broadcast_msg_req::default_instance_ = new broadcast_msg_req();
  broadcast_backdoor_area_req::default_instance_ = new broadcast_backdoor_area_req();
  mail_head::default_instance_->InitAsDefaultInstance();
  content_data::default_instance_->InitAsDefaultInstance();
  mail_body::default_instance_->InitAsDefaultInstance();
  mail_attr::default_instance_->InitAsDefaultInstance();
  mail_info::default_instance_->InitAsDefaultInstance();
  delivery_mail_info::default_instance_->InitAsDefaultInstance();
  new_mail_recv::default_instance_->InitAsDefaultInstance();
  mail_list_req::default_instance_->InitAsDefaultInstance();
  mail_list_rsp::default_instance_->InitAsDefaultInstance();
  mail_open_req::default_instance_->InitAsDefaultInstance();
  mail_open_rsp::default_instance_->InitAsDefaultInstance();
  send_mail_attachment::default_instance_->InitAsDefaultInstance();
  send_mail_req::default_instance_->InitAsDefaultInstance();
  send_mail_rsp::default_instance_->InitAsDefaultInstance();
  extract_attachment_req::default_instance_->InitAsDefaultInstance();
  extract_attachment_rsp::default_instance_->InitAsDefaultInstance();
  remove_mail_req::default_instance_->InitAsDefaultInstance();
  remove_mail_rsp::default_instance_->InitAsDefaultInstance();
  send_mail_check_role::default_instance_->InitAsDefaultInstance();
  send_mail_check_complete::default_instance_->InitAsDefaultInstance();
  broadcast_area_rsp::default_instance_->InitAsDefaultInstance();
  broadcast_area_to_center::default_instance_->InitAsDefaultInstance();
  broadcast_msg_req::default_instance_->InitAsDefaultInstance();
  broadcast_backdoor_area_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eoperate_5fmail_2eproto {
  StaticDescriptorInitializer_client_2eoperate_5fmail_2eproto() {
    protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  }
} static_descriptor_initializer_client_2eoperate_5fmail_2eproto_;
const ::google::protobuf::EnumDescriptor* MAIL_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAIL_TYPE_E_descriptor_;
}
bool MAIL_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAIL_LIST_UPDATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAIL_LIST_UPDATE_TYPE_descriptor_;
}
bool MAIL_LIST_UPDATE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int mail_head::kMailIdFieldNumber;
const int mail_head::kMailTypeFieldNumber;
const int mail_head::kRecvRoleIdFieldNumber;
const int mail_head::kSendRoleIdFieldNumber;
const int mail_head::kTitleFieldNumber;
const int mail_head::kSendRoleNameFieldNumber;
const int mail_head::kSendTimeFieldNumber;
const int mail_head::kPastTimeFieldNumber;
const int mail_head::kAttachmentNumFieldNumber;
const int mail_head::kOpenedFieldNumber;
const int mail_head::kIsTakeFieldNumber;
#endif  // !_MSC_VER

mail_head::mail_head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_head::InitAsDefaultInstance() {
}

mail_head::mail_head(const mail_head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_head::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  mail_type_ = 0u;
  recv_role_id_ = 0u;
  send_role_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_ = 0u;
  past_time_ = 0u;
  attachment_num_ = 0u;
  opened_ = false;
  is_take_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_head::~mail_head() {
  SharedDtor();
}

void mail_head::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (send_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_role_name_;
  }
  if (this != default_instance_) {
  }
}

void mail_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_head_descriptor_;
}

const mail_head& mail_head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_head* mail_head::default_instance_ = NULL;

mail_head* mail_head::New() const {
  return new mail_head;
}

void mail_head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    mail_type_ = 0u;
    recv_role_id_ = 0u;
    send_role_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_send_role_name()) {
      if (send_role_name_ != &::google::protobuf::internal::kEmptyString) {
        send_role_name_->clear();
      }
    }
    send_time_ = 0u;
    past_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attachment_num_ = 0u;
    opened_ = false;
    is_take_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_type;
        break;
      }

      // required uint32 mail_type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_role_id;
        break;
      }

      // required uint32 recv_role_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_role_id_)));
          set_has_recv_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_role_id;
        break;
      }

      // required uint32 send_role_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_role_id_)));
          set_has_send_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // required string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_send_role_name;
        break;
      }

      // optional string send_role_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_role_name().data(), this->send_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_past_time;
        break;
      }

      // optional uint32 past_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_past_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &past_time_)));
          set_has_past_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attachment_num;
        break;
      }

      // optional uint32 attachment_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachment_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachment_num_)));
          set_has_attachment_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_opened;
        break;
      }

      // optional bool opened = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_take;
        break;
      }

      // optional bool is_take = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1 [default = 0];
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required uint32 mail_type = 2 [default = 0];
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mail_type(), output);
  }

  // required uint32 recv_role_id = 3 [default = 0];
  if (has_recv_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recv_role_id(), output);
  }

  // required uint32 send_role_id = 4 [default = 0];
  if (has_send_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_role_id(), output);
  }

  // required string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string send_role_name = 6;
  if (has_send_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_role_name().data(), this->send_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->send_role_name(), output);
  }

  // optional uint32 send_time = 7;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->send_time(), output);
  }

  // optional uint32 past_time = 8;
  if (has_past_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->past_time(), output);
  }

  // optional uint32 attachment_num = 9;
  if (has_attachment_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attachment_num(), output);
  }

  // optional bool opened = 10;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->opened(), output);
  }

  // optional bool is_take = 11;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1 [default = 0];
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required uint32 mail_type = 2 [default = 0];
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mail_type(), target);
  }

  // required uint32 recv_role_id = 3 [default = 0];
  if (has_recv_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recv_role_id(), target);
  }

  // required uint32 send_role_id = 4 [default = 0];
  if (has_send_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_role_id(), target);
  }

  // required string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string send_role_name = 6;
  if (has_send_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_role_name().data(), this->send_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->send_role_name(), target);
  }

  // optional uint32 send_time = 7;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->send_time(), target);
  }

  // optional uint32 past_time = 8;
  if (has_past_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->past_time(), target);
  }

  // optional uint32 attachment_num = 9;
  if (has_attachment_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->attachment_num(), target);
  }

  // optional bool opened = 10;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->opened(), target);
  }

  // optional bool is_take = 11;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1 [default = 0];
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required uint32 mail_type = 2 [default = 0];
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }

    // required uint32 recv_role_id = 3 [default = 0];
    if (has_recv_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_role_id());
    }

    // required uint32 send_role_id = 4 [default = 0];
    if (has_send_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_role_id());
    }

    // required string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string send_role_name = 6;
    if (has_send_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_role_name());
    }

    // optional uint32 send_time = 7;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // optional uint32 past_time = 8;
    if (has_past_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->past_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attachment_num = 9;
    if (has_attachment_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachment_num());
    }

    // optional bool opened = 10;
    if (has_opened()) {
      total_size += 1 + 1;
    }

    // optional bool is_take = 11;
    if (has_is_take()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_head::MergeFrom(const mail_head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_recv_role_id()) {
      set_recv_role_id(from.recv_role_id());
    }
    if (from.has_send_role_id()) {
      set_send_role_id(from.send_role_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_send_role_name()) {
      set_send_role_name(from.send_role_name());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_past_time()) {
      set_past_time(from.past_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attachment_num()) {
      set_attachment_num(from.attachment_num());
    }
    if (from.has_opened()) {
      set_opened(from.opened());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_head::CopyFrom(const mail_head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_head::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mail_head::Swap(mail_head* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(recv_role_id_, other->recv_role_id_);
    std::swap(send_role_id_, other->send_role_id_);
    std::swap(title_, other->title_);
    std::swap(send_role_name_, other->send_role_name_);
    std::swap(send_time_, other->send_time_);
    std::swap(past_time_, other->past_time_);
    std::swap(attachment_num_, other->attachment_num_);
    std::swap(opened_, other->opened_);
    std::swap(is_take_, other->is_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_head_descriptor_;
  metadata.reflection = mail_head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int content_data::kNFieldNumber;
const int content_data::kSFieldNumber;
const int content_data::kFFieldNumber;
#endif  // !_MSC_VER

content_data::content_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void content_data::InitAsDefaultInstance() {
}

content_data::content_data(const content_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void content_data::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0u;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  f_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

content_data::~content_data() {
  SharedDtor();
}

void content_data::SharedDtor() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void content_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* content_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return content_data_descriptor_;
}

const content_data& content_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

content_data* content_data::default_instance_ = NULL;

content_data* content_data::New() const {
  return new content_data;
}

void content_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_ = 0u;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::kEmptyString) {
        s_->clear();
      }
    }
    f_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool content_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 n = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_s;
        break;
      }

      // optional string s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_f;
        break;
      }

      // optional float f = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void content_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 n = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n(), output);
  }

  // optional string s = 2;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->s(), output);
  }

  // optional float f = 3;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->f(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* content_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 n = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n(), target);
  }

  // optional string s = 2;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s(), target);
  }

  // optional float f = 3;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->f(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int content_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 n = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }

    // optional string s = 2;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

    // optional float f = 3;
    if (has_f()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void content_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const content_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const content_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void content_data::MergeFrom(const content_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void content_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void content_data::CopyFrom(const content_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool content_data::IsInitialized() const {

  return true;
}

void content_data::Swap(content_data* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(s_, other->s_);
    std::swap(f_, other->f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata content_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = content_data_descriptor_;
  metadata.reflection = content_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_body::kContentFieldNumber;
const int mail_body::kDataFieldNumber;
#endif  // !_MSC_VER

mail_body::mail_body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_body::InitAsDefaultInstance() {
}

mail_body::mail_body(const mail_body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_body::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_body::~mail_body() {
  SharedDtor();
}

void mail_body::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void mail_body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_body_descriptor_;
}

const mail_body& mail_body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_body* mail_body::default_instance_ = NULL;

mail_body* mail_body::New() const {
  return new mail_body;
}

void mail_body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .client.content_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // repeated .client.content_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // repeated .client.content_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated .client.content_data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_body::MergeFrom(const mail_body& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_body::CopyFrom(const mail_body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_body::IsInitialized() const {

  return true;
}

void mail_body::Swap(mail_body* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_body_descriptor_;
  metadata.reflection = mail_body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_attr::kAttrTypeFieldNumber;
const int mail_attr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

mail_attr::mail_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_attr::InitAsDefaultInstance() {
}

mail_attr::mail_attr(const mail_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_attr::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_attr::~mail_attr() {
  SharedDtor();
}

void mail_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_attr_descriptor_;
}

const mail_attr& mail_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_attr* mail_attr::default_instance_ = NULL;

mail_attr* mail_attr::New() const {
  return new mail_attr;
}

void mail_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }

      // optional uint32 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_type(), output);
  }

  // optional uint32 attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attr_type = 1;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_type(), target);
  }

  // optional uint32 attr_value = 2;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_type());
    }

    // optional uint32 attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_attr::MergeFrom(const mail_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_attr::CopyFrom(const mail_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_attr::IsInitialized() const {

  return true;
}

void mail_attr::Swap(mail_attr* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_attr_descriptor_;
  metadata.reflection = mail_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_info::kMhFieldNumber;
const int mail_info::kMbFieldNumber;
const int mail_info::kAttrFieldNumber;
const int mail_info::kMaFieldNumber;
#endif  // !_MSC_VER

mail_info::mail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_info::InitAsDefaultInstance() {
  mh_ = const_cast< ::client::mail_head*>(&::client::mail_head::default_instance());
  mb_ = const_cast< ::client::mail_body*>(&::client::mail_body::default_instance());
}

mail_info::mail_info(const mail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_info::SharedCtor() {
  _cached_size_ = 0;
  mh_ = NULL;
  mb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_info::~mail_info() {
  SharedDtor();
}

void mail_info::SharedDtor() {
  if (this != default_instance_) {
    delete mh_;
    delete mb_;
  }
}

void mail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_info_descriptor_;
}

const mail_info& mail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_info* mail_info::default_instance_ = NULL;

mail_info* mail_info::New() const {
  return new mail_info;
}

void mail_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mh()) {
      if (mh_ != NULL) mh_->::client::mail_head::Clear();
    }
    if (has_mb()) {
      if (mb_ != NULL) mb_->::client::mail_body::Clear();
    }
  }
  attr_.Clear();
  ma_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.mail_head mh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mb;
        break;
      }

      // optional .client.mail_body mb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // repeated .client.mail_attr attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        if (input->ExpectTag(34)) goto parse_ma;
        break;
      }

      // repeated .client.props_info ma = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ma()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ma;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.mail_head mh = 1;
  if (has_mh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mh(), output);
  }

  // optional .client.mail_body mb = 2;
  if (has_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mb(), output);
  }

  // repeated .client.mail_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(i), output);
  }

  // repeated .client.props_info ma = 4;
  for (int i = 0; i < this->ma_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ma(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.mail_head mh = 1;
  if (has_mh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mh(), target);
  }

  // optional .client.mail_body mb = 2;
  if (has_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mb(), target);
  }

  // repeated .client.mail_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(i), target);
  }

  // repeated .client.props_info ma = 4;
  for (int i = 0; i < this->ma_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ma(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.mail_head mh = 1;
    if (has_mh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mh());
    }

    // optional .client.mail_body mb = 2;
    if (has_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mb());
    }

  }
  // repeated .client.mail_attr attr = 3;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .client.props_info ma = 4;
  total_size += 1 * this->ma_size();
  for (int i = 0; i < this->ma_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ma(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_info::MergeFrom(const mail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  ma_.MergeFrom(from.ma_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mh()) {
      mutable_mh()->::client::mail_head::MergeFrom(from.mh());
    }
    if (from.has_mb()) {
      mutable_mb()->::client::mail_body::MergeFrom(from.mb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_info::CopyFrom(const mail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mh()) {
    if (!this->mh().IsInitialized()) return false;
  }
  for (int i = 0; i < ma_size(); i++) {
    if (!this->ma(i).IsInitialized()) return false;
  }
  return true;
}

void mail_info::Swap(mail_info* other) {
  if (other != this) {
    std::swap(mh_, other->mh_);
    std::swap(mb_, other->mb_);
    attr_.Swap(&other->attr_);
    ma_.Swap(&other->ma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_info_descriptor_;
  metadata.reflection = mail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int delivery_mail_info::kMiFieldNumber;
const int delivery_mail_info::kRecvNameFieldNumber;
#endif  // !_MSC_VER

delivery_mail_info::delivery_mail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void delivery_mail_info::InitAsDefaultInstance() {
  mi_ = const_cast< ::client::mail_info*>(&::client::mail_info::default_instance());
}

delivery_mail_info::delivery_mail_info(const delivery_mail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void delivery_mail_info::SharedCtor() {
  _cached_size_ = 0;
  mi_ = NULL;
  recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

delivery_mail_info::~delivery_mail_info() {
  SharedDtor();
}

void delivery_mail_info::SharedDtor() {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recv_name_;
  }
  if (this != default_instance_) {
    delete mi_;
  }
}

void delivery_mail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delivery_mail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return delivery_mail_info_descriptor_;
}

const delivery_mail_info& delivery_mail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

delivery_mail_info* delivery_mail_info::default_instance_ = NULL;

delivery_mail_info* delivery_mail_info::New() const {
  return new delivery_mail_info;
}

void delivery_mail_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mi()) {
      if (mi_ != NULL) mi_->::client::mail_info::Clear();
    }
    if (has_recv_name()) {
      if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
        recv_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool delivery_mail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.mail_info mi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recv_name;
        break;
      }

      // required string recv_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recv_name().data(), this->recv_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void delivery_mail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.mail_info mi = 1;
  if (has_mi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mi(), output);
  }

  // required string recv_name = 2;
  if (has_recv_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_name().data(), this->recv_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->recv_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* delivery_mail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.mail_info mi = 1;
  if (has_mi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mi(), target);
  }

  // required string recv_name = 2;
  if (has_recv_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_name().data(), this->recv_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int delivery_mail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.mail_info mi = 1;
    if (has_mi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mi());
    }

    // required string recv_name = 2;
    if (has_recv_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recv_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delivery_mail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const delivery_mail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const delivery_mail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void delivery_mail_info::MergeFrom(const delivery_mail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mi()) {
      mutable_mi()->::client::mail_info::MergeFrom(from.mi());
    }
    if (from.has_recv_name()) {
      set_recv_name(from.recv_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void delivery_mail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivery_mail_info::CopyFrom(const delivery_mail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivery_mail_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mi()) {
    if (!this->mi().IsInitialized()) return false;
  }
  return true;
}

void delivery_mail_info::Swap(delivery_mail_info* other) {
  if (other != this) {
    std::swap(mi_, other->mi_);
    std::swap(recv_name_, other->recv_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata delivery_mail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = delivery_mail_info_descriptor_;
  metadata.reflection = delivery_mail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int new_mail_recv::kMhFieldNumber;
#endif  // !_MSC_VER

new_mail_recv::new_mail_recv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void new_mail_recv::InitAsDefaultInstance() {
}

new_mail_recv::new_mail_recv(const new_mail_recv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void new_mail_recv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_mail_recv::~new_mail_recv() {
  SharedDtor();
}

void new_mail_recv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void new_mail_recv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_mail_recv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_mail_recv_descriptor_;
}

const new_mail_recv& new_mail_recv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

new_mail_recv* new_mail_recv::default_instance_ = NULL;

new_mail_recv* new_mail_recv::New() const {
  return new new_mail_recv;
}

void new_mail_recv::Clear() {
  mh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_mail_recv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.mail_head mh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mh;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void new_mail_recv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.mail_head mh = 1;
  for (int i = 0; i < this->mh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mh(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* new_mail_recv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.mail_head mh = 1;
  for (int i = 0; i < this->mh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mh(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int new_mail_recv::ByteSize() const {
  int total_size = 0;

  // repeated .client.mail_head mh = 1;
  total_size += 1 * this->mh_size();
  for (int i = 0; i < this->mh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mh(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_mail_recv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_mail_recv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_mail_recv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_mail_recv::MergeFrom(const new_mail_recv& from) {
  GOOGLE_CHECK_NE(&from, this);
  mh_.MergeFrom(from.mh_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_mail_recv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_mail_recv::CopyFrom(const new_mail_recv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_mail_recv::IsInitialized() const {

  for (int i = 0; i < mh_size(); i++) {
    if (!this->mh(i).IsInitialized()) return false;
  }
  return true;
}

void new_mail_recv::Swap(new_mail_recv* other) {
  if (other != this) {
    mh_.Swap(&other->mh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_mail_recv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_mail_recv_descriptor_;
  metadata.reflection = new_mail_recv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_list_req::kSvrTimeFieldNumber;
const int mail_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mail_list_req::mail_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mail_list_req::mail_list_req(const mail_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_list_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_list_req::~mail_list_req() {
  SharedDtor();
}

void mail_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mail_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_list_req_descriptor_;
}

const mail_list_req& mail_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_list_req* mail_list_req::default_instance_ = NULL;

mail_list_req* mail_list_req::New() const {
  return new mail_list_req;
}

void mail_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_list_req::MergeFrom(const mail_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_list_req::CopyFrom(const mail_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mail_list_req::Swap(mail_list_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_list_req_descriptor_;
  metadata.reflection = mail_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_list_rsp::kMhFieldNumber;
const int mail_list_rsp::kUpdateTypeFieldNumber;
#endif  // !_MSC_VER

mail_list_rsp::mail_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_list_rsp::InitAsDefaultInstance() {
}

mail_list_rsp::mail_list_rsp(const mail_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  update_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_list_rsp::~mail_list_rsp() {
  SharedDtor();
}

void mail_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_list_rsp_descriptor_;
}

const mail_list_rsp& mail_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_list_rsp* mail_list_rsp::default_instance_ = NULL;

mail_list_rsp* mail_list_rsp::New() const {
  return new mail_list_rsp;
}

void mail_list_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    update_type_ = 1;
  }
  mh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.mail_head mh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mh;
        if (input->ExpectTag(16)) goto parse_update_type;
        break;
      }

      // optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MAIL_LIST_UPDATE_TYPE_IsValid(value)) {
            set_update_type(static_cast< ::client::MAIL_LIST_UPDATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.mail_head mh = 1;
  for (int i = 0; i < this->mh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mh(i), output);
  }

  // optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->update_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.mail_head mh = 1;
  for (int i = 0; i < this->mh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mh(i), target);
  }

  // optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->update_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
    }

  }
  // repeated .client.mail_head mh = 1;
  total_size += 1 * this->mh_size();
  for (int i = 0; i < this->mh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mh(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_list_rsp::MergeFrom(const mail_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mh_.MergeFrom(from.mh_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_list_rsp::CopyFrom(const mail_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_list_rsp::IsInitialized() const {

  for (int i = 0; i < mh_size(); i++) {
    if (!this->mh(i).IsInitialized()) return false;
  }
  return true;
}

void mail_list_rsp::Swap(mail_list_rsp* other) {
  if (other != this) {
    mh_.Swap(&other->mh_);
    std::swap(update_type_, other->update_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_list_rsp_descriptor_;
  metadata.reflection = mail_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_open_req::kMailIdFieldNumber;
const int mail_open_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mail_open_req::mail_open_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_open_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mail_open_req::mail_open_req(const mail_open_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_open_req::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_open_req::~mail_open_req() {
  SharedDtor();
}

void mail_open_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mail_open_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_open_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_open_req_descriptor_;
}

const mail_open_req& mail_open_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_open_req* mail_open_req::default_instance_ = NULL;

mail_open_req* mail_open_req::New() const {
  return new mail_open_req;
}

void mail_open_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_open_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_open_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_open_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_open_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_open_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_open_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_open_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_open_req::MergeFrom(const mail_open_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_open_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_open_req::CopyFrom(const mail_open_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_open_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mail_open_req::Swap(mail_open_req* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_open_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_open_req_descriptor_;
  metadata.reflection = mail_open_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_open_rsp::kMailIdFieldNumber;
const int mail_open_rsp::kMbFieldNumber;
const int mail_open_rsp::kAttrFieldNumber;
const int mail_open_rsp::kMaFieldNumber;
#endif  // !_MSC_VER

mail_open_rsp::mail_open_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_open_rsp::InitAsDefaultInstance() {
  mb_ = const_cast< ::client::mail_body*>(&::client::mail_body::default_instance());
}

mail_open_rsp::mail_open_rsp(const mail_open_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_open_rsp::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  mb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_open_rsp::~mail_open_rsp() {
  SharedDtor();
}

void mail_open_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete mb_;
  }
}

void mail_open_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_open_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_open_rsp_descriptor_;
}

const mail_open_rsp& mail_open_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

mail_open_rsp* mail_open_rsp::default_instance_ = NULL;

mail_open_rsp* mail_open_rsp::New() const {
  return new mail_open_rsp;
}

void mail_open_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    if (has_mb()) {
      if (mb_ != NULL) mb_->::client::mail_body::Clear();
    }
  }
  attr_.Clear();
  ma_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_open_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mb;
        break;
      }

      // optional .client.mail_body mb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // repeated .client.mail_attr attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        if (input->ExpectTag(34)) goto parse_ma;
        break;
      }

      // repeated .client.props_info ma = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ma()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ma;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_open_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // optional .client.mail_body mb = 2;
  if (has_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mb(), output);
  }

  // repeated .client.mail_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(i), output);
  }

  // repeated .client.props_info ma = 4;
  for (int i = 0; i < this->ma_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ma(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_open_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // optional .client.mail_body mb = 2;
  if (has_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mb(), target);
  }

  // repeated .client.mail_attr attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(i), target);
  }

  // repeated .client.props_info ma = 4;
  for (int i = 0; i < this->ma_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ma(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_open_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // optional .client.mail_body mb = 2;
    if (has_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mb());
    }

  }
  // repeated .client.mail_attr attr = 3;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .client.props_info ma = 4;
  total_size += 1 * this->ma_size();
  for (int i = 0; i < this->ma_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ma(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_open_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_open_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_open_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_open_rsp::MergeFrom(const mail_open_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  ma_.MergeFrom(from.ma_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mb()) {
      mutable_mb()->::client::mail_body::MergeFrom(from.mb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_open_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_open_rsp::CopyFrom(const mail_open_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_open_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ma_size(); i++) {
    if (!this->ma(i).IsInitialized()) return false;
  }
  return true;
}

void mail_open_rsp::Swap(mail_open_rsp* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mb_, other->mb_);
    attr_.Swap(&other->attr_);
    ma_.Swap(&other->ma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_open_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_open_rsp_descriptor_;
  metadata.reflection = mail_open_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_attachment::kGridIndexFieldNumber;
const int send_mail_attachment::kNumFieldNumber;
#endif  // !_MSC_VER

send_mail_attachment::send_mail_attachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_attachment::InitAsDefaultInstance() {
}

send_mail_attachment::send_mail_attachment(const send_mail_attachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_attachment::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_attachment::~send_mail_attachment() {
  SharedDtor();
}

void send_mail_attachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void send_mail_attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_attachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_attachment_descriptor_;
}

const send_mail_attachment& send_mail_attachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

send_mail_attachment* send_mail_attachment::default_instance_ = NULL;

send_mail_attachment* send_mail_attachment::New() const {
  return new send_mail_attachment;
}

void send_mail_attachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_attachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_attachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_attachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_attachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_attachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_attachment::MergeFrom(const send_mail_attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_attachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_attachment::CopyFrom(const send_mail_attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_attachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void send_mail_attachment::Swap(send_mail_attachment* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_attachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_attachment_descriptor_;
  metadata.reflection = send_mail_attachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_req::kInfoFieldNumber;
const int send_mail_req::kRecvNameFieldNumber;
const int send_mail_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

send_mail_req::send_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_req::InitAsDefaultInstance() {
  info_ = const_cast< ::client::mail_info*>(&::client::mail_info::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

send_mail_req::send_mail_req(const send_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_req::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_req::~send_mail_req() {
  SharedDtor();
}

void send_mail_req::SharedDtor() {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recv_name_;
  }
  if (this != default_instance_) {
    delete info_;
    delete svr_head_;
  }
}

void send_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_req_descriptor_;
}

const send_mail_req& send_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

send_mail_req* send_mail_req::default_instance_ = NULL;

send_mail_req* send_mail_req::New() const {
  return new send_mail_req;
}

void send_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::client::mail_info::Clear();
    }
    if (has_recv_name()) {
      if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
        recv_name_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.mail_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recv_name;
        break;
      }

      // required string recv_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recv_name().data(), this->recv_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.mail_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required string recv_name = 2;
  if (has_recv_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_name().data(), this->recv_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->recv_name(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.mail_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required string recv_name = 2;
  if (has_recv_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_name().data(), this->recv_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_name(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.mail_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required string recv_name = 2;
    if (has_recv_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recv_name());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_req::MergeFrom(const send_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::client::mail_info::MergeFrom(from.info());
    }
    if (from.has_recv_name()) {
      set_recv_name(from.recv_name());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_req::CopyFrom(const send_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void send_mail_req::Swap(send_mail_req* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(recv_name_, other->recv_name_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_req_descriptor_;
  metadata.reflection = send_mail_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* send_mail_rsp_SEND_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_rsp_SEND_RET_descriptor_;
}
bool send_mail_rsp_SEND_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const send_mail_rsp_SEND_RET send_mail_rsp::SRET_SUCCESS;
const send_mail_rsp_SEND_RET send_mail_rsp::SRET_RECV_ERR;
const send_mail_rsp_SEND_RET send_mail_rsp::SRET_ATTACH_ERR;
const send_mail_rsp_SEND_RET send_mail_rsp::SEND_RET_MIN;
const send_mail_rsp_SEND_RET send_mail_rsp::SEND_RET_MAX;
const int send_mail_rsp::SEND_RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int send_mail_rsp::kRetFieldNumber;
const int send_mail_rsp::kErrCodeFieldNumber;
#endif  // !_MSC_VER

send_mail_rsp::send_mail_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_rsp::InitAsDefaultInstance() {
}

send_mail_rsp::send_mail_rsp(const send_mail_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  err_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_rsp::~send_mail_rsp() {
  SharedDtor();
}

void send_mail_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void send_mail_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_rsp_descriptor_;
}

const send_mail_rsp& send_mail_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

send_mail_rsp* send_mail_rsp::default_instance_ = NULL;

send_mail_rsp* send_mail_rsp::New() const {
  return new send_mail_rsp;
}

void send_mail_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    err_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.send_mail_rsp.SEND_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::send_mail_rsp_SEND_RET_IsValid(value)) {
            set_ret(static_cast< ::client::send_mail_rsp_SEND_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }

      // optional uint32 err_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.send_mail_rsp.SEND_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 err_code = 2;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->err_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.send_mail_rsp.SEND_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 err_code = 2;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->err_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.send_mail_rsp.SEND_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 err_code = 2;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_rsp::MergeFrom(const send_mail_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_rsp::CopyFrom(const send_mail_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void send_mail_rsp::Swap(send_mail_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(err_code_, other->err_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_rsp_descriptor_;
  metadata.reflection = send_mail_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int extract_attachment_req::kMailIdFieldNumber;
const int extract_attachment_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

extract_attachment_req::extract_attachment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void extract_attachment_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

extract_attachment_req::extract_attachment_req(const extract_attachment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void extract_attachment_req::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

extract_attachment_req::~extract_attachment_req() {
  SharedDtor();
}

void extract_attachment_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void extract_attachment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* extract_attachment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extract_attachment_req_descriptor_;
}

const extract_attachment_req& extract_attachment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

extract_attachment_req* extract_attachment_req::default_instance_ = NULL;

extract_attachment_req* extract_attachment_req::New() const {
  return new extract_attachment_req;
}

void extract_attachment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool extract_attachment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void extract_attachment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* extract_attachment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int extract_attachment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void extract_attachment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const extract_attachment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const extract_attachment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void extract_attachment_req::MergeFrom(const extract_attachment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void extract_attachment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void extract_attachment_req::CopyFrom(const extract_attachment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool extract_attachment_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void extract_attachment_req::Swap(extract_attachment_req* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata extract_attachment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = extract_attachment_req_descriptor_;
  metadata.reflection = extract_attachment_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* extract_attachment_rsp_EXTRACT_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extract_attachment_rsp_EXTRACT_RET_descriptor_;
}
bool extract_attachment_rsp_EXTRACT_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::ERET_SUCCESS;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::ERET_PACK_FULL;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::ERET_ATTACH_ERR;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::ERET_TIME_OUT;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::EXTRACT_RET_MIN;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::EXTRACT_RET_MAX;
const int extract_attachment_rsp::EXTRACT_RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int extract_attachment_rsp::kMailIdFieldNumber;
const int extract_attachment_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

extract_attachment_rsp::extract_attachment_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void extract_attachment_rsp::InitAsDefaultInstance() {
}

extract_attachment_rsp::extract_attachment_rsp(const extract_attachment_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void extract_attachment_rsp::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

extract_attachment_rsp::~extract_attachment_rsp() {
  SharedDtor();
}

void extract_attachment_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void extract_attachment_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* extract_attachment_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extract_attachment_rsp_descriptor_;
}

const extract_attachment_rsp& extract_attachment_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

extract_attachment_rsp* extract_attachment_rsp::default_instance_ = NULL;

extract_attachment_rsp* extract_attachment_rsp::New() const {
  return new extract_attachment_rsp;
}

void extract_attachment_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool extract_attachment_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::extract_attachment_rsp_EXTRACT_RET_IsValid(value)) {
            set_ret(static_cast< ::client::extract_attachment_rsp_EXTRACT_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void extract_attachment_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* extract_attachment_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int extract_attachment_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void extract_attachment_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const extract_attachment_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const extract_attachment_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void extract_attachment_rsp::MergeFrom(const extract_attachment_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void extract_attachment_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void extract_attachment_rsp::CopyFrom(const extract_attachment_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool extract_attachment_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void extract_attachment_rsp::Swap(extract_attachment_rsp* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata extract_attachment_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = extract_attachment_rsp_descriptor_;
  metadata.reflection = extract_attachment_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int remove_mail_req::kMailIdFieldNumber;
const int remove_mail_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

remove_mail_req::remove_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void remove_mail_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

remove_mail_req::remove_mail_req(const remove_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void remove_mail_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

remove_mail_req::~remove_mail_req() {
  SharedDtor();
}

void remove_mail_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void remove_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* remove_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_mail_req_descriptor_;
}

const remove_mail_req& remove_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

remove_mail_req* remove_mail_req::default_instance_ = NULL;

remove_mail_req* remove_mail_req::New() const {
  return new remove_mail_req;
}

void remove_mail_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  mail_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool remove_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mail_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mail_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void remove_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mail_id = 1;
  for (int i = 0; i < this->mail_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mail_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* remove_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mail_id = 1;
  for (int i = 0; i < this->mail_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mail_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int remove_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 mail_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_id(i));
    }
    total_size += 1 * this->mail_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void remove_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const remove_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const remove_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void remove_mail_req::MergeFrom(const remove_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_.MergeFrom(from.mail_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void remove_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remove_mail_req::CopyFrom(const remove_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_mail_req::IsInitialized() const {

  return true;
}

void remove_mail_req::Swap(remove_mail_req* other) {
  if (other != this) {
    mail_id_.Swap(&other->mail_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata remove_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = remove_mail_req_descriptor_;
  metadata.reflection = remove_mail_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* remove_mail_rsp_REMOVE_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_mail_rsp_REMOVE_RET_descriptor_;
}
bool remove_mail_rsp_REMOVE_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const remove_mail_rsp_REMOVE_RET remove_mail_rsp::RRET_SUCCESS;
const remove_mail_rsp_REMOVE_RET remove_mail_rsp::RRET_SYS_ERR;
const remove_mail_rsp_REMOVE_RET remove_mail_rsp::RRET_ATTACH_ERR;
const remove_mail_rsp_REMOVE_RET remove_mail_rsp::REMOVE_RET_MIN;
const remove_mail_rsp_REMOVE_RET remove_mail_rsp::REMOVE_RET_MAX;
const int remove_mail_rsp::REMOVE_RET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int remove_mail_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

remove_mail_rsp::remove_mail_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void remove_mail_rsp::InitAsDefaultInstance() {
}

remove_mail_rsp::remove_mail_rsp(const remove_mail_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void remove_mail_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

remove_mail_rsp::~remove_mail_rsp() {
  SharedDtor();
}

void remove_mail_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void remove_mail_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* remove_mail_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_mail_rsp_descriptor_;
}

const remove_mail_rsp& remove_mail_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

remove_mail_rsp* remove_mail_rsp::default_instance_ = NULL;

remove_mail_rsp* remove_mail_rsp::New() const {
  return new remove_mail_rsp;
}

void remove_mail_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool remove_mail_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.remove_mail_rsp.REMOVE_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::remove_mail_rsp_REMOVE_RET_IsValid(value)) {
            set_ret(static_cast< ::client::remove_mail_rsp_REMOVE_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void remove_mail_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.remove_mail_rsp.REMOVE_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* remove_mail_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.remove_mail_rsp.REMOVE_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int remove_mail_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.remove_mail_rsp.REMOVE_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void remove_mail_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const remove_mail_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const remove_mail_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void remove_mail_rsp::MergeFrom(const remove_mail_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void remove_mail_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remove_mail_rsp::CopyFrom(const remove_mail_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_mail_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void remove_mail_rsp::Swap(remove_mail_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata remove_mail_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = remove_mail_rsp_descriptor_;
  metadata.reflection = remove_mail_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_check_role::kSmrFieldNumber;
#endif  // !_MSC_VER

send_mail_check_role::send_mail_check_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_check_role::InitAsDefaultInstance() {
  smr_ = const_cast< ::client::send_mail_req*>(&::client::send_mail_req::default_instance());
}

send_mail_check_role::send_mail_check_role(const send_mail_check_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_check_role::SharedCtor() {
  _cached_size_ = 0;
  smr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_check_role::~send_mail_check_role() {
  SharedDtor();
}

void send_mail_check_role::SharedDtor() {
  if (this != default_instance_) {
    delete smr_;
  }
}

void send_mail_check_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_check_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_check_role_descriptor_;
}

const send_mail_check_role& send_mail_check_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

send_mail_check_role* send_mail_check_role::default_instance_ = NULL;

send_mail_check_role* send_mail_check_role::New() const {
  return new send_mail_check_role;
}

void send_mail_check_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_smr()) {
      if (smr_ != NULL) smr_->::client::send_mail_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_check_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.send_mail_req smr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_check_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.send_mail_req smr = 1;
  if (has_smr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->smr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_check_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.send_mail_req smr = 1;
  if (has_smr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->smr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_check_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.send_mail_req smr = 1;
    if (has_smr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_check_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_check_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_check_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_check_role::MergeFrom(const send_mail_check_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smr()) {
      mutable_smr()->::client::send_mail_req::MergeFrom(from.smr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_check_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_check_role::CopyFrom(const send_mail_check_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_check_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_smr()) {
    if (!this->smr().IsInitialized()) return false;
  }
  return true;
}

void send_mail_check_role::Swap(send_mail_check_role* other) {
  if (other != this) {
    std::swap(smr_, other->smr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_check_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_check_role_descriptor_;
  metadata.reflection = send_mail_check_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_check_complete::kSmrFieldNumber;
const int send_mail_check_complete::kPassFieldNumber;
#endif  // !_MSC_VER

send_mail_check_complete::send_mail_check_complete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_check_complete::InitAsDefaultInstance() {
  smr_ = const_cast< ::client::send_mail_req*>(&::client::send_mail_req::default_instance());
}

send_mail_check_complete::send_mail_check_complete(const send_mail_check_complete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_check_complete::SharedCtor() {
  _cached_size_ = 0;
  smr_ = NULL;
  pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_check_complete::~send_mail_check_complete() {
  SharedDtor();
}

void send_mail_check_complete::SharedDtor() {
  if (this != default_instance_) {
    delete smr_;
  }
}

void send_mail_check_complete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_check_complete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_check_complete_descriptor_;
}

const send_mail_check_complete& send_mail_check_complete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

send_mail_check_complete* send_mail_check_complete::default_instance_ = NULL;

send_mail_check_complete* send_mail_check_complete::New() const {
  return new send_mail_check_complete;
}

void send_mail_check_complete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_smr()) {
      if (smr_ != NULL) smr_->::client::send_mail_req::Clear();
    }
    pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_check_complete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.send_mail_req smr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // required bool pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_check_complete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.send_mail_req smr = 1;
  if (has_smr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->smr(), output);
  }

  // required bool pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_check_complete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.send_mail_req smr = 1;
  if (has_smr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->smr(), target);
  }

  // required bool pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_check_complete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.send_mail_req smr = 1;
    if (has_smr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smr());
    }

    // required bool pass = 2;
    if (has_pass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_check_complete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_check_complete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_check_complete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_check_complete::MergeFrom(const send_mail_check_complete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smr()) {
      mutable_smr()->::client::send_mail_req::MergeFrom(from.smr());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_check_complete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_check_complete::CopyFrom(const send_mail_check_complete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_check_complete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_smr()) {
    if (!this->smr().IsInitialized()) return false;
  }
  return true;
}

void send_mail_check_complete::Swap(send_mail_check_complete* other) {
  if (other != this) {
    std::swap(smr_, other->smr_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_check_complete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_check_complete_descriptor_;
  metadata.reflection = send_mail_check_complete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_area_rsp::kAreaIdFieldNumber;
const int broadcast_area_rsp::kAreaMsgFieldNumber;
const int broadcast_area_rsp::kBroadcastCountFieldNumber;
#endif  // !_MSC_VER

broadcast_area_rsp::broadcast_area_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_area_rsp::InitAsDefaultInstance() {
  area_msg_ = const_cast< ::client::mail_body*>(&::client::mail_body::default_instance());
}

broadcast_area_rsp::broadcast_area_rsp(const broadcast_area_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_area_rsp::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0u;
  area_msg_ = NULL;
  broadcast_count_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_area_rsp::~broadcast_area_rsp() {
  SharedDtor();
}

void broadcast_area_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete area_msg_;
  }
}

void broadcast_area_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_area_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_area_rsp_descriptor_;
}

const broadcast_area_rsp& broadcast_area_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

broadcast_area_rsp* broadcast_area_rsp::default_instance_ = NULL;

broadcast_area_rsp* broadcast_area_rsp::New() const {
  return new broadcast_area_rsp;
}

void broadcast_area_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0u;
    if (has_area_msg()) {
      if (area_msg_ != NULL) area_msg_->::client::mail_body::Clear();
    }
    broadcast_count_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_area_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_msg;
        break;
      }

      // optional .client.mail_body area_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_broadcast_count;
        break;
      }

      // optional uint32 broadcast_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_count_)));
          set_has_broadcast_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_area_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area_id(), output);
  }

  // optional .client.mail_body area_msg = 2;
  if (has_area_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->area_msg(), output);
  }

  // optional uint32 broadcast_count = 3 [default = 1];
  if (has_broadcast_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->broadcast_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_area_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area_id(), target);
  }

  // optional .client.mail_body area_msg = 2;
  if (has_area_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->area_msg(), target);
  }

  // optional uint32 broadcast_count = 3 [default = 1];
  if (has_broadcast_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->broadcast_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_area_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional .client.mail_body area_msg = 2;
    if (has_area_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area_msg());
    }

    // optional uint32 broadcast_count = 3 [default = 1];
    if (has_broadcast_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcast_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_area_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_area_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_area_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_area_rsp::MergeFrom(const broadcast_area_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_area_msg()) {
      mutable_area_msg()->::client::mail_body::MergeFrom(from.area_msg());
    }
    if (from.has_broadcast_count()) {
      set_broadcast_count(from.broadcast_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_area_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_area_rsp::CopyFrom(const broadcast_area_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_area_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void broadcast_area_rsp::Swap(broadcast_area_rsp* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(area_msg_, other->area_msg_);
    std::swap(broadcast_count_, other->broadcast_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_area_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_area_rsp_descriptor_;
  metadata.reflection = broadcast_area_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_area_to_center::kRoleIdFieldNumber;
const int broadcast_area_to_center::kBroadcastInfoFieldNumber;
#endif  // !_MSC_VER

broadcast_area_to_center::broadcast_area_to_center()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_area_to_center::InitAsDefaultInstance() {
  broadcast_info_ = const_cast< ::client::broadcast_area_rsp*>(&::client::broadcast_area_rsp::default_instance());
}

broadcast_area_to_center::broadcast_area_to_center(const broadcast_area_to_center& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_area_to_center::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  broadcast_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_area_to_center::~broadcast_area_to_center() {
  SharedDtor();
}

void broadcast_area_to_center::SharedDtor() {
  if (this != default_instance_) {
    delete broadcast_info_;
  }
}

void broadcast_area_to_center::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_area_to_center::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_area_to_center_descriptor_;
}

const broadcast_area_to_center& broadcast_area_to_center::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

broadcast_area_to_center* broadcast_area_to_center::default_instance_ = NULL;

broadcast_area_to_center* broadcast_area_to_center::New() const {
  return new broadcast_area_to_center;
}

void broadcast_area_to_center::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_broadcast_info()) {
      if (broadcast_info_ != NULL) broadcast_info_->::client::broadcast_area_rsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_area_to_center::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_broadcast_info;
        break;
      }

      // optional .client.broadcast_area_rsp broadcast_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broadcast_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_area_to_center::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.broadcast_area_rsp broadcast_info = 2;
  if (has_broadcast_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->broadcast_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_area_to_center::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.broadcast_area_rsp broadcast_info = 2;
  if (has_broadcast_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->broadcast_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_area_to_center::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.broadcast_area_rsp broadcast_info = 2;
    if (has_broadcast_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_area_to_center::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_area_to_center* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_area_to_center*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_area_to_center::MergeFrom(const broadcast_area_to_center& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_broadcast_info()) {
      mutable_broadcast_info()->::client::broadcast_area_rsp::MergeFrom(from.broadcast_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_area_to_center::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_area_to_center::CopyFrom(const broadcast_area_to_center& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_area_to_center::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_broadcast_info()) {
    if (!this->broadcast_info().IsInitialized()) return false;
  }
  return true;
}

void broadcast_area_to_center::Swap(broadcast_area_to_center* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(broadcast_info_, other->broadcast_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_area_to_center::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_area_to_center_descriptor_;
  metadata.reflection = broadcast_area_to_center_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_msg_req::kAreaIdFieldNumber;
const int broadcast_msg_req::kDataFieldNumber;
#endif  // !_MSC_VER

broadcast_msg_req::broadcast_msg_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_msg_req::InitAsDefaultInstance() {
}

broadcast_msg_req::broadcast_msg_req(const broadcast_msg_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_msg_req::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_msg_req::~broadcast_msg_req() {
  SharedDtor();
}

void broadcast_msg_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void broadcast_msg_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_msg_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_msg_req_descriptor_;
}

const broadcast_msg_req& broadcast_msg_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

broadcast_msg_req* broadcast_msg_req::default_instance_ = NULL;

broadcast_msg_req* broadcast_msg_req::New() const {
  return new broadcast_msg_req;
}

void broadcast_msg_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_msg_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .client.content_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_msg_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area_id(), output);
  }

  // repeated .client.content_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_msg_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area_id(), target);
  }

  // repeated .client.content_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_msg_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  // repeated .client.content_data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_msg_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_msg_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_msg_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_msg_req::MergeFrom(const broadcast_msg_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_msg_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_msg_req::CopyFrom(const broadcast_msg_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_msg_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void broadcast_msg_req::Swap(broadcast_msg_req* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_msg_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_msg_req_descriptor_;
  metadata.reflection = broadcast_msg_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_backdoor_area_req::kAreaIdFieldNumber;
const int broadcast_backdoor_area_req::kAreaMsgFieldNumber;
const int broadcast_backdoor_area_req::kBroadcastCountFieldNumber;
const int broadcast_backdoor_area_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

broadcast_backdoor_area_req::broadcast_backdoor_area_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_backdoor_area_req::InitAsDefaultInstance() {
  area_msg_ = const_cast< ::client::mail_body*>(&::client::mail_body::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

broadcast_backdoor_area_req::broadcast_backdoor_area_req(const broadcast_backdoor_area_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_backdoor_area_req::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0u;
  area_msg_ = NULL;
  broadcast_count_ = 1u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_backdoor_area_req::~broadcast_backdoor_area_req() {
  SharedDtor();
}

void broadcast_backdoor_area_req::SharedDtor() {
  if (this != default_instance_) {
    delete area_msg_;
    delete svr_head_;
  }
}

void broadcast_backdoor_area_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_backdoor_area_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_backdoor_area_req_descriptor_;
}

const broadcast_backdoor_area_req& broadcast_backdoor_area_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  return *default_instance_;
}

broadcast_backdoor_area_req* broadcast_backdoor_area_req::default_instance_ = NULL;

broadcast_backdoor_area_req* broadcast_backdoor_area_req::New() const {
  return new broadcast_backdoor_area_req;
}

void broadcast_backdoor_area_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0u;
    if (has_area_msg()) {
      if (area_msg_ != NULL) area_msg_->::client::mail_body::Clear();
    }
    broadcast_count_ = 1u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_backdoor_area_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_msg;
        break;
      }

      // optional .client.mail_body area_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_broadcast_count;
        break;
      }

      // optional uint32 broadcast_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_count_)));
          set_has_broadcast_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_backdoor_area_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area_id(), output);
  }

  // optional .client.mail_body area_msg = 2;
  if (has_area_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->area_msg(), output);
  }

  // optional uint32 broadcast_count = 3 [default = 1];
  if (has_broadcast_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->broadcast_count(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_backdoor_area_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area_id(), target);
  }

  // optional .client.mail_body area_msg = 2;
  if (has_area_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->area_msg(), target);
  }

  // optional uint32 broadcast_count = 3 [default = 1];
  if (has_broadcast_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->broadcast_count(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_backdoor_area_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional .client.mail_body area_msg = 2;
    if (has_area_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area_msg());
    }

    // optional uint32 broadcast_count = 3 [default = 1];
    if (has_broadcast_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcast_count());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_backdoor_area_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_backdoor_area_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_backdoor_area_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_backdoor_area_req::MergeFrom(const broadcast_backdoor_area_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_area_msg()) {
      mutable_area_msg()->::client::mail_body::MergeFrom(from.area_msg());
    }
    if (from.has_broadcast_count()) {
      set_broadcast_count(from.broadcast_count());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_backdoor_area_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_backdoor_area_req::CopyFrom(const broadcast_backdoor_area_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_backdoor_area_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void broadcast_backdoor_area_req::Swap(broadcast_backdoor_area_req* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(area_msg_, other->area_msg_);
    std::swap(broadcast_count_, other->broadcast_count_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_backdoor_area_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_backdoor_area_req_descriptor_;
  metadata.reflection = broadcast_backdoor_area_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
