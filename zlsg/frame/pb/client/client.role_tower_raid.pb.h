// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_tower_raid.proto

#ifndef PROTOBUF_client_2erole_5ftower_5fraid_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5ftower_5fraid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

class tower_info_req;
class tower_info_rsp;
class tower_challenge_req;
class tower_leave_req;
class tower_leave_notify;
class tower_auto_req;
class tower_goods_info;
class tower_auto_lvl_rsp;
class raid_info_update;

// ===================================================================

class tower_info_req : public ::google::protobuf::Message {
 public:
  tower_info_req();
  virtual ~tower_info_req();

  tower_info_req(const tower_info_req& from);

  inline tower_info_req& operator=(const tower_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_info_req& default_instance();

  void Swap(tower_info_req* other);

  // implements Message ----------------------------------------------

  tower_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_info_req& from);
  void MergeFrom(const tower_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.tower_info_req)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_info_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_info_rsp : public ::google::protobuf::Message {
 public:
  tower_info_rsp();
  virtual ~tower_info_rsp();

  tower_info_rsp(const tower_info_rsp& from);

  inline tower_info_rsp& operator=(const tower_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_info_rsp& default_instance();

  void Swap(tower_info_rsp* other);

  // implements Message ----------------------------------------------

  tower_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_info_rsp& from);
  void MergeFrom(const tower_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.tower_info_rsp)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class tower_challenge_req : public ::google::protobuf::Message {
 public:
  tower_challenge_req();
  virtual ~tower_challenge_req();

  tower_challenge_req(const tower_challenge_req& from);

  inline tower_challenge_req& operator=(const tower_challenge_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_challenge_req& default_instance();

  void Swap(tower_challenge_req* other);

  // implements Message ----------------------------------------------

  tower_challenge_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_challenge_req& from);
  void MergeFrom(const tower_challenge_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.tower_challenge_req)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_challenge_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_leave_req : public ::google::protobuf::Message {
 public:
  tower_leave_req();
  virtual ~tower_leave_req();

  tower_leave_req(const tower_leave_req& from);

  inline tower_leave_req& operator=(const tower_leave_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_leave_req& default_instance();

  void Swap(tower_leave_req* other);

  // implements Message ----------------------------------------------

  tower_leave_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_leave_req& from);
  void MergeFrom(const tower_leave_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.tower_leave_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_leave_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_leave_notify : public ::google::protobuf::Message {
 public:
  tower_leave_notify();
  virtual ~tower_leave_notify();

  tower_leave_notify(const tower_leave_notify& from);

  inline tower_leave_notify& operator=(const tower_leave_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_leave_notify& default_instance();

  void Swap(tower_leave_notify* other);

  // implements Message ----------------------------------------------

  tower_leave_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_leave_notify& from);
  void MergeFrom(const tower_leave_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lvl = 1;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required bool req_leave = 2;
  inline bool has_req_leave() const;
  inline void clear_req_leave();
  static const int kReqLeaveFieldNumber = 2;
  inline bool req_leave() const;
  inline void set_req_leave(bool value);

  // @@protoc_insertion_point(class_scope:client.tower_leave_notify)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_req_leave();
  inline void clear_has_req_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lvl_;
  bool req_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_leave_notify* default_instance_;
};
// -------------------------------------------------------------------

class tower_auto_req : public ::google::protobuf::Message {
 public:
  tower_auto_req();
  virtual ~tower_auto_req();

  tower_auto_req(const tower_auto_req& from);

  inline tower_auto_req& operator=(const tower_auto_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_auto_req& default_instance();

  void Swap(tower_auto_req* other);

  // implements Message ----------------------------------------------

  tower_auto_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_auto_req& from);
  void MergeFrom(const tower_auto_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lvl = 1;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.tower_auto_req)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_auto_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_goods_info : public ::google::protobuf::Message {
 public:
  tower_goods_info();
  virtual ~tower_goods_info();

  tower_goods_info(const tower_goods_info& from);

  inline tower_goods_info& operator=(const tower_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_goods_info& default_instance();

  void Swap(tower_goods_info* other);

  // implements Message ----------------------------------------------

  tower_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_goods_info& from);
  void MergeFrom(const tower_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.tower_goods_info)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class tower_auto_lvl_rsp : public ::google::protobuf::Message {
 public:
  tower_auto_lvl_rsp();
  virtual ~tower_auto_lvl_rsp();

  tower_auto_lvl_rsp(const tower_auto_lvl_rsp& from);

  inline tower_auto_lvl_rsp& operator=(const tower_auto_lvl_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_auto_lvl_rsp& default_instance();

  void Swap(tower_auto_lvl_rsp* other);

  // implements Message ----------------------------------------------

  tower_auto_lvl_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_auto_lvl_rsp& from);
  void MergeFrom(const tower_auto_lvl_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lvl = 1;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // repeated .client.tower_goods_info tgi = 3;
  inline int tgi_size() const;
  inline void clear_tgi();
  static const int kTgiFieldNumber = 3;
  inline const ::client::tower_goods_info& tgi(int index) const;
  inline ::client::tower_goods_info* mutable_tgi(int index);
  inline ::client::tower_goods_info* add_tgi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::tower_goods_info >&
      tgi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::tower_goods_info >*
      mutable_tgi();

  // @@protoc_insertion_point(class_scope:client.tower_auto_lvl_rsp)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::RepeatedPtrField< ::client::tower_goods_info > tgi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static tower_auto_lvl_rsp* default_instance_;
};
// -------------------------------------------------------------------

class raid_info_update : public ::google::protobuf::Message {
 public:
  raid_info_update();
  virtual ~raid_info_update();

  raid_info_update(const raid_info_update& from);

  inline raid_info_update& operator=(const raid_info_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const raid_info_update& default_instance();

  void Swap(raid_info_update* other);

  // implements Message ----------------------------------------------

  raid_info_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const raid_info_update& from);
  void MergeFrom(const raid_info_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.raid_info_update)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5ftower_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5ftower_5fraid_2eproto();

  void InitAsDefaultInstance();
  static raid_info_update* default_instance_;
};
// ===================================================================


// ===================================================================

// tower_info_req

// required uint32 raid_id = 1;
inline bool tower_info_req::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_info_req::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_info_req::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_info_req::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 tower_info_req::raid_id() const {
  return raid_id_;
}
inline void tower_info_req::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool tower_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& tower_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* tower_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* tower_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void tower_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// tower_info_rsp

// required uint32 raid_id = 1;
inline bool tower_info_rsp::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_info_rsp::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_info_rsp::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_info_rsp::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 tower_info_rsp::raid_id() const {
  return raid_id_;
}
inline void tower_info_rsp::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 role_id = 2;
inline bool tower_info_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_info_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_info_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_info_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tower_info_rsp::role_id() const {
  return role_id_;
}
inline void tower_info_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 time = 3;
inline bool tower_info_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_info_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_info_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_info_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 tower_info_rsp::time() const {
  return time_;
}
inline void tower_info_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// tower_challenge_req

// required uint32 raid_id = 1;
inline bool tower_challenge_req::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_challenge_req::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_challenge_req::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_challenge_req::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 tower_challenge_req::raid_id() const {
  return raid_id_;
}
inline void tower_challenge_req::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool tower_challenge_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_challenge_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_challenge_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_challenge_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& tower_challenge_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* tower_challenge_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* tower_challenge_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void tower_challenge_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// tower_leave_req

// required uint32 svr_time = 1;
inline bool tower_leave_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_leave_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_leave_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_leave_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 tower_leave_req::svr_time() const {
  return svr_time_;
}
inline void tower_leave_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool tower_leave_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_leave_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_leave_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_leave_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& tower_leave_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* tower_leave_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* tower_leave_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void tower_leave_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// tower_leave_notify

// required uint32 lvl = 1;
inline bool tower_leave_notify::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_leave_notify::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_leave_notify::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_leave_notify::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 tower_leave_notify::lvl() const {
  return lvl_;
}
inline void tower_leave_notify::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// required bool req_leave = 2;
inline bool tower_leave_notify::has_req_leave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_leave_notify::set_has_req_leave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_leave_notify::clear_has_req_leave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_leave_notify::clear_req_leave() {
  req_leave_ = false;
  clear_has_req_leave();
}
inline bool tower_leave_notify::req_leave() const {
  return req_leave_;
}
inline void tower_leave_notify::set_req_leave(bool value) {
  set_has_req_leave();
  req_leave_ = value;
}

// -------------------------------------------------------------------

// tower_auto_req

// required uint32 lvl = 1;
inline bool tower_auto_req::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_auto_req::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_auto_req::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_auto_req::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 tower_auto_req::lvl() const {
  return lvl_;
}
inline void tower_auto_req::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool tower_auto_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_auto_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_auto_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_auto_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& tower_auto_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* tower_auto_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* tower_auto_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void tower_auto_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// tower_goods_info

// required uint32 goods_id = 1;
inline bool tower_goods_info::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_goods_info::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_goods_info::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_goods_info::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 tower_goods_info::goods_id() const {
  return goods_id_;
}
inline void tower_goods_info::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required uint32 num = 2;
inline bool tower_goods_info::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_goods_info::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_goods_info::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_goods_info::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 tower_goods_info::num() const {
  return num_;
}
inline void tower_goods_info::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// tower_auto_lvl_rsp

// required uint32 lvl = 1;
inline bool tower_auto_lvl_rsp::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_auto_lvl_rsp::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_auto_lvl_rsp::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_auto_lvl_rsp::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 tower_auto_lvl_rsp::lvl() const {
  return lvl_;
}
inline void tower_auto_lvl_rsp::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// required uint32 exp = 2;
inline bool tower_auto_lvl_rsp::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_auto_lvl_rsp::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_auto_lvl_rsp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_auto_lvl_rsp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 tower_auto_lvl_rsp::exp() const {
  return exp_;
}
inline void tower_auto_lvl_rsp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .client.tower_goods_info tgi = 3;
inline int tower_auto_lvl_rsp::tgi_size() const {
  return tgi_.size();
}
inline void tower_auto_lvl_rsp::clear_tgi() {
  tgi_.Clear();
}
inline const ::client::tower_goods_info& tower_auto_lvl_rsp::tgi(int index) const {
  return tgi_.Get(index);
}
inline ::client::tower_goods_info* tower_auto_lvl_rsp::mutable_tgi(int index) {
  return tgi_.Mutable(index);
}
inline ::client::tower_goods_info* tower_auto_lvl_rsp::add_tgi() {
  return tgi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::tower_goods_info >&
tower_auto_lvl_rsp::tgi() const {
  return tgi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::tower_goods_info >*
tower_auto_lvl_rsp::mutable_tgi() {
  return &tgi_;
}

// -------------------------------------------------------------------

// raid_info_update

// required uint32 raid_id = 1;
inline bool raid_info_update::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void raid_info_update::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void raid_info_update::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void raid_info_update::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 raid_info_update::raid_id() const {
  return raid_id_;
}
inline void raid_info_update::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 time = 2;
inline bool raid_info_update::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void raid_info_update::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void raid_info_update::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void raid_info_update::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 raid_info_update::time() const {
  return time_;
}
inline void raid_info_update::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 role_id = 3;
inline bool raid_info_update::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void raid_info_update::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void raid_info_update::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void raid_info_update::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 raid_info_update::role_id() const {
  return role_id_;
}
inline void raid_info_update::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5ftower_5fraid_2eproto__INCLUDED
