// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_label.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* label_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* operate_label_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operate_label_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* operate_label_req_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* operate_label_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operate_label_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* get_role_label_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_label_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_role_label_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_label_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* honor_label_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  honor_label_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* honor_label_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  honor_label_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* honor_label_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  honor_label_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_role_label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_role_label_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_honor_label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_honor_label_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_honor_label_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_honor_label_ret_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5flabel_2eproto() {
  protobuf_AddDesc_client_2erole_5flabel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_label.proto");
  GOOGLE_CHECK(file != NULL);
  label_list_req_descriptor_ = file->message_type(0);
  static const int label_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_req, svr_head_),
  };
  label_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_list_req_descriptor_,
      label_list_req::default_instance_,
      label_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_list_req));
  label_info_descriptor_ = file->message_type(1);
  static const int label_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, label_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, use_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, effective_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, end_date_),
  };
  label_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_info_descriptor_,
      label_info::default_instance_,
      label_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_info));
  label_list_rsp_descriptor_ = file->message_type(2);
  static const int label_list_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_rsp, li_),
  };
  label_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_list_rsp_descriptor_,
      label_list_rsp::default_instance_,
      label_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_list_rsp));
  operate_label_req_descriptor_ = file->message_type(3);
  static const int operate_label_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_req, label_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_req, svr_head_),
  };
  operate_label_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operate_label_req_descriptor_,
      operate_label_req::default_instance_,
      operate_label_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operate_label_req));
  operate_label_req_OPERATE_TYPE_descriptor_ = operate_label_req_descriptor_->enum_type(0);
  operate_label_rsp_descriptor_ = file->message_type(4);
  static const int operate_label_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_rsp, lobel_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_rsp, result_),
  };
  operate_label_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operate_label_rsp_descriptor_,
      operate_label_rsp::default_instance_,
      operate_label_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operate_label_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operate_label_rsp));
  operate_label_rsp_OPERATE_TYPE_descriptor_ = operate_label_rsp_descriptor_->enum_type(0);
  operate_label_rsp_OPERATE_RESULT_descriptor_ = operate_label_rsp_descriptor_->enum_type(1);
  get_role_label_info_req_descriptor_ = file->message_type(5);
  static const int get_role_label_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_req, svr_head_),
  };
  get_role_label_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_label_info_req_descriptor_,
      get_role_label_info_req::default_instance_,
      get_role_label_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_label_info_req));
  get_role_label_info_rsp_descriptor_ = file->message_type(6);
  static const int get_role_label_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_rsp, li_),
  };
  get_role_label_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_label_info_rsp_descriptor_,
      get_role_label_info_rsp::default_instance_,
      get_role_label_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_label_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_label_info_rsp));
  honor_label_list_req_descriptor_ = file->message_type(7);
  static const int honor_label_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_req, svr_head_),
  };
  honor_label_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      honor_label_list_req_descriptor_,
      honor_label_list_req::default_instance_,
      honor_label_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(honor_label_list_req));
  honor_label_info_descriptor_ = file->message_type(8);
  static const int honor_label_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_info, label_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_info, role_id_),
  };
  honor_label_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      honor_label_info_descriptor_,
      honor_label_info::default_instance_,
      honor_label_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(honor_label_info));
  honor_label_list_rsp_descriptor_ = file->message_type(9);
  static const int honor_label_list_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_rsp, li_),
  };
  honor_label_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      honor_label_list_rsp_descriptor_,
      honor_label_list_rsp::default_instance_,
      honor_label_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(honor_label_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(honor_label_list_rsp));
  set_role_label_descriptor_ = file->message_type(10);
  static const int set_role_label_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, label_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, end_date_),
  };
  set_role_label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_role_label_descriptor_,
      set_role_label::default_instance_,
      set_role_label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_role_label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_role_label));
  use_honor_label_descriptor_ = file->message_type(11);
  static const int use_honor_label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label, label_code_),
  };
  use_honor_label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_honor_label_descriptor_,
      use_honor_label::default_instance_,
      use_honor_label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_honor_label));
  use_honor_label_ret_descriptor_ = file->message_type(12);
  static const int use_honor_label_ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label_ret, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label_ret, ret_),
  };
  use_honor_label_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_honor_label_ret_descriptor_,
      use_honor_label_ret::default_instance_,
      use_honor_label_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_honor_label_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_honor_label_ret));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5flabel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_list_req_descriptor_, &label_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_info_descriptor_, &label_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_list_rsp_descriptor_, &label_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operate_label_req_descriptor_, &operate_label_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operate_label_rsp_descriptor_, &operate_label_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_label_info_req_descriptor_, &get_role_label_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_label_info_rsp_descriptor_, &get_role_label_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    honor_label_list_req_descriptor_, &honor_label_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    honor_label_info_descriptor_, &honor_label_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    honor_label_list_rsp_descriptor_, &honor_label_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_role_label_descriptor_, &set_role_label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_honor_label_descriptor_, &use_honor_label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_honor_label_ret_descriptor_, &use_honor_label_ret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5flabel_2eproto() {
  delete label_list_req::default_instance_;
  delete label_list_req_reflection_;
  delete label_info::default_instance_;
  delete label_info_reflection_;
  delete label_list_rsp::default_instance_;
  delete label_list_rsp_reflection_;
  delete operate_label_req::default_instance_;
  delete operate_label_req_reflection_;
  delete operate_label_rsp::default_instance_;
  delete operate_label_rsp_reflection_;
  delete get_role_label_info_req::default_instance_;
  delete get_role_label_info_req_reflection_;
  delete get_role_label_info_rsp::default_instance_;
  delete get_role_label_info_rsp_reflection_;
  delete honor_label_list_req::default_instance_;
  delete honor_label_list_req_reflection_;
  delete honor_label_info::default_instance_;
  delete honor_label_info_reflection_;
  delete honor_label_list_rsp::default_instance_;
  delete honor_label_list_rsp_reflection_;
  delete set_role_label::default_instance_;
  delete set_role_label_reflection_;
  delete use_honor_label::default_instance_;
  delete use_honor_label_reflection_;
  delete use_honor_label_ret::default_instance_;
  delete use_honor_label_ret_reflection_;
}

void protobuf_AddDesc_client_2erole_5flabel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.role_label.proto\022\006client\032\021clien"
    "t.comm.proto\"J\n\016label_list_req\022\020\n\010unixti"
    "me\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"^\n\nlabel_info\022\022\n\nlabel_code\030\001 \002"
    "(\r\022\021\n\tuse_state\030\002 \002(\r\022\027\n\017effective_state"
    "\030\003 \002(\r\022\020\n\010end_date\030\004 \002(\r\"0\n\016label_list_r"
    "sp\022\036\n\002li\030\001 \003(\0132\022.client.label_info\"\267\001\n\021o"
    "perate_label_req\022\022\n\nlabel_code\030\001 \002(\r\0224\n\004"
    "type\030\002 \002(\0162&.client.operate_label_req.OP"
    "ERATE_TYPE\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"0\n\014OPERATE_TYPE\022\007\n\003ADD\020\000\022\n\n\006R"
    "EMOVE\020\001\022\013\n\007REPLACE\020\002\"\365\001\n\021operate_label_r"
    "sp\022\022\n\nlobel_code\030\001 \002(\r\0224\n\004type\030\002 \002(\0162&.c"
    "lient.operate_label_rsp.OPERATE_TYPE\0228\n\006"
    "result\030\003 \002(\0162(.client.operate_label_rsp."
    "OPERATE_RESULT\"0\n\014OPERATE_TYPE\022\007\n\003ADD\020\000\022"
    "\n\n\006REMOVE\020\001\022\013\n\007REPLACE\020\002\"*\n\016OPERATE_RESU"
    "LT\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\"R\n\027get_role"
    "_label_info_req\022\017\n\007role_id\030\001 \003(\r\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"J\n\027get_"
    "role_label_info_rsp\022\017\n\007role_id\030\001 \002(\r\022\036\n\002"
    "li\030\002 \003(\0132\022.client.label_info\"P\n\024honor_la"
    "bel_list_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_he"
    "ad\030\350\007 \001(\0132\023.client.server_head\"7\n\020honor_"
    "label_info\022\022\n\nlabel_code\030\001 \002(\r\022\017\n\007role_i"
    "d\030\002 \002(\r\"<\n\024honor_label_list_rsp\022$\n\002li\030\001 "
    "\003(\0132\030.client.honor_label_info\"U\n\016set_rol"
    "e_label\022\014\n\004type\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\022"
    "\n\nlabel_code\030\003 \002(\r\022\020\n\010end_date\030\004 \002(\r\"6\n\017"
    "use_honor_label\022\017\n\007role_id\030\001 \002(\r\022\022\n\nlabe"
    "l_code\030\002 \002(\r\"3\n\023use_honor_label_ret\022\017\n\007r"
    "ole_id\030\001 \002(\r\022\013\n\003ret\030\002 \002(\r", 1265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_label.proto", &protobuf_RegisterTypes);
  label_list_req::default_instance_ = new label_list_req();
  label_info::default_instance_ = new label_info();
  label_list_rsp::default_instance_ = new label_list_rsp();
  operate_label_req::default_instance_ = new operate_label_req();
  operate_label_rsp::default_instance_ = new operate_label_rsp();
  get_role_label_info_req::default_instance_ = new get_role_label_info_req();
  get_role_label_info_rsp::default_instance_ = new get_role_label_info_rsp();
  honor_label_list_req::default_instance_ = new honor_label_list_req();
  honor_label_info::default_instance_ = new honor_label_info();
  honor_label_list_rsp::default_instance_ = new honor_label_list_rsp();
  set_role_label::default_instance_ = new set_role_label();
  use_honor_label::default_instance_ = new use_honor_label();
  use_honor_label_ret::default_instance_ = new use_honor_label_ret();
  label_list_req::default_instance_->InitAsDefaultInstance();
  label_info::default_instance_->InitAsDefaultInstance();
  label_list_rsp::default_instance_->InitAsDefaultInstance();
  operate_label_req::default_instance_->InitAsDefaultInstance();
  operate_label_rsp::default_instance_->InitAsDefaultInstance();
  get_role_label_info_req::default_instance_->InitAsDefaultInstance();
  get_role_label_info_rsp::default_instance_->InitAsDefaultInstance();
  honor_label_list_req::default_instance_->InitAsDefaultInstance();
  honor_label_info::default_instance_->InitAsDefaultInstance();
  honor_label_list_rsp::default_instance_->InitAsDefaultInstance();
  set_role_label::default_instance_->InitAsDefaultInstance();
  use_honor_label::default_instance_->InitAsDefaultInstance();
  use_honor_label_ret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5flabel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5flabel_2eproto {
  StaticDescriptorInitializer_client_2erole_5flabel_2eproto() {
    protobuf_AddDesc_client_2erole_5flabel_2eproto();
  }
} static_descriptor_initializer_client_2erole_5flabel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int label_list_req::kUnixtimeFieldNumber;
const int label_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

label_list_req::label_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void label_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

label_list_req::label_list_req(const label_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void label_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_list_req::~label_list_req() {
  SharedDtor();
}

void label_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void label_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_list_req_descriptor_;
}

const label_list_req& label_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

label_list_req* label_list_req::default_instance_ = NULL;

label_list_req* label_list_req::New() const {
  return new label_list_req;
}

void label_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void label_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* label_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int label_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_list_req::MergeFrom(const label_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_list_req::CopyFrom(const label_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void label_list_req::Swap(label_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_list_req_descriptor_;
  metadata.reflection = label_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_info::kLabelCodeFieldNumber;
const int label_info::kUseStateFieldNumber;
const int label_info::kEffectiveStateFieldNumber;
const int label_info::kEndDateFieldNumber;
#endif  // !_MSC_VER

label_info::label_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void label_info::InitAsDefaultInstance() {
}

label_info::label_info(const label_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void label_info::SharedCtor() {
  _cached_size_ = 0;
  label_code_ = 0u;
  use_state_ = 0u;
  effective_state_ = 0u;
  end_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_info::~label_info() {
  SharedDtor();
}

void label_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void label_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_info_descriptor_;
}

const label_info& label_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

label_info* label_info::default_instance_ = NULL;

label_info* label_info::New() const {
  return new label_info;
}

void label_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_code_ = 0u;
    use_state_ = 0u;
    effective_state_ = 0u;
    end_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 label_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_code_)));
          set_has_label_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_state;
        break;
      }

      // required uint32 use_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_state_)));
          set_has_use_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effective_state;
        break;
      }

      // required uint32 effective_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effective_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_state_)));
          set_has_effective_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_date;
        break;
      }

      // required uint32 end_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void label_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->label_code(), output);
  }

  // required uint32 use_state = 2;
  if (has_use_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_state(), output);
  }

  // required uint32 effective_state = 3;
  if (has_effective_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effective_state(), output);
  }

  // required uint32 end_date = 4;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* label_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->label_code(), target);
  }

  // required uint32 use_state = 2;
  if (has_use_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_state(), target);
  }

  // required uint32 effective_state = 3;
  if (has_effective_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effective_state(), target);
  }

  // required uint32 end_date = 4;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int label_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 label_code = 1;
    if (has_label_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_code());
    }

    // required uint32 use_state = 2;
    if (has_use_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_state());
    }

    // required uint32 effective_state = 3;
    if (has_effective_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_state());
    }

    // required uint32 end_date = 4;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_info::MergeFrom(const label_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_code()) {
      set_label_code(from.label_code());
    }
    if (from.has_use_state()) {
      set_use_state(from.use_state());
    }
    if (from.has_effective_state()) {
      set_effective_state(from.effective_state());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_info::CopyFrom(const label_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void label_info::Swap(label_info* other) {
  if (other != this) {
    std::swap(label_code_, other->label_code_);
    std::swap(use_state_, other->use_state_);
    std::swap(effective_state_, other->effective_state_);
    std::swap(end_date_, other->end_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_info_descriptor_;
  metadata.reflection = label_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_list_rsp::kLiFieldNumber;
#endif  // !_MSC_VER

label_list_rsp::label_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void label_list_rsp::InitAsDefaultInstance() {
}

label_list_rsp::label_list_rsp(const label_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void label_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_list_rsp::~label_list_rsp() {
  SharedDtor();
}

void label_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void label_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_list_rsp_descriptor_;
}

const label_list_rsp& label_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

label_list_rsp* label_list_rsp::default_instance_ = NULL;

label_list_rsp* label_list_rsp::New() const {
  return new label_list_rsp;
}

void label_list_rsp::Clear() {
  li_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.label_info li = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_li:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_li()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_li;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void label_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.label_info li = 1;
  for (int i = 0; i < this->li_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->li(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* label_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.label_info li = 1;
  for (int i = 0; i < this->li_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->li(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int label_list_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.label_info li = 1;
  total_size += 1 * this->li_size();
  for (int i = 0; i < this->li_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->li(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_list_rsp::MergeFrom(const label_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  li_.MergeFrom(from.li_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_list_rsp::CopyFrom(const label_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_list_rsp::IsInitialized() const {

  for (int i = 0; i < li_size(); i++) {
    if (!this->li(i).IsInitialized()) return false;
  }
  return true;
}

void label_list_rsp::Swap(label_list_rsp* other) {
  if (other != this) {
    li_.Swap(&other->li_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_list_rsp_descriptor_;
  metadata.reflection = label_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* operate_label_req_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_label_req_OPERATE_TYPE_descriptor_;
}
bool operate_label_req_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const operate_label_req_OPERATE_TYPE operate_label_req::ADD;
const operate_label_req_OPERATE_TYPE operate_label_req::REMOVE;
const operate_label_req_OPERATE_TYPE operate_label_req::REPLACE;
const operate_label_req_OPERATE_TYPE operate_label_req::OPERATE_TYPE_MIN;
const operate_label_req_OPERATE_TYPE operate_label_req::OPERATE_TYPE_MAX;
const int operate_label_req::OPERATE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int operate_label_req::kLabelCodeFieldNumber;
const int operate_label_req::kTypeFieldNumber;
const int operate_label_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

operate_label_req::operate_label_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operate_label_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

operate_label_req::operate_label_req(const operate_label_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operate_label_req::SharedCtor() {
  _cached_size_ = 0;
  label_code_ = 0u;
  type_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operate_label_req::~operate_label_req() {
  SharedDtor();
}

void operate_label_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void operate_label_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operate_label_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_label_req_descriptor_;
}

const operate_label_req& operate_label_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

operate_label_req* operate_label_req::default_instance_ = NULL;

operate_label_req* operate_label_req::New() const {
  return new operate_label_req;
}

void operate_label_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_code_ = 0u;
    type_ = 0;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operate_label_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 label_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_code_)));
          set_has_label_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.operate_label_req.OPERATE_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::operate_label_req_OPERATE_TYPE_IsValid(value)) {
            set_type(static_cast< ::client::operate_label_req_OPERATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operate_label_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->label_code(), output);
  }

  // required .client.operate_label_req.OPERATE_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operate_label_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->label_code(), target);
  }

  // required .client.operate_label_req.OPERATE_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operate_label_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 label_code = 1;
    if (has_label_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_code());
    }

    // required .client.operate_label_req.OPERATE_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operate_label_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operate_label_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operate_label_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operate_label_req::MergeFrom(const operate_label_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_code()) {
      set_label_code(from.label_code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operate_label_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operate_label_req::CopyFrom(const operate_label_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operate_label_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void operate_label_req::Swap(operate_label_req* other) {
  if (other != this) {
    std::swap(label_code_, other->label_code_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operate_label_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operate_label_req_descriptor_;
  metadata.reflection = operate_label_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_label_rsp_OPERATE_TYPE_descriptor_;
}
bool operate_label_rsp_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const operate_label_rsp_OPERATE_TYPE operate_label_rsp::ADD;
const operate_label_rsp_OPERATE_TYPE operate_label_rsp::REMOVE;
const operate_label_rsp_OPERATE_TYPE operate_label_rsp::REPLACE;
const operate_label_rsp_OPERATE_TYPE operate_label_rsp::OPERATE_TYPE_MIN;
const operate_label_rsp_OPERATE_TYPE operate_label_rsp::OPERATE_TYPE_MAX;
const int operate_label_rsp::OPERATE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* operate_label_rsp_OPERATE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_label_rsp_OPERATE_RESULT_descriptor_;
}
bool operate_label_rsp_OPERATE_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const operate_label_rsp_OPERATE_RESULT operate_label_rsp::SUCCESS;
const operate_label_rsp_OPERATE_RESULT operate_label_rsp::FAILURE;
const operate_label_rsp_OPERATE_RESULT operate_label_rsp::OPERATE_RESULT_MIN;
const operate_label_rsp_OPERATE_RESULT operate_label_rsp::OPERATE_RESULT_MAX;
const int operate_label_rsp::OPERATE_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int operate_label_rsp::kLobelCodeFieldNumber;
const int operate_label_rsp::kTypeFieldNumber;
const int operate_label_rsp::kResultFieldNumber;
#endif  // !_MSC_VER

operate_label_rsp::operate_label_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operate_label_rsp::InitAsDefaultInstance() {
}

operate_label_rsp::operate_label_rsp(const operate_label_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operate_label_rsp::SharedCtor() {
  _cached_size_ = 0;
  lobel_code_ = 0u;
  type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operate_label_rsp::~operate_label_rsp() {
  SharedDtor();
}

void operate_label_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operate_label_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operate_label_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operate_label_rsp_descriptor_;
}

const operate_label_rsp& operate_label_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

operate_label_rsp* operate_label_rsp::default_instance_ = NULL;

operate_label_rsp* operate_label_rsp::New() const {
  return new operate_label_rsp;
}

void operate_label_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobel_code_ = 0u;
    type_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operate_label_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lobel_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobel_code_)));
          set_has_lobel_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.operate_label_rsp.OPERATE_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::operate_label_rsp_OPERATE_TYPE_IsValid(value)) {
            set_type(static_cast< ::client::operate_label_rsp_OPERATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .client.operate_label_rsp.OPERATE_RESULT result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::operate_label_rsp_OPERATE_RESULT_IsValid(value)) {
            set_result(static_cast< ::client::operate_label_rsp_OPERATE_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operate_label_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lobel_code = 1;
  if (has_lobel_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobel_code(), output);
  }

  // required .client.operate_label_rsp.OPERATE_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .client.operate_label_rsp.OPERATE_RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operate_label_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lobel_code = 1;
  if (has_lobel_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobel_code(), target);
  }

  // required .client.operate_label_rsp.OPERATE_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .client.operate_label_rsp.OPERATE_RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operate_label_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lobel_code = 1;
    if (has_lobel_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobel_code());
    }

    // required .client.operate_label_rsp.OPERATE_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .client.operate_label_rsp.OPERATE_RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operate_label_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operate_label_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operate_label_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operate_label_rsp::MergeFrom(const operate_label_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobel_code()) {
      set_lobel_code(from.lobel_code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operate_label_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operate_label_rsp::CopyFrom(const operate_label_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operate_label_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void operate_label_rsp::Swap(operate_label_rsp* other) {
  if (other != this) {
    std::swap(lobel_code_, other->lobel_code_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operate_label_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operate_label_rsp_descriptor_;
  metadata.reflection = operate_label_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_label_info_req::kRoleIdFieldNumber;
const int get_role_label_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

get_role_label_info_req::get_role_label_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_label_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

get_role_label_info_req::get_role_label_info_req(const get_role_label_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_label_info_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_label_info_req::~get_role_label_info_req() {
  SharedDtor();
}

void get_role_label_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void get_role_label_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_label_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_label_info_req_descriptor_;
}

const get_role_label_info_req& get_role_label_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

get_role_label_info_req* get_role_label_info_req::default_instance_ = NULL;

get_role_label_info_req* get_role_label_info_req::New() const {
  return new get_role_label_info_req;
}

void get_role_label_info_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_label_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_label_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_label_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_label_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_label_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_label_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_label_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_label_info_req::MergeFrom(const get_role_label_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_label_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_label_info_req::CopyFrom(const get_role_label_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_label_info_req::IsInitialized() const {

  return true;
}

void get_role_label_info_req::Swap(get_role_label_info_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_label_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_label_info_req_descriptor_;
  metadata.reflection = get_role_label_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_label_info_rsp::kRoleIdFieldNumber;
const int get_role_label_info_rsp::kLiFieldNumber;
#endif  // !_MSC_VER

get_role_label_info_rsp::get_role_label_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_label_info_rsp::InitAsDefaultInstance() {
}

get_role_label_info_rsp::get_role_label_info_rsp(const get_role_label_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_label_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_label_info_rsp::~get_role_label_info_rsp() {
  SharedDtor();
}

void get_role_label_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_role_label_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_label_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_label_info_rsp_descriptor_;
}

const get_role_label_info_rsp& get_role_label_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

get_role_label_info_rsp* get_role_label_info_rsp::default_instance_ = NULL;

get_role_label_info_rsp* get_role_label_info_rsp::New() const {
  return new get_role_label_info_rsp;
}

void get_role_label_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  li_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_label_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_li;
        break;
      }

      // repeated .client.label_info li = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_li:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_li()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_li;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_label_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated .client.label_info li = 2;
  for (int i = 0; i < this->li_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->li(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_label_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated .client.label_info li = 2;
  for (int i = 0; i < this->li_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->li(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_label_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated .client.label_info li = 2;
  total_size += 1 * this->li_size();
  for (int i = 0; i < this->li_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->li(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_label_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_label_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_label_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_label_info_rsp::MergeFrom(const get_role_label_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  li_.MergeFrom(from.li_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_label_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_label_info_rsp::CopyFrom(const get_role_label_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_label_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < li_size(); i++) {
    if (!this->li(i).IsInitialized()) return false;
  }
  return true;
}

void get_role_label_info_rsp::Swap(get_role_label_info_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    li_.Swap(&other->li_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_label_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_label_info_rsp_descriptor_;
  metadata.reflection = get_role_label_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int honor_label_list_req::kUnixtimeFieldNumber;
const int honor_label_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

honor_label_list_req::honor_label_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void honor_label_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

honor_label_list_req::honor_label_list_req(const honor_label_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void honor_label_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

honor_label_list_req::~honor_label_list_req() {
  SharedDtor();
}

void honor_label_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void honor_label_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* honor_label_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return honor_label_list_req_descriptor_;
}

const honor_label_list_req& honor_label_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

honor_label_list_req* honor_label_list_req::default_instance_ = NULL;

honor_label_list_req* honor_label_list_req::New() const {
  return new honor_label_list_req;
}

void honor_label_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool honor_label_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void honor_label_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* honor_label_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int honor_label_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void honor_label_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const honor_label_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const honor_label_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void honor_label_list_req::MergeFrom(const honor_label_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void honor_label_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void honor_label_list_req::CopyFrom(const honor_label_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool honor_label_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void honor_label_list_req::Swap(honor_label_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata honor_label_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = honor_label_list_req_descriptor_;
  metadata.reflection = honor_label_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int honor_label_info::kLabelCodeFieldNumber;
const int honor_label_info::kRoleIdFieldNumber;
#endif  // !_MSC_VER

honor_label_info::honor_label_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void honor_label_info::InitAsDefaultInstance() {
}

honor_label_info::honor_label_info(const honor_label_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void honor_label_info::SharedCtor() {
  _cached_size_ = 0;
  label_code_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

honor_label_info::~honor_label_info() {
  SharedDtor();
}

void honor_label_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void honor_label_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* honor_label_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return honor_label_info_descriptor_;
}

const honor_label_info& honor_label_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

honor_label_info* honor_label_info::default_instance_ = NULL;

honor_label_info* honor_label_info::New() const {
  return new honor_label_info;
}

void honor_label_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_code_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool honor_label_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 label_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_code_)));
          set_has_label_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void honor_label_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->label_code(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* honor_label_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 label_code = 1;
  if (has_label_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->label_code(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int honor_label_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 label_code = 1;
    if (has_label_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_code());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void honor_label_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const honor_label_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const honor_label_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void honor_label_info::MergeFrom(const honor_label_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_code()) {
      set_label_code(from.label_code());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void honor_label_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void honor_label_info::CopyFrom(const honor_label_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool honor_label_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void honor_label_info::Swap(honor_label_info* other) {
  if (other != this) {
    std::swap(label_code_, other->label_code_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata honor_label_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = honor_label_info_descriptor_;
  metadata.reflection = honor_label_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int honor_label_list_rsp::kLiFieldNumber;
#endif  // !_MSC_VER

honor_label_list_rsp::honor_label_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void honor_label_list_rsp::InitAsDefaultInstance() {
}

honor_label_list_rsp::honor_label_list_rsp(const honor_label_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void honor_label_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

honor_label_list_rsp::~honor_label_list_rsp() {
  SharedDtor();
}

void honor_label_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void honor_label_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* honor_label_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return honor_label_list_rsp_descriptor_;
}

const honor_label_list_rsp& honor_label_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

honor_label_list_rsp* honor_label_list_rsp::default_instance_ = NULL;

honor_label_list_rsp* honor_label_list_rsp::New() const {
  return new honor_label_list_rsp;
}

void honor_label_list_rsp::Clear() {
  li_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool honor_label_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.honor_label_info li = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_li:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_li()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_li;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void honor_label_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.honor_label_info li = 1;
  for (int i = 0; i < this->li_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->li(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* honor_label_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.honor_label_info li = 1;
  for (int i = 0; i < this->li_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->li(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int honor_label_list_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.honor_label_info li = 1;
  total_size += 1 * this->li_size();
  for (int i = 0; i < this->li_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->li(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void honor_label_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const honor_label_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const honor_label_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void honor_label_list_rsp::MergeFrom(const honor_label_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  li_.MergeFrom(from.li_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void honor_label_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void honor_label_list_rsp::CopyFrom(const honor_label_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool honor_label_list_rsp::IsInitialized() const {

  for (int i = 0; i < li_size(); i++) {
    if (!this->li(i).IsInitialized()) return false;
  }
  return true;
}

void honor_label_list_rsp::Swap(honor_label_list_rsp* other) {
  if (other != this) {
    li_.Swap(&other->li_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata honor_label_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = honor_label_list_rsp_descriptor_;
  metadata.reflection = honor_label_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_role_label::kTypeFieldNumber;
const int set_role_label::kRoleIdFieldNumber;
const int set_role_label::kLabelCodeFieldNumber;
const int set_role_label::kEndDateFieldNumber;
#endif  // !_MSC_VER

set_role_label::set_role_label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_role_label::InitAsDefaultInstance() {
}

set_role_label::set_role_label(const set_role_label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_role_label::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_id_ = 0u;
  label_code_ = 0u;
  end_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_role_label::~set_role_label() {
  SharedDtor();
}

void set_role_label::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_role_label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_role_label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_role_label_descriptor_;
}

const set_role_label& set_role_label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

set_role_label* set_role_label::default_instance_ = NULL;

set_role_label* set_role_label::New() const {
  return new set_role_label;
}

void set_role_label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    role_id_ = 0u;
    label_code_ = 0u;
    end_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_role_label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_label_code;
        break;
      }

      // required uint32 label_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_code_)));
          set_has_label_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_date;
        break;
      }

      // required uint32 end_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_role_label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 label_code = 3;
  if (has_label_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->label_code(), output);
  }

  // required uint32 end_date = 4;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_role_label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 label_code = 3;
  if (has_label_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->label_code(), target);
  }

  // required uint32 end_date = 4;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_role_label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 label_code = 3;
    if (has_label_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_code());
    }

    // required uint32 end_date = 4;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_role_label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_role_label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_role_label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_role_label::MergeFrom(const set_role_label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_label_code()) {
      set_label_code(from.label_code());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_role_label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_role_label::CopyFrom(const set_role_label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_role_label::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void set_role_label::Swap(set_role_label* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(label_code_, other->label_code_);
    std::swap(end_date_, other->end_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_role_label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_role_label_descriptor_;
  metadata.reflection = set_role_label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_honor_label::kRoleIdFieldNumber;
const int use_honor_label::kLabelCodeFieldNumber;
#endif  // !_MSC_VER

use_honor_label::use_honor_label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_honor_label::InitAsDefaultInstance() {
}

use_honor_label::use_honor_label(const use_honor_label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_honor_label::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  label_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_honor_label::~use_honor_label() {
  SharedDtor();
}

void use_honor_label::SharedDtor() {
  if (this != default_instance_) {
  }
}

void use_honor_label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_honor_label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_honor_label_descriptor_;
}

const use_honor_label& use_honor_label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

use_honor_label* use_honor_label::default_instance_ = NULL;

use_honor_label* use_honor_label::New() const {
  return new use_honor_label;
}

void use_honor_label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    label_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_honor_label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_label_code;
        break;
      }

      // required uint32 label_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_code_)));
          set_has_label_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_honor_label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 label_code = 2;
  if (has_label_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->label_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_honor_label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 label_code = 2;
  if (has_label_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->label_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_honor_label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 label_code = 2;
    if (has_label_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_honor_label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_honor_label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_honor_label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_honor_label::MergeFrom(const use_honor_label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_label_code()) {
      set_label_code(from.label_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_honor_label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_honor_label::CopyFrom(const use_honor_label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_honor_label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void use_honor_label::Swap(use_honor_label* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(label_code_, other->label_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_honor_label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_honor_label_descriptor_;
  metadata.reflection = use_honor_label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_honor_label_ret::kRoleIdFieldNumber;
const int use_honor_label_ret::kRetFieldNumber;
#endif  // !_MSC_VER

use_honor_label_ret::use_honor_label_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_honor_label_ret::InitAsDefaultInstance() {
}

use_honor_label_ret::use_honor_label_ret(const use_honor_label_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_honor_label_ret::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_honor_label_ret::~use_honor_label_ret() {
  SharedDtor();
}

void use_honor_label_ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void use_honor_label_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_honor_label_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_honor_label_ret_descriptor_;
}

const use_honor_label_ret& use_honor_label_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5flabel_2eproto();
  return *default_instance_;
}

use_honor_label_ret* use_honor_label_ret::default_instance_ = NULL;

use_honor_label_ret* use_honor_label_ret::New() const {
  return new use_honor_label_ret;
}

void use_honor_label_ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_honor_label_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_honor_label_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_honor_label_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_honor_label_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_honor_label_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_honor_label_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_honor_label_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_honor_label_ret::MergeFrom(const use_honor_label_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_honor_label_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_honor_label_ret::CopyFrom(const use_honor_label_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_honor_label_ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void use_honor_label_ret::Swap(use_honor_label_ret* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_honor_label_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_honor_label_ret_descriptor_;
  metadata.reflection = use_honor_label_ret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
