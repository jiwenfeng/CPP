// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.chat_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.chat_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* chat_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* chat_msg_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::Descriptor* client_chat_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_chat_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_title_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_title_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_title_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_title_info_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2echat_5fmsg_2eproto() {
  protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.chat_msg.proto");
  GOOGLE_CHECK(file != NULL);
  chat_msg_descriptor_ = file->message_type(0);
  static const int chat_msg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_rold_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_vip_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, src_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, pi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, act_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, dst_role_id_),
  };
  chat_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_msg_descriptor_,
      chat_msg::default_instance_,
      chat_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_msg));
  chat_msg_CHANNEL_descriptor_ = chat_msg_descriptor_->enum_type(0);
  client_chat_msg_descriptor_ = file->message_type(1);
  static const int client_chat_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_chat_msg, cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_chat_msg, svr_head_),
  };
  client_chat_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_chat_msg_descriptor_,
      client_chat_msg::default_instance_,
      client_chat_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_chat_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_chat_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_chat_msg));
  update_title_info_req_descriptor_ = file->message_type(2);
  static const int update_title_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_req, role_id_),
  };
  update_title_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_title_info_req_descriptor_,
      update_title_info_req::default_instance_,
      update_title_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_title_info_req));
  update_title_info_rsp_descriptor_ = file->message_type(3);
  static const int update_title_info_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, family_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, is_siege_),
  };
  update_title_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_title_info_rsp_descriptor_,
      update_title_info_rsp::default_instance_,
      update_title_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_title_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_title_info_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2echat_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_msg_descriptor_, &chat_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_chat_msg_descriptor_, &client_chat_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_title_info_req_descriptor_, &update_title_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_title_info_rsp_descriptor_, &update_title_info_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2echat_5fmsg_2eproto() {
  delete chat_msg::default_instance_;
  delete chat_msg_reflection_;
  delete client_chat_msg::default_instance_;
  delete client_chat_msg_reflection_;
  delete update_title_info_req::default_instance_;
  delete update_title_info_req_reflection_;
  delete update_title_info_rsp::default_instance_;
  delete update_title_info_rsp_reflection_;
}

void protobuf_AddDesc_client_2echat_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fprops_2eproto();
  ::client::protobuf_AddDesc_client_2ejump_5fscene_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025client.chat_msg.proto\022\006client\032\021client."
    "comm.proto\032\027client.role_props.proto\032\027cli"
    "ent.jump_scene.proto\"\373\003\n\010chat_msg\022)\n\007cha"
    "nnel\030\001 \002(\0162\030.client.chat_msg.CHANNEL\022\023\n\013"
    "src_rold_id\030\002 \002(\r\022\025\n\rsrc_role_name\030\003 \001(\t"
    "\022\023\n\013src_vip_lvl\030\004 \001(\r\022\021\n\tsrc_title\030\005 \001(\t"
    "\022\026\n\016src_profession\030\006 \001(\r\022\017\n\007src_sex\030\007 \001("
    "\r\022\017\n\007content\030\010 \001(\014\022\036\n\002pi\030\t \003(\0132\022.client."
    "props_info\022 \n\004jump\030\n \001(\0132\022.client.jump_s"
    "cene\022\020\n\010act_type\030\013 \001(\r\022\023\n\013dst_role_id\030\014 "
    "\001(\r\"\314\001\n\007CHANNEL\022\t\n\005WORLD\020\001\022\t\n\005SCENE\020\002\022\n\n"
    "\006FAMILY\020\003\022\010\n\004TEAM\020\004\022\013\n\007PRIVATE\020\005\022\n\n\006SYST"
    "EM\020\006\022\010\n\004HORN\020\007\022\n\n\006FRIEND\020\010\022\014\n\010ANNOUNCE\020\t"
    "\022\n\n\006WINDOW\020\n\022\r\n\tTHREELINE\020\013\022\013\n\007EXPLORE\020\014"
    "\022\010\n\004KILL\020\r\022\t\n\005SHOUT\020\016\022\022\n\016HORN_BROADCAST\020"
    "\017\022\007\n\003NPC\020\020\"W\n\017client_chat_msg\022\034\n\002cm\030\001 \002("
    "\0132\020.client.chat_msg\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"(\n\025update_title_info"
    "_req\022\017\n\007role_id\030\001 \002(\r\"e\n\025update_title_in"
    "fo_rsp\022\017\n\007role_id\030\001 \002(\r\022\024\n\014family_title\030"
    "\002 \001(\r\022\023\n\013family_name\030\003 \001(\t\022\020\n\010is_siege\030\004"
    " \001(\010", 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.chat_msg.proto", &protobuf_RegisterTypes);
  chat_msg::default_instance_ = new chat_msg();
  client_chat_msg::default_instance_ = new client_chat_msg();
  update_title_info_req::default_instance_ = new update_title_info_req();
  update_title_info_rsp::default_instance_ = new update_title_info_rsp();
  chat_msg::default_instance_->InitAsDefaultInstance();
  client_chat_msg::default_instance_->InitAsDefaultInstance();
  update_title_info_req::default_instance_->InitAsDefaultInstance();
  update_title_info_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2echat_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2echat_5fmsg_2eproto {
  StaticDescriptorInitializer_client_2echat_5fmsg_2eproto() {
    protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_2echat_5fmsg_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* chat_msg_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_msg_CHANNEL_descriptor_;
}
bool chat_msg_CHANNEL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const chat_msg_CHANNEL chat_msg::WORLD;
const chat_msg_CHANNEL chat_msg::SCENE;
const chat_msg_CHANNEL chat_msg::FAMILY;
const chat_msg_CHANNEL chat_msg::TEAM;
const chat_msg_CHANNEL chat_msg::PRIVATE;
const chat_msg_CHANNEL chat_msg::SYSTEM;
const chat_msg_CHANNEL chat_msg::HORN;
const chat_msg_CHANNEL chat_msg::FRIEND;
const chat_msg_CHANNEL chat_msg::ANNOUNCE;
const chat_msg_CHANNEL chat_msg::WINDOW;
const chat_msg_CHANNEL chat_msg::THREELINE;
const chat_msg_CHANNEL chat_msg::EXPLORE;
const chat_msg_CHANNEL chat_msg::KILL;
const chat_msg_CHANNEL chat_msg::SHOUT;
const chat_msg_CHANNEL chat_msg::HORN_BROADCAST;
const chat_msg_CHANNEL chat_msg::NPC;
const chat_msg_CHANNEL chat_msg::CHANNEL_MIN;
const chat_msg_CHANNEL chat_msg::CHANNEL_MAX;
const int chat_msg::CHANNEL_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int chat_msg::kChannelFieldNumber;
const int chat_msg::kSrcRoldIdFieldNumber;
const int chat_msg::kSrcRoleNameFieldNumber;
const int chat_msg::kSrcVipLvlFieldNumber;
const int chat_msg::kSrcTitleFieldNumber;
const int chat_msg::kSrcProfessionFieldNumber;
const int chat_msg::kSrcSexFieldNumber;
const int chat_msg::kContentFieldNumber;
const int chat_msg::kPiFieldNumber;
const int chat_msg::kJumpFieldNumber;
const int chat_msg::kActTypeFieldNumber;
const int chat_msg::kDstRoleIdFieldNumber;
#endif  // !_MSC_VER

chat_msg::chat_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_msg::InitAsDefaultInstance() {
  jump_ = const_cast< ::client::jump_scene*>(&::client::jump_scene::default_instance());
}

chat_msg::chat_msg(const chat_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_msg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  src_rold_id_ = 0u;
  src_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_vip_lvl_ = 0u;
  src_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_profession_ = 0u;
  src_sex_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jump_ = NULL;
  act_type_ = 0u;
  dst_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_msg::~chat_msg() {
  SharedDtor();
}

void chat_msg::SharedDtor() {
  if (src_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_role_name_;
  }
  if (src_title_ != &::google::protobuf::internal::kEmptyString) {
    delete src_title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete jump_;
  }
}

void chat_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_msg_descriptor_;
}

const chat_msg& chat_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  return *default_instance_;
}

chat_msg* chat_msg::default_instance_ = NULL;

chat_msg* chat_msg::New() const {
  return new chat_msg;
}

void chat_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    src_rold_id_ = 0u;
    if (has_src_role_name()) {
      if (src_role_name_ != &::google::protobuf::internal::kEmptyString) {
        src_role_name_->clear();
      }
    }
    src_vip_lvl_ = 0u;
    if (has_src_title()) {
      if (src_title_ != &::google::protobuf::internal::kEmptyString) {
        src_title_->clear();
      }
    }
    src_profession_ = 0u;
    src_sex_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_jump()) {
      if (jump_ != NULL) jump_->::client::jump_scene::Clear();
    }
    act_type_ = 0u;
    dst_role_id_ = 0u;
  }
  pi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.chat_msg.CHANNEL channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::chat_msg_CHANNEL_IsValid(value)) {
            set_channel(static_cast< ::client::chat_msg_CHANNEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_rold_id;
        break;
      }

      // required uint32 src_rold_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_rold_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_rold_id_)));
          set_has_src_rold_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_role_name;
        break;
      }

      // optional string src_role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_role_name().data(), this->src_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_src_vip_lvl;
        break;
      }

      // optional uint32 src_vip_lvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_vip_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_vip_lvl_)));
          set_has_src_vip_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src_title;
        break;
      }

      // optional string src_title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_title().data(), this->src_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_profession;
        break;
      }

      // optional uint32 src_profession = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_profession_)));
          set_has_src_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_src_sex;
        break;
      }

      // optional uint32 src_sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_sex_)));
          set_has_src_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional bytes content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pi;
        break;
      }

      // repeated .client.props_info pi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pi;
        if (input->ExpectTag(82)) goto parse_jump;
        break;
      }

      // optional .client.jump_scene jump = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jump()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_act_type;
        break;
      }

      // optional uint32 act_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_type_)));
          set_has_act_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dst_role_id;
        break;
      }

      // optional uint32 dst_role_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.chat_msg.CHANNEL channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // required uint32 src_rold_id = 2;
  if (has_src_rold_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_rold_id(), output);
  }

  // optional string src_role_name = 3;
  if (has_src_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_role_name().data(), this->src_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->src_role_name(), output);
  }

  // optional uint32 src_vip_lvl = 4;
  if (has_src_vip_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->src_vip_lvl(), output);
  }

  // optional string src_title = 5;
  if (has_src_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_title().data(), this->src_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->src_title(), output);
  }

  // optional uint32 src_profession = 6;
  if (has_src_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->src_profession(), output);
  }

  // optional uint32 src_sex = 7;
  if (has_src_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->src_sex(), output);
  }

  // optional bytes content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->content(), output);
  }

  // repeated .client.props_info pi = 9;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pi(i), output);
  }

  // optional .client.jump_scene jump = 10;
  if (has_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->jump(), output);
  }

  // optional uint32 act_type = 11;
  if (has_act_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->act_type(), output);
  }

  // optional uint32 dst_role_id = 12;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dst_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.chat_msg.CHANNEL channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // required uint32 src_rold_id = 2;
  if (has_src_rold_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_rold_id(), target);
  }

  // optional string src_role_name = 3;
  if (has_src_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_role_name().data(), this->src_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src_role_name(), target);
  }

  // optional uint32 src_vip_lvl = 4;
  if (has_src_vip_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->src_vip_lvl(), target);
  }

  // optional string src_title = 5;
  if (has_src_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_title().data(), this->src_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->src_title(), target);
  }

  // optional uint32 src_profession = 6;
  if (has_src_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->src_profession(), target);
  }

  // optional uint32 src_sex = 7;
  if (has_src_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->src_sex(), target);
  }

  // optional bytes content = 8;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->content(), target);
  }

  // repeated .client.props_info pi = 9;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pi(i), target);
  }

  // optional .client.jump_scene jump = 10;
  if (has_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->jump(), target);
  }

  // optional uint32 act_type = 11;
  if (has_act_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->act_type(), target);
  }

  // optional uint32 dst_role_id = 12;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dst_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.chat_msg.CHANNEL channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required uint32 src_rold_id = 2;
    if (has_src_rold_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_rold_id());
    }

    // optional string src_role_name = 3;
    if (has_src_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_role_name());
    }

    // optional uint32 src_vip_lvl = 4;
    if (has_src_vip_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_vip_lvl());
    }

    // optional string src_title = 5;
    if (has_src_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_title());
    }

    // optional uint32 src_profession = 6;
    if (has_src_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_profession());
    }

    // optional uint32 src_sex = 7;
    if (has_src_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_sex());
    }

    // optional bytes content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .client.jump_scene jump = 10;
    if (has_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jump());
    }

    // optional uint32 act_type = 11;
    if (has_act_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_type());
    }

    // optional uint32 dst_role_id = 12;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_role_id());
    }

  }
  // repeated .client.props_info pi = 9;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_msg::MergeFrom(const chat_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pi_.MergeFrom(from.pi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_src_rold_id()) {
      set_src_rold_id(from.src_rold_id());
    }
    if (from.has_src_role_name()) {
      set_src_role_name(from.src_role_name());
    }
    if (from.has_src_vip_lvl()) {
      set_src_vip_lvl(from.src_vip_lvl());
    }
    if (from.has_src_title()) {
      set_src_title(from.src_title());
    }
    if (from.has_src_profession()) {
      set_src_profession(from.src_profession());
    }
    if (from.has_src_sex()) {
      set_src_sex(from.src_sex());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_jump()) {
      mutable_jump()->::client::jump_scene::MergeFrom(from.jump());
    }
    if (from.has_act_type()) {
      set_act_type(from.act_type());
    }
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_msg::CopyFrom(const chat_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  if (has_jump()) {
    if (!this->jump().IsInitialized()) return false;
  }
  return true;
}

void chat_msg::Swap(chat_msg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(src_rold_id_, other->src_rold_id_);
    std::swap(src_role_name_, other->src_role_name_);
    std::swap(src_vip_lvl_, other->src_vip_lvl_);
    std::swap(src_title_, other->src_title_);
    std::swap(src_profession_, other->src_profession_);
    std::swap(src_sex_, other->src_sex_);
    std::swap(content_, other->content_);
    pi_.Swap(&other->pi_);
    std::swap(jump_, other->jump_);
    std::swap(act_type_, other->act_type_);
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_msg_descriptor_;
  metadata.reflection = chat_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_chat_msg::kCmFieldNumber;
const int client_chat_msg::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

client_chat_msg::client_chat_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_chat_msg::InitAsDefaultInstance() {
  cm_ = const_cast< ::client::chat_msg*>(&::client::chat_msg::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

client_chat_msg::client_chat_msg(const client_chat_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_chat_msg::SharedCtor() {
  _cached_size_ = 0;
  cm_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_chat_msg::~client_chat_msg() {
  SharedDtor();
}

void client_chat_msg::SharedDtor() {
  if (this != default_instance_) {
    delete cm_;
    delete svr_head_;
  }
}

void client_chat_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_chat_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_chat_msg_descriptor_;
}

const client_chat_msg& client_chat_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  return *default_instance_;
}

client_chat_msg* client_chat_msg::default_instance_ = NULL;

client_chat_msg* client_chat_msg::New() const {
  return new client_chat_msg;
}

void client_chat_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cm()) {
      if (cm_ != NULL) cm_->::client::chat_msg::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_chat_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.chat_msg cm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_chat_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.chat_msg cm = 1;
  if (has_cm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cm(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_chat_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.chat_msg cm = 1;
  if (has_cm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cm(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_chat_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.chat_msg cm = 1;
    if (has_cm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cm());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_chat_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_chat_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_chat_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_chat_msg::MergeFrom(const client_chat_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cm()) {
      mutable_cm()->::client::chat_msg::MergeFrom(from.cm());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_chat_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_chat_msg::CopyFrom(const client_chat_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_chat_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cm()) {
    if (!this->cm().IsInitialized()) return false;
  }
  return true;
}

void client_chat_msg::Swap(client_chat_msg* other) {
  if (other != this) {
    std::swap(cm_, other->cm_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_chat_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_chat_msg_descriptor_;
  metadata.reflection = client_chat_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_title_info_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

update_title_info_req::update_title_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_title_info_req::InitAsDefaultInstance() {
}

update_title_info_req::update_title_info_req(const update_title_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_title_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_title_info_req::~update_title_info_req() {
  SharedDtor();
}

void update_title_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_title_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_title_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_title_info_req_descriptor_;
}

const update_title_info_req& update_title_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  return *default_instance_;
}

update_title_info_req* update_title_info_req::default_instance_ = NULL;

update_title_info_req* update_title_info_req::New() const {
  return new update_title_info_req;
}

void update_title_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_title_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_title_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_title_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_title_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_title_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_title_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_title_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_title_info_req::MergeFrom(const update_title_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_title_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_title_info_req::CopyFrom(const update_title_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_title_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void update_title_info_req::Swap(update_title_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_title_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_title_info_req_descriptor_;
  metadata.reflection = update_title_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_title_info_rsp::kRoleIdFieldNumber;
const int update_title_info_rsp::kFamilyTitleFieldNumber;
const int update_title_info_rsp::kFamilyNameFieldNumber;
const int update_title_info_rsp::kIsSiegeFieldNumber;
#endif  // !_MSC_VER

update_title_info_rsp::update_title_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_title_info_rsp::InitAsDefaultInstance() {
}

update_title_info_rsp::update_title_info_rsp(const update_title_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_title_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  family_title_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_siege_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_title_info_rsp::~update_title_info_rsp() {
  SharedDtor();
}

void update_title_info_rsp::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void update_title_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_title_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_title_info_rsp_descriptor_;
}

const update_title_info_rsp& update_title_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2echat_5fmsg_2eproto();
  return *default_instance_;
}

update_title_info_rsp* update_title_info_rsp::default_instance_ = NULL;

update_title_info_rsp* update_title_info_rsp::New() const {
  return new update_title_info_rsp;
}

void update_title_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    family_title_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    is_siege_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_title_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_title;
        break;
      }

      // optional uint32 family_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_title_)));
          set_has_family_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_name;
        break;
      }

      // optional string family_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_siege;
        break;
      }

      // optional bool is_siege = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_siege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_siege_)));
          set_has_is_siege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_title_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 family_title = 2;
  if (has_family_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_title(), output);
  }

  // optional string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->family_name(), output);
  }

  // optional bool is_siege = 4;
  if (has_is_siege()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_siege(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_title_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 family_title = 2;
  if (has_family_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_title(), target);
  }

  // optional string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->family_name(), target);
  }

  // optional bool is_siege = 4;
  if (has_is_siege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_siege(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_title_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 family_title = 2;
    if (has_family_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_title());
    }

    // optional string family_name = 3;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional bool is_siege = 4;
    if (has_is_siege()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_title_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_title_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_title_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_title_info_rsp::MergeFrom(const update_title_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_family_title()) {
      set_family_title(from.family_title());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_is_siege()) {
      set_is_siege(from.is_siege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_title_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_title_info_rsp::CopyFrom(const update_title_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_title_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void update_title_info_rsp::Swap(update_title_info_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(family_title_, other->family_title_);
    std::swap(family_name_, other->family_name_);
    std::swap(is_siege_, other->is_siege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_title_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_title_info_rsp_descriptor_;
  metadata.reflection = update_title_info_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
