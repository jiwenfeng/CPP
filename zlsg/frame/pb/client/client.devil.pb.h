// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.devil.proto

#ifndef PROTOBUF_client_2edevil_2eproto__INCLUDED
#define PROTOBUF_client_2edevil_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.raid_operate.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2edevil_2eproto();
void protobuf_AssignDesc_client_2edevil_2eproto();
void protobuf_ShutdownFile_client_2edevil_2eproto();

class devil_info_req;
class devil_info_rsp;
class devil_raid_detail;
class devil_stage_list;
class devil_award_req;
class devil_award_rsp;
class devil_stage_info;
class devil_raid_info;
class devil_center_info;
class devil_fight_over;
class devil_fight_result;

// ===================================================================

class devil_info_req : public ::google::protobuf::Message {
 public:
  devil_info_req();
  virtual ~devil_info_req();

  devil_info_req(const devil_info_req& from);

  inline devil_info_req& operator=(const devil_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_info_req& default_instance();

  void Swap(devil_info_req* other);

  // implements Message ----------------------------------------------

  devil_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_info_req& from);
  void MergeFrom(const devil_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.devil_info_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_info_req* default_instance_;
};
// -------------------------------------------------------------------

class devil_info_rsp : public ::google::protobuf::Message {
 public:
  devil_info_rsp();
  virtual ~devil_info_rsp();

  devil_info_rsp(const devil_info_rsp& from);

  inline devil_info_rsp& operator=(const devil_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_info_rsp& default_instance();

  void Swap(devil_info_rsp* other);

  // implements Message ----------------------------------------------

  devil_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_info_rsp& from);
  void MergeFrom(const devil_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_info_rsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class devil_raid_detail : public ::google::protobuf::Message {
 public:
  devil_raid_detail();
  virtual ~devil_raid_detail();

  devil_raid_detail(const devil_raid_detail& from);

  inline devil_raid_detail& operator=(const devil_raid_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_raid_detail& default_instance();

  void Swap(devil_raid_detail* other);

  // implements Message ----------------------------------------------

  devil_raid_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_raid_detail& from);
  void MergeFrom(const devil_raid_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // required uint32 champion = 4;
  inline bool has_champion() const;
  inline void clear_champion();
  static const int kChampionFieldNumber = 4;
  inline ::google::protobuf::uint32 champion() const;
  inline void set_champion(::google::protobuf::uint32 value);

  // required uint32 reward_type = 5;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 reward_type() const;
  inline void set_reward_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_raid_detail)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_champion();
  inline void clear_has_champion();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::uint32 champion_;
  ::google::protobuf::uint32 reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_raid_detail* default_instance_;
};
// -------------------------------------------------------------------

class devil_stage_list : public ::google::protobuf::Message {
 public:
  devil_stage_list();
  virtual ~devil_stage_list();

  devil_stage_list(const devil_stage_list& from);

  inline devil_stage_list& operator=(const devil_stage_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_stage_list& default_instance();

  void Swap(devil_stage_list* other);

  // implements Message ----------------------------------------------

  devil_stage_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_stage_list& from);
  void MergeFrom(const devil_stage_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.devil_raid_detail drd = 1;
  inline int drd_size() const;
  inline void clear_drd();
  static const int kDrdFieldNumber = 1;
  inline const ::client::devil_raid_detail& drd(int index) const;
  inline ::client::devil_raid_detail* mutable_drd(int index);
  inline ::client::devil_raid_detail* add_drd();
  inline const ::google::protobuf::RepeatedPtrField< ::client::devil_raid_detail >&
      drd() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::devil_raid_detail >*
      mutable_drd();

  // repeated .client.devil_stage_info dsi = 2;
  inline int dsi_size() const;
  inline void clear_dsi();
  static const int kDsiFieldNumber = 2;
  inline const ::client::devil_stage_info& dsi(int index) const;
  inline ::client::devil_stage_info* mutable_dsi(int index);
  inline ::client::devil_stage_info* add_dsi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::devil_stage_info >&
      dsi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::devil_stage_info >*
      mutable_dsi();

  // @@protoc_insertion_point(class_scope:client.devil_stage_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::devil_raid_detail > drd_;
  ::google::protobuf::RepeatedPtrField< ::client::devil_stage_info > dsi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_stage_list* default_instance_;
};
// -------------------------------------------------------------------

class devil_award_req : public ::google::protobuf::Message {
 public:
  devil_award_req();
  virtual ~devil_award_req();

  devil_award_req(const devil_award_req& from);

  inline devil_award_req& operator=(const devil_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_award_req& default_instance();

  void Swap(devil_award_req* other);

  // implements Message ----------------------------------------------

  devil_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_award_req& from);
  void MergeFrom(const devil_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.devil_award_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_award_req* default_instance_;
};
// -------------------------------------------------------------------

class devil_award_rsp : public ::google::protobuf::Message {
 public:
  devil_award_rsp();
  virtual ~devil_award_rsp();

  devil_award_rsp(const devil_award_rsp& from);

  inline devil_award_rsp& operator=(const devil_award_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_award_rsp& default_instance();

  void Swap(devil_award_rsp* other);

  // implements Message ----------------------------------------------

  devil_award_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_award_rsp& from);
  void MergeFrom(const devil_award_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_award_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_award_rsp* default_instance_;
};
// -------------------------------------------------------------------

class devil_stage_info : public ::google::protobuf::Message {
 public:
  devil_stage_info();
  virtual ~devil_stage_info();

  devil_stage_info(const devil_stage_info& from);

  inline devil_stage_info& operator=(const devil_stage_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_stage_info& default_instance();

  void Swap(devil_stage_info* other);

  // implements Message ----------------------------------------------

  devil_stage_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_stage_info& from);
  void MergeFrom(const devil_stage_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_stage_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_stage_info* default_instance_;
};
// -------------------------------------------------------------------

class devil_raid_info : public ::google::protobuf::Message {
 public:
  devil_raid_info();
  virtual ~devil_raid_info();

  devil_raid_info(const devil_raid_info& from);

  inline devil_raid_info& operator=(const devil_raid_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_raid_info& default_instance();

  void Swap(devil_raid_info* other);

  // implements Message ----------------------------------------------

  devil_raid_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_raid_info& from);
  void MergeFrom(const devil_raid_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // required uint32 champion = 4;
  inline bool has_champion() const;
  inline void clear_champion();
  static const int kChampionFieldNumber = 4;
  inline ::google::protobuf::uint32 champion() const;
  inline void set_champion(::google::protobuf::uint32 value);

  // required uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_raid_info)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_champion();
  inline void clear_has_champion();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::uint32 champion_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_raid_info* default_instance_;
};
// -------------------------------------------------------------------

class devil_center_info : public ::google::protobuf::Message {
 public:
  devil_center_info();
  virtual ~devil_center_info();

  devil_center_info(const devil_center_info& from);

  inline devil_center_info& operator=(const devil_center_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_center_info& default_instance();

  void Swap(devil_center_info* other);

  // implements Message ----------------------------------------------

  devil_center_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_center_info& from);
  void MergeFrom(const devil_center_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_center_info)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_center_info* default_instance_;
};
// -------------------------------------------------------------------

class devil_fight_over : public ::google::protobuf::Message {
 public:
  devil_fight_over();
  virtual ~devil_fight_over();

  devil_fight_over(const devil_fight_over& from);

  inline devil_fight_over& operator=(const devil_fight_over& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_fight_over& default_instance();

  void Swap(devil_fight_over* other);

  // implements Message ----------------------------------------------

  devil_fight_over* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_fight_over& from);
  void MergeFrom(const devil_fight_over& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // required uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required bool champion = 5;
  inline bool has_champion() const;
  inline void clear_champion();
  static const int kChampionFieldNumber = 5;
  inline bool champion() const;
  inline void set_champion(bool value);

  // optional .client.raid_success_info success = 6;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 6;
  inline const ::client::raid_success_info& success() const;
  inline ::client::raid_success_info* mutable_success();
  inline ::client::raid_success_info* release_success();
  inline void set_allocated_success(::client::raid_success_info* success);

  // optional .client.raid_failure_info failure = 7;
  inline bool has_failure() const;
  inline void clear_failure();
  static const int kFailureFieldNumber = 7;
  inline const ::client::raid_failure_info& failure() const;
  inline ::client::raid_failure_info* mutable_failure();
  inline ::client::raid_failure_info* release_failure();
  inline void set_allocated_failure(::client::raid_failure_info* failure);

  // @@protoc_insertion_point(class_scope:client.devil_fight_over)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_champion();
  inline void clear_has_champion();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_failure();
  inline void clear_has_failure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::uint32 star_;
  ::client::raid_success_info* success_;
  ::client::raid_failure_info* failure_;
  bool champion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_fight_over* default_instance_;
};
// -------------------------------------------------------------------

class devil_fight_result : public ::google::protobuf::Message {
 public:
  devil_fight_result();
  virtual ~devil_fight_result();

  devil_fight_result(const devil_fight_result& from);

  inline devil_fight_result& operator=(const devil_fight_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const devil_fight_result& default_instance();

  void Swap(devil_fight_result* other);

  // implements Message ----------------------------------------------

  devil_fight_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const devil_fight_result& from);
  void MergeFrom(const devil_fight_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 used_tick = 3;
  inline bool has_used_tick() const;
  inline void clear_used_tick();
  static const int kUsedTickFieldNumber = 3;
  inline ::google::protobuf::uint32 used_tick() const;
  inline void set_used_tick(::google::protobuf::uint32 value);

  // required uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 champion = 5;
  inline bool has_champion() const;
  inline void clear_champion();
  static const int kChampionFieldNumber = 5;
  inline ::google::protobuf::uint32 champion() const;
  inline void set_champion(::google::protobuf::uint32 value);

  // optional .client.raid_success_info success = 6;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 6;
  inline const ::client::raid_success_info& success() const;
  inline ::client::raid_success_info* mutable_success();
  inline ::client::raid_success_info* release_success();
  inline void set_allocated_success(::client::raid_success_info* success);

  // optional .client.raid_failure_info failure = 7;
  inline bool has_failure() const;
  inline void clear_failure();
  static const int kFailureFieldNumber = 7;
  inline const ::client::raid_failure_info& failure() const;
  inline ::client::raid_failure_info* mutable_failure();
  inline ::client::raid_failure_info* release_failure();
  inline void set_allocated_failure(::client::raid_failure_info* failure);

  // optional string role_name = 8;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 8;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 tick = 9;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 9;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.devil_fight_result)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_used_tick();
  inline void clear_has_used_tick();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_champion();
  inline void clear_has_champion();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_failure();
  inline void clear_has_failure();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 used_tick_;
  ::google::protobuf::uint32 star_;
  ::client::raid_success_info* success_;
  ::client::raid_failure_info* failure_;
  ::google::protobuf::uint32 champion_;
  ::google::protobuf::uint32 tick_;
  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client_2edevil_2eproto();
  friend void protobuf_AssignDesc_client_2edevil_2eproto();
  friend void protobuf_ShutdownFile_client_2edevil_2eproto();

  void InitAsDefaultInstance();
  static devil_fight_result* default_instance_;
};
// ===================================================================


// ===================================================================

// devil_info_req

// required uint32 id = 1;
inline bool devil_info_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_info_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_info_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_info_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 devil_info_req::id() const {
  return id_;
}
inline void devil_info_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool devil_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& devil_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* devil_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* devil_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void devil_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// devil_info_rsp

// required uint32 id = 1;
inline bool devil_info_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_info_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_info_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_info_rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 devil_info_rsp::id() const {
  return id_;
}
inline void devil_info_rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool devil_info_rsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_info_rsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_info_rsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_info_rsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& devil_info_rsp::name() const {
  return *name_;
}
inline void devil_info_rsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void devil_info_rsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void devil_info_rsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* devil_info_rsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* devil_info_rsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void devil_info_rsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tick = 3;
inline bool devil_info_rsp::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_info_rsp::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_info_rsp::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_info_rsp::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_info_rsp::tick() const {
  return tick_;
}
inline void devil_info_rsp::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// devil_raid_detail

// required uint32 raid_id = 1;
inline bool devil_raid_detail::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_raid_detail::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_raid_detail::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_raid_detail::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 devil_raid_detail::raid_id() const {
  return raid_id_;
}
inline void devil_raid_detail::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 star = 2;
inline bool devil_raid_detail::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_raid_detail::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_raid_detail::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_raid_detail::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 devil_raid_detail::star() const {
  return star_;
}
inline void devil_raid_detail::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 tick = 3;
inline bool devil_raid_detail::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_raid_detail::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_raid_detail::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_raid_detail::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_raid_detail::tick() const {
  return tick_;
}
inline void devil_raid_detail::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// required uint32 champion = 4;
inline bool devil_raid_detail::has_champion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void devil_raid_detail::set_has_champion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void devil_raid_detail::clear_has_champion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void devil_raid_detail::clear_champion() {
  champion_ = 0u;
  clear_has_champion();
}
inline ::google::protobuf::uint32 devil_raid_detail::champion() const {
  return champion_;
}
inline void devil_raid_detail::set_champion(::google::protobuf::uint32 value) {
  set_has_champion();
  champion_ = value;
}

// required uint32 reward_type = 5;
inline bool devil_raid_detail::has_reward_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void devil_raid_detail::set_has_reward_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void devil_raid_detail::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void devil_raid_detail::clear_reward_type() {
  reward_type_ = 0u;
  clear_has_reward_type();
}
inline ::google::protobuf::uint32 devil_raid_detail::reward_type() const {
  return reward_type_;
}
inline void devil_raid_detail::set_reward_type(::google::protobuf::uint32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// devil_stage_list

// repeated .client.devil_raid_detail drd = 1;
inline int devil_stage_list::drd_size() const {
  return drd_.size();
}
inline void devil_stage_list::clear_drd() {
  drd_.Clear();
}
inline const ::client::devil_raid_detail& devil_stage_list::drd(int index) const {
  return drd_.Get(index);
}
inline ::client::devil_raid_detail* devil_stage_list::mutable_drd(int index) {
  return drd_.Mutable(index);
}
inline ::client::devil_raid_detail* devil_stage_list::add_drd() {
  return drd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::devil_raid_detail >&
devil_stage_list::drd() const {
  return drd_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::devil_raid_detail >*
devil_stage_list::mutable_drd() {
  return &drd_;
}

// repeated .client.devil_stage_info dsi = 2;
inline int devil_stage_list::dsi_size() const {
  return dsi_.size();
}
inline void devil_stage_list::clear_dsi() {
  dsi_.Clear();
}
inline const ::client::devil_stage_info& devil_stage_list::dsi(int index) const {
  return dsi_.Get(index);
}
inline ::client::devil_stage_info* devil_stage_list::mutable_dsi(int index) {
  return dsi_.Mutable(index);
}
inline ::client::devil_stage_info* devil_stage_list::add_dsi() {
  return dsi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::devil_stage_info >&
devil_stage_list::dsi() const {
  return dsi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::devil_stage_info >*
devil_stage_list::mutable_dsi() {
  return &dsi_;
}

// -------------------------------------------------------------------

// devil_award_req

// required uint32 id = 1;
inline bool devil_award_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_award_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_award_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_award_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 devil_award_req::id() const {
  return id_;
}
inline void devil_award_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool devil_award_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_award_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_award_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_award_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& devil_award_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* devil_award_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* devil_award_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void devil_award_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// devil_award_rsp

// required uint32 ret = 1;
inline bool devil_award_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_award_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_award_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_award_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 devil_award_rsp::ret() const {
  return ret_;
}
inline void devil_award_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint32 id = 2;
inline bool devil_award_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_award_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_award_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_award_rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 devil_award_rsp::id() const {
  return id_;
}
inline void devil_award_rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// devil_stage_info

// required uint32 id = 1;
inline bool devil_stage_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_stage_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_stage_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_stage_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 devil_stage_info::id() const {
  return id_;
}
inline void devil_stage_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 state = 2;
inline bool devil_stage_info::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_stage_info::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_stage_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_stage_info::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 devil_stage_info::state() const {
  return state_;
}
inline void devil_stage_info::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// devil_raid_info

// required uint32 raid_id = 1;
inline bool devil_raid_info::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_raid_info::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_raid_info::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_raid_info::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 devil_raid_info::raid_id() const {
  return raid_id_;
}
inline void devil_raid_info::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 star = 2;
inline bool devil_raid_info::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_raid_info::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_raid_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_raid_info::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 devil_raid_info::star() const {
  return star_;
}
inline void devil_raid_info::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 tick = 3;
inline bool devil_raid_info::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_raid_info::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_raid_info::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_raid_info::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_raid_info::tick() const {
  return tick_;
}
inline void devil_raid_info::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// required uint32 champion = 4;
inline bool devil_raid_info::has_champion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void devil_raid_info::set_has_champion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void devil_raid_info::clear_has_champion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void devil_raid_info::clear_champion() {
  champion_ = 0u;
  clear_has_champion();
}
inline ::google::protobuf::uint32 devil_raid_info::champion() const {
  return champion_;
}
inline void devil_raid_info::set_champion(::google::protobuf::uint32 value) {
  set_has_champion();
  champion_ = value;
}

// required uint32 time = 5;
inline bool devil_raid_info::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void devil_raid_info::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void devil_raid_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void devil_raid_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 devil_raid_info::time() const {
  return time_;
}
inline void devil_raid_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// devil_center_info

// required uint32 raid_id = 1;
inline bool devil_center_info::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_center_info::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_center_info::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_center_info::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 devil_center_info::raid_id() const {
  return raid_id_;
}
inline void devil_center_info::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 role_id = 2;
inline bool devil_center_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_center_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_center_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_center_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 devil_center_info::role_id() const {
  return role_id_;
}
inline void devil_center_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 tick = 3;
inline bool devil_center_info::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_center_info::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_center_info::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_center_info::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_center_info::tick() const {
  return tick_;
}
inline void devil_center_info::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// devil_fight_over

// required uint32 role_id = 1;
inline bool devil_fight_over::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_fight_over::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_fight_over::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_fight_over::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 devil_fight_over::role_id() const {
  return role_id_;
}
inline void devil_fight_over::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 raid_id = 2;
inline bool devil_fight_over::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_fight_over::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_fight_over::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_fight_over::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 devil_fight_over::raid_id() const {
  return raid_id_;
}
inline void devil_fight_over::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 tick = 3;
inline bool devil_fight_over::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_fight_over::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_fight_over::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_fight_over::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_fight_over::tick() const {
  return tick_;
}
inline void devil_fight_over::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// required uint32 star = 4;
inline bool devil_fight_over::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void devil_fight_over::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void devil_fight_over::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void devil_fight_over::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 devil_fight_over::star() const {
  return star_;
}
inline void devil_fight_over::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required bool champion = 5;
inline bool devil_fight_over::has_champion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void devil_fight_over::set_has_champion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void devil_fight_over::clear_has_champion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void devil_fight_over::clear_champion() {
  champion_ = false;
  clear_has_champion();
}
inline bool devil_fight_over::champion() const {
  return champion_;
}
inline void devil_fight_over::set_champion(bool value) {
  set_has_champion();
  champion_ = value;
}

// optional .client.raid_success_info success = 6;
inline bool devil_fight_over::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void devil_fight_over::set_has_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void devil_fight_over::clear_has_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void devil_fight_over::clear_success() {
  if (success_ != NULL) success_->::client::raid_success_info::Clear();
  clear_has_success();
}
inline const ::client::raid_success_info& devil_fight_over::success() const {
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
inline ::client::raid_success_info* devil_fight_over::mutable_success() {
  set_has_success();
  if (success_ == NULL) success_ = new ::client::raid_success_info;
  return success_;
}
inline ::client::raid_success_info* devil_fight_over::release_success() {
  clear_has_success();
  ::client::raid_success_info* temp = success_;
  success_ = NULL;
  return temp;
}
inline void devil_fight_over::set_allocated_success(::client::raid_success_info* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
}

// optional .client.raid_failure_info failure = 7;
inline bool devil_fight_over::has_failure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void devil_fight_over::set_has_failure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void devil_fight_over::clear_has_failure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void devil_fight_over::clear_failure() {
  if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
  clear_has_failure();
}
inline const ::client::raid_failure_info& devil_fight_over::failure() const {
  return failure_ != NULL ? *failure_ : *default_instance_->failure_;
}
inline ::client::raid_failure_info* devil_fight_over::mutable_failure() {
  set_has_failure();
  if (failure_ == NULL) failure_ = new ::client::raid_failure_info;
  return failure_;
}
inline ::client::raid_failure_info* devil_fight_over::release_failure() {
  clear_has_failure();
  ::client::raid_failure_info* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline void devil_fight_over::set_allocated_failure(::client::raid_failure_info* failure) {
  delete failure_;
  failure_ = failure;
  if (failure) {
    set_has_failure();
  } else {
    clear_has_failure();
  }
}

// -------------------------------------------------------------------

// devil_fight_result

// required uint32 role_id = 1;
inline bool devil_fight_result::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void devil_fight_result::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void devil_fight_result::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void devil_fight_result::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 devil_fight_result::role_id() const {
  return role_id_;
}
inline void devil_fight_result::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 raid_id = 2;
inline bool devil_fight_result::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void devil_fight_result::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void devil_fight_result::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void devil_fight_result::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 devil_fight_result::raid_id() const {
  return raid_id_;
}
inline void devil_fight_result::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 used_tick = 3;
inline bool devil_fight_result::has_used_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void devil_fight_result::set_has_used_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void devil_fight_result::clear_has_used_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void devil_fight_result::clear_used_tick() {
  used_tick_ = 0u;
  clear_has_used_tick();
}
inline ::google::protobuf::uint32 devil_fight_result::used_tick() const {
  return used_tick_;
}
inline void devil_fight_result::set_used_tick(::google::protobuf::uint32 value) {
  set_has_used_tick();
  used_tick_ = value;
}

// required uint32 star = 4;
inline bool devil_fight_result::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void devil_fight_result::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void devil_fight_result::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void devil_fight_result::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 devil_fight_result::star() const {
  return star_;
}
inline void devil_fight_result::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 champion = 5;
inline bool devil_fight_result::has_champion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void devil_fight_result::set_has_champion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void devil_fight_result::clear_has_champion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void devil_fight_result::clear_champion() {
  champion_ = 0u;
  clear_has_champion();
}
inline ::google::protobuf::uint32 devil_fight_result::champion() const {
  return champion_;
}
inline void devil_fight_result::set_champion(::google::protobuf::uint32 value) {
  set_has_champion();
  champion_ = value;
}

// optional .client.raid_success_info success = 6;
inline bool devil_fight_result::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void devil_fight_result::set_has_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void devil_fight_result::clear_has_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void devil_fight_result::clear_success() {
  if (success_ != NULL) success_->::client::raid_success_info::Clear();
  clear_has_success();
}
inline const ::client::raid_success_info& devil_fight_result::success() const {
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
inline ::client::raid_success_info* devil_fight_result::mutable_success() {
  set_has_success();
  if (success_ == NULL) success_ = new ::client::raid_success_info;
  return success_;
}
inline ::client::raid_success_info* devil_fight_result::release_success() {
  clear_has_success();
  ::client::raid_success_info* temp = success_;
  success_ = NULL;
  return temp;
}
inline void devil_fight_result::set_allocated_success(::client::raid_success_info* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
}

// optional .client.raid_failure_info failure = 7;
inline bool devil_fight_result::has_failure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void devil_fight_result::set_has_failure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void devil_fight_result::clear_has_failure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void devil_fight_result::clear_failure() {
  if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
  clear_has_failure();
}
inline const ::client::raid_failure_info& devil_fight_result::failure() const {
  return failure_ != NULL ? *failure_ : *default_instance_->failure_;
}
inline ::client::raid_failure_info* devil_fight_result::mutable_failure() {
  set_has_failure();
  if (failure_ == NULL) failure_ = new ::client::raid_failure_info;
  return failure_;
}
inline ::client::raid_failure_info* devil_fight_result::release_failure() {
  clear_has_failure();
  ::client::raid_failure_info* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline void devil_fight_result::set_allocated_failure(::client::raid_failure_info* failure) {
  delete failure_;
  failure_ = failure;
  if (failure) {
    set_has_failure();
  } else {
    clear_has_failure();
  }
}

// optional string role_name = 8;
inline bool devil_fight_result::has_role_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void devil_fight_result::set_has_role_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void devil_fight_result::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void devil_fight_result::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& devil_fight_result::role_name() const {
  return *role_name_;
}
inline void devil_fight_result::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void devil_fight_result::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void devil_fight_result::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* devil_fight_result::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* devil_fight_result::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void devil_fight_result::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tick = 9;
inline bool devil_fight_result::has_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void devil_fight_result::set_has_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void devil_fight_result::clear_has_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void devil_fight_result::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 devil_fight_result::tick() const {
  return tick_;
}
inline void devil_fight_result::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2edevil_2eproto__INCLUDED
