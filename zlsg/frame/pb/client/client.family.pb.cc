// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.family.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.family.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* family_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_diplomacy_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_diplomacy_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_create_famliy_consume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_create_famliy_consume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_create_famliy_consume_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* set_donate_consume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_donate_consume_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_family_money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_family_money_reflection_ = NULL;
const ::google::protobuf::Descriptor* secede_family_to_center_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secede_family_to_center_reflection_ = NULL;
const ::google::protobuf::Descriptor* secede_family_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secede_family_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_family_data_from_center_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_family_data_from_center_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_family_power_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_family_power_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_player_power_to_smy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_player_power_to_smy_reflection_ = NULL;
const ::google::protobuf::Descriptor* notive_center_donate_sucess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notive_center_donate_sucess_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_money_mod_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_money_mod_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_simple_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_simple_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_money_query_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_money_query_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_money_query_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_money_query_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_family_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* create_family_req_use_descriptor_ = NULL;
const ::google::protobuf::Descriptor* create_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* create_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* apply_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* family_set_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_set_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_set_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_set_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* approval_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  approval_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* approval_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  approval_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* approval_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* invite_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* invite_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* invite_family_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_family_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_family_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_family_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_family_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_family_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* agree_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agree_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* agree_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agree_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* agree_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* modify_family_post_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_family_post_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_family_post_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_family_post_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* modify_family_post_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* disband_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  disband_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* disband_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  disband_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* disband_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* family_self_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_self_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_self_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_self_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_list_self_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_list_self_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_family_list_self_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_family_list_self_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_member_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_member_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_member_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_member_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_member_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_member_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_family_member_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_family_member_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_family_member_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_family_member_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* modify_family_member_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* secede_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secede_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* secede_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secede_family_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* expel_member_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  expel_member_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* expel_member_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  expel_member_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* upgrade_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upgrade_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* upgrade_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* donate_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  donate_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* donate_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  donate_family_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* donate_family_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* donate_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  donate_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* donate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  donate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* donate_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  donate_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_log_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_log_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_log_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_log_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_log_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_log_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_log_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_log_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_record_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_record_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_record_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_record_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_family_flag_id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_family_flag_id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_family_flag_id_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_family_flag_id_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_family_flag_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_family_flag_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_family_flag_name_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_family_flag_name_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* impeach_chief_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  impeach_chief_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* impeach_chief_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  impeach_chief_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ally_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ally_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ally_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ally_family_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* remove_foreign_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  remove_foreign_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* remove_foreign_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  remove_foreign_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ally_family_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ally_family_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ally_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ally_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ally_family_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ally_family_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_opt_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_opt_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_friend_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_friend_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* load_friend_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  load_friend_family_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_friend_family_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_friend_family_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_relation_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_relation_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_family_relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_family_relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_title_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_title_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_title_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_title_list_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SECEDE_FAMILY_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EXPEL_MEMBER_RESULT_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DONATE_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FAMILY_LOG_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPT_CHANGE_FLAG_NAME_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IMPEACH_RESULT_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OPT_FORIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UPTATE_TYPE_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2efamily_2eproto() {
  protobuf_AddDesc_client_2efamily_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.family.proto");
  GOOGLE_CHECK(file != NULL);
  family_info_descriptor_ = file->message_type(0);
  static const int family_info_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, chief_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, chief_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, deputy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, emperor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, cur_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, approval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, leader_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, dragon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, tiger_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, rosefinch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, tortoise_count_),
  };
  family_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_info_descriptor_,
      family_info::default_instance_,
      family_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_info));
  family_diplomacy_info_descriptor_ = file->message_type(1);
  static const int family_diplomacy_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, relation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, apply_time_),
  };
  family_diplomacy_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_diplomacy_info_descriptor_,
      family_diplomacy_info::default_instance_,
      family_diplomacy_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_diplomacy_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_diplomacy_info));
  set_create_famliy_consume_descriptor_ = file->message_type(2);
  static const int set_create_famliy_consume_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_create_famliy_consume, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_create_famliy_consume, is_succeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_create_famliy_consume, role_id_),
  };
  set_create_famliy_consume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_create_famliy_consume_descriptor_,
      set_create_famliy_consume::default_instance_,
      set_create_famliy_consume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_create_famliy_consume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_create_famliy_consume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_create_famliy_consume));
  set_create_famliy_consume_result_descriptor_ = set_create_famliy_consume_descriptor_->enum_type(0);
  set_donate_consume_descriptor_ = file->message_type(3);
  static const int set_donate_consume_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, contr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, total_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, money_),
  };
  set_donate_consume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_donate_consume_descriptor_,
      set_donate_consume::default_instance_,
      set_donate_consume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_donate_consume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_donate_consume));
  set_family_req_descriptor_ = file->message_type(4);
  static const int set_family_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, family_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, donate_),
  };
  set_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_family_req_descriptor_,
      set_family_req::default_instance_,
      set_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_family_req));
  set_family_money_descriptor_ = file->message_type(5);
  static const int set_family_money_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, server_id_),
  };
  set_family_money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_family_money_descriptor_,
      set_family_money::default_instance_,
      set_family_money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_family_money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_family_money));
  secede_family_to_center_descriptor_ = file->message_type(6);
  static const int secede_family_to_center_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_to_center, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_to_center, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_to_center, server_id_),
  };
  secede_family_to_center_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secede_family_to_center_descriptor_,
      secede_family_to_center::default_instance_,
      secede_family_to_center_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_to_center, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_to_center, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secede_family_to_center));
  secede_family_game_descriptor_ = file->message_type(7);
  static const int secede_family_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_game, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_game, svr_head_),
  };
  secede_family_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secede_family_game_descriptor_,
      secede_family_game::default_instance_,
      secede_family_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secede_family_game));
  update_family_data_from_center_descriptor_ = file->message_type(8);
  static const int update_family_data_from_center_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_data_from_center, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_data_from_center, role_id_),
  };
  update_family_data_from_center_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_family_data_from_center_descriptor_,
      update_family_data_from_center::default_instance_,
      update_family_data_from_center_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_data_from_center, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_data_from_center, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_family_data_from_center));
  family_info_req_descriptor_ = file->message_type(9);
  static const int family_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_req, role_id_),
  };
  family_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_info_req_descriptor_,
      family_info_req::default_instance_,
      family_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_info_req));
  family_info_rsp_descriptor_ = file->message_type(10);
  static const int family_info_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_rsp, info_),
  };
  family_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_info_rsp_descriptor_,
      family_info_rsp::default_instance_,
      family_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_info_rsp));
  modify_family_power_descriptor_ = file->message_type(11);
  static const int modify_family_power_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_power, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_power, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_power, new_power_),
  };
  modify_family_power_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_family_power_descriptor_,
      modify_family_power::default_instance_,
      modify_family_power_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_power, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_power, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_family_power));
  update_player_power_to_smy_descriptor_ = file->message_type(12);
  static const int update_player_power_to_smy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player_power_to_smy, role_id_),
  };
  update_player_power_to_smy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_player_power_to_smy_descriptor_,
      update_player_power_to_smy::default_instance_,
      update_player_power_to_smy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player_power_to_smy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_player_power_to_smy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_player_power_to_smy));
  notive_center_donate_sucess_descriptor_ = file->message_type(13);
  static const int notive_center_donate_sucess_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, total_donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, money_),
  };
  notive_center_donate_sucess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notive_center_donate_sucess_descriptor_,
      notive_center_donate_sucess::default_instance_,
      notive_center_donate_sucess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notive_center_donate_sucess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notive_center_donate_sucess));
  family_money_mod_req_descriptor_ = file->message_type(14);
  static const int family_money_mod_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_mod_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_mod_req, money_),
  };
  family_money_mod_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_money_mod_req_descriptor_,
      family_money_mod_req::default_instance_,
      family_money_mod_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_mod_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_mod_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_money_mod_req));
  family_simple_info_descriptor_ = file->message_type(15);
  static const int family_simple_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, alliance_),
  };
  family_simple_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_simple_info_descriptor_,
      family_simple_info::default_instance_,
      family_simple_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_simple_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_simple_info));
  family_money_query_req_descriptor_ = file->message_type(16);
  static const int family_money_query_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_req, inst_id_),
  };
  family_money_query_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_money_query_req_descriptor_,
      family_money_query_req::default_instance_,
      family_money_query_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_money_query_req));
  family_money_query_rsp_descriptor_ = file->message_type(17);
  static const int family_money_query_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, inst_id_),
  };
  family_money_query_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_money_query_rsp_descriptor_,
      family_money_query_rsp::default_instance_,
      family_money_query_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_money_query_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_money_query_rsp));
  family_list_req_descriptor_ = file->message_type(18);
  static const int family_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_req, svr_head_),
  };
  family_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_list_req_descriptor_,
      family_list_req::default_instance_,
      family_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_list_req));
  family_list_rsp_descriptor_ = file->message_type(19);
  static const int family_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_rsp, list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_rsp, family_),
  };
  family_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_list_rsp_descriptor_,
      family_list_rsp::default_instance_,
      family_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_list_rsp));
  create_family_req_descriptor_ = file->message_type(20);
  static const int create_family_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, svr_head_),
  };
  create_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_family_req_descriptor_,
      create_family_req::default_instance_,
      create_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_family_req));
  create_family_req_use_descriptor_ = create_family_req_descriptor_->enum_type(0);
  create_family_rsp_descriptor_ = file->message_type(21);
  static const int create_family_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_rsp, family_id_),
  };
  create_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_family_rsp_descriptor_,
      create_family_rsp::default_instance_,
      create_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_family_rsp));
  create_family_rsp_result_descriptor_ = create_family_rsp_descriptor_->enum_type(0);
  family_req_descriptor_ = file->message_type(22);
  static const int family_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_req, svr_head_),
  };
  family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_req_descriptor_,
      family_req::default_instance_,
      family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_req));
  family_rsp_descriptor_ = file->message_type(23);
  static const int family_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_rsp, fi_),
  };
  family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_rsp_descriptor_,
      family_rsp::default_instance_,
      family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_rsp));
  apply_family_req_descriptor_ = file->message_type(24);
  static const int apply_family_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_req, svr_head_),
  };
  apply_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_req_descriptor_,
      apply_family_req::default_instance_,
      apply_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_req));
  apply_family_rsp_descriptor_ = file->message_type(25);
  static const int apply_family_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_rsp, family_id_),
  };
  apply_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_rsp_descriptor_,
      apply_family_rsp::default_instance_,
      apply_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_rsp));
  apply_family_rsp_result_descriptor_ = apply_family_rsp_descriptor_->enum_type(0);
  family_set_req_descriptor_ = file->message_type(26);
  static const int family_set_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_req, approval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_req, svr_head_),
  };
  family_set_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_set_req_descriptor_,
      family_set_req::default_instance_,
      family_set_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_set_req));
  family_set_rsp_descriptor_ = file->message_type(27);
  static const int family_set_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_rsp, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_rsp, approval_),
  };
  family_set_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_set_rsp_descriptor_,
      family_set_rsp::default_instance_,
      family_set_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_set_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_set_rsp));
  apply_family_list_req_descriptor_ = file->message_type(28);
  static const int apply_family_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_req, svr_head_),
  };
  apply_family_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_list_req_descriptor_,
      apply_family_list_req::default_instance_,
      apply_family_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_list_req));
  apply_family_list_rsp_descriptor_ = file->message_type(29);
  static const int apply_family_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_rsp, role_id_),
  };
  apply_family_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_list_rsp_descriptor_,
      apply_family_list_rsp::default_instance_,
      apply_family_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_list_rsp));
  approval_family_req_descriptor_ = file->message_type(30);
  static const int approval_family_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, svr_head_),
  };
  approval_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      approval_family_req_descriptor_,
      approval_family_req::default_instance_,
      approval_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(approval_family_req));
  approval_family_rsp_descriptor_ = file->message_type(31);
  static const int approval_family_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, sect_id_),
  };
  approval_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      approval_family_rsp_descriptor_,
      approval_family_rsp::default_instance_,
      approval_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(approval_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(approval_family_rsp));
  approval_family_rsp_result_descriptor_ = approval_family_rsp_descriptor_->enum_type(0);
  invite_family_req_descriptor_ = file->message_type(32);
  static const int invite_family_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_req, svr_head_),
  };
  invite_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_family_req_descriptor_,
      invite_family_req::default_instance_,
      invite_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_family_req));
  invite_family_rsp_descriptor_ = file->message_type(33);
  static const int invite_family_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_rsp, ret_),
  };
  invite_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_family_rsp_descriptor_,
      invite_family_rsp::default_instance_,
      invite_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_family_rsp));
  invite_family_rsp_result_descriptor_ = invite_family_rsp_descriptor_->enum_type(0);
  invite_family_list_req_descriptor_ = file->message_type(34);
  static const int invite_family_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_req, svr_head_),
  };
  invite_family_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_family_list_req_descriptor_,
      invite_family_list_req::default_instance_,
      invite_family_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_family_list_req));
  invite_family_info_descriptor_ = file->message_type(35);
  static const int invite_family_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_info, role_id_),
  };
  invite_family_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_family_info_descriptor_,
      invite_family_info::default_instance_,
      invite_family_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_family_info));
  invite_family_list_rsp_descriptor_ = file->message_type(36);
  static const int invite_family_list_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_rsp, ifi_),
  };
  invite_family_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_family_list_rsp_descriptor_,
      invite_family_list_rsp::default_instance_,
      invite_family_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_family_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_family_list_rsp));
  agree_family_req_descriptor_ = file->message_type(37);
  static const int agree_family_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_req, svr_head_),
  };
  agree_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agree_family_req_descriptor_,
      agree_family_req::default_instance_,
      agree_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agree_family_req));
  agree_family_rsp_descriptor_ = file->message_type(38);
  static const int agree_family_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, type_),
  };
  agree_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agree_family_rsp_descriptor_,
      agree_family_rsp::default_instance_,
      agree_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agree_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agree_family_rsp));
  agree_family_rsp_result_descriptor_ = agree_family_rsp_descriptor_->enum_type(0);
  modify_family_post_req_descriptor_ = file->message_type(39);
  static const int modify_family_post_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, yy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, svr_head_),
  };
  modify_family_post_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_family_post_req_descriptor_,
      modify_family_post_req::default_instance_,
      modify_family_post_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_family_post_req));
  modify_family_post_rsp_descriptor_ = file->message_type(40);
  static const int modify_family_post_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, yy_),
  };
  modify_family_post_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_family_post_rsp_descriptor_,
      modify_family_post_rsp::default_instance_,
      modify_family_post_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_post_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_family_post_rsp));
  modify_family_post_rsp_result_descriptor_ = modify_family_post_rsp_descriptor_->enum_type(0);
  disband_family_req_descriptor_ = file->message_type(41);
  static const int disband_family_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_req, svr_head_),
  };
  disband_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      disband_family_req_descriptor_,
      disband_family_req::default_instance_,
      disband_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(disband_family_req));
  disband_family_rsp_descriptor_ = file->message_type(42);
  static const int disband_family_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_rsp, family_id_),
  };
  disband_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      disband_family_rsp_descriptor_,
      disband_family_rsp::default_instance_,
      disband_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(disband_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(disband_family_rsp));
  disband_family_rsp_result_descriptor_ = disband_family_rsp_descriptor_->enum_type(0);
  family_self_req_descriptor_ = file->message_type(43);
  static const int family_self_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_req, svr_head_),
  };
  family_self_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_self_req_descriptor_,
      family_self_req::default_instance_,
      family_self_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_self_req));
  family_self_rsp_descriptor_ = file->message_type(44);
  static const int family_self_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, add_by_),
  };
  family_self_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_self_rsp_descriptor_,
      family_self_rsp::default_instance_,
      family_self_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_self_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_self_rsp));
  apply_family_list_self_req_descriptor_ = file->message_type(45);
  static const int apply_family_list_self_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_req, svr_head_),
  };
  apply_family_list_self_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_list_self_req_descriptor_,
      apply_family_list_self_req::default_instance_,
      apply_family_list_self_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_list_self_req));
  apply_family_list_self_rsp_descriptor_ = file->message_type(46);
  static const int apply_family_list_self_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_rsp, time_),
  };
  apply_family_list_self_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_family_list_self_rsp_descriptor_,
      apply_family_list_self_rsp::default_instance_,
      apply_family_list_self_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_family_list_self_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_family_list_self_rsp));
  family_member_list_req_descriptor_ = file->message_type(47);
  static const int family_member_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_req, svr_head_),
  };
  family_member_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_member_list_req_descriptor_,
      family_member_list_req::default_instance_,
      family_member_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_member_list_req));
  family_member_info_descriptor_ = file->message_type(48);
  static const int family_member_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, total_donate_),
  };
  family_member_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_member_info_descriptor_,
      family_member_info::default_instance_,
      family_member_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_member_info));
  family_member_list_rsp_descriptor_ = file->message_type(49);
  static const int family_member_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_rsp, fmi_),
  };
  family_member_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_member_list_rsp_descriptor_,
      family_member_list_rsp::default_instance_,
      family_member_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_member_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_member_list_rsp));
  modify_family_member_req_descriptor_ = file->message_type(50);
  static const int modify_family_member_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, svr_head_),
  };
  modify_family_member_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_family_member_req_descriptor_,
      modify_family_member_req::default_instance_,
      modify_family_member_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_family_member_req));
  modify_family_member_rsp_descriptor_ = file->message_type(51);
  static const int modify_family_member_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, type_),
  };
  modify_family_member_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_family_member_rsp_descriptor_,
      modify_family_member_rsp::default_instance_,
      modify_family_member_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_family_member_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_family_member_rsp));
  modify_family_member_rsp_result_descriptor_ = modify_family_member_rsp_descriptor_->enum_type(0);
  secede_family_req_descriptor_ = file->message_type(52);
  static const int secede_family_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_req, svr_head_),
  };
  secede_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secede_family_req_descriptor_,
      secede_family_req::default_instance_,
      secede_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secede_family_req));
  secede_family_rsp_descriptor_ = file->message_type(53);
  static const int secede_family_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_rsp, result_type_),
  };
  secede_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secede_family_rsp_descriptor_,
      secede_family_rsp::default_instance_,
      secede_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secede_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secede_family_rsp));
  expel_member_req_descriptor_ = file->message_type(54);
  static const int expel_member_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_req, evictee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_req, svr_head_),
  };
  expel_member_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      expel_member_req_descriptor_,
      expel_member_req::default_instance_,
      expel_member_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(expel_member_req));
  expel_member_rsp_descriptor_ = file->message_type(55);
  static const int expel_member_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, evictee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, result_type_),
  };
  expel_member_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      expel_member_rsp_descriptor_,
      expel_member_rsp::default_instance_,
      expel_member_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expel_member_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(expel_member_rsp));
  upgrade_family_req_descriptor_ = file->message_type(56);
  static const int upgrade_family_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_req, svr_head_),
  };
  upgrade_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_family_req_descriptor_,
      upgrade_family_req::default_instance_,
      upgrade_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_family_req));
  upgrade_family_rsp_descriptor_ = file->message_type(57);
  static const int upgrade_family_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_rsp, info_),
  };
  upgrade_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upgrade_family_rsp_descriptor_,
      upgrade_family_rsp::default_instance_,
      upgrade_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upgrade_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upgrade_family_rsp));
  upgrade_family_rsp_result_descriptor_ = upgrade_family_rsp_descriptor_->enum_type(0);
  donate_family_req_descriptor_ = file->message_type(58);
  static const int donate_family_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, svr_head_),
  };
  donate_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      donate_family_req_descriptor_,
      donate_family_req::default_instance_,
      donate_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(donate_family_req));
  donate_family_rsp_descriptor_ = file->message_type(59);
  static const int donate_family_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, total_donate_),
  };
  donate_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      donate_family_rsp_descriptor_,
      donate_family_rsp::default_instance_,
      donate_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(donate_family_rsp));
  donate_family_rsp_result_descriptor_ = donate_family_rsp_descriptor_->enum_type(0);
  donate_list_req_descriptor_ = file->message_type(60);
  static const int donate_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_req, svr_head_),
  };
  donate_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      donate_list_req_descriptor_,
      donate_list_req::default_instance_,
      donate_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(donate_list_req));
  donate_info_descriptor_ = file->message_type(61);
  static const int donate_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, dragon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, tiger_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, rosefinch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, tortoise_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, money_),
  };
  donate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      donate_info_descriptor_,
      donate_info::default_instance_,
      donate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(donate_info));
  donate_list_rsp_descriptor_ = file->message_type(62);
  static const int donate_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_rsp, info_),
  };
  donate_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      donate_list_rsp_descriptor_,
      donate_list_rsp::default_instance_,
      donate_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(donate_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(donate_list_rsp));
  family_log_req_descriptor_ = file->message_type(63);
  static const int family_log_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_req, svr_head_),
  };
  family_log_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_log_req_descriptor_,
      family_log_req::default_instance_,
      family_log_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_log_req));
  family_log_info_descriptor_ = file->message_type(64);
  static const int family_log_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, family_name_),
  };
  family_log_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_log_info_descriptor_,
      family_log_info::default_instance_,
      family_log_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_log_info));
  family_log_rsp_descriptor_ = file->message_type(65);
  static const int family_log_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_rsp, fli_),
  };
  family_log_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_log_rsp_descriptor_,
      family_log_rsp::default_instance_,
      family_log_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_log_rsp));
  family_log_update_descriptor_ = file->message_type(66);
  static const int family_log_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_update, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_update, fli_),
  };
  family_log_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_log_update_descriptor_,
      family_log_update::default_instance_,
      family_log_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_log_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_log_update));
  family_record_req_descriptor_ = file->message_type(67);
  static const int family_record_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_req, svr_head_),
  };
  family_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_record_req_descriptor_,
      family_record_req::default_instance_,
      family_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_record_req));
  family_record_info_descriptor_ = file->message_type(68);
  static const int family_record_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, kill_chief_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, kill_vice_chief_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, kill_elder_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, kill_elite_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, kill_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, dead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, be_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, be_kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, type_),
  };
  family_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_record_info_descriptor_,
      family_record_info::default_instance_,
      family_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_record_info));
  family_record_rsp_descriptor_ = file->message_type(69);
  static const int family_record_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_rsp, fri_),
  };
  family_record_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_record_rsp_descriptor_,
      family_record_rsp::default_instance_,
      family_record_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_record_rsp));
  family_record_update_descriptor_ = file->message_type(70);
  static const int family_record_update_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, killer_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, slain_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, slain_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, slain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, svr_head_),
  };
  family_record_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_record_update_descriptor_,
      family_record_update::default_instance_,
      family_record_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_record_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_record_update));
  change_family_flag_id_req_descriptor_ = file->message_type(71);
  static const int change_family_flag_id_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_req, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_req, svr_head_),
  };
  change_family_flag_id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_family_flag_id_req_descriptor_,
      change_family_flag_id_req::default_instance_,
      change_family_flag_id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_family_flag_id_req));
  change_family_flag_id_rsp_descriptor_ = file->message_type(72);
  static const int change_family_flag_id_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_rsp, info_),
  };
  change_family_flag_id_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_family_flag_id_rsp_descriptor_,
      change_family_flag_id_rsp::default_instance_,
      change_family_flag_id_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_id_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_family_flag_id_rsp));
  change_family_flag_name_req_descriptor_ = file->message_type(73);
  static const int change_family_flag_name_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_req, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_req, svr_head_),
  };
  change_family_flag_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_family_flag_name_req_descriptor_,
      change_family_flag_name_req::default_instance_,
      change_family_flag_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_family_flag_name_req));
  change_family_flag_name_rsp_descriptor_ = file->message_type(74);
  static const int change_family_flag_name_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_rsp, info_),
  };
  change_family_flag_name_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_family_flag_name_rsp_descriptor_,
      change_family_flag_name_rsp::default_instance_,
      change_family_flag_name_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_family_flag_name_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_family_flag_name_rsp));
  impeach_chief_req_descriptor_ = file->message_type(75);
  static const int impeach_chief_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_req, svr_head_),
  };
  impeach_chief_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      impeach_chief_req_descriptor_,
      impeach_chief_req::default_instance_,
      impeach_chief_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(impeach_chief_req));
  impeach_chief_rsp_descriptor_ = file->message_type(76);
  static const int impeach_chief_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_rsp, info_),
  };
  impeach_chief_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      impeach_chief_rsp_descriptor_,
      impeach_chief_rsp::default_instance_,
      impeach_chief_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(impeach_chief_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(impeach_chief_rsp));
  ally_family_req_descriptor_ = file->message_type(77);
  static const int ally_family_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, target_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, svr_head_),
  };
  ally_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ally_family_req_descriptor_,
      ally_family_req::default_instance_,
      ally_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ally_family_req));
  ally_family_rsp_descriptor_ = file->message_type(78);
  static const int ally_family_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_rsp, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_rsp, target_family_id_),
  };
  ally_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ally_family_rsp_descriptor_,
      ally_family_rsp::default_instance_,
      ally_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ally_family_rsp));
  remove_foreign_req_descriptor_ = file->message_type(79);
  static const int remove_foreign_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_req, target_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_req, svr_head_),
  };
  remove_foreign_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      remove_foreign_req_descriptor_,
      remove_foreign_req::default_instance_,
      remove_foreign_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(remove_foreign_req));
  remove_foreign_rsp_descriptor_ = file->message_type(80);
  static const int remove_foreign_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_rsp, src_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_rsp, target_family_id_),
  };
  remove_foreign_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      remove_foreign_rsp_descriptor_,
      remove_foreign_rsp::default_instance_,
      remove_foreign_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_foreign_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(remove_foreign_rsp));
  ally_family_list_req_descriptor_ = file->message_type(81);
  static const int ally_family_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_req, svr_head_),
  };
  ally_family_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ally_family_list_req_descriptor_,
      ally_family_list_req::default_instance_,
      ally_family_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ally_family_list_req));
  ally_info_descriptor_ = file->message_type(82);
  static const int ally_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_info, camp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_info, family_id_),
  };
  ally_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ally_info_descriptor_,
      ally_info::default_instance_,
      ally_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ally_info));
  ally_family_list_rsp_descriptor_ = file->message_type(83);
  static const int ally_family_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_rsp, info_),
  };
  ally_family_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ally_family_list_rsp_descriptor_,
      ally_family_list_rsp::default_instance_,
      ally_family_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ally_family_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ally_family_list_rsp));
  activity_opt_rsp_descriptor_ = file->message_type(84);
  static const int activity_opt_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_opt_rsp, result_type_),
  };
  activity_opt_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_opt_rsp_descriptor_,
      activity_opt_rsp::default_instance_,
      activity_opt_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_opt_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_opt_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_opt_rsp));
  load_friend_family_req_descriptor_ = file->message_type(85);
  static const int load_friend_family_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_req, role_id_),
  };
  load_friend_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_friend_family_req_descriptor_,
      load_friend_family_req::default_instance_,
      load_friend_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_friend_family_req));
  load_friend_family_rsp_descriptor_ = file->message_type(86);
  static const int load_friend_family_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_rsp, id_),
  };
  load_friend_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      load_friend_family_rsp_descriptor_,
      load_friend_family_rsp::default_instance_,
      load_friend_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(load_friend_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(load_friend_family_rsp));
  update_friend_family_rsp_descriptor_ = file->message_type(87);
  static const int update_friend_family_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_friend_family_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_friend_family_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_friend_family_rsp, family_id_),
  };
  update_friend_family_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_friend_family_rsp_descriptor_,
      update_friend_family_rsp::default_instance_,
      update_friend_family_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_friend_family_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_friend_family_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_friend_family_rsp));
  family_relation_list_descriptor_ = file->message_type(88);
  static const int family_relation_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_relation_list, alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_relation_list, enemy_),
  };
  family_relation_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_relation_list_descriptor_,
      family_relation_list::default_instance_,
      family_relation_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_relation_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_relation_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_relation_list));
  update_family_relation_descriptor_ = file->message_type(89);
  static const int update_family_relation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_relation, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_relation, re_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_relation, id_),
  };
  update_family_relation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_family_relation_descriptor_,
      update_family_relation::default_instance_,
      update_family_relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_relation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_family_relation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_family_relation));
  family_title_info_descriptor_ = file->message_type(90);
  static const int family_title_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_info, name_),
  };
  family_title_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_title_info_descriptor_,
      family_title_info::default_instance_,
      family_title_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_title_info));
  family_title_list_rsp_descriptor_ = file->message_type(91);
  static const int family_title_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_list_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_list_rsp, info_),
  };
  family_title_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_title_list_rsp_descriptor_,
      family_title_list_rsp::default_instance_,
      family_title_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_title_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_title_list_rsp));
  SECEDE_FAMILY_TYPE_E_descriptor_ = file->enum_type(0);
  EXPEL_MEMBER_RESULT_E_descriptor_ = file->enum_type(1);
  DONATE_TYPE_E_descriptor_ = file->enum_type(2);
  FAMILY_LOG_TYPE_descriptor_ = file->enum_type(3);
  OPT_CHANGE_FLAG_NAME_RESULT_descriptor_ = file->enum_type(4);
  IMPEACH_RESULT_E_descriptor_ = file->enum_type(5);
  OPT_FORIGN_TYPE_descriptor_ = file->enum_type(6);
  UPTATE_TYPE_E_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2efamily_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_info_descriptor_, &family_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_diplomacy_info_descriptor_, &family_diplomacy_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_create_famliy_consume_descriptor_, &set_create_famliy_consume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_donate_consume_descriptor_, &set_donate_consume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_family_req_descriptor_, &set_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_family_money_descriptor_, &set_family_money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secede_family_to_center_descriptor_, &secede_family_to_center::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secede_family_game_descriptor_, &secede_family_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_family_data_from_center_descriptor_, &update_family_data_from_center::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_info_req_descriptor_, &family_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_info_rsp_descriptor_, &family_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_family_power_descriptor_, &modify_family_power::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_player_power_to_smy_descriptor_, &update_player_power_to_smy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notive_center_donate_sucess_descriptor_, &notive_center_donate_sucess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_money_mod_req_descriptor_, &family_money_mod_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_simple_info_descriptor_, &family_simple_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_money_query_req_descriptor_, &family_money_query_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_money_query_rsp_descriptor_, &family_money_query_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_list_req_descriptor_, &family_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_list_rsp_descriptor_, &family_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_family_req_descriptor_, &create_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_family_rsp_descriptor_, &create_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_req_descriptor_, &family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_rsp_descriptor_, &family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_req_descriptor_, &apply_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_rsp_descriptor_, &apply_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_set_req_descriptor_, &family_set_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_set_rsp_descriptor_, &family_set_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_list_req_descriptor_, &apply_family_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_list_rsp_descriptor_, &apply_family_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    approval_family_req_descriptor_, &approval_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    approval_family_rsp_descriptor_, &approval_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_family_req_descriptor_, &invite_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_family_rsp_descriptor_, &invite_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_family_list_req_descriptor_, &invite_family_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_family_info_descriptor_, &invite_family_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_family_list_rsp_descriptor_, &invite_family_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agree_family_req_descriptor_, &agree_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agree_family_rsp_descriptor_, &agree_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_family_post_req_descriptor_, &modify_family_post_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_family_post_rsp_descriptor_, &modify_family_post_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    disband_family_req_descriptor_, &disband_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    disband_family_rsp_descriptor_, &disband_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_self_req_descriptor_, &family_self_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_self_rsp_descriptor_, &family_self_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_list_self_req_descriptor_, &apply_family_list_self_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_family_list_self_rsp_descriptor_, &apply_family_list_self_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_member_list_req_descriptor_, &family_member_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_member_info_descriptor_, &family_member_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_member_list_rsp_descriptor_, &family_member_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_family_member_req_descriptor_, &modify_family_member_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_family_member_rsp_descriptor_, &modify_family_member_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secede_family_req_descriptor_, &secede_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secede_family_rsp_descriptor_, &secede_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    expel_member_req_descriptor_, &expel_member_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    expel_member_rsp_descriptor_, &expel_member_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_family_req_descriptor_, &upgrade_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upgrade_family_rsp_descriptor_, &upgrade_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    donate_family_req_descriptor_, &donate_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    donate_family_rsp_descriptor_, &donate_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    donate_list_req_descriptor_, &donate_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    donate_info_descriptor_, &donate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    donate_list_rsp_descriptor_, &donate_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_log_req_descriptor_, &family_log_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_log_info_descriptor_, &family_log_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_log_rsp_descriptor_, &family_log_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_log_update_descriptor_, &family_log_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_record_req_descriptor_, &family_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_record_info_descriptor_, &family_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_record_rsp_descriptor_, &family_record_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_record_update_descriptor_, &family_record_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_family_flag_id_req_descriptor_, &change_family_flag_id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_family_flag_id_rsp_descriptor_, &change_family_flag_id_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_family_flag_name_req_descriptor_, &change_family_flag_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_family_flag_name_rsp_descriptor_, &change_family_flag_name_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    impeach_chief_req_descriptor_, &impeach_chief_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    impeach_chief_rsp_descriptor_, &impeach_chief_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ally_family_req_descriptor_, &ally_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ally_family_rsp_descriptor_, &ally_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    remove_foreign_req_descriptor_, &remove_foreign_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    remove_foreign_rsp_descriptor_, &remove_foreign_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ally_family_list_req_descriptor_, &ally_family_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ally_info_descriptor_, &ally_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ally_family_list_rsp_descriptor_, &ally_family_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_opt_rsp_descriptor_, &activity_opt_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_friend_family_req_descriptor_, &load_friend_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    load_friend_family_rsp_descriptor_, &load_friend_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_friend_family_rsp_descriptor_, &update_friend_family_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_relation_list_descriptor_, &family_relation_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_family_relation_descriptor_, &update_family_relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_title_info_descriptor_, &family_title_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_title_list_rsp_descriptor_, &family_title_list_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2efamily_2eproto() {
  delete family_info::default_instance_;
  delete family_info_reflection_;
  delete family_diplomacy_info::default_instance_;
  delete family_diplomacy_info_reflection_;
  delete set_create_famliy_consume::default_instance_;
  delete set_create_famliy_consume_reflection_;
  delete set_donate_consume::default_instance_;
  delete set_donate_consume_reflection_;
  delete set_family_req::default_instance_;
  delete set_family_req_reflection_;
  delete set_family_money::default_instance_;
  delete set_family_money_reflection_;
  delete secede_family_to_center::default_instance_;
  delete secede_family_to_center_reflection_;
  delete secede_family_game::default_instance_;
  delete secede_family_game_reflection_;
  delete update_family_data_from_center::default_instance_;
  delete update_family_data_from_center_reflection_;
  delete family_info_req::default_instance_;
  delete family_info_req_reflection_;
  delete family_info_rsp::default_instance_;
  delete family_info_rsp_reflection_;
  delete modify_family_power::default_instance_;
  delete modify_family_power_reflection_;
  delete update_player_power_to_smy::default_instance_;
  delete update_player_power_to_smy_reflection_;
  delete notive_center_donate_sucess::default_instance_;
  delete notive_center_donate_sucess_reflection_;
  delete family_money_mod_req::default_instance_;
  delete family_money_mod_req_reflection_;
  delete family_simple_info::default_instance_;
  delete family_simple_info_reflection_;
  delete family_money_query_req::default_instance_;
  delete family_money_query_req_reflection_;
  delete family_money_query_rsp::default_instance_;
  delete family_money_query_rsp_reflection_;
  delete family_list_req::default_instance_;
  delete family_list_req_reflection_;
  delete family_list_rsp::default_instance_;
  delete family_list_rsp_reflection_;
  delete create_family_req::default_instance_;
  delete create_family_req_reflection_;
  delete create_family_rsp::default_instance_;
  delete create_family_rsp_reflection_;
  delete family_req::default_instance_;
  delete family_req_reflection_;
  delete family_rsp::default_instance_;
  delete family_rsp_reflection_;
  delete apply_family_req::default_instance_;
  delete apply_family_req_reflection_;
  delete apply_family_rsp::default_instance_;
  delete apply_family_rsp_reflection_;
  delete family_set_req::default_instance_;
  delete family_set_req_reflection_;
  delete family_set_rsp::default_instance_;
  delete family_set_rsp_reflection_;
  delete apply_family_list_req::default_instance_;
  delete apply_family_list_req_reflection_;
  delete apply_family_list_rsp::default_instance_;
  delete apply_family_list_rsp_reflection_;
  delete approval_family_req::default_instance_;
  delete approval_family_req_reflection_;
  delete approval_family_rsp::default_instance_;
  delete approval_family_rsp_reflection_;
  delete invite_family_req::default_instance_;
  delete invite_family_req_reflection_;
  delete invite_family_rsp::default_instance_;
  delete invite_family_rsp_reflection_;
  delete invite_family_list_req::default_instance_;
  delete invite_family_list_req_reflection_;
  delete invite_family_info::default_instance_;
  delete invite_family_info_reflection_;
  delete invite_family_list_rsp::default_instance_;
  delete invite_family_list_rsp_reflection_;
  delete agree_family_req::default_instance_;
  delete agree_family_req_reflection_;
  delete agree_family_rsp::default_instance_;
  delete agree_family_rsp_reflection_;
  delete modify_family_post_req::default_instance_;
  delete modify_family_post_req_reflection_;
  delete modify_family_post_rsp::default_instance_;
  delete modify_family_post_rsp_reflection_;
  delete disband_family_req::default_instance_;
  delete disband_family_req_reflection_;
  delete disband_family_rsp::default_instance_;
  delete disband_family_rsp_reflection_;
  delete family_self_req::default_instance_;
  delete family_self_req_reflection_;
  delete family_self_rsp::default_instance_;
  delete family_self_rsp_reflection_;
  delete apply_family_list_self_req::default_instance_;
  delete apply_family_list_self_req_reflection_;
  delete apply_family_list_self_rsp::default_instance_;
  delete apply_family_list_self_rsp_reflection_;
  delete family_member_list_req::default_instance_;
  delete family_member_list_req_reflection_;
  delete family_member_info::default_instance_;
  delete family_member_info_reflection_;
  delete family_member_list_rsp::default_instance_;
  delete family_member_list_rsp_reflection_;
  delete modify_family_member_req::default_instance_;
  delete modify_family_member_req_reflection_;
  delete modify_family_member_rsp::default_instance_;
  delete modify_family_member_rsp_reflection_;
  delete secede_family_req::default_instance_;
  delete secede_family_req_reflection_;
  delete secede_family_rsp::default_instance_;
  delete secede_family_rsp_reflection_;
  delete expel_member_req::default_instance_;
  delete expel_member_req_reflection_;
  delete expel_member_rsp::default_instance_;
  delete expel_member_rsp_reflection_;
  delete upgrade_family_req::default_instance_;
  delete upgrade_family_req_reflection_;
  delete upgrade_family_rsp::default_instance_;
  delete upgrade_family_rsp_reflection_;
  delete donate_family_req::default_instance_;
  delete donate_family_req_reflection_;
  delete donate_family_rsp::default_instance_;
  delete donate_family_rsp_reflection_;
  delete donate_list_req::default_instance_;
  delete donate_list_req_reflection_;
  delete donate_info::default_instance_;
  delete donate_info_reflection_;
  delete donate_list_rsp::default_instance_;
  delete donate_list_rsp_reflection_;
  delete family_log_req::default_instance_;
  delete family_log_req_reflection_;
  delete family_log_info::default_instance_;
  delete family_log_info_reflection_;
  delete family_log_rsp::default_instance_;
  delete family_log_rsp_reflection_;
  delete family_log_update::default_instance_;
  delete family_log_update_reflection_;
  delete family_record_req::default_instance_;
  delete family_record_req_reflection_;
  delete family_record_info::default_instance_;
  delete family_record_info_reflection_;
  delete family_record_rsp::default_instance_;
  delete family_record_rsp_reflection_;
  delete family_record_update::default_instance_;
  delete family_record_update_reflection_;
  delete change_family_flag_id_req::default_instance_;
  delete change_family_flag_id_req_reflection_;
  delete change_family_flag_id_rsp::default_instance_;
  delete change_family_flag_id_rsp_reflection_;
  delete change_family_flag_name_req::default_instance_;
  delete change_family_flag_name_req_reflection_;
  delete change_family_flag_name_rsp::default_instance_;
  delete change_family_flag_name_rsp_reflection_;
  delete impeach_chief_req::default_instance_;
  delete impeach_chief_req_reflection_;
  delete impeach_chief_rsp::default_instance_;
  delete impeach_chief_rsp_reflection_;
  delete ally_family_req::default_instance_;
  delete ally_family_req_reflection_;
  delete ally_family_rsp::default_instance_;
  delete ally_family_rsp_reflection_;
  delete remove_foreign_req::default_instance_;
  delete remove_foreign_req_reflection_;
  delete remove_foreign_rsp::default_instance_;
  delete remove_foreign_rsp_reflection_;
  delete ally_family_list_req::default_instance_;
  delete ally_family_list_req_reflection_;
  delete ally_info::default_instance_;
  delete ally_info_reflection_;
  delete ally_family_list_rsp::default_instance_;
  delete ally_family_list_rsp_reflection_;
  delete activity_opt_rsp::default_instance_;
  delete activity_opt_rsp_reflection_;
  delete load_friend_family_req::default_instance_;
  delete load_friend_family_req_reflection_;
  delete load_friend_family_rsp::default_instance_;
  delete load_friend_family_rsp_reflection_;
  delete update_friend_family_rsp::default_instance_;
  delete update_friend_family_rsp_reflection_;
  delete family_relation_list::default_instance_;
  delete family_relation_list_reflection_;
  delete update_family_relation::default_instance_;
  delete update_family_relation_reflection_;
  delete family_title_info::default_instance_;
  delete family_title_info_reflection_;
  delete family_title_list_rsp::default_instance_;
  delete family_title_list_rsp_reflection_;
}

void protobuf_AddDesc_client_2efamily_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.family.proto\022\006client\032\021client.co"
    "mm.proto\"\245\003\n\013family_info\022\n\n\002id\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\t\022\017\n\007flag_id\030\003 \002(\r\022\021\n\tflag_name"
    "\030\004 \002(\t\022\013\n\003lvl\030\005 \002(\r\022\020\n\010chief_id\030\006 \002(\r\022\022\n"
    "\nchief_name\030\007 \002(\t\022\021\n\tdeputy_id\030\010 \002(\r\022\014\n\004"
    "post\030\t \002(\t\022\r\n\005money\030\n \002(\r\022\r\n\005power\030\013 \002(\r"
    "\022\016\n\006domain\030\014 \002(\r\022\023\n\004king\030\r \002(\010:\005false\022\017\n"
    "\007emperor\030\016 \002(\010\022\026\n\016cur_member_num\030\017 \002(\r\022\020"
    "\n\010approval\030\020 \002(\010\022\025\n\rleader_online\030\021 \002(\r\022"
    "\023\n\013create_time\030\022 \002(\r\022\024\n\014dragon_count\030\023 \002"
    "(\r\022\023\n\013tiger_count\030\024 \002(\r\022\027\n\017rosefinch_cou"
    "nt\030\025 \002(\r\022\026\n\016tortoise_count\030\026 \002(\r\"h\n\025fami"
    "ly_diplomacy_info\022\021\n\tfamily_id\030\001 \002(\r\022\021\n\t"
    "target_id\030\002 \002(\r\022\025\n\rrelation_type\030\003 \002(\r\022\022"
    "\n\napply_time\030\004 \001(\r\"\250\001\n\031set_create_famliy"
    "_consume\022\014\n\004type\030\001 \002(\r\022<\n\nis_succeed\030\002 \002"
    "(\0162(.client.set_create_famliy_consume.re"
    "sult\022\017\n\007role_id\030\003 \002(\r\".\n\006result\022\022\n\016RESUL"
    "T_SUCCESS\020\001\022\020\n\014RESULT_FAILD\020\002\"\217\001\n\022set_do"
    "nate_consume\022\014\n\004type\030\001 \002(\r\022\r\n\005count\030\002 \002("
    "\r\022\022\n\nis_success\030\003 \002(\010\022\023\n\013contr_value\030\004 \002"
    "(\r\022\017\n\007role_id\030\005 \002(\r\022\023\n\013total_value\030\006 \002(\r"
    "\022\r\n\005money\030\007 \002(\r\"i\n\016set_family_req\022\021\n\tfam"
    "ily_id\030\001 \002(\r\022\r\n\005title\030\002 \002(\r\022\017\n\007role_id\030\003"
    " \002(\r\022\024\n\014family_level\030\004 \002(\r\022\016\n\006donate\030\005 \001"
    "(\r\"S\n\020set_family_money\022\017\n\007role_id\030\001 \002(\r\022"
    "\r\n\005money\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\021\n\tserver_i"
    "d\030\004 \002(\r\"P\n\027secede_family_to_center\022\021\n\tfa"
    "mily_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\021\n\tserver"
    "_id\030\003 \002(\r\"M\n\022secede_family_game\022\017\n\007role_"
    "id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"D\n\036update_family_data_from_cent"
    "er\022\021\n\tfamily_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\"\""
    "\n\017family_info_req\022\017\n\007role_id\030\001 \002(\r\"4\n\017fa"
    "mily_info_rsp\022!\n\004info\030\001 \002(\0132\023.client.fam"
    "ily_info\"L\n\023modify_family_power\022\017\n\007role_"
    "id\030\001 \002(\r\022\021\n\tfamily_id\030\002 \002(\r\022\021\n\tnew_power"
    "\030\003 \002(\r\"-\n\032update_player_power_to_smy\022\017\n\007"
    "role_id\030\001 \002(\r\"n\n\033notive_center_donate_su"
    "cess\022\017\n\007role_id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\024\n\014t"
    "otal_donate\030\003 \002(\r\022\013\n\003ret\030\004 \002(\r\022\r\n\005money\030"
    "\005 \002(\r\"8\n\024family_money_mod_req\022\021\n\tfamily_"
    "id\030\001 \002(\r\022\r\n\005money\030\002 \002(\r\"\203\001\n\022family_simpl"
    "e_info\022\021\n\tfamily_id\030\001 \002(\r\022\023\n\013family_name"
    "\030\002 \002(\t\022\017\n\007flag_id\030\003 \002(\r\022\021\n\tuser_name\030\004 \002"
    "(\t\022\017\n\007role_id\030\005 \002(\r\022\020\n\010alliance\030\006 \003(\r\"M\n"
    "\026family_money_query_req\022\021\n\tfamily_id\030\001 \002"
    "(\r\022\017\n\007role_id\030\002 \002(\r\022\017\n\007inst_id\030\003 \002(\004\"\\\n\026"
    "family_money_query_rsp\022\021\n\tfamily_id\030\001 \002("
    "\r\022\r\n\005money\030\002 \002(\005\022\017\n\007role_id\030\003 \002(\r\022\017\n\007ins"
    "t_id\030\004 \002(\004\"K\n\017family_list_req\022\020\n\010unixtim"
    "e\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"I\n\017family_list_rsp\022\021\n\tlist_type\030"
    "\001 \002(\r\022#\n\006family\030\002 \003(\0132\023.client.family_in"
    "fo\"\304\001\n\021create_family_req\022+\n\004type\030\001 \002(\0162\035"
    ".client.create_family_req.use\022\014\n\004name\030\002 "
    "\002(\t\022\017\n\007flag_id\030\003 \002(\r\022\021\n\tflag_name\030\004 \002(\t\022"
    "&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\""
    "(\n\003use\022\n\n\006copper\020\001\022\n\n\006silver\020\002\022\t\n\005token\020"
    "\003\"\346\001\n\021create_family_rsp\022-\n\003ret\030\001 \002(\0162 .c"
    "lient.create_family_rsp.result\022\021\n\tfamily"
    "_id\030\002 \001(\r\"\216\001\n\006result\022\013\n\007success\020\000\022\020\n\014cop"
    "per_limit\020\001\022\020\n\014silver_limit\020\002\022\017\n\013token_l"
    "imit\020\004\022\016\n\nname_limit\020\010\022\016\n\nflag_limit\020\020\022\016"
    "\n\nhave_limit\020 \022\022\n\016activity_limit\020@\"Y\n\nfa"
    "mily_req\022\021\n\tfamily_id\030\001 \003(\r\022\020\n\010scene_id\030"
    "\002 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"-\n\nfamily_rsp\022\037\n\002fi\030\001 \003(\0132\023.client"
    ".family_info\"M\n\020apply_family_req\022\021\n\tfami"
    "ly_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"\363\001\n\020apply_family_rsp\022,\n\003ret\030"
    "\001 \002(\0162\037.client.apply_family_rsp.result\022\021"
    "\n\tfamily_id\030\002 \002(\r\"\235\001\n\006result\022\013\n\007success\020"
    "\000\022\r\n\tlvl_limit\020\001\022\017\n\013full_family\020\002\022\017\n\013app"
    "ly_count\020\004\022\016\n\nnot_family\020\010\022\014\n\010time_out\020\020"
    "\022\022\n\016leader_offline\020 \022\017\n\013have_family\020@\022\022\n"
    "\ralready_apply\020\200\001\"]\n\016family_set_req\022\021\n\tf"
    "amily_id\030\001 \002(\r\022\020\n\010approval\030\002 \002(\r\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"6\n\016fami"
    "ly_set_rsp\022\022\n\nis_success\030\001 \002(\r\022\020\n\010approv"
    "al\030\002 \001(\r\"R\n\025apply_family_list_req\022\021\n\tfam"
    "ily_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\";\n\025apply_family_list_rsp\022\021\n"
    "\tfamily_id\030\001 \002(\r\022\017\n\007role_id\030\002 \003(\r\"o\n\023app"
    "roval_family_req\022\021\n\tfamily_id\030\001 \002(\r\022\017\n\007r"
    "ole_id\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"\363\001\n\023approval_"
    "family_rsp\022/\n\003ret\030\001 \002(\0162\".client.approva"
    "l_family_rsp.result\022\021\n\tfamily_id\030\002 \002(\r\022\017"
    "\n\007role_id\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\022\017\n\007sect_id"
    "\030\005 \001(\r\"h\n\006result\022\013\n\007success\020\000\022\017\n\013permiss"
    "ions\020\001\022\017\n\013full_family\020\002\022\r\n\tpass_join\020\003\022\017"
    "\n\013reject_join\020\004\022\017\n\013have_family\020\010\"_\n\021invi"
    "te_family_req\022\021\n\tfamily_id\030\001 \002(\r\022\017\n\007role"
    "_id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.se"
    "rver_head\"\316\001\n\021invite_family_rsp\022\021\n\tfamil"
    "y_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022-\n\003ret\030\003 \002(\016"
    "2 .client.invite_family_rsp.result\"f\n\006re"
    "sult\022\013\n\007success\020\000\022\017\n\013null_family\020\001\022\016\n\nno"
    "t_online\020\002\022\r\n\tlvl_limit\020\004\022\016\n\nhas_family\020"
    "\010\022\017\n\013full_family\020\020\"R\n\026invite_family_list"
    "_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"8\n\022invite_family_"
    "info\022\021\n\tfamily_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r"
    "\"A\n\026invite_family_list_rsp\022\'\n\003ifi\030\001 \003(\0132"
    "\032.client.invite_family_info\"[\n\020agree_fam"
    "ily_req\022\021\n\tfamily_id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r"
    "\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head"
    "\"\252\001\n\020agree_family_rsp\022,\n\003ret\030\001 \002(\0162\037.cli"
    "ent.agree_family_rsp.result\022\021\n\tfamily_id"
    "\030\002 \002(\r\022\017\n\007role_id\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\"6\n"
    "\006result\022\013\n\007success\020\000\022\016\n\nhas_family\020\001\022\017\n\013"
    "full_family\020\002\"y\n\026modify_family_post_req\022"
    "\021\n\tfamily_id\030\001 \002(\r\022\014\n\004post\030\002 \001(\t\022\n\n\002qq\030\003"
    " \001(\r\022\n\n\002yy\030\004 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cl"
    "ient.server_head\"\273\001\n\026modify_family_post_"
    "rsp\0222\n\003ret\030\001 \002(\0162%.client.modify_family_"
    "post_rsp.result\022\021\n\tfamily_id\030\002 \002(\r\022\014\n\004po"
    "st\030\003 \001(\t\022\n\n\002qq\030\004 \001(\r\022\n\n\002yy\030\005 \001(\r\"4\n\006resu"
    "lt\022\013\n\007success\020\000\022\017\n\013permissions\020\001\022\014\n\010too_"
    "long\020\002\"O\n\022disband_family_req\022\021\n\tfamily_i"
    "d\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"\247\001\n\022disband_family_rsp\022.\n\003ret\030\001 "
    "\002(\0162!.client.disband_family_rsp.result\022\021"
    "\n\tfamily_id\030\002 \002(\r\"N\n\006result\022\013\n\007success\020\000"
    "\022\017\n\013permissions\020\001\022\021\n\rfamily_id_err\020\002\022\023\n\017"
    "family_has_king\020\004\"K\n\017family_self_req\022\020\n\010"
    "unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clie"
    "nt.server_head\"W\n\017family_self_rsp\022\021\n\tfam"
    "ily_id\030\001 \002(\r\022\023\n\013permissions\030\002 \002(\r\022\014\n\004tim"
    "e\030\003 \002(\r\022\016\n\006add_by\030\004 \002(\r\"V\n\032apply_family_"
    "list_self_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"=\n\032apply"
    "_family_list_self_rsp\022\021\n\tfamily_id\030\001 \003(\r"
    "\022\014\n\004time\030\002 \003(\r\"S\n\026family_member_list_req"
    "\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"Y\n\022family_member_inf"
    "o\022\n\n\002id\030\001 \002(\r\022\023\n\013permissions\030\002 \002(\r\022\014\n\004ti"
    "me\030\003 \002(\r\022\024\n\014total_donate\030\004 \001(\r\"T\n\026family"
    "_member_list_rsp\022\021\n\tfamily_id\030\001 \002(\r\022\'\n\003f"
    "mi\030\002 \003(\0132\032.client.family_member_info\"t\n\030"
    "modify_family_member_req\022\021\n\tfamily_id\030\001 "
    "\002(\r\022\017\n\007role_id\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022&\n\010sv"
    "r_head\030\350\007 \001(\0132\023.client.server_head\"\326\001\n\030m"
    "odify_family_member_rsp\0224\n\003ret\030\001 \002(\0162\'.c"
    "lient.modify_family_member_rsp.result\022\021\n"
    "\tfamily_id\030\002 \002(\r\022\017\n\007role_id\030\003 \002(\r\022\014\n\004typ"
    "e\030\004 \002(\r\"R\n\006result\022\013\n\007success\020\000\022\016\n\nnot_me"
    "mber\020\001\022\017\n\013permissions\020\002\022\013\n\007failure\020\004\022\r\n\t"
    "king_erro\020\010\"_\n\021secede_family_req\022\021\n\tfami"
    "ly_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022&\n\010svr_head"
    "\030\350\007 \001(\0132\023.client.server_head\"L\n\021secede_f"
    "amily_rsp\022\021\n\tfamily_id\030\001 \002(\r\022\017\n\007role_id\030"
    "\002 \002(\r\022\023\n\013result_type\030\003 \002(\r\"a\n\020expel_memb"
    "er_req\022\022\n\nevictee_id\030\001 \002(\r\022\021\n\tfamily_id\030"
    "\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"_\n\020expel_member_rsp\022\021\n\tfamily_id\030\001"
    " \002(\r\022\017\n\007role_id\030\002 \002(\r\022\022\n\nevictee_id\030\003 \002("
    "\r\022\023\n\013result_type\030\004 \002(\r\"O\n\022upgrade_family"
    "_req\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001"
    "(\0132\023.client.server_head\"\240\001\n\022upgrade_fami"
    "ly_rsp\022.\n\003ret\030\001 \002(\0162!.client.upgrade_fam"
    "ily_rsp.result\022!\n\004info\030\002 \001(\0132\023.client.fa"
    "mily_info\"7\n\006result\022\013\n\007success\020\000\022\017\n\013perm"
    "issions\020\001\022\017\n\013money_limit\020\002\"i\n\021donate_fam"
    "ily_req\022\021\n\tfamily_id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r"
    "\022\013\n\003num\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clien"
    "t.server_head\"\324\001\n\021donate_family_rsp\022-\n\003r"
    "et\030\001 \002(\0162 .client.donate_family_rsp.resu"
    "lt\022\014\n\004type\030\002 \002(\r\022!\n\004info\030\003 \001(\0132\023.client."
    "family_info\022\024\n\014total_donate\030\004 \001(\r\"I\n\006res"
    "ult\022\013\n\007success\020\000\022\016\n\nnot_enough\020\001\022\r\n\tday_"
    "limit\020\002\022\023\n\017donate_type_err\020\003\"L\n\017donate_l"
    "ist_req\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"\211\001\n\013donate_in"
    "fo\022\017\n\007role_id\030\001 \002(\r\022\024\n\014dragon_count\030\002 \002("
    "\r\022\023\n\013tiger_count\030\003 \002(\r\022\027\n\017rosefinch_coun"
    "t\030\004 \002(\r\022\026\n\016tortoise_count\030\005 \002(\r\022\r\n\005money"
    "\030\006 \002(\r\"G\n\017donate_list_rsp\022\021\n\tfamily_id\030\001"
    " \002(\r\022!\n\004info\030\002 \003(\0132\023.client.donate_info\""
    "K\n\016family_log_req\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"^\n\017"
    "family_log_info\022\014\n\004time\030\001 \002(\r\022\014\n\004type\030\002 "
    "\002(\r\022\013\n\003key\030\003 \002(\r\022\r\n\005value\030\004 \002(\r\022\023\n\013famil"
    "y_name\030\005 \002(\t\"I\n\016family_log_rsp\022\021\n\tfamily"
    "_id\030\001 \002(\r\022$\n\003fli\030\002 \003(\0132\027.client.family_l"
    "og_info\"L\n\021family_log_update\022\021\n\tfamily_i"
    "d\030\001 \002(\r\022$\n\003fli\030\002 \003(\0132\027.client.family_log"
    "_info\"N\n\021family_record_req\022\021\n\tfamily_id\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"\373\001\n\022family_record_info\022\017\n\007role_id\030"
    "\001 \002(\r\022\020\n\010join_num\030\002 \002(\r\022\026\n\016kill_chief_nu"
    "m\030\003 \002(\r\022\033\n\023kill_vice_chief_num\030\004 \002(\r\022\026\n\016"
    "kill_elder_num\030\005 \002(\r\022\026\n\016kill_elite_num\030\006"
    " \002(\r\022\027\n\017kill_member_num\030\007 \002(\r\022\020\n\010dead_nu"
    "m\030\010 \002(\r\022\017\n\007be_kill\030\t \002(\r\022\023\n\013be_kill_num\030"
    "\n \002(\r\022\014\n\004type\030\013 \002(\r\"O\n\021family_record_rsp"
    "\022\021\n\tfamily_id\030\001 \002(\r\022\'\n\003fri\030\002 \003(\0132\032.clien"
    "t.family_record_info\"\255\001\n\024family_record_u"
    "pdate\022\014\n\004type\030\001 \002(\r\022\025\n\rkiller_family\030\002 \002"
    "(\r\022\016\n\006killer\030\003 \002(\r\022\024\n\014slain_family\030\004 \002(\r"
    "\022\023\n\013slain_title\030\005 \002(\r\022\r\n\005slain\030\006 \002(\r\022&\n\010"
    "svr_head\030\350\007 \001(\0132\023.client.server_head\"g\n\031"
    "change_family_flag_id_req\022\021\n\tfamily_id\030\001"
    " \002(\r\022\017\n\007flag_id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"S\n\031change_family_f"
    "lag_id_rsp\022\023\n\013result_type\030\001 \002(\r\022!\n\004info\030"
    "\002 \001(\0132\023.client.family_info\"k\n\033change_fam"
    "ily_flag_name_req\022\021\n\tfamily_id\030\001 \002(\r\022\021\n\t"
    "flag_name\030\002 \002(\t\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"U\n\033change_family_flag_na"
    "me_rsp\022\023\n\013result_type\030\001 \002(\r\022!\n\004info\030\002 \001("
    "\0132\023.client.family_info\"N\n\021impeach_chief_"
    "req\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"K\n\021impeach_chief_"
    "rsp\022\023\n\013result_type\030\001 \002(\r\022!\n\004info\030\002 \001(\0132\023"
    ".client.family_info\"x\n\017ally_family_req\022\020"
    "\n\010opt_type\030\001 \002(\r\022\021\n\tfamily_id\030\002 \002(\r\022\030\n\020t"
    "arget_family_id\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"R\n\017ally_family_rsp"
    "\022\023\n\013result_type\030\001 \002(\r\022\020\n\010opt_type\030\002 \002(\r\022"
    "\030\n\020target_family_id\030\003 \001(\r\"i\n\022remove_fore"
    "ign_req\022\021\n\tfamily_id\030\001 \002(\r\022\030\n\020target_fam"
    "ily_id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"Z\n\022remove_foreign_rsp\022\023\n\013re"
    "sult_type\030\001 \002(\r\022\025\n\rsrc_family_id\030\002 \001(\r\022\030"
    "\n\020target_family_id\030\003 \001(\r\"Q\n\024ally_family_"
    "list_req\022\021\n\tfamily_id\030\001 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"1\n\tally_info"
    "\022\021\n\tcamp_type\030\001 \002(\r\022\021\n\tfamily_id\030\002 \002(\r\"J"
    "\n\024ally_family_list_rsp\022\021\n\tfamily_id\030\001 \002("
    "\r\022\037\n\004info\030\002 \003(\0132\021.client.ally_info\"\'\n\020ac"
    "tivity_opt_rsp\022\023\n\013result_type\030\001 \002(\r\"<\n\026l"
    "oad_friend_family_req\022\021\n\tfamily_id\030\001 \002(\r"
    "\022\017\n\007role_id\030\002 \002(\r\"5\n\026load_friend_family_"
    "rsp\022\017\n\007role_id\030\001 \002(\r\022\n\n\002id\030\002 \003(\r\"L\n\030upda"
    "te_friend_family_rsp\022\017\n\007role_id\030\001 \002(\r\022\014\n"
    "\004type\030\002 \002(\r\022\021\n\tfamily_id\030\003 \002(\r\"7\n\024family"
    "_relation_list\022\020\n\010alliance\030\001 \003(\r\022\r\n\005enem"
    "y\030\002 \003(\r\"F\n\026update_family_relation\022\017\n\007op_"
    "type\030\001 \002(\r\022\017\n\007re_type\030\002 \002(\r\022\n\n\002id\030\003 \002(\r\""
    "4\n\021family_title_info\022\021\n\tfamily_id\030\001 \001(\r\022"
    "\014\n\004name\030\002 \001(\t\"N\n\025family_title_list_rsp\022\014"
    "\n\004type\030\001 \002(\r\022\'\n\004info\030\002 \003(\0132\031.client.fami"
    "ly_title_info*y\n\024SECEDE_FAMILY_TYPE_E\022\036\n"
    "\032SECEDE_FAMILY_TYPE_SUCCESS\020\001\022#\n\037SECEDE_"
    "FAMILY_TYPE_LEADER_FAILD\020\002\022\034\n\030SECEDE_FAM"
    "ILY_TYPE_FAILD\020\003*\250\001\n\025EXPEL_MEMBER_RESULT"
    "_E\022\037\n\033EXPEL_MEMBER_RESULT_SUCCEED\020\001\022$\n E"
    "XPEL_MEMBER_RESULT_MEMBER_FAILD\020\002\022$\n EXP"
    "EL_MEMBER_RESULT_FAMILY_FAILD\020\003\022\"\n\036EXPEL"
    "_MEMBER_RESULT_PERMISSION\020\004*\211\001\n\rDONATE_T"
    "YPE_E\022\024\n\020DONATE_TYPE_COIN\020\000\022\026\n\022DONATE_TY"
    "PE_DRAGON\020\001\022\031\n\025DONATE_TYPE_ROSEFINCH\020\002\022\030"
    "\n\024DONATE_TYPE_TORROISE\020\003\022\025\n\021DONATE_TYPE_"
    "TIGER\020\004*\365\004\n\017FAMILY_LOG_TYPE\022\021\n\rFAMILY_CR"
    "EATE\020\001\022\030\n\024FAMILY_INVITE_MEMBER\020\003\022\026\n\022FAMI"
    "LY_QUIT_MEMBER\020\004\022\026\n\022FAMILY_KCIK_MEMBER\020\005"
    "\022\026\n\022FAMILY_MODIFY_POST\020\006\022\026\n\022FAMILY_KILL_"
    "PLAYER\020\007\022\034\n\030FAMILY_BE_KILL_BY_PLAYER\020\010\022\024"
    "\n\020FAMILY_PROMOTION\020\t\022\022\n\016FAMILY_DISMISS\020\n"
    "\022\022\n\016FAMILY_IMPEACH\020\013\022\027\n\023FAMILY_UPGRATE_F"
    "LAG\020\014\022\026\n\022FAMILY_COIN_DONATE\020\r\022\030\n\024FAMILY_"
    "DRAGON_DONATE\020\016\022\027\n\023FAMILY_TIGER_DONATE\020\017"
    "\022\033\n\027FAMILY_ROSEFINCH_DONATE\020\020\022\032\n\026FAMILY_"
    "TORROISE_DONATE\020\021\022\021\n\rFAMILY_DOMAIN\020\022\022\020\n\014"
    "FAMILY_SIEGE\020\023\022\025\n\021FAMILY_WORLD_BOSS\020\024\022\031\n"
    "\025FAMILY_CHANGE_FLAG_ID\020\025\022\033\n\027FAMILY_CHANG"
    "E_FLAG_NAME\020\026\022\023\n\017FAMILY_ALLIANCE\020\027\022\032\n\026FA"
    "MILY_CANCEL_ALLIANCE\020\030\022\027\n\023FAMILY_ENENY_F"
    "AMILY\020\031\022\036\n\032FAMILY_ENENY_CANCEL_FAMILY\020\032*"
    "\310\002\n\033OPT_CHANGE_FLAG_NAME_RESULT\022&\n\"OPT_C"
    "HANGE_FLAG_NAME_CHANGE_SUCESS\020\000\022%\n!OPT_C"
    "HANGE_FLAG_NAME_CAN_NOT_NULL\020\001\022!\n\035OPT_CH"
    "ANGE_FLAG_NAME_TOO_LONG\020\002\022 \n\034OPT_CHANGE_"
    "FLAG_NAME_ILLEGAL\020\003\022#\n\037OPT_CHANGE_FLAG_N"
    "AME_REPETITION\020\004\022!\n\035OPT_CHANGE_FLAG_NAME"
    "_RESOURCE\020\005\022(\n$OPT_CHANGE_FLAG_NAME_PRMI"
    "SSION_LIMIT\020\006\022#\n\037PT_CHANGE_FLAG_NAME_CON"
    "FIG_ERRO\020\007*\246\001\n\020IMPEACH_RESULT_E\022\031\n\025IMPEA"
    "CH_RESULT_SUCESS\020\000\022\034\n\030IMPEACH_RESULT_TIM"
    "E_ERRO\020\001\022\035\n\031IMPEACH_RESULT_HAS_DOMAIN\020\002\022"
    "\033\n\027IMPEACH_RESULT_HAS_KING\020\003\022\035\n\031IMPEACH_"
    "RESULT_CHIEF_ERRO\020\004*\305\001\n\017OPT_FORIGN_TYPE\022"
    "\030\n\024OPT_FORIGN_TYPE_ALLY\020\001\022\035\n\031OPT_FORIGN_"
    "TYPE_HOSTILITY\020\002\022\034\n\030OPT_FORIGN_TYPE_CHEC"
    "KING\020\003\022\032\n\026OPT_FORIGN_TYPE_REJECT\020\004\022\037\n\033OP"
    "T_FORIGN_TYPE_REMOVE_ALLY\020\005\022\036\n\032OPT_FORIG"
    "N_TYPE_REMOVE_HOS\020\006*N\n\rUPTATE_TYPE_E\022\023\n\017"
    "UPTATE_TYPE_ADD\020\001\022\023\n\017UPTATE_TYPE_DEL\020\002\022\023"
    "\n\017UPTATE_TYPE_ALL\020\003", 11619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.family.proto", &protobuf_RegisterTypes);
  family_info::default_instance_ = new family_info();
  family_diplomacy_info::default_instance_ = new family_diplomacy_info();
  set_create_famliy_consume::default_instance_ = new set_create_famliy_consume();
  set_donate_consume::default_instance_ = new set_donate_consume();
  set_family_req::default_instance_ = new set_family_req();
  set_family_money::default_instance_ = new set_family_money();
  secede_family_to_center::default_instance_ = new secede_family_to_center();
  secede_family_game::default_instance_ = new secede_family_game();
  update_family_data_from_center::default_instance_ = new update_family_data_from_center();
  family_info_req::default_instance_ = new family_info_req();
  family_info_rsp::default_instance_ = new family_info_rsp();
  modify_family_power::default_instance_ = new modify_family_power();
  update_player_power_to_smy::default_instance_ = new update_player_power_to_smy();
  notive_center_donate_sucess::default_instance_ = new notive_center_donate_sucess();
  family_money_mod_req::default_instance_ = new family_money_mod_req();
  family_simple_info::default_instance_ = new family_simple_info();
  family_money_query_req::default_instance_ = new family_money_query_req();
  family_money_query_rsp::default_instance_ = new family_money_query_rsp();
  family_list_req::default_instance_ = new family_list_req();
  family_list_rsp::default_instance_ = new family_list_rsp();
  create_family_req::default_instance_ = new create_family_req();
  create_family_rsp::default_instance_ = new create_family_rsp();
  family_req::default_instance_ = new family_req();
  family_rsp::default_instance_ = new family_rsp();
  apply_family_req::default_instance_ = new apply_family_req();
  apply_family_rsp::default_instance_ = new apply_family_rsp();
  family_set_req::default_instance_ = new family_set_req();
  family_set_rsp::default_instance_ = new family_set_rsp();
  apply_family_list_req::default_instance_ = new apply_family_list_req();
  apply_family_list_rsp::default_instance_ = new apply_family_list_rsp();
  approval_family_req::default_instance_ = new approval_family_req();
  approval_family_rsp::default_instance_ = new approval_family_rsp();
  invite_family_req::default_instance_ = new invite_family_req();
  invite_family_rsp::default_instance_ = new invite_family_rsp();
  invite_family_list_req::default_instance_ = new invite_family_list_req();
  invite_family_info::default_instance_ = new invite_family_info();
  invite_family_list_rsp::default_instance_ = new invite_family_list_rsp();
  agree_family_req::default_instance_ = new agree_family_req();
  agree_family_rsp::default_instance_ = new agree_family_rsp();
  modify_family_post_req::default_instance_ = new modify_family_post_req();
  modify_family_post_rsp::default_instance_ = new modify_family_post_rsp();
  disband_family_req::default_instance_ = new disband_family_req();
  disband_family_rsp::default_instance_ = new disband_family_rsp();
  family_self_req::default_instance_ = new family_self_req();
  family_self_rsp::default_instance_ = new family_self_rsp();
  apply_family_list_self_req::default_instance_ = new apply_family_list_self_req();
  apply_family_list_self_rsp::default_instance_ = new apply_family_list_self_rsp();
  family_member_list_req::default_instance_ = new family_member_list_req();
  family_member_info::default_instance_ = new family_member_info();
  family_member_list_rsp::default_instance_ = new family_member_list_rsp();
  modify_family_member_req::default_instance_ = new modify_family_member_req();
  modify_family_member_rsp::default_instance_ = new modify_family_member_rsp();
  secede_family_req::default_instance_ = new secede_family_req();
  secede_family_rsp::default_instance_ = new secede_family_rsp();
  expel_member_req::default_instance_ = new expel_member_req();
  expel_member_rsp::default_instance_ = new expel_member_rsp();
  upgrade_family_req::default_instance_ = new upgrade_family_req();
  upgrade_family_rsp::default_instance_ = new upgrade_family_rsp();
  donate_family_req::default_instance_ = new donate_family_req();
  donate_family_rsp::default_instance_ = new donate_family_rsp();
  donate_list_req::default_instance_ = new donate_list_req();
  donate_info::default_instance_ = new donate_info();
  donate_list_rsp::default_instance_ = new donate_list_rsp();
  family_log_req::default_instance_ = new family_log_req();
  family_log_info::default_instance_ = new family_log_info();
  family_log_rsp::default_instance_ = new family_log_rsp();
  family_log_update::default_instance_ = new family_log_update();
  family_record_req::default_instance_ = new family_record_req();
  family_record_info::default_instance_ = new family_record_info();
  family_record_rsp::default_instance_ = new family_record_rsp();
  family_record_update::default_instance_ = new family_record_update();
  change_family_flag_id_req::default_instance_ = new change_family_flag_id_req();
  change_family_flag_id_rsp::default_instance_ = new change_family_flag_id_rsp();
  change_family_flag_name_req::default_instance_ = new change_family_flag_name_req();
  change_family_flag_name_rsp::default_instance_ = new change_family_flag_name_rsp();
  impeach_chief_req::default_instance_ = new impeach_chief_req();
  impeach_chief_rsp::default_instance_ = new impeach_chief_rsp();
  ally_family_req::default_instance_ = new ally_family_req();
  ally_family_rsp::default_instance_ = new ally_family_rsp();
  remove_foreign_req::default_instance_ = new remove_foreign_req();
  remove_foreign_rsp::default_instance_ = new remove_foreign_rsp();
  ally_family_list_req::default_instance_ = new ally_family_list_req();
  ally_info::default_instance_ = new ally_info();
  ally_family_list_rsp::default_instance_ = new ally_family_list_rsp();
  activity_opt_rsp::default_instance_ = new activity_opt_rsp();
  load_friend_family_req::default_instance_ = new load_friend_family_req();
  load_friend_family_rsp::default_instance_ = new load_friend_family_rsp();
  update_friend_family_rsp::default_instance_ = new update_friend_family_rsp();
  family_relation_list::default_instance_ = new family_relation_list();
  update_family_relation::default_instance_ = new update_family_relation();
  family_title_info::default_instance_ = new family_title_info();
  family_title_list_rsp::default_instance_ = new family_title_list_rsp();
  family_info::default_instance_->InitAsDefaultInstance();
  family_diplomacy_info::default_instance_->InitAsDefaultInstance();
  set_create_famliy_consume::default_instance_->InitAsDefaultInstance();
  set_donate_consume::default_instance_->InitAsDefaultInstance();
  set_family_req::default_instance_->InitAsDefaultInstance();
  set_family_money::default_instance_->InitAsDefaultInstance();
  secede_family_to_center::default_instance_->InitAsDefaultInstance();
  secede_family_game::default_instance_->InitAsDefaultInstance();
  update_family_data_from_center::default_instance_->InitAsDefaultInstance();
  family_info_req::default_instance_->InitAsDefaultInstance();
  family_info_rsp::default_instance_->InitAsDefaultInstance();
  modify_family_power::default_instance_->InitAsDefaultInstance();
  update_player_power_to_smy::default_instance_->InitAsDefaultInstance();
  notive_center_donate_sucess::default_instance_->InitAsDefaultInstance();
  family_money_mod_req::default_instance_->InitAsDefaultInstance();
  family_simple_info::default_instance_->InitAsDefaultInstance();
  family_money_query_req::default_instance_->InitAsDefaultInstance();
  family_money_query_rsp::default_instance_->InitAsDefaultInstance();
  family_list_req::default_instance_->InitAsDefaultInstance();
  family_list_rsp::default_instance_->InitAsDefaultInstance();
  create_family_req::default_instance_->InitAsDefaultInstance();
  create_family_rsp::default_instance_->InitAsDefaultInstance();
  family_req::default_instance_->InitAsDefaultInstance();
  family_rsp::default_instance_->InitAsDefaultInstance();
  apply_family_req::default_instance_->InitAsDefaultInstance();
  apply_family_rsp::default_instance_->InitAsDefaultInstance();
  family_set_req::default_instance_->InitAsDefaultInstance();
  family_set_rsp::default_instance_->InitAsDefaultInstance();
  apply_family_list_req::default_instance_->InitAsDefaultInstance();
  apply_family_list_rsp::default_instance_->InitAsDefaultInstance();
  approval_family_req::default_instance_->InitAsDefaultInstance();
  approval_family_rsp::default_instance_->InitAsDefaultInstance();
  invite_family_req::default_instance_->InitAsDefaultInstance();
  invite_family_rsp::default_instance_->InitAsDefaultInstance();
  invite_family_list_req::default_instance_->InitAsDefaultInstance();
  invite_family_info::default_instance_->InitAsDefaultInstance();
  invite_family_list_rsp::default_instance_->InitAsDefaultInstance();
  agree_family_req::default_instance_->InitAsDefaultInstance();
  agree_family_rsp::default_instance_->InitAsDefaultInstance();
  modify_family_post_req::default_instance_->InitAsDefaultInstance();
  modify_family_post_rsp::default_instance_->InitAsDefaultInstance();
  disband_family_req::default_instance_->InitAsDefaultInstance();
  disband_family_rsp::default_instance_->InitAsDefaultInstance();
  family_self_req::default_instance_->InitAsDefaultInstance();
  family_self_rsp::default_instance_->InitAsDefaultInstance();
  apply_family_list_self_req::default_instance_->InitAsDefaultInstance();
  apply_family_list_self_rsp::default_instance_->InitAsDefaultInstance();
  family_member_list_req::default_instance_->InitAsDefaultInstance();
  family_member_info::default_instance_->InitAsDefaultInstance();
  family_member_list_rsp::default_instance_->InitAsDefaultInstance();
  modify_family_member_req::default_instance_->InitAsDefaultInstance();
  modify_family_member_rsp::default_instance_->InitAsDefaultInstance();
  secede_family_req::default_instance_->InitAsDefaultInstance();
  secede_family_rsp::default_instance_->InitAsDefaultInstance();
  expel_member_req::default_instance_->InitAsDefaultInstance();
  expel_member_rsp::default_instance_->InitAsDefaultInstance();
  upgrade_family_req::default_instance_->InitAsDefaultInstance();
  upgrade_family_rsp::default_instance_->InitAsDefaultInstance();
  donate_family_req::default_instance_->InitAsDefaultInstance();
  donate_family_rsp::default_instance_->InitAsDefaultInstance();
  donate_list_req::default_instance_->InitAsDefaultInstance();
  donate_info::default_instance_->InitAsDefaultInstance();
  donate_list_rsp::default_instance_->InitAsDefaultInstance();
  family_log_req::default_instance_->InitAsDefaultInstance();
  family_log_info::default_instance_->InitAsDefaultInstance();
  family_log_rsp::default_instance_->InitAsDefaultInstance();
  family_log_update::default_instance_->InitAsDefaultInstance();
  family_record_req::default_instance_->InitAsDefaultInstance();
  family_record_info::default_instance_->InitAsDefaultInstance();
  family_record_rsp::default_instance_->InitAsDefaultInstance();
  family_record_update::default_instance_->InitAsDefaultInstance();
  change_family_flag_id_req::default_instance_->InitAsDefaultInstance();
  change_family_flag_id_rsp::default_instance_->InitAsDefaultInstance();
  change_family_flag_name_req::default_instance_->InitAsDefaultInstance();
  change_family_flag_name_rsp::default_instance_->InitAsDefaultInstance();
  impeach_chief_req::default_instance_->InitAsDefaultInstance();
  impeach_chief_rsp::default_instance_->InitAsDefaultInstance();
  ally_family_req::default_instance_->InitAsDefaultInstance();
  ally_family_rsp::default_instance_->InitAsDefaultInstance();
  remove_foreign_req::default_instance_->InitAsDefaultInstance();
  remove_foreign_rsp::default_instance_->InitAsDefaultInstance();
  ally_family_list_req::default_instance_->InitAsDefaultInstance();
  ally_info::default_instance_->InitAsDefaultInstance();
  ally_family_list_rsp::default_instance_->InitAsDefaultInstance();
  activity_opt_rsp::default_instance_->InitAsDefaultInstance();
  load_friend_family_req::default_instance_->InitAsDefaultInstance();
  load_friend_family_rsp::default_instance_->InitAsDefaultInstance();
  update_friend_family_rsp::default_instance_->InitAsDefaultInstance();
  family_relation_list::default_instance_->InitAsDefaultInstance();
  update_family_relation::default_instance_->InitAsDefaultInstance();
  family_title_info::default_instance_->InitAsDefaultInstance();
  family_title_list_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2efamily_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2efamily_2eproto {
  StaticDescriptorInitializer_client_2efamily_2eproto() {
    protobuf_AddDesc_client_2efamily_2eproto();
  }
} static_descriptor_initializer_client_2efamily_2eproto_;
const ::google::protobuf::EnumDescriptor* SECEDE_FAMILY_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SECEDE_FAMILY_TYPE_E_descriptor_;
}
bool SECEDE_FAMILY_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EXPEL_MEMBER_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EXPEL_MEMBER_RESULT_E_descriptor_;
}
bool EXPEL_MEMBER_RESULT_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DONATE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DONATE_TYPE_E_descriptor_;
}
bool DONATE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FAMILY_LOG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FAMILY_LOG_TYPE_descriptor_;
}
bool FAMILY_LOG_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPT_CHANGE_FLAG_NAME_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPT_CHANGE_FLAG_NAME_RESULT_descriptor_;
}
bool OPT_CHANGE_FLAG_NAME_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IMPEACH_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMPEACH_RESULT_E_descriptor_;
}
bool IMPEACH_RESULT_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OPT_FORIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OPT_FORIGN_TYPE_descriptor_;
}
bool OPT_FORIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UPTATE_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPTATE_TYPE_E_descriptor_;
}
bool UPTATE_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int family_info::kIdFieldNumber;
const int family_info::kNameFieldNumber;
const int family_info::kFlagIdFieldNumber;
const int family_info::kFlagNameFieldNumber;
const int family_info::kLvlFieldNumber;
const int family_info::kChiefIdFieldNumber;
const int family_info::kChiefNameFieldNumber;
const int family_info::kDeputyIdFieldNumber;
const int family_info::kPostFieldNumber;
const int family_info::kMoneyFieldNumber;
const int family_info::kPowerFieldNumber;
const int family_info::kDomainFieldNumber;
const int family_info::kKingFieldNumber;
const int family_info::kEmperorFieldNumber;
const int family_info::kCurMemberNumFieldNumber;
const int family_info::kApprovalFieldNumber;
const int family_info::kLeaderOnlineFieldNumber;
const int family_info::kCreateTimeFieldNumber;
const int family_info::kDragonCountFieldNumber;
const int family_info::kTigerCountFieldNumber;
const int family_info::kRosefinchCountFieldNumber;
const int family_info::kTortoiseCountFieldNumber;
#endif  // !_MSC_VER

family_info::family_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_info::InitAsDefaultInstance() {
}

family_info::family_info(const family_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvl_ = 0u;
  chief_id_ = 0u;
  chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deputy_id_ = 0u;
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  power_ = 0u;
  domain_ = 0u;
  king_ = false;
  emperor_ = false;
  cur_member_num_ = 0u;
  approval_ = false;
  leader_online_ = 0u;
  create_time_ = 0u;
  dragon_count_ = 0u;
  tiger_count_ = 0u;
  rosefinch_count_ = 0u;
  tortoise_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_info::~family_info() {
  SharedDtor();
}

void family_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chief_name_;
  }
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (this != default_instance_) {
  }
}

void family_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_info_descriptor_;
}

const family_info& family_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_info* family_info::default_instance_ = NULL;

family_info* family_info::New() const {
  return new family_info;
}

void family_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_id_ = 0u;
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    lvl_ = 0u;
    chief_id_ = 0u;
    if (has_chief_name()) {
      if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
        chief_name_->clear();
      }
    }
    deputy_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::kEmptyString) {
        post_->clear();
      }
    }
    money_ = 0u;
    power_ = 0u;
    domain_ = 0u;
    king_ = false;
    emperor_ = false;
    cur_member_num_ = 0u;
    approval_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    leader_online_ = 0u;
    create_time_ = 0u;
    dragon_count_ = 0u;
    tiger_count_ = 0u;
    rosefinch_count_ = 0u;
    tortoise_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_id;
        break;
      }

      // required uint32 flag_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_flag_name;
        break;
      }

      // required string flag_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag_name().data(), this->flag_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chief_id;
        break;
      }

      // required uint32 chief_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chief_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chief_id_)));
          set_has_chief_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chief_name;
        break;
      }

      // required string chief_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chief_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chief_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chief_name().data(), this->chief_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deputy_id;
        break;
      }

      // required uint32 deputy_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deputy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deputy_id_)));
          set_has_deputy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_post;
        break;
      }

      // required string post = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_money;
        break;
      }

      // required uint32 money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_power;
        break;
      }

      // required uint32 power = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_domain;
        break;
      }

      // required uint32 domain = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_domain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_king;
        break;
      }

      // required bool king = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &king_)));
          set_has_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_emperor;
        break;
      }

      // required bool emperor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emperor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emperor_)));
          set_has_emperor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_member_num;
        break;
      }

      // required uint32 cur_member_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_member_num_)));
          set_has_cur_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_approval;
        break;
      }

      // required bool approval = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_approval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approval_)));
          set_has_approval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_leader_online;
        break;
      }

      // required uint32 leader_online = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_online_)));
          set_has_leader_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dragon_count;
        break;
      }

      // required uint32 dragon_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dragon_count_)));
          set_has_dragon_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tiger_count;
        break;
      }

      // required uint32 tiger_count = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiger_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tiger_count_)));
          set_has_tiger_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rosefinch_count;
        break;
      }

      // required uint32 rosefinch_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rosefinch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rosefinch_count_)));
          set_has_rosefinch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tortoise_count;
        break;
      }

      // required uint32 tortoise_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tortoise_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tortoise_count_)));
          set_has_tortoise_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_id(), output);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->flag_name(), output);
  }

  // required uint32 lvl = 5;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lvl(), output);
  }

  // required uint32 chief_id = 6;
  if (has_chief_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chief_id(), output);
  }

  // required string chief_name = 7;
  if (has_chief_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chief_name().data(), this->chief_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chief_name(), output);
  }

  // required uint32 deputy_id = 8;
  if (has_deputy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deputy_id(), output);
  }

  // required string post = 9;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->post(), output);
  }

  // required uint32 money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->money(), output);
  }

  // required uint32 power = 11;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->power(), output);
  }

  // required uint32 domain = 12;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->domain(), output);
  }

  // required bool king = 13 [default = false];
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->king(), output);
  }

  // required bool emperor = 14;
  if (has_emperor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->emperor(), output);
  }

  // required uint32 cur_member_num = 15;
  if (has_cur_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cur_member_num(), output);
  }

  // required bool approval = 16;
  if (has_approval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->approval(), output);
  }

  // required uint32 leader_online = 17;
  if (has_leader_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->leader_online(), output);
  }

  // required uint32 create_time = 18;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->create_time(), output);
  }

  // required uint32 dragon_count = 19;
  if (has_dragon_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dragon_count(), output);
  }

  // required uint32 tiger_count = 20;
  if (has_tiger_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tiger_count(), output);
  }

  // required uint32 rosefinch_count = 21;
  if (has_rosefinch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->rosefinch_count(), output);
  }

  // required uint32 tortoise_count = 22;
  if (has_tortoise_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->tortoise_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_id(), target);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flag_name(), target);
  }

  // required uint32 lvl = 5;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lvl(), target);
  }

  // required uint32 chief_id = 6;
  if (has_chief_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chief_id(), target);
  }

  // required string chief_name = 7;
  if (has_chief_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chief_name().data(), this->chief_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chief_name(), target);
  }

  // required uint32 deputy_id = 8;
  if (has_deputy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deputy_id(), target);
  }

  // required string post = 9;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->post(), target);
  }

  // required uint32 money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->money(), target);
  }

  // required uint32 power = 11;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->power(), target);
  }

  // required uint32 domain = 12;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->domain(), target);
  }

  // required bool king = 13 [default = false];
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->king(), target);
  }

  // required bool emperor = 14;
  if (has_emperor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->emperor(), target);
  }

  // required uint32 cur_member_num = 15;
  if (has_cur_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cur_member_num(), target);
  }

  // required bool approval = 16;
  if (has_approval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->approval(), target);
  }

  // required uint32 leader_online = 17;
  if (has_leader_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->leader_online(), target);
  }

  // required uint32 create_time = 18;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->create_time(), target);
  }

  // required uint32 dragon_count = 19;
  if (has_dragon_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dragon_count(), target);
  }

  // required uint32 tiger_count = 20;
  if (has_tiger_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tiger_count(), target);
  }

  // required uint32 rosefinch_count = 21;
  if (has_rosefinch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->rosefinch_count(), target);
  }

  // required uint32 tortoise_count = 22;
  if (has_tortoise_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->tortoise_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 flag_id = 3;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // required string flag_name = 4;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag_name());
    }

    // required uint32 lvl = 5;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required uint32 chief_id = 6;
    if (has_chief_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chief_id());
    }

    // required string chief_name = 7;
    if (has_chief_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chief_name());
    }

    // required uint32 deputy_id = 8;
    if (has_deputy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deputy_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string post = 9;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // required uint32 money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 power = 11;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 domain = 12;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domain());
    }

    // required bool king = 13 [default = false];
    if (has_king()) {
      total_size += 1 + 1;
    }

    // required bool emperor = 14;
    if (has_emperor()) {
      total_size += 1 + 1;
    }

    // required uint32 cur_member_num = 15;
    if (has_cur_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_member_num());
    }

    // required bool approval = 16;
    if (has_approval()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 leader_online = 17;
    if (has_leader_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_online());
    }

    // required uint32 create_time = 18;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 dragon_count = 19;
    if (has_dragon_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dragon_count());
    }

    // required uint32 tiger_count = 20;
    if (has_tiger_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tiger_count());
    }

    // required uint32 rosefinch_count = 21;
    if (has_rosefinch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rosefinch_count());
    }

    // required uint32 tortoise_count = 22;
    if (has_tortoise_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tortoise_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_info::MergeFrom(const family_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_chief_id()) {
      set_chief_id(from.chief_id());
    }
    if (from.has_chief_name()) {
      set_chief_name(from.chief_name());
    }
    if (from.has_deputy_id()) {
      set_deputy_id(from.deputy_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_king()) {
      set_king(from.king());
    }
    if (from.has_emperor()) {
      set_emperor(from.emperor());
    }
    if (from.has_cur_member_num()) {
      set_cur_member_num(from.cur_member_num());
    }
    if (from.has_approval()) {
      set_approval(from.approval());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leader_online()) {
      set_leader_online(from.leader_online());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_dragon_count()) {
      set_dragon_count(from.dragon_count());
    }
    if (from.has_tiger_count()) {
      set_tiger_count(from.tiger_count());
    }
    if (from.has_rosefinch_count()) {
      set_rosefinch_count(from.rosefinch_count());
    }
    if (from.has_tortoise_count()) {
      set_tortoise_count(from.tortoise_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_info::CopyFrom(const family_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void family_info::Swap(family_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(lvl_, other->lvl_);
    std::swap(chief_id_, other->chief_id_);
    std::swap(chief_name_, other->chief_name_);
    std::swap(deputy_id_, other->deputy_id_);
    std::swap(post_, other->post_);
    std::swap(money_, other->money_);
    std::swap(power_, other->power_);
    std::swap(domain_, other->domain_);
    std::swap(king_, other->king_);
    std::swap(emperor_, other->emperor_);
    std::swap(cur_member_num_, other->cur_member_num_);
    std::swap(approval_, other->approval_);
    std::swap(leader_online_, other->leader_online_);
    std::swap(create_time_, other->create_time_);
    std::swap(dragon_count_, other->dragon_count_);
    std::swap(tiger_count_, other->tiger_count_);
    std::swap(rosefinch_count_, other->rosefinch_count_);
    std::swap(tortoise_count_, other->tortoise_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_info_descriptor_;
  metadata.reflection = family_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_diplomacy_info::kFamilyIdFieldNumber;
const int family_diplomacy_info::kTargetIdFieldNumber;
const int family_diplomacy_info::kRelationTypeFieldNumber;
const int family_diplomacy_info::kApplyTimeFieldNumber;
#endif  // !_MSC_VER

family_diplomacy_info::family_diplomacy_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_diplomacy_info::InitAsDefaultInstance() {
}

family_diplomacy_info::family_diplomacy_info(const family_diplomacy_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_diplomacy_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  target_id_ = 0u;
  relation_type_ = 0u;
  apply_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_diplomacy_info::~family_diplomacy_info() {
  SharedDtor();
}

void family_diplomacy_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_diplomacy_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_diplomacy_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_diplomacy_info_descriptor_;
}

const family_diplomacy_info& family_diplomacy_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_diplomacy_info* family_diplomacy_info::default_instance_ = NULL;

family_diplomacy_info* family_diplomacy_info::New() const {
  return new family_diplomacy_info;
}

void family_diplomacy_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    target_id_ = 0u;
    relation_type_ = 0u;
    apply_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_diplomacy_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // required uint32 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_relation_type;
        break;
      }

      // required uint32 relation_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_type_)));
          set_has_relation_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_time;
        break;
      }

      // optional uint32 apply_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_diplomacy_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_id(), output);
  }

  // required uint32 relation_type = 3;
  if (has_relation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relation_type(), output);
  }

  // optional uint32 apply_time = 4;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->apply_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_diplomacy_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_id(), target);
  }

  // required uint32 relation_type = 3;
  if (has_relation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relation_type(), target);
  }

  // optional uint32 apply_time = 4;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->apply_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_diplomacy_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // required uint32 relation_type = 3;
    if (has_relation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation_type());
    }

    // optional uint32 apply_time = 4;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_diplomacy_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_diplomacy_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_diplomacy_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_diplomacy_info::MergeFrom(const family_diplomacy_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_relation_type()) {
      set_relation_type(from.relation_type());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_diplomacy_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_diplomacy_info::CopyFrom(const family_diplomacy_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_diplomacy_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void family_diplomacy_info::Swap(family_diplomacy_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(relation_type_, other->relation_type_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_diplomacy_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_diplomacy_info_descriptor_;
  metadata.reflection = family_diplomacy_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_create_famliy_consume_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_create_famliy_consume_result_descriptor_;
}
bool set_create_famliy_consume_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_create_famliy_consume_result set_create_famliy_consume::RESULT_SUCCESS;
const set_create_famliy_consume_result set_create_famliy_consume::RESULT_FAILD;
const set_create_famliy_consume_result set_create_famliy_consume::result_MIN;
const set_create_famliy_consume_result set_create_famliy_consume::result_MAX;
const int set_create_famliy_consume::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_create_famliy_consume::kTypeFieldNumber;
const int set_create_famliy_consume::kIsSucceedFieldNumber;
const int set_create_famliy_consume::kRoleIdFieldNumber;
#endif  // !_MSC_VER

set_create_famliy_consume::set_create_famliy_consume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_create_famliy_consume::InitAsDefaultInstance() {
}

set_create_famliy_consume::set_create_famliy_consume(const set_create_famliy_consume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_create_famliy_consume::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  is_succeed_ = 1;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_create_famliy_consume::~set_create_famliy_consume() {
  SharedDtor();
}

void set_create_famliy_consume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_create_famliy_consume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_create_famliy_consume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_create_famliy_consume_descriptor_;
}

const set_create_famliy_consume& set_create_famliy_consume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

set_create_famliy_consume* set_create_famliy_consume::default_instance_ = NULL;

set_create_famliy_consume* set_create_famliy_consume::New() const {
  return new set_create_famliy_consume;
}

void set_create_famliy_consume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    is_succeed_ = 1;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_create_famliy_consume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_succeed;
        break;
      }

      // required .client.set_create_famliy_consume.result is_succeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_succeed:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::set_create_famliy_consume_result_IsValid(value)) {
            set_is_succeed(static_cast< ::client::set_create_famliy_consume_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_create_famliy_consume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .client.set_create_famliy_consume.result is_succeed = 2;
  if (has_is_succeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->is_succeed(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_create_famliy_consume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .client.set_create_famliy_consume.result is_succeed = 2;
  if (has_is_succeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->is_succeed(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_create_famliy_consume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .client.set_create_famliy_consume.result is_succeed = 2;
    if (has_is_succeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->is_succeed());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_create_famliy_consume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_create_famliy_consume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_create_famliy_consume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_create_famliy_consume::MergeFrom(const set_create_famliy_consume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_succeed()) {
      set_is_succeed(from.is_succeed());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_create_famliy_consume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_create_famliy_consume::CopyFrom(const set_create_famliy_consume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_create_famliy_consume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void set_create_famliy_consume::Swap(set_create_famliy_consume* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_succeed_, other->is_succeed_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_create_famliy_consume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_create_famliy_consume_descriptor_;
  metadata.reflection = set_create_famliy_consume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_donate_consume::kTypeFieldNumber;
const int set_donate_consume::kCountFieldNumber;
const int set_donate_consume::kIsSuccessFieldNumber;
const int set_donate_consume::kContrValueFieldNumber;
const int set_donate_consume::kRoleIdFieldNumber;
const int set_donate_consume::kTotalValueFieldNumber;
const int set_donate_consume::kMoneyFieldNumber;
#endif  // !_MSC_VER

set_donate_consume::set_donate_consume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_donate_consume::InitAsDefaultInstance() {
}

set_donate_consume::set_donate_consume(const set_donate_consume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_donate_consume::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  is_success_ = false;
  contr_value_ = 0u;
  role_id_ = 0u;
  total_value_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_donate_consume::~set_donate_consume() {
  SharedDtor();
}

void set_donate_consume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_donate_consume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_donate_consume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_donate_consume_descriptor_;
}

const set_donate_consume& set_donate_consume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

set_donate_consume* set_donate_consume::default_instance_ = NULL;

set_donate_consume* set_donate_consume::New() const {
  return new set_donate_consume;
}

void set_donate_consume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
    is_success_ = false;
    contr_value_ = 0u;
    role_id_ = 0u;
    total_value_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_donate_consume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_success;
        break;
      }

      // required bool is_success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contr_value;
        break;
      }

      // required uint32 contr_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contr_value_)));
          set_has_contr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_value;
        break;
      }

      // required uint32 total_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // required uint32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_donate_consume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required bool is_success = 3;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_success(), output);
  }

  // required uint32 contr_value = 4;
  if (has_contr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contr_value(), output);
  }

  // required uint32 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_id(), output);
  }

  // required uint32 total_value = 6;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_value(), output);
  }

  // required uint32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_donate_consume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required bool is_success = 3;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_success(), target);
  }

  // required uint32 contr_value = 4;
  if (has_contr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contr_value(), target);
  }

  // required uint32 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_id(), target);
  }

  // required uint32 total_value = 6;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_value(), target);
  }

  // required uint32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_donate_consume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required bool is_success = 3;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

    // required uint32 contr_value = 4;
    if (has_contr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contr_value());
    }

    // required uint32 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 total_value = 6;
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_value());
    }

    // required uint32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_donate_consume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_donate_consume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_donate_consume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_donate_consume::MergeFrom(const set_donate_consume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_contr_value()) {
      set_contr_value(from.contr_value());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_donate_consume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_donate_consume::CopyFrom(const set_donate_consume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_donate_consume::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void set_donate_consume::Swap(set_donate_consume* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(is_success_, other->is_success_);
    std::swap(contr_value_, other->contr_value_);
    std::swap(role_id_, other->role_id_);
    std::swap(total_value_, other->total_value_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_donate_consume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_donate_consume_descriptor_;
  metadata.reflection = set_donate_consume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_family_req::kFamilyIdFieldNumber;
const int set_family_req::kTitleFieldNumber;
const int set_family_req::kRoleIdFieldNumber;
const int set_family_req::kFamilyLevelFieldNumber;
const int set_family_req::kDonateFieldNumber;
#endif  // !_MSC_VER

set_family_req::set_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_family_req::InitAsDefaultInstance() {
}

set_family_req::set_family_req(const set_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  title_ = 0u;
  role_id_ = 0u;
  family_level_ = 0u;
  donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_family_req::~set_family_req() {
  SharedDtor();
}

void set_family_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_family_req_descriptor_;
}

const set_family_req& set_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

set_family_req* set_family_req::default_instance_ = NULL;

set_family_req* set_family_req::New() const {
  return new set_family_req;
}

void set_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    title_ = 0u;
    role_id_ = 0u;
    family_level_ = 0u;
    donate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // required uint32 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_family_level;
        break;
      }

      // required uint32 family_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_level_)));
          set_has_family_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_donate;
        break;
      }

      // optional uint32 donate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->title(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 family_level = 4;
  if (has_family_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->family_level(), output);
  }

  // optional uint32 donate = 5;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->title(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 family_level = 4;
  if (has_family_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->family_level(), target);
  }

  // optional uint32 donate = 5;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 family_level = 4;
    if (has_family_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_level());
    }

    // optional uint32 donate = 5;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_family_req::MergeFrom(const set_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_family_level()) {
      set_family_level(from.family_level());
    }
    if (from.has_donate()) {
      set_donate(from.donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_family_req::CopyFrom(const set_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void set_family_req::Swap(set_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(title_, other->title_);
    std::swap(role_id_, other->role_id_);
    std::swap(family_level_, other->family_level_);
    std::swap(donate_, other->donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_family_req_descriptor_;
  metadata.reflection = set_family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_family_money::kRoleIdFieldNumber;
const int set_family_money::kMoneyFieldNumber;
const int set_family_money::kTypeFieldNumber;
const int set_family_money::kServerIdFieldNumber;
#endif  // !_MSC_VER

set_family_money::set_family_money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_family_money::InitAsDefaultInstance() {
}

set_family_money::set_family_money(const set_family_money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_family_money::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  money_ = 0u;
  type_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_family_money::~set_family_money() {
  SharedDtor();
}

void set_family_money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_family_money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_family_money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_family_money_descriptor_;
}

const set_family_money& set_family_money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

set_family_money* set_family_money::default_instance_ = NULL;

set_family_money* set_family_money::New() const {
  return new set_family_money;
}

void set_family_money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    money_ = 0u;
    type_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_family_money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // required uint32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_family_money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_family_money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_family_money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_family_money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_family_money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_family_money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_family_money::MergeFrom(const set_family_money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_family_money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_family_money::CopyFrom(const set_family_money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_family_money::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void set_family_money::Swap(set_family_money* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(money_, other->money_);
    std::swap(type_, other->type_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_family_money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_family_money_descriptor_;
  metadata.reflection = set_family_money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secede_family_to_center::kFamilyIdFieldNumber;
const int secede_family_to_center::kRoleIdFieldNumber;
const int secede_family_to_center::kServerIdFieldNumber;
#endif  // !_MSC_VER

secede_family_to_center::secede_family_to_center()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void secede_family_to_center::InitAsDefaultInstance() {
}

secede_family_to_center::secede_family_to_center(const secede_family_to_center& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void secede_family_to_center::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secede_family_to_center::~secede_family_to_center() {
  SharedDtor();
}

void secede_family_to_center::SharedDtor() {
  if (this != default_instance_) {
  }
}

void secede_family_to_center::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secede_family_to_center::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secede_family_to_center_descriptor_;
}

const secede_family_to_center& secede_family_to_center::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

secede_family_to_center* secede_family_to_center::default_instance_ = NULL;

secede_family_to_center* secede_family_to_center::New() const {
  return new secede_family_to_center;
}

void secede_family_to_center::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secede_family_to_center::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // required uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void secede_family_to_center::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* secede_family_to_center::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int secede_family_to_center::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secede_family_to_center::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secede_family_to_center* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secede_family_to_center*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secede_family_to_center::MergeFrom(const secede_family_to_center& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secede_family_to_center::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secede_family_to_center::CopyFrom(const secede_family_to_center& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secede_family_to_center::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void secede_family_to_center::Swap(secede_family_to_center* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secede_family_to_center::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secede_family_to_center_descriptor_;
  metadata.reflection = secede_family_to_center_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secede_family_game::kRoleIdFieldNumber;
const int secede_family_game::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

secede_family_game::secede_family_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void secede_family_game::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

secede_family_game::secede_family_game(const secede_family_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void secede_family_game::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secede_family_game::~secede_family_game() {
  SharedDtor();
}

void secede_family_game::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void secede_family_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secede_family_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secede_family_game_descriptor_;
}

const secede_family_game& secede_family_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

secede_family_game* secede_family_game::default_instance_ = NULL;

secede_family_game* secede_family_game::New() const {
  return new secede_family_game;
}

void secede_family_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secede_family_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void secede_family_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* secede_family_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int secede_family_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secede_family_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secede_family_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secede_family_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secede_family_game::MergeFrom(const secede_family_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secede_family_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secede_family_game::CopyFrom(const secede_family_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secede_family_game::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void secede_family_game::Swap(secede_family_game* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secede_family_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secede_family_game_descriptor_;
  metadata.reflection = secede_family_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_family_data_from_center::kFamilyIdFieldNumber;
const int update_family_data_from_center::kRoleIdFieldNumber;
#endif  // !_MSC_VER

update_family_data_from_center::update_family_data_from_center()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_family_data_from_center::InitAsDefaultInstance() {
}

update_family_data_from_center::update_family_data_from_center(const update_family_data_from_center& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_family_data_from_center::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_family_data_from_center::~update_family_data_from_center() {
  SharedDtor();
}

void update_family_data_from_center::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_family_data_from_center::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_family_data_from_center::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_family_data_from_center_descriptor_;
}

const update_family_data_from_center& update_family_data_from_center::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

update_family_data_from_center* update_family_data_from_center::default_instance_ = NULL;

update_family_data_from_center* update_family_data_from_center::New() const {
  return new update_family_data_from_center;
}

void update_family_data_from_center::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_family_data_from_center::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_family_data_from_center::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_family_data_from_center::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_family_data_from_center::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_family_data_from_center::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_family_data_from_center* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_family_data_from_center*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_family_data_from_center::MergeFrom(const update_family_data_from_center& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_family_data_from_center::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_family_data_from_center::CopyFrom(const update_family_data_from_center& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_family_data_from_center::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void update_family_data_from_center::Swap(update_family_data_from_center* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_family_data_from_center::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_family_data_from_center_descriptor_;
  metadata.reflection = update_family_data_from_center_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_info_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

family_info_req::family_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_info_req::InitAsDefaultInstance() {
}

family_info_req::family_info_req(const family_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_info_req::~family_info_req() {
  SharedDtor();
}

void family_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_info_req_descriptor_;
}

const family_info_req& family_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_info_req* family_info_req::default_instance_ = NULL;

family_info_req* family_info_req::New() const {
  return new family_info_req;
}

void family_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_info_req::MergeFrom(const family_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_info_req::CopyFrom(const family_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_info_req::Swap(family_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_info_req_descriptor_;
  metadata.reflection = family_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_info_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

family_info_rsp::family_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_info_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

family_info_rsp::family_info_rsp(const family_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_info_rsp::~family_info_rsp() {
  SharedDtor();
}

void family_info_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void family_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_info_rsp_descriptor_;
}

const family_info_rsp& family_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_info_rsp* family_info_rsp::default_instance_ = NULL;

family_info_rsp* family_info_rsp::New() const {
  return new family_info_rsp;
}

void family_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.family_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.family_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.family_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.family_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_info_rsp::MergeFrom(const family_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_info_rsp::CopyFrom(const family_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void family_info_rsp::Swap(family_info_rsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_info_rsp_descriptor_;
  metadata.reflection = family_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modify_family_power::kRoleIdFieldNumber;
const int modify_family_power::kFamilyIdFieldNumber;
const int modify_family_power::kNewPowerFieldNumber;
#endif  // !_MSC_VER

modify_family_power::modify_family_power()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modify_family_power::InitAsDefaultInstance() {
}

modify_family_power::modify_family_power(const modify_family_power& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modify_family_power::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  family_id_ = 0u;
  new_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_family_power::~modify_family_power() {
  SharedDtor();
}

void modify_family_power::SharedDtor() {
  if (this != default_instance_) {
  }
}

void modify_family_power::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_family_power::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_power_descriptor_;
}

const modify_family_power& modify_family_power::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

modify_family_power* modify_family_power::default_instance_ = NULL;

modify_family_power* modify_family_power::New() const {
  return new modify_family_power;
}

void modify_family_power::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    family_id_ = 0u;
    new_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_family_power::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_power;
        break;
      }

      // required uint32 new_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_power_)));
          set_has_new_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modify_family_power::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 new_power = 3;
  if (has_new_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modify_family_power::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 new_power = 3;
  if (has_new_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modify_family_power::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 new_power = 3;
    if (has_new_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_family_power::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_family_power* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_family_power*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_family_power::MergeFrom(const modify_family_power& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_new_power()) {
      set_new_power(from.new_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_family_power::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_family_power::CopyFrom(const modify_family_power& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_family_power::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void modify_family_power::Swap(modify_family_power* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(new_power_, other->new_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_family_power::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_family_power_descriptor_;
  metadata.reflection = modify_family_power_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_player_power_to_smy::kRoleIdFieldNumber;
#endif  // !_MSC_VER

update_player_power_to_smy::update_player_power_to_smy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_player_power_to_smy::InitAsDefaultInstance() {
}

update_player_power_to_smy::update_player_power_to_smy(const update_player_power_to_smy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_player_power_to_smy::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_player_power_to_smy::~update_player_power_to_smy() {
  SharedDtor();
}

void update_player_power_to_smy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_player_power_to_smy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_player_power_to_smy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_player_power_to_smy_descriptor_;
}

const update_player_power_to_smy& update_player_power_to_smy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

update_player_power_to_smy* update_player_power_to_smy::default_instance_ = NULL;

update_player_power_to_smy* update_player_power_to_smy::New() const {
  return new update_player_power_to_smy;
}

void update_player_power_to_smy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_player_power_to_smy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_player_power_to_smy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_player_power_to_smy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_player_power_to_smy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_player_power_to_smy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_player_power_to_smy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_player_power_to_smy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_player_power_to_smy::MergeFrom(const update_player_power_to_smy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_player_power_to_smy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_player_power_to_smy::CopyFrom(const update_player_power_to_smy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_player_power_to_smy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void update_player_power_to_smy::Swap(update_player_power_to_smy* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_player_power_to_smy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_player_power_to_smy_descriptor_;
  metadata.reflection = update_player_power_to_smy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notive_center_donate_sucess::kRoleIdFieldNumber;
const int notive_center_donate_sucess::kTypeFieldNumber;
const int notive_center_donate_sucess::kTotalDonateFieldNumber;
const int notive_center_donate_sucess::kRetFieldNumber;
const int notive_center_donate_sucess::kMoneyFieldNumber;
#endif  // !_MSC_VER

notive_center_donate_sucess::notive_center_donate_sucess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void notive_center_donate_sucess::InitAsDefaultInstance() {
}

notive_center_donate_sucess::notive_center_donate_sucess(const notive_center_donate_sucess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void notive_center_donate_sucess::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  type_ = 0u;
  total_donate_ = 0u;
  ret_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notive_center_donate_sucess::~notive_center_donate_sucess() {
  SharedDtor();
}

void notive_center_donate_sucess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notive_center_donate_sucess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notive_center_donate_sucess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notive_center_donate_sucess_descriptor_;
}

const notive_center_donate_sucess& notive_center_donate_sucess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

notive_center_donate_sucess* notive_center_donate_sucess::default_instance_ = NULL;

notive_center_donate_sucess* notive_center_donate_sucess::New() const {
  return new notive_center_donate_sucess;
}

void notive_center_donate_sucess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    type_ = 0u;
    total_donate_ = 0u;
    ret_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notive_center_donate_sucess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_donate;
        break;
      }

      // required uint32 total_donate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // required uint32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void notive_center_donate_sucess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 total_donate = 3;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_donate(), output);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  // required uint32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* notive_center_donate_sucess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 total_donate = 3;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_donate(), target);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  // required uint32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int notive_center_donate_sucess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 total_donate = 3;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

    // required uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notive_center_donate_sucess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notive_center_donate_sucess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notive_center_donate_sucess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notive_center_donate_sucess::MergeFrom(const notive_center_donate_sucess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notive_center_donate_sucess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notive_center_donate_sucess::CopyFrom(const notive_center_donate_sucess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notive_center_donate_sucess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void notive_center_donate_sucess::Swap(notive_center_donate_sucess* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(ret_, other->ret_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notive_center_donate_sucess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notive_center_donate_sucess_descriptor_;
  metadata.reflection = notive_center_donate_sucess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_money_mod_req::kFamilyIdFieldNumber;
const int family_money_mod_req::kMoneyFieldNumber;
#endif  // !_MSC_VER

family_money_mod_req::family_money_mod_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_money_mod_req::InitAsDefaultInstance() {
}

family_money_mod_req::family_money_mod_req(const family_money_mod_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_money_mod_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_money_mod_req::~family_money_mod_req() {
  SharedDtor();
}

void family_money_mod_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_money_mod_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_money_mod_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_money_mod_req_descriptor_;
}

const family_money_mod_req& family_money_mod_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_money_mod_req* family_money_mod_req::default_instance_ = NULL;

family_money_mod_req* family_money_mod_req::New() const {
  return new family_money_mod_req;
}

void family_money_mod_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_money_mod_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_money_mod_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_money_mod_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_money_mod_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_money_mod_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_money_mod_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_money_mod_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_money_mod_req::MergeFrom(const family_money_mod_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_money_mod_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_money_mod_req::CopyFrom(const family_money_mod_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_money_mod_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void family_money_mod_req::Swap(family_money_mod_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_money_mod_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_money_mod_req_descriptor_;
  metadata.reflection = family_money_mod_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_simple_info::kFamilyIdFieldNumber;
const int family_simple_info::kFamilyNameFieldNumber;
const int family_simple_info::kFlagIdFieldNumber;
const int family_simple_info::kUserNameFieldNumber;
const int family_simple_info::kRoleIdFieldNumber;
const int family_simple_info::kAllianceFieldNumber;
#endif  // !_MSC_VER

family_simple_info::family_simple_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_simple_info::InitAsDefaultInstance() {
}

family_simple_info::family_simple_info(const family_simple_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_simple_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_simple_info::~family_simple_info() {
  SharedDtor();
}

void family_simple_info::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void family_simple_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_simple_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_simple_info_descriptor_;
}

const family_simple_info& family_simple_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_simple_info* family_simple_info::default_instance_ = NULL;

family_simple_info* family_simple_info::New() const {
  return new family_simple_info;
}

void family_simple_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    flag_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    role_id_ = 0u;
  }
  alliance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_simple_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_name;
        break;
      }

      // required string family_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_id;
        break;
      }

      // required uint32 flag_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // required string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_alliance;
        break;
      }

      // repeated uint32 alliance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alliance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_alliance())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alliance())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_alliance;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_simple_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->family_name(), output);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_id(), output);
  }

  // required string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name(), output);
  }

  // required uint32 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_id(), output);
  }

  // repeated uint32 alliance = 6;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->alliance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_simple_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->family_name(), target);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_id(), target);
  }

  // required string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // required uint32 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_id(), target);
  }

  // repeated uint32 alliance = 6;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->alliance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_simple_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required string family_name = 2;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // required uint32 flag_id = 3;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // required string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated uint32 alliance = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->alliance_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alliance(i));
    }
    total_size += 1 * this->alliance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_simple_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_simple_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_simple_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_simple_info::MergeFrom(const family_simple_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliance_.MergeFrom(from.alliance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_simple_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_simple_info::CopyFrom(const family_simple_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_simple_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void family_simple_info::Swap(family_simple_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(role_id_, other->role_id_);
    alliance_.Swap(&other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_simple_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_simple_info_descriptor_;
  metadata.reflection = family_simple_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_money_query_req::kFamilyIdFieldNumber;
const int family_money_query_req::kRoleIdFieldNumber;
const int family_money_query_req::kInstIdFieldNumber;
#endif  // !_MSC_VER

family_money_query_req::family_money_query_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_money_query_req::InitAsDefaultInstance() {
}

family_money_query_req::family_money_query_req(const family_money_query_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_money_query_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  inst_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_money_query_req::~family_money_query_req() {
  SharedDtor();
}

void family_money_query_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_money_query_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_money_query_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_money_query_req_descriptor_;
}

const family_money_query_req& family_money_query_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_money_query_req* family_money_query_req::default_instance_ = NULL;

family_money_query_req* family_money_query_req::New() const {
  return new family_money_query_req;
}

void family_money_query_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    inst_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_money_query_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inst_id;
        break;
      }

      // required uint64 inst_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_money_query_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint64 inst_id = 3;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inst_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_money_query_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint64 inst_id = 3;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inst_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_money_query_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint64 inst_id = 3;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_money_query_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_money_query_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_money_query_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_money_query_req::MergeFrom(const family_money_query_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_money_query_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_money_query_req::CopyFrom(const family_money_query_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_money_query_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void family_money_query_req::Swap(family_money_query_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_money_query_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_money_query_req_descriptor_;
  metadata.reflection = family_money_query_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_money_query_rsp::kFamilyIdFieldNumber;
const int family_money_query_rsp::kMoneyFieldNumber;
const int family_money_query_rsp::kRoleIdFieldNumber;
const int family_money_query_rsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

family_money_query_rsp::family_money_query_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_money_query_rsp::InitAsDefaultInstance() {
}

family_money_query_rsp::family_money_query_rsp(const family_money_query_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_money_query_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  money_ = 0;
  role_id_ = 0u;
  inst_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_money_query_rsp::~family_money_query_rsp() {
  SharedDtor();
}

void family_money_query_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_money_query_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_money_query_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_money_query_rsp_descriptor_;
}

const family_money_query_rsp& family_money_query_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_money_query_rsp* family_money_query_rsp::default_instance_ = NULL;

family_money_query_rsp* family_money_query_rsp::New() const {
  return new family_money_query_rsp;
}

void family_money_query_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    money_ = 0;
    role_id_ = 0u;
    inst_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_money_query_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inst_id;
        break;
      }

      // required uint64 inst_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_money_query_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint64 inst_id = 4;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->inst_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_money_query_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint64 inst_id = 4;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->inst_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_money_query_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint64 inst_id = 4;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_money_query_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_money_query_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_money_query_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_money_query_rsp::MergeFrom(const family_money_query_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_money_query_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_money_query_rsp::CopyFrom(const family_money_query_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_money_query_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void family_money_query_rsp::Swap(family_money_query_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(money_, other->money_);
    std::swap(role_id_, other->role_id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_money_query_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_money_query_rsp_descriptor_;
  metadata.reflection = family_money_query_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_list_req::kUnixtimeFieldNumber;
const int family_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_list_req::family_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_list_req::family_list_req(const family_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_list_req::~family_list_req() {
  SharedDtor();
}

void family_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_list_req_descriptor_;
}

const family_list_req& family_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_list_req* family_list_req::default_instance_ = NULL;

family_list_req* family_list_req::New() const {
  return new family_list_req;
}

void family_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_list_req::MergeFrom(const family_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_list_req::CopyFrom(const family_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_list_req::Swap(family_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_list_req_descriptor_;
  metadata.reflection = family_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_list_rsp::kListTypeFieldNumber;
const int family_list_rsp::kFamilyFieldNumber;
#endif  // !_MSC_VER

family_list_rsp::family_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_list_rsp::InitAsDefaultInstance() {
}

family_list_rsp::family_list_rsp(const family_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  list_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_list_rsp::~family_list_rsp() {
  SharedDtor();
}

void family_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_list_rsp_descriptor_;
}

const family_list_rsp& family_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_list_rsp* family_list_rsp::default_instance_ = NULL;

family_list_rsp* family_list_rsp::New() const {
  return new family_list_rsp;
}

void family_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_type_ = 0u;
  }
  family_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 list_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
          set_has_list_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family;
        break;
      }

      // repeated .client.family_info family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 list_type = 1;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->list_type(), output);
  }

  // repeated .client.family_info family = 2;
  for (int i = 0; i < this->family_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->family(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 list_type = 1;
  if (has_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->list_type(), target);
  }

  // repeated .client.family_info family = 2;
  for (int i = 0; i < this->family_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->family(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 list_type = 1;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

  }
  // repeated .client.family_info family = 2;
  total_size += 1 * this->family_size();
  for (int i = 0; i < this->family_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_list_rsp::MergeFrom(const family_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_.MergeFrom(from.family_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_list_rsp::CopyFrom(const family_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < family_size(); i++) {
    if (!this->family(i).IsInitialized()) return false;
  }
  return true;
}

void family_list_rsp::Swap(family_list_rsp* other) {
  if (other != this) {
    std::swap(list_type_, other->list_type_);
    family_.Swap(&other->family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_list_rsp_descriptor_;
  metadata.reflection = family_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* create_family_req_use_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_family_req_use_descriptor_;
}
bool create_family_req_use_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const create_family_req_use create_family_req::copper;
const create_family_req_use create_family_req::silver;
const create_family_req_use create_family_req::token;
const create_family_req_use create_family_req::use_MIN;
const create_family_req_use create_family_req::use_MAX;
const int create_family_req::use_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int create_family_req::kTypeFieldNumber;
const int create_family_req::kNameFieldNumber;
const int create_family_req::kFlagIdFieldNumber;
const int create_family_req::kFlagNameFieldNumber;
const int create_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

create_family_req::create_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

create_family_req::create_family_req(const create_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_family_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_family_req::~create_family_req() {
  SharedDtor();
}

void create_family_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void create_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_family_req_descriptor_;
}

const create_family_req& create_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

create_family_req* create_family_req::default_instance_ = NULL;

create_family_req* create_family_req::New() const {
  return new create_family_req;
}

void create_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_id_ = 0u;
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.create_family_req.use type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::create_family_req_use_IsValid(value)) {
            set_type(static_cast< ::client::create_family_req_use >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_id;
        break;
      }

      // required uint32 flag_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_flag_name;
        break;
      }

      // required string flag_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag_name().data(), this->flag_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.create_family_req.use type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_id(), output);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->flag_name(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.create_family_req.use type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_id(), target);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flag_name(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.create_family_req.use type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 flag_id = 3;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // required string flag_name = 4;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag_name());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_family_req::MergeFrom(const create_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_family_req::CopyFrom(const create_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void create_family_req::Swap(create_family_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_family_req_descriptor_;
  metadata.reflection = create_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* create_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_family_rsp_result_descriptor_;
}
bool create_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const create_family_rsp_result create_family_rsp::success;
const create_family_rsp_result create_family_rsp::copper_limit;
const create_family_rsp_result create_family_rsp::silver_limit;
const create_family_rsp_result create_family_rsp::token_limit;
const create_family_rsp_result create_family_rsp::name_limit;
const create_family_rsp_result create_family_rsp::flag_limit;
const create_family_rsp_result create_family_rsp::have_limit;
const create_family_rsp_result create_family_rsp::activity_limit;
const create_family_rsp_result create_family_rsp::result_MIN;
const create_family_rsp_result create_family_rsp::result_MAX;
const int create_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int create_family_rsp::kRetFieldNumber;
const int create_family_rsp::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

create_family_rsp::create_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_family_rsp::InitAsDefaultInstance() {
}

create_family_rsp::create_family_rsp(const create_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_family_rsp::~create_family_rsp() {
  SharedDtor();
}

void create_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void create_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_family_rsp_descriptor_;
}

const create_family_rsp& create_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

create_family_rsp* create_family_rsp::default_instance_ = NULL;

create_family_rsp* create_family_rsp::New() const {
  return new create_family_rsp;
}

void create_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.create_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::create_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::create_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.create_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.create_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.create_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_family_rsp::MergeFrom(const create_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_family_rsp::CopyFrom(const create_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void create_family_rsp::Swap(create_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_family_rsp_descriptor_;
  metadata.reflection = create_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_req::kFamilyIdFieldNumber;
const int family_req::kSceneIdFieldNumber;
const int family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_req::family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_req::family_req(const family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_req::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_req::~family_req() {
  SharedDtor();
}

void family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_req_descriptor_;
}

const family_req& family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_req* family_req::default_instance_ = NULL;

family_req* family_req::New() const {
  return new family_req;
}

void family_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    scene_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  family_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_family_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_family_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_family_id;
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 family_id = 1;
  for (int i = 0; i < this->family_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->family_id(i), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 family_id = 1;
  for (int i = 0; i < this->family_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->family_id(i), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 family_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->family_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->family_id(i));
    }
    total_size += 1 * this->family_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_req::MergeFrom(const family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_id_.MergeFrom(from.family_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_req::CopyFrom(const family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_req::IsInitialized() const {

  return true;
}

void family_req::Swap(family_req* other) {
  if (other != this) {
    family_id_.Swap(&other->family_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_req_descriptor_;
  metadata.reflection = family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_rsp::kFiFieldNumber;
#endif  // !_MSC_VER

family_rsp::family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_rsp::InitAsDefaultInstance() {
}

family_rsp::family_rsp(const family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_rsp::~family_rsp() {
  SharedDtor();
}

void family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_rsp_descriptor_;
}

const family_rsp& family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_rsp* family_rsp::default_instance_ = NULL;

family_rsp* family_rsp::New() const {
  return new family_rsp;
}

void family_rsp::Clear() {
  fi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.family_info fi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.family_info fi = 1;
  for (int i = 0; i < this->fi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.family_info fi = 1;
  for (int i = 0; i < this->fi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.family_info fi = 1;
  total_size += 1 * this->fi_size();
  for (int i = 0; i < this->fi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_rsp::MergeFrom(const family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fi_.MergeFrom(from.fi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_rsp::CopyFrom(const family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_rsp::IsInitialized() const {

  for (int i = 0; i < fi_size(); i++) {
    if (!this->fi(i).IsInitialized()) return false;
  }
  return true;
}

void family_rsp::Swap(family_rsp* other) {
  if (other != this) {
    fi_.Swap(&other->fi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_rsp_descriptor_;
  metadata.reflection = family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_family_req::kFamilyIdFieldNumber;
const int apply_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

apply_family_req::apply_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

apply_family_req::apply_family_req(const apply_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_req::~apply_family_req() {
  SharedDtor();
}

void apply_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void apply_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_req_descriptor_;
}

const apply_family_req& apply_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_req* apply_family_req::default_instance_ = NULL;

apply_family_req* apply_family_req::New() const {
  return new apply_family_req;
}

void apply_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_req::MergeFrom(const apply_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_req::CopyFrom(const apply_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void apply_family_req::Swap(apply_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_req_descriptor_;
  metadata.reflection = apply_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* apply_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_rsp_result_descriptor_;
}
bool apply_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const apply_family_rsp_result apply_family_rsp::success;
const apply_family_rsp_result apply_family_rsp::lvl_limit;
const apply_family_rsp_result apply_family_rsp::full_family;
const apply_family_rsp_result apply_family_rsp::apply_count;
const apply_family_rsp_result apply_family_rsp::not_family;
const apply_family_rsp_result apply_family_rsp::time_out;
const apply_family_rsp_result apply_family_rsp::leader_offline;
const apply_family_rsp_result apply_family_rsp::have_family;
const apply_family_rsp_result apply_family_rsp::already_apply;
const apply_family_rsp_result apply_family_rsp::result_MIN;
const apply_family_rsp_result apply_family_rsp::result_MAX;
const int apply_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int apply_family_rsp::kRetFieldNumber;
const int apply_family_rsp::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

apply_family_rsp::apply_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_rsp::InitAsDefaultInstance() {
}

apply_family_rsp::apply_family_rsp(const apply_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_rsp::~apply_family_rsp() {
  SharedDtor();
}

void apply_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void apply_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_rsp_descriptor_;
}

const apply_family_rsp& apply_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_rsp* apply_family_rsp::default_instance_ = NULL;

apply_family_rsp* apply_family_rsp::New() const {
  return new apply_family_rsp;
}

void apply_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.apply_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::apply_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::apply_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.apply_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.apply_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.apply_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_rsp::MergeFrom(const apply_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_rsp::CopyFrom(const apply_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void apply_family_rsp::Swap(apply_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_rsp_descriptor_;
  metadata.reflection = apply_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_set_req::kFamilyIdFieldNumber;
const int family_set_req::kApprovalFieldNumber;
const int family_set_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_set_req::family_set_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_set_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_set_req::family_set_req(const family_set_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_set_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  approval_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_set_req::~family_set_req() {
  SharedDtor();
}

void family_set_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_set_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_set_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_set_req_descriptor_;
}

const family_set_req& family_set_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_set_req* family_set_req::default_instance_ = NULL;

family_set_req* family_set_req::New() const {
  return new family_set_req;
}

void family_set_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    approval_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_set_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_approval;
        break;
      }

      // required uint32 approval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_approval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &approval_)));
          set_has_approval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_set_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 approval = 2;
  if (has_approval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->approval(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_set_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 approval = 2;
  if (has_approval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->approval(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_set_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 approval = 2;
    if (has_approval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->approval());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_set_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_set_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_set_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_set_req::MergeFrom(const family_set_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_approval()) {
      set_approval(from.approval());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_set_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_set_req::CopyFrom(const family_set_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_set_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void family_set_req::Swap(family_set_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(approval_, other->approval_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_set_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_set_req_descriptor_;
  metadata.reflection = family_set_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_set_rsp::kIsSuccessFieldNumber;
const int family_set_rsp::kApprovalFieldNumber;
#endif  // !_MSC_VER

family_set_rsp::family_set_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_set_rsp::InitAsDefaultInstance() {
}

family_set_rsp::family_set_rsp(const family_set_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_set_rsp::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = 0u;
  approval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_set_rsp::~family_set_rsp() {
  SharedDtor();
}

void family_set_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_set_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_set_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_set_rsp_descriptor_;
}

const family_set_rsp& family_set_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_set_rsp* family_set_rsp::default_instance_ = NULL;

family_set_rsp* family_set_rsp::New() const {
  return new family_set_rsp;
}

void family_set_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = 0u;
    approval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_set_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_approval;
        break;
      }

      // optional uint32 approval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_approval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &approval_)));
          set_has_approval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_set_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_success(), output);
  }

  // optional uint32 approval = 2;
  if (has_approval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->approval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_set_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_success(), target);
  }

  // optional uint32 approval = 2;
  if (has_approval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->approval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_set_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 is_success = 1;
    if (has_is_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_success());
    }

    // optional uint32 approval = 2;
    if (has_approval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->approval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_set_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_set_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_set_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_set_rsp::MergeFrom(const family_set_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_approval()) {
      set_approval(from.approval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_set_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_set_rsp::CopyFrom(const family_set_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_set_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_set_rsp::Swap(family_set_rsp* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(approval_, other->approval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_set_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_set_rsp_descriptor_;
  metadata.reflection = family_set_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_family_list_req::kFamilyIdFieldNumber;
const int apply_family_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

apply_family_list_req::apply_family_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

apply_family_list_req::apply_family_list_req(const apply_family_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_list_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_list_req::~apply_family_list_req() {
  SharedDtor();
}

void apply_family_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void apply_family_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_list_req_descriptor_;
}

const apply_family_list_req& apply_family_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_list_req* apply_family_list_req::default_instance_ = NULL;

apply_family_list_req* apply_family_list_req::New() const {
  return new apply_family_list_req;
}

void apply_family_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_list_req::MergeFrom(const apply_family_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_list_req::CopyFrom(const apply_family_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void apply_family_list_req::Swap(apply_family_list_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_list_req_descriptor_;
  metadata.reflection = apply_family_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_family_list_rsp::kFamilyIdFieldNumber;
const int apply_family_list_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

apply_family_list_rsp::apply_family_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_list_rsp::InitAsDefaultInstance() {
}

apply_family_list_rsp::apply_family_list_rsp(const apply_family_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_list_rsp::~apply_family_list_rsp() {
  SharedDtor();
}

void apply_family_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void apply_family_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_list_rsp_descriptor_;
}

const apply_family_list_rsp& apply_family_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_list_rsp* apply_family_list_rsp::default_instance_ = NULL;

apply_family_list_rsp* apply_family_list_rsp::New() const {
  return new apply_family_list_rsp;
}

void apply_family_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // repeated uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated uint32 role_id = 2;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated uint32 role_id = 2;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated uint32 role_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_list_rsp::MergeFrom(const apply_family_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_list_rsp::CopyFrom(const apply_family_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void apply_family_list_rsp::Swap(apply_family_list_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    role_id_.Swap(&other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_list_rsp_descriptor_;
  metadata.reflection = apply_family_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int approval_family_req::kFamilyIdFieldNumber;
const int approval_family_req::kRoleIdFieldNumber;
const int approval_family_req::kTypeFieldNumber;
const int approval_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

approval_family_req::approval_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void approval_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

approval_family_req::approval_family_req(const approval_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void approval_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

approval_family_req::~approval_family_req() {
  SharedDtor();
}

void approval_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void approval_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* approval_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return approval_family_req_descriptor_;
}

const approval_family_req& approval_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

approval_family_req* approval_family_req::default_instance_ = NULL;

approval_family_req* approval_family_req::New() const {
  return new approval_family_req;
}

void approval_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool approval_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void approval_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* approval_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int approval_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void approval_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const approval_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const approval_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void approval_family_req::MergeFrom(const approval_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void approval_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void approval_family_req::CopyFrom(const approval_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approval_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void approval_family_req::Swap(approval_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata approval_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = approval_family_req_descriptor_;
  metadata.reflection = approval_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* approval_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return approval_family_rsp_result_descriptor_;
}
bool approval_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const approval_family_rsp_result approval_family_rsp::success;
const approval_family_rsp_result approval_family_rsp::permissions;
const approval_family_rsp_result approval_family_rsp::full_family;
const approval_family_rsp_result approval_family_rsp::pass_join;
const approval_family_rsp_result approval_family_rsp::reject_join;
const approval_family_rsp_result approval_family_rsp::have_family;
const approval_family_rsp_result approval_family_rsp::result_MIN;
const approval_family_rsp_result approval_family_rsp::result_MAX;
const int approval_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int approval_family_rsp::kRetFieldNumber;
const int approval_family_rsp::kFamilyIdFieldNumber;
const int approval_family_rsp::kRoleIdFieldNumber;
const int approval_family_rsp::kTypeFieldNumber;
const int approval_family_rsp::kSectIdFieldNumber;
#endif  // !_MSC_VER

approval_family_rsp::approval_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void approval_family_rsp::InitAsDefaultInstance() {
}

approval_family_rsp::approval_family_rsp(const approval_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void approval_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  type_ = 0u;
  sect_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

approval_family_rsp::~approval_family_rsp() {
  SharedDtor();
}

void approval_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void approval_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* approval_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return approval_family_rsp_descriptor_;
}

const approval_family_rsp& approval_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

approval_family_rsp* approval_family_rsp::default_instance_ = NULL;

approval_family_rsp* approval_family_rsp::New() const {
  return new approval_family_rsp;
}

void approval_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
    role_id_ = 0u;
    type_ = 0u;
    sect_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool approval_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.approval_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::approval_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::approval_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sect_id;
        break;
      }

      // optional uint32 sect_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sect_id_)));
          set_has_sect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void approval_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.approval_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 sect_id = 5;
  if (has_sect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sect_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* approval_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.approval_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 sect_id = 5;
  if (has_sect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sect_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int approval_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.approval_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sect_id = 5;
    if (has_sect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sect_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void approval_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const approval_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const approval_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void approval_family_rsp::MergeFrom(const approval_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sect_id()) {
      set_sect_id(from.sect_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void approval_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void approval_family_rsp::CopyFrom(const approval_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approval_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void approval_family_rsp::Swap(approval_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(sect_id_, other->sect_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata approval_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = approval_family_rsp_descriptor_;
  metadata.reflection = approval_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_family_req::kFamilyIdFieldNumber;
const int invite_family_req::kRoleIdFieldNumber;
const int invite_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

invite_family_req::invite_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

invite_family_req::invite_family_req(const invite_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_family_req::~invite_family_req() {
  SharedDtor();
}

void invite_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void invite_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_req_descriptor_;
}

const invite_family_req& invite_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

invite_family_req* invite_family_req::default_instance_ = NULL;

invite_family_req* invite_family_req::New() const {
  return new invite_family_req;
}

void invite_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_family_req::MergeFrom(const invite_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_family_req::CopyFrom(const invite_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void invite_family_req::Swap(invite_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_family_req_descriptor_;
  metadata.reflection = invite_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* invite_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_rsp_result_descriptor_;
}
bool invite_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const invite_family_rsp_result invite_family_rsp::success;
const invite_family_rsp_result invite_family_rsp::null_family;
const invite_family_rsp_result invite_family_rsp::not_online;
const invite_family_rsp_result invite_family_rsp::lvl_limit;
const invite_family_rsp_result invite_family_rsp::has_family;
const invite_family_rsp_result invite_family_rsp::full_family;
const invite_family_rsp_result invite_family_rsp::result_MIN;
const invite_family_rsp_result invite_family_rsp::result_MAX;
const int invite_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int invite_family_rsp::kFamilyIdFieldNumber;
const int invite_family_rsp::kRoleIdFieldNumber;
const int invite_family_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

invite_family_rsp::invite_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_family_rsp::InitAsDefaultInstance() {
}

invite_family_rsp::invite_family_rsp(const invite_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_family_rsp::~invite_family_rsp() {
  SharedDtor();
}

void invite_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void invite_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_rsp_descriptor_;
}

const invite_family_rsp& invite_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

invite_family_rsp* invite_family_rsp::default_instance_ = NULL;

invite_family_rsp* invite_family_rsp::New() const {
  return new invite_family_rsp;
}

void invite_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .client.invite_family_rsp.result ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::invite_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::invite_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required .client.invite_family_rsp.result ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required .client.invite_family_rsp.result ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required .client.invite_family_rsp.result ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_family_rsp::MergeFrom(const invite_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_family_rsp::CopyFrom(const invite_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void invite_family_rsp::Swap(invite_family_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_family_rsp_descriptor_;
  metadata.reflection = invite_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_family_list_req::kUnixtimeFieldNumber;
const int invite_family_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

invite_family_list_req::invite_family_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_family_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

invite_family_list_req::invite_family_list_req(const invite_family_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_family_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_family_list_req::~invite_family_list_req() {
  SharedDtor();
}

void invite_family_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void invite_family_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_family_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_list_req_descriptor_;
}

const invite_family_list_req& invite_family_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

invite_family_list_req* invite_family_list_req::default_instance_ = NULL;

invite_family_list_req* invite_family_list_req::New() const {
  return new invite_family_list_req;
}

void invite_family_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_family_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_family_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_family_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_family_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_family_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_family_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_family_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_family_list_req::MergeFrom(const invite_family_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_family_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_family_list_req::CopyFrom(const invite_family_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_family_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void invite_family_list_req::Swap(invite_family_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_family_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_family_list_req_descriptor_;
  metadata.reflection = invite_family_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_family_info::kFamilyIdFieldNumber;
const int invite_family_info::kRoleIdFieldNumber;
#endif  // !_MSC_VER

invite_family_info::invite_family_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_family_info::InitAsDefaultInstance() {
}

invite_family_info::invite_family_info(const invite_family_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_family_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_family_info::~invite_family_info() {
  SharedDtor();
}

void invite_family_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void invite_family_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_family_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_info_descriptor_;
}

const invite_family_info& invite_family_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

invite_family_info* invite_family_info::default_instance_ = NULL;

invite_family_info* invite_family_info::New() const {
  return new invite_family_info;
}

void invite_family_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_family_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_family_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_family_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_family_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_family_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_family_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_family_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_family_info::MergeFrom(const invite_family_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_family_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_family_info::CopyFrom(const invite_family_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_family_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void invite_family_info::Swap(invite_family_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_family_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_family_info_descriptor_;
  metadata.reflection = invite_family_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_family_list_rsp::kIfiFieldNumber;
#endif  // !_MSC_VER

invite_family_list_rsp::invite_family_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_family_list_rsp::InitAsDefaultInstance() {
}

invite_family_list_rsp::invite_family_list_rsp(const invite_family_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_family_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_family_list_rsp::~invite_family_list_rsp() {
  SharedDtor();
}

void invite_family_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void invite_family_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_family_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_family_list_rsp_descriptor_;
}

const invite_family_list_rsp& invite_family_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

invite_family_list_rsp* invite_family_list_rsp::default_instance_ = NULL;

invite_family_list_rsp* invite_family_list_rsp::New() const {
  return new invite_family_list_rsp;
}

void invite_family_list_rsp::Clear() {
  ifi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_family_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.invite_family_info ifi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ifi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ifi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ifi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_family_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.invite_family_info ifi = 1;
  for (int i = 0; i < this->ifi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ifi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_family_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.invite_family_info ifi = 1;
  for (int i = 0; i < this->ifi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ifi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_family_list_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.invite_family_info ifi = 1;
  total_size += 1 * this->ifi_size();
  for (int i = 0; i < this->ifi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ifi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_family_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_family_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_family_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_family_list_rsp::MergeFrom(const invite_family_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ifi_.MergeFrom(from.ifi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_family_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_family_list_rsp::CopyFrom(const invite_family_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_family_list_rsp::IsInitialized() const {

  for (int i = 0; i < ifi_size(); i++) {
    if (!this->ifi(i).IsInitialized()) return false;
  }
  return true;
}

void invite_family_list_rsp::Swap(invite_family_list_rsp* other) {
  if (other != this) {
    ifi_.Swap(&other->ifi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_family_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_family_list_rsp_descriptor_;
  metadata.reflection = invite_family_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agree_family_req::kFamilyIdFieldNumber;
const int agree_family_req::kTypeFieldNumber;
const int agree_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

agree_family_req::agree_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agree_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

agree_family_req::agree_family_req(const agree_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agree_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agree_family_req::~agree_family_req() {
  SharedDtor();
}

void agree_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void agree_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agree_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agree_family_req_descriptor_;
}

const agree_family_req& agree_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

agree_family_req* agree_family_req::default_instance_ = NULL;

agree_family_req* agree_family_req::New() const {
  return new agree_family_req;
}

void agree_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agree_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agree_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agree_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agree_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agree_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agree_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agree_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agree_family_req::MergeFrom(const agree_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agree_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agree_family_req::CopyFrom(const agree_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agree_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void agree_family_req::Swap(agree_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agree_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agree_family_req_descriptor_;
  metadata.reflection = agree_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* agree_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agree_family_rsp_result_descriptor_;
}
bool agree_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const agree_family_rsp_result agree_family_rsp::success;
const agree_family_rsp_result agree_family_rsp::has_family;
const agree_family_rsp_result agree_family_rsp::full_family;
const agree_family_rsp_result agree_family_rsp::result_MIN;
const agree_family_rsp_result agree_family_rsp::result_MAX;
const int agree_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int agree_family_rsp::kRetFieldNumber;
const int agree_family_rsp::kFamilyIdFieldNumber;
const int agree_family_rsp::kRoleIdFieldNumber;
const int agree_family_rsp::kTypeFieldNumber;
#endif  // !_MSC_VER

agree_family_rsp::agree_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agree_family_rsp::InitAsDefaultInstance() {
}

agree_family_rsp::agree_family_rsp(const agree_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agree_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agree_family_rsp::~agree_family_rsp() {
  SharedDtor();
}

void agree_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void agree_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agree_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agree_family_rsp_descriptor_;
}

const agree_family_rsp& agree_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

agree_family_rsp* agree_family_rsp::default_instance_ = NULL;

agree_family_rsp* agree_family_rsp::New() const {
  return new agree_family_rsp;
}

void agree_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
    role_id_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agree_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.agree_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::agree_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::agree_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agree_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.agree_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agree_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.agree_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agree_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.agree_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agree_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agree_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agree_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agree_family_rsp::MergeFrom(const agree_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agree_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agree_family_rsp::CopyFrom(const agree_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agree_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void agree_family_rsp::Swap(agree_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agree_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agree_family_rsp_descriptor_;
  metadata.reflection = agree_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modify_family_post_req::kFamilyIdFieldNumber;
const int modify_family_post_req::kPostFieldNumber;
const int modify_family_post_req::kQqFieldNumber;
const int modify_family_post_req::kYyFieldNumber;
const int modify_family_post_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

modify_family_post_req::modify_family_post_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modify_family_post_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

modify_family_post_req::modify_family_post_req(const modify_family_post_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modify_family_post_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = 0u;
  yy_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_family_post_req::~modify_family_post_req() {
  SharedDtor();
}

void modify_family_post_req::SharedDtor() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void modify_family_post_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_family_post_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_post_req_descriptor_;
}

const modify_family_post_req& modify_family_post_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

modify_family_post_req* modify_family_post_req::default_instance_ = NULL;

modify_family_post_req* modify_family_post_req::New() const {
  return new modify_family_post_req;
}

void modify_family_post_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::kEmptyString) {
        post_->clear();
      }
    }
    qq_ = 0u;
    yy_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_family_post_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_post;
        break;
      }

      // optional string post = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_qq;
        break;
      }

      // optional uint32 qq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yy;
        break;
      }

      // optional uint32 yy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yy_)));
          set_has_yy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modify_family_post_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional string post = 2;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->post(), output);
  }

  // optional uint32 qq = 3;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qq(), output);
  }

  // optional uint32 yy = 4;
  if (has_yy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yy(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modify_family_post_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional string post = 2;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->post(), target);
  }

  // optional uint32 qq = 3;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qq(), target);
  }

  // optional uint32 yy = 4;
  if (has_yy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yy(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modify_family_post_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string post = 2;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // optional uint32 qq = 3;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qq());
    }

    // optional uint32 yy = 4;
    if (has_yy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yy());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_family_post_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_family_post_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_family_post_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_family_post_req::MergeFrom(const modify_family_post_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_yy()) {
      set_yy(from.yy());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_family_post_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_family_post_req::CopyFrom(const modify_family_post_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_family_post_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void modify_family_post_req::Swap(modify_family_post_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(post_, other->post_);
    std::swap(qq_, other->qq_);
    std::swap(yy_, other->yy_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_family_post_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_family_post_req_descriptor_;
  metadata.reflection = modify_family_post_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* modify_family_post_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_post_rsp_result_descriptor_;
}
bool modify_family_post_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const modify_family_post_rsp_result modify_family_post_rsp::success;
const modify_family_post_rsp_result modify_family_post_rsp::permissions;
const modify_family_post_rsp_result modify_family_post_rsp::too_long;
const modify_family_post_rsp_result modify_family_post_rsp::result_MIN;
const modify_family_post_rsp_result modify_family_post_rsp::result_MAX;
const int modify_family_post_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int modify_family_post_rsp::kRetFieldNumber;
const int modify_family_post_rsp::kFamilyIdFieldNumber;
const int modify_family_post_rsp::kPostFieldNumber;
const int modify_family_post_rsp::kQqFieldNumber;
const int modify_family_post_rsp::kYyFieldNumber;
#endif  // !_MSC_VER

modify_family_post_rsp::modify_family_post_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modify_family_post_rsp::InitAsDefaultInstance() {
}

modify_family_post_rsp::modify_family_post_rsp(const modify_family_post_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modify_family_post_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = 0u;
  yy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_family_post_rsp::~modify_family_post_rsp() {
  SharedDtor();
}

void modify_family_post_rsp::SharedDtor() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (this != default_instance_) {
  }
}

void modify_family_post_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_family_post_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_post_rsp_descriptor_;
}

const modify_family_post_rsp& modify_family_post_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

modify_family_post_rsp* modify_family_post_rsp::default_instance_ = NULL;

modify_family_post_rsp* modify_family_post_rsp::New() const {
  return new modify_family_post_rsp;
}

void modify_family_post_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::kEmptyString) {
        post_->clear();
      }
    }
    qq_ = 0u;
    yy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_family_post_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.modify_family_post_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::modify_family_post_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::modify_family_post_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_post;
        break;
      }

      // optional string post = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_qq;
        break;
      }

      // optional uint32 qq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yy;
        break;
      }

      // optional uint32 yy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yy_)));
          set_has_yy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modify_family_post_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.modify_family_post_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // optional string post = 3;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->post(), output);
  }

  // optional uint32 qq = 4;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qq(), output);
  }

  // optional uint32 yy = 5;
  if (has_yy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modify_family_post_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.modify_family_post_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // optional string post = 3;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->post(), target);
  }

  // optional uint32 qq = 4;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qq(), target);
  }

  // optional uint32 yy = 5;
  if (has_yy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modify_family_post_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.modify_family_post_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // optional uint32 qq = 4;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qq());
    }

    // optional uint32 yy = 5;
    if (has_yy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_family_post_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_family_post_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_family_post_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_family_post_rsp::MergeFrom(const modify_family_post_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_yy()) {
      set_yy(from.yy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_family_post_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_family_post_rsp::CopyFrom(const modify_family_post_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_family_post_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void modify_family_post_rsp::Swap(modify_family_post_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(post_, other->post_);
    std::swap(qq_, other->qq_);
    std::swap(yy_, other->yy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_family_post_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_family_post_rsp_descriptor_;
  metadata.reflection = modify_family_post_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int disband_family_req::kFamilyIdFieldNumber;
const int disband_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

disband_family_req::disband_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void disband_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

disband_family_req::disband_family_req(const disband_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void disband_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

disband_family_req::~disband_family_req() {
  SharedDtor();
}

void disband_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void disband_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* disband_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return disband_family_req_descriptor_;
}

const disband_family_req& disband_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

disband_family_req* disband_family_req::default_instance_ = NULL;

disband_family_req* disband_family_req::New() const {
  return new disband_family_req;
}

void disband_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool disband_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void disband_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* disband_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int disband_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void disband_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const disband_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const disband_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void disband_family_req::MergeFrom(const disband_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void disband_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void disband_family_req::CopyFrom(const disband_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool disband_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void disband_family_req::Swap(disband_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata disband_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = disband_family_req_descriptor_;
  metadata.reflection = disband_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* disband_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return disband_family_rsp_result_descriptor_;
}
bool disband_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const disband_family_rsp_result disband_family_rsp::success;
const disband_family_rsp_result disband_family_rsp::permissions;
const disband_family_rsp_result disband_family_rsp::family_id_err;
const disband_family_rsp_result disband_family_rsp::family_has_king;
const disband_family_rsp_result disband_family_rsp::result_MIN;
const disband_family_rsp_result disband_family_rsp::result_MAX;
const int disband_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int disband_family_rsp::kRetFieldNumber;
const int disband_family_rsp::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

disband_family_rsp::disband_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void disband_family_rsp::InitAsDefaultInstance() {
}

disband_family_rsp::disband_family_rsp(const disband_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void disband_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

disband_family_rsp::~disband_family_rsp() {
  SharedDtor();
}

void disband_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void disband_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* disband_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return disband_family_rsp_descriptor_;
}

const disband_family_rsp& disband_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

disband_family_rsp* disband_family_rsp::default_instance_ = NULL;

disband_family_rsp* disband_family_rsp::New() const {
  return new disband_family_rsp;
}

void disband_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool disband_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.disband_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::disband_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::disband_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void disband_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.disband_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* disband_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.disband_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int disband_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.disband_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void disband_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const disband_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const disband_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void disband_family_rsp::MergeFrom(const disband_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void disband_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void disband_family_rsp::CopyFrom(const disband_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool disband_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void disband_family_rsp::Swap(disband_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata disband_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = disband_family_rsp_descriptor_;
  metadata.reflection = disband_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_self_req::kUnixtimeFieldNumber;
const int family_self_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_self_req::family_self_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_self_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_self_req::family_self_req(const family_self_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_self_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_self_req::~family_self_req() {
  SharedDtor();
}

void family_self_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_self_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_self_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_self_req_descriptor_;
}

const family_self_req& family_self_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_self_req* family_self_req::default_instance_ = NULL;

family_self_req* family_self_req::New() const {
  return new family_self_req;
}

void family_self_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_self_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_self_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_self_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_self_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_self_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_self_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_self_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_self_req::MergeFrom(const family_self_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_self_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_self_req::CopyFrom(const family_self_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_self_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_self_req::Swap(family_self_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_self_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_self_req_descriptor_;
  metadata.reflection = family_self_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_self_rsp::kFamilyIdFieldNumber;
const int family_self_rsp::kPermissionsFieldNumber;
const int family_self_rsp::kTimeFieldNumber;
const int family_self_rsp::kAddByFieldNumber;
#endif  // !_MSC_VER

family_self_rsp::family_self_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_self_rsp::InitAsDefaultInstance() {
}

family_self_rsp::family_self_rsp(const family_self_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_self_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  permissions_ = 0u;
  time_ = 0u;
  add_by_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_self_rsp::~family_self_rsp() {
  SharedDtor();
}

void family_self_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_self_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_self_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_self_rsp_descriptor_;
}

const family_self_rsp& family_self_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_self_rsp* family_self_rsp::default_instance_ = NULL;

family_self_rsp* family_self_rsp::New() const {
  return new family_self_rsp;
}

void family_self_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    permissions_ = 0u;
    time_ = 0u;
    add_by_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_self_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_permissions;
        break;
      }

      // required uint32 permissions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_by;
        break;
      }

      // required uint32 add_by = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_by_)));
          set_has_add_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_self_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 permissions = 2;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permissions(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 add_by = 4;
  if (has_add_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_by(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_self_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 permissions = 2;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permissions(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 add_by = 4;
  if (has_add_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_by(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_self_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 permissions = 2;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 add_by = 4;
    if (has_add_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_by());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_self_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_self_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_self_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_self_rsp::MergeFrom(const family_self_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_add_by()) {
      set_add_by(from.add_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_self_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_self_rsp::CopyFrom(const family_self_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_self_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void family_self_rsp::Swap(family_self_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(permissions_, other->permissions_);
    std::swap(time_, other->time_);
    std::swap(add_by_, other->add_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_self_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_self_rsp_descriptor_;
  metadata.reflection = family_self_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_family_list_self_req::kUnixtimeFieldNumber;
const int apply_family_list_self_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

apply_family_list_self_req::apply_family_list_self_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_list_self_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

apply_family_list_self_req::apply_family_list_self_req(const apply_family_list_self_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_list_self_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_list_self_req::~apply_family_list_self_req() {
  SharedDtor();
}

void apply_family_list_self_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void apply_family_list_self_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_list_self_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_list_self_req_descriptor_;
}

const apply_family_list_self_req& apply_family_list_self_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_list_self_req* apply_family_list_self_req::default_instance_ = NULL;

apply_family_list_self_req* apply_family_list_self_req::New() const {
  return new apply_family_list_self_req;
}

void apply_family_list_self_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_list_self_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_list_self_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_list_self_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_list_self_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_list_self_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_list_self_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_list_self_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_list_self_req::MergeFrom(const apply_family_list_self_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_list_self_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_list_self_req::CopyFrom(const apply_family_list_self_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_list_self_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void apply_family_list_self_req::Swap(apply_family_list_self_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_list_self_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_list_self_req_descriptor_;
  metadata.reflection = apply_family_list_self_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int apply_family_list_self_rsp::kFamilyIdFieldNumber;
const int apply_family_list_self_rsp::kTimeFieldNumber;
#endif  // !_MSC_VER

apply_family_list_self_rsp::apply_family_list_self_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_family_list_self_rsp::InitAsDefaultInstance() {
}

apply_family_list_self_rsp::apply_family_list_self_rsp(const apply_family_list_self_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_family_list_self_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_family_list_self_rsp::~apply_family_list_self_rsp() {
  SharedDtor();
}

void apply_family_list_self_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void apply_family_list_self_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_family_list_self_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_family_list_self_rsp_descriptor_;
}

const apply_family_list_self_rsp& apply_family_list_self_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

apply_family_list_self_rsp* apply_family_list_self_rsp::default_instance_ = NULL;

apply_family_list_self_rsp* apply_family_list_self_rsp::New() const {
  return new apply_family_list_self_rsp;
}

void apply_family_list_self_rsp::Clear() {
  family_id_.Clear();
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_family_list_self_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_family_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_family_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_family_id;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // repeated uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void apply_family_list_self_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 family_id = 1;
  for (int i = 0; i < this->family_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->family_id(i), output);
  }

  // repeated uint32 time = 2;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_family_list_self_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 family_id = 1;
  for (int i = 0; i < this->family_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->family_id(i), target);
  }

  // repeated uint32 time = 2;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_family_list_self_rsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 family_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->family_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->family_id(i));
    }
    total_size += 1 * this->family_id_size() + data_size;
  }

  // repeated uint32 time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_family_list_self_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_family_list_self_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_family_list_self_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_family_list_self_rsp::MergeFrom(const apply_family_list_self_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_id_.MergeFrom(from.family_id_);
  time_.MergeFrom(from.time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_family_list_self_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_family_list_self_rsp::CopyFrom(const apply_family_list_self_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_family_list_self_rsp::IsInitialized() const {

  return true;
}

void apply_family_list_self_rsp::Swap(apply_family_list_self_rsp* other) {
  if (other != this) {
    family_id_.Swap(&other->family_id_);
    time_.Swap(&other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_family_list_self_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_family_list_self_rsp_descriptor_;
  metadata.reflection = apply_family_list_self_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_member_list_req::kFamilyIdFieldNumber;
const int family_member_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_member_list_req::family_member_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_member_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_member_list_req::family_member_list_req(const family_member_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_member_list_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_member_list_req::~family_member_list_req() {
  SharedDtor();
}

void family_member_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_member_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_member_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_member_list_req_descriptor_;
}

const family_member_list_req& family_member_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_member_list_req* family_member_list_req::default_instance_ = NULL;

family_member_list_req* family_member_list_req::New() const {
  return new family_member_list_req;
}

void family_member_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_member_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_member_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_member_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_member_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_member_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_member_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_member_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_member_list_req::MergeFrom(const family_member_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_member_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_member_list_req::CopyFrom(const family_member_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_member_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_member_list_req::Swap(family_member_list_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_member_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_member_list_req_descriptor_;
  metadata.reflection = family_member_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_member_info::kIdFieldNumber;
const int family_member_info::kPermissionsFieldNumber;
const int family_member_info::kTimeFieldNumber;
const int family_member_info::kTotalDonateFieldNumber;
#endif  // !_MSC_VER

family_member_info::family_member_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_member_info::InitAsDefaultInstance() {
}

family_member_info::family_member_info(const family_member_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_member_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  permissions_ = 0u;
  time_ = 0u;
  total_donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_member_info::~family_member_info() {
  SharedDtor();
}

void family_member_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_member_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_member_info_descriptor_;
}

const family_member_info& family_member_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_member_info* family_member_info::default_instance_ = NULL;

family_member_info* family_member_info::New() const {
  return new family_member_info;
}

void family_member_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    permissions_ = 0u;
    time_ = 0u;
    total_donate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_permissions;
        break;
      }

      // required uint32 permissions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_donate;
        break;
      }

      // optional uint32 total_donate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 permissions = 2;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permissions(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 total_donate = 4;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_member_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 permissions = 2;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permissions(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 total_donate = 4;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_member_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 permissions = 2;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 total_donate = 4;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_member_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_member_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_member_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_member_info::MergeFrom(const family_member_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_member_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_member_info::CopyFrom(const family_member_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_member_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void family_member_info::Swap(family_member_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(permissions_, other->permissions_);
    std::swap(time_, other->time_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_member_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_member_info_descriptor_;
  metadata.reflection = family_member_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_member_list_rsp::kFamilyIdFieldNumber;
const int family_member_list_rsp::kFmiFieldNumber;
#endif  // !_MSC_VER

family_member_list_rsp::family_member_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_member_list_rsp::InitAsDefaultInstance() {
}

family_member_list_rsp::family_member_list_rsp(const family_member_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_member_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_member_list_rsp::~family_member_list_rsp() {
  SharedDtor();
}

void family_member_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_member_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_member_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_member_list_rsp_descriptor_;
}

const family_member_list_rsp& family_member_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_member_list_rsp* family_member_list_rsp::default_instance_ = NULL;

family_member_list_rsp* family_member_list_rsp::New() const {
  return new family_member_list_rsp;
}

void family_member_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  fmi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_member_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fmi;
        break;
      }

      // repeated .client.family_member_info fmi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fmi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fmi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_member_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.family_member_info fmi = 2;
  for (int i = 0; i < this->fmi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fmi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_member_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.family_member_info fmi = 2;
  for (int i = 0; i < this->fmi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fmi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_member_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.family_member_info fmi = 2;
  total_size += 1 * this->fmi_size();
  for (int i = 0; i < this->fmi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fmi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_member_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_member_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_member_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_member_list_rsp::MergeFrom(const family_member_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fmi_.MergeFrom(from.fmi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_member_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_member_list_rsp::CopyFrom(const family_member_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_member_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fmi_size(); i++) {
    if (!this->fmi(i).IsInitialized()) return false;
  }
  return true;
}

void family_member_list_rsp::Swap(family_member_list_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    fmi_.Swap(&other->fmi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_member_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_member_list_rsp_descriptor_;
  metadata.reflection = family_member_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modify_family_member_req::kFamilyIdFieldNumber;
const int modify_family_member_req::kRoleIdFieldNumber;
const int modify_family_member_req::kTypeFieldNumber;
const int modify_family_member_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

modify_family_member_req::modify_family_member_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modify_family_member_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

modify_family_member_req::modify_family_member_req(const modify_family_member_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modify_family_member_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_family_member_req::~modify_family_member_req() {
  SharedDtor();
}

void modify_family_member_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void modify_family_member_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_family_member_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_member_req_descriptor_;
}

const modify_family_member_req& modify_family_member_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

modify_family_member_req* modify_family_member_req::default_instance_ = NULL;

modify_family_member_req* modify_family_member_req::New() const {
  return new modify_family_member_req;
}

void modify_family_member_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_family_member_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modify_family_member_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modify_family_member_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modify_family_member_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_family_member_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_family_member_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_family_member_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_family_member_req::MergeFrom(const modify_family_member_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_family_member_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_family_member_req::CopyFrom(const modify_family_member_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_family_member_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void modify_family_member_req::Swap(modify_family_member_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_family_member_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_family_member_req_descriptor_;
  metadata.reflection = modify_family_member_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* modify_family_member_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_member_rsp_result_descriptor_;
}
bool modify_family_member_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const modify_family_member_rsp_result modify_family_member_rsp::success;
const modify_family_member_rsp_result modify_family_member_rsp::not_member;
const modify_family_member_rsp_result modify_family_member_rsp::permissions;
const modify_family_member_rsp_result modify_family_member_rsp::failure;
const modify_family_member_rsp_result modify_family_member_rsp::king_erro;
const modify_family_member_rsp_result modify_family_member_rsp::result_MIN;
const modify_family_member_rsp_result modify_family_member_rsp::result_MAX;
const int modify_family_member_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int modify_family_member_rsp::kRetFieldNumber;
const int modify_family_member_rsp::kFamilyIdFieldNumber;
const int modify_family_member_rsp::kRoleIdFieldNumber;
const int modify_family_member_rsp::kTypeFieldNumber;
#endif  // !_MSC_VER

modify_family_member_rsp::modify_family_member_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void modify_family_member_rsp::InitAsDefaultInstance() {
}

modify_family_member_rsp::modify_family_member_rsp(const modify_family_member_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void modify_family_member_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_family_member_rsp::~modify_family_member_rsp() {
  SharedDtor();
}

void modify_family_member_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void modify_family_member_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_family_member_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_family_member_rsp_descriptor_;
}

const modify_family_member_rsp& modify_family_member_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

modify_family_member_rsp* modify_family_member_rsp::default_instance_ = NULL;

modify_family_member_rsp* modify_family_member_rsp::New() const {
  return new modify_family_member_rsp;
}

void modify_family_member_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    family_id_ = 0u;
    role_id_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_family_member_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.modify_family_member_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::modify_family_member_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::modify_family_member_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void modify_family_member_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.modify_family_member_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* modify_family_member_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.modify_family_member_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int modify_family_member_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.modify_family_member_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_family_member_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_family_member_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_family_member_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_family_member_rsp::MergeFrom(const modify_family_member_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_family_member_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_family_member_rsp::CopyFrom(const modify_family_member_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_family_member_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void modify_family_member_rsp::Swap(modify_family_member_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_family_member_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_family_member_rsp_descriptor_;
  metadata.reflection = modify_family_member_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secede_family_req::kFamilyIdFieldNumber;
const int secede_family_req::kRoleIdFieldNumber;
const int secede_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

secede_family_req::secede_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void secede_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

secede_family_req::secede_family_req(const secede_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void secede_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secede_family_req::~secede_family_req() {
  SharedDtor();
}

void secede_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void secede_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secede_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secede_family_req_descriptor_;
}

const secede_family_req& secede_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

secede_family_req* secede_family_req::default_instance_ = NULL;

secede_family_req* secede_family_req::New() const {
  return new secede_family_req;
}

void secede_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secede_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void secede_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* secede_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int secede_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secede_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secede_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secede_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secede_family_req::MergeFrom(const secede_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secede_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secede_family_req::CopyFrom(const secede_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secede_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void secede_family_req::Swap(secede_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secede_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secede_family_req_descriptor_;
  metadata.reflection = secede_family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secede_family_rsp::kFamilyIdFieldNumber;
const int secede_family_rsp::kRoleIdFieldNumber;
const int secede_family_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

secede_family_rsp::secede_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void secede_family_rsp::InitAsDefaultInstance() {
}

secede_family_rsp::secede_family_rsp(const secede_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void secede_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secede_family_rsp::~secede_family_rsp() {
  SharedDtor();
}

void secede_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void secede_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secede_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secede_family_rsp_descriptor_;
}

const secede_family_rsp& secede_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

secede_family_rsp* secede_family_rsp::default_instance_ = NULL;

secede_family_rsp* secede_family_rsp::New() const {
  return new secede_family_rsp;
}

void secede_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secede_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void secede_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 result_type = 3;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* secede_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 result_type = 3;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int secede_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 result_type = 3;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secede_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secede_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secede_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secede_family_rsp::MergeFrom(const secede_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secede_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secede_family_rsp::CopyFrom(const secede_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secede_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void secede_family_rsp::Swap(secede_family_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secede_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secede_family_rsp_descriptor_;
  metadata.reflection = secede_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int expel_member_req::kEvicteeIdFieldNumber;
const int expel_member_req::kFamilyIdFieldNumber;
const int expel_member_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

expel_member_req::expel_member_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void expel_member_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

expel_member_req::expel_member_req(const expel_member_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void expel_member_req::SharedCtor() {
  _cached_size_ = 0;
  evictee_id_ = 0u;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expel_member_req::~expel_member_req() {
  SharedDtor();
}

void expel_member_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void expel_member_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* expel_member_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return expel_member_req_descriptor_;
}

const expel_member_req& expel_member_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

expel_member_req* expel_member_req::default_instance_ = NULL;

expel_member_req* expel_member_req::New() const {
  return new expel_member_req;
}

void expel_member_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evictee_id_ = 0u;
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool expel_member_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 evictee_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evictee_id_)));
          set_has_evictee_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void expel_member_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 evictee_id = 1;
  if (has_evictee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->evictee_id(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* expel_member_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 evictee_id = 1;
  if (has_evictee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->evictee_id(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int expel_member_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 evictee_id = 1;
    if (has_evictee_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evictee_id());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expel_member_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const expel_member_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const expel_member_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void expel_member_req::MergeFrom(const expel_member_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evictee_id()) {
      set_evictee_id(from.evictee_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void expel_member_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void expel_member_req::CopyFrom(const expel_member_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expel_member_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void expel_member_req::Swap(expel_member_req* other) {
  if (other != this) {
    std::swap(evictee_id_, other->evictee_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata expel_member_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = expel_member_req_descriptor_;
  metadata.reflection = expel_member_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int expel_member_rsp::kFamilyIdFieldNumber;
const int expel_member_rsp::kRoleIdFieldNumber;
const int expel_member_rsp::kEvicteeIdFieldNumber;
const int expel_member_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

expel_member_rsp::expel_member_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void expel_member_rsp::InitAsDefaultInstance() {
}

expel_member_rsp::expel_member_rsp(const expel_member_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void expel_member_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  evictee_id_ = 0u;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expel_member_rsp::~expel_member_rsp() {
  SharedDtor();
}

void expel_member_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void expel_member_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* expel_member_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return expel_member_rsp_descriptor_;
}

const expel_member_rsp& expel_member_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

expel_member_rsp* expel_member_rsp::default_instance_ = NULL;

expel_member_rsp* expel_member_rsp::New() const {
  return new expel_member_rsp;
}

void expel_member_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    evictee_id_ = 0u;
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool expel_member_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_evictee_id;
        break;
      }

      // required uint32 evictee_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evictee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evictee_id_)));
          set_has_evictee_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result_type;
        break;
      }

      // required uint32 result_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void expel_member_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 evictee_id = 3;
  if (has_evictee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->evictee_id(), output);
  }

  // required uint32 result_type = 4;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* expel_member_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 evictee_id = 3;
  if (has_evictee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->evictee_id(), target);
  }

  // required uint32 result_type = 4;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int expel_member_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 evictee_id = 3;
    if (has_evictee_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evictee_id());
    }

    // required uint32 result_type = 4;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expel_member_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const expel_member_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const expel_member_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void expel_member_rsp::MergeFrom(const expel_member_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_evictee_id()) {
      set_evictee_id(from.evictee_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void expel_member_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void expel_member_rsp::CopyFrom(const expel_member_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expel_member_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void expel_member_rsp::Swap(expel_member_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(evictee_id_, other->evictee_id_);
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata expel_member_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = expel_member_rsp_descriptor_;
  metadata.reflection = expel_member_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upgrade_family_req::kFamilyIdFieldNumber;
const int upgrade_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

upgrade_family_req::upgrade_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

upgrade_family_req::upgrade_family_req(const upgrade_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_family_req::~upgrade_family_req() {
  SharedDtor();
}

void upgrade_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void upgrade_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_family_req_descriptor_;
}

const upgrade_family_req& upgrade_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

upgrade_family_req* upgrade_family_req::default_instance_ = NULL;

upgrade_family_req* upgrade_family_req::New() const {
  return new upgrade_family_req;
}

void upgrade_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_family_req::MergeFrom(const upgrade_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_family_req::CopyFrom(const upgrade_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void upgrade_family_req::Swap(upgrade_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_family_req_descriptor_;
  metadata.reflection = upgrade_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* upgrade_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_family_rsp_result_descriptor_;
}
bool upgrade_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const upgrade_family_rsp_result upgrade_family_rsp::success;
const upgrade_family_rsp_result upgrade_family_rsp::permissions;
const upgrade_family_rsp_result upgrade_family_rsp::money_limit;
const upgrade_family_rsp_result upgrade_family_rsp::result_MIN;
const upgrade_family_rsp_result upgrade_family_rsp::result_MAX;
const int upgrade_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int upgrade_family_rsp::kRetFieldNumber;
const int upgrade_family_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

upgrade_family_rsp::upgrade_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void upgrade_family_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

upgrade_family_rsp::upgrade_family_rsp(const upgrade_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void upgrade_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upgrade_family_rsp::~upgrade_family_rsp() {
  SharedDtor();
}

void upgrade_family_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void upgrade_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upgrade_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upgrade_family_rsp_descriptor_;
}

const upgrade_family_rsp& upgrade_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

upgrade_family_rsp* upgrade_family_rsp::default_instance_ = NULL;

upgrade_family_rsp* upgrade_family_rsp::New() const {
  return new upgrade_family_rsp;
}

void upgrade_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upgrade_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.upgrade_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::upgrade_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::upgrade_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .client.family_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void upgrade_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.upgrade_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* upgrade_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.upgrade_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int upgrade_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.upgrade_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .client.family_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upgrade_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upgrade_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upgrade_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upgrade_family_rsp::MergeFrom(const upgrade_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upgrade_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upgrade_family_rsp::CopyFrom(const upgrade_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upgrade_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void upgrade_family_rsp::Swap(upgrade_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upgrade_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upgrade_family_rsp_descriptor_;
  metadata.reflection = upgrade_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int donate_family_req::kFamilyIdFieldNumber;
const int donate_family_req::kTypeFieldNumber;
const int donate_family_req::kNumFieldNumber;
const int donate_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

donate_family_req::donate_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void donate_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

donate_family_req::donate_family_req(const donate_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void donate_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  type_ = 0u;
  num_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

donate_family_req::~donate_family_req() {
  SharedDtor();
}

void donate_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void donate_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* donate_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_family_req_descriptor_;
}

const donate_family_req& donate_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

donate_family_req* donate_family_req::default_instance_ = NULL;

donate_family_req* donate_family_req::New() const {
  return new donate_family_req;
}

void donate_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    type_ = 0u;
    num_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool donate_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void donate_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* donate_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int donate_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void donate_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const donate_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const donate_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void donate_family_req::MergeFrom(const donate_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void donate_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void donate_family_req::CopyFrom(const donate_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool donate_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void donate_family_req::Swap(donate_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata donate_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = donate_family_req_descriptor_;
  metadata.reflection = donate_family_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* donate_family_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_family_rsp_result_descriptor_;
}
bool donate_family_rsp_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const donate_family_rsp_result donate_family_rsp::success;
const donate_family_rsp_result donate_family_rsp::not_enough;
const donate_family_rsp_result donate_family_rsp::day_limit;
const donate_family_rsp_result donate_family_rsp::donate_type_err;
const donate_family_rsp_result donate_family_rsp::result_MIN;
const donate_family_rsp_result donate_family_rsp::result_MAX;
const int donate_family_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int donate_family_rsp::kRetFieldNumber;
const int donate_family_rsp::kTypeFieldNumber;
const int donate_family_rsp::kInfoFieldNumber;
const int donate_family_rsp::kTotalDonateFieldNumber;
#endif  // !_MSC_VER

donate_family_rsp::donate_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void donate_family_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

donate_family_rsp::donate_family_rsp(const donate_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void donate_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0u;
  info_ = NULL;
  total_donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

donate_family_rsp::~donate_family_rsp() {
  SharedDtor();
}

void donate_family_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void donate_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* donate_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_family_rsp_descriptor_;
}

const donate_family_rsp& donate_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

donate_family_rsp* donate_family_rsp::default_instance_ = NULL;

donate_family_rsp* donate_family_rsp::New() const {
  return new donate_family_rsp;
}

void donate_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
    total_donate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool donate_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.donate_family_rsp.result ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::donate_family_rsp_result_IsValid(value)) {
            set_ret(static_cast< ::client::donate_family_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .client.family_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_donate;
        break;
      }

      // optional uint32 total_donate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void donate_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.donate_family_rsp.result ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .client.family_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint32 total_donate = 4;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* donate_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.donate_family_rsp.result ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .client.family_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint32 total_donate = 4;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int donate_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.donate_family_rsp.result ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.family_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 total_donate = 4;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void donate_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const donate_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const donate_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void donate_family_rsp::MergeFrom(const donate_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void donate_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void donate_family_rsp::CopyFrom(const donate_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool donate_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void donate_family_rsp::Swap(donate_family_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata donate_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = donate_family_rsp_descriptor_;
  metadata.reflection = donate_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int donate_list_req::kFamilyIdFieldNumber;
const int donate_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

donate_list_req::donate_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void donate_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

donate_list_req::donate_list_req(const donate_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void donate_list_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

donate_list_req::~donate_list_req() {
  SharedDtor();
}

void donate_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void donate_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* donate_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_list_req_descriptor_;
}

const donate_list_req& donate_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

donate_list_req* donate_list_req::default_instance_ = NULL;

donate_list_req* donate_list_req::New() const {
  return new donate_list_req;
}

void donate_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool donate_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void donate_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* donate_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int donate_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void donate_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const donate_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const donate_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void donate_list_req::MergeFrom(const donate_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void donate_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void donate_list_req::CopyFrom(const donate_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool donate_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void donate_list_req::Swap(donate_list_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata donate_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = donate_list_req_descriptor_;
  metadata.reflection = donate_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int donate_info::kRoleIdFieldNumber;
const int donate_info::kDragonCountFieldNumber;
const int donate_info::kTigerCountFieldNumber;
const int donate_info::kRosefinchCountFieldNumber;
const int donate_info::kTortoiseCountFieldNumber;
const int donate_info::kMoneyFieldNumber;
#endif  // !_MSC_VER

donate_info::donate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void donate_info::InitAsDefaultInstance() {
}

donate_info::donate_info(const donate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void donate_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  dragon_count_ = 0u;
  tiger_count_ = 0u;
  rosefinch_count_ = 0u;
  tortoise_count_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

donate_info::~donate_info() {
  SharedDtor();
}

void donate_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void donate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* donate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_info_descriptor_;
}

const donate_info& donate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

donate_info* donate_info::default_instance_ = NULL;

donate_info* donate_info::New() const {
  return new donate_info;
}

void donate_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    dragon_count_ = 0u;
    tiger_count_ = 0u;
    rosefinch_count_ = 0u;
    tortoise_count_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool donate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dragon_count;
        break;
      }

      // required uint32 dragon_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dragon_count_)));
          set_has_dragon_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tiger_count;
        break;
      }

      // required uint32 tiger_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiger_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tiger_count_)));
          set_has_tiger_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rosefinch_count;
        break;
      }

      // required uint32 rosefinch_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rosefinch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rosefinch_count_)));
          set_has_rosefinch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tortoise_count;
        break;
      }

      // required uint32 tortoise_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tortoise_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tortoise_count_)));
          set_has_tortoise_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // required uint32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void donate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 dragon_count = 2;
  if (has_dragon_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dragon_count(), output);
  }

  // required uint32 tiger_count = 3;
  if (has_tiger_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tiger_count(), output);
  }

  // required uint32 rosefinch_count = 4;
  if (has_rosefinch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rosefinch_count(), output);
  }

  // required uint32 tortoise_count = 5;
  if (has_tortoise_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tortoise_count(), output);
  }

  // required uint32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* donate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 dragon_count = 2;
  if (has_dragon_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dragon_count(), target);
  }

  // required uint32 tiger_count = 3;
  if (has_tiger_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tiger_count(), target);
  }

  // required uint32 rosefinch_count = 4;
  if (has_rosefinch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rosefinch_count(), target);
  }

  // required uint32 tortoise_count = 5;
  if (has_tortoise_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tortoise_count(), target);
  }

  // required uint32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int donate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 dragon_count = 2;
    if (has_dragon_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dragon_count());
    }

    // required uint32 tiger_count = 3;
    if (has_tiger_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tiger_count());
    }

    // required uint32 rosefinch_count = 4;
    if (has_rosefinch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rosefinch_count());
    }

    // required uint32 tortoise_count = 5;
    if (has_tortoise_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tortoise_count());
    }

    // required uint32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void donate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const donate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const donate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void donate_info::MergeFrom(const donate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_dragon_count()) {
      set_dragon_count(from.dragon_count());
    }
    if (from.has_tiger_count()) {
      set_tiger_count(from.tiger_count());
    }
    if (from.has_rosefinch_count()) {
      set_rosefinch_count(from.rosefinch_count());
    }
    if (from.has_tortoise_count()) {
      set_tortoise_count(from.tortoise_count());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void donate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void donate_info::CopyFrom(const donate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool donate_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void donate_info::Swap(donate_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(dragon_count_, other->dragon_count_);
    std::swap(tiger_count_, other->tiger_count_);
    std::swap(rosefinch_count_, other->rosefinch_count_);
    std::swap(tortoise_count_, other->tortoise_count_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata donate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = donate_info_descriptor_;
  metadata.reflection = donate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int donate_list_rsp::kFamilyIdFieldNumber;
const int donate_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

donate_list_rsp::donate_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void donate_list_rsp::InitAsDefaultInstance() {
}

donate_list_rsp::donate_list_rsp(const donate_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void donate_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

donate_list_rsp::~donate_list_rsp() {
  SharedDtor();
}

void donate_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void donate_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* donate_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return donate_list_rsp_descriptor_;
}

const donate_list_rsp& donate_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

donate_list_rsp* donate_list_rsp::default_instance_ = NULL;

donate_list_rsp* donate_list_rsp::New() const {
  return new donate_list_rsp;
}

void donate_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool donate_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.donate_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void donate_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.donate_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* donate_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.donate_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int donate_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.donate_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void donate_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const donate_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const donate_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void donate_list_rsp::MergeFrom(const donate_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void donate_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void donate_list_rsp::CopyFrom(const donate_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool donate_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void donate_list_rsp::Swap(donate_list_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata donate_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = donate_list_rsp_descriptor_;
  metadata.reflection = donate_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_log_req::kFamilyIdFieldNumber;
const int family_log_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_log_req::family_log_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_log_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_log_req::family_log_req(const family_log_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_log_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_log_req::~family_log_req() {
  SharedDtor();
}

void family_log_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_log_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_log_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_log_req_descriptor_;
}

const family_log_req& family_log_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_log_req* family_log_req::default_instance_ = NULL;

family_log_req* family_log_req::New() const {
  return new family_log_req;
}

void family_log_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_log_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_log_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_log_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_log_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_log_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_log_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_log_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_log_req::MergeFrom(const family_log_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_log_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_log_req::CopyFrom(const family_log_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_log_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_log_req::Swap(family_log_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_log_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_log_req_descriptor_;
  metadata.reflection = family_log_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_log_info::kTimeFieldNumber;
const int family_log_info::kTypeFieldNumber;
const int family_log_info::kKeyFieldNumber;
const int family_log_info::kValueFieldNumber;
const int family_log_info::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

family_log_info::family_log_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_log_info::InitAsDefaultInstance() {
}

family_log_info::family_log_info(const family_log_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_log_info::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  type_ = 0u;
  key_ = 0u;
  value_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_log_info::~family_log_info() {
  SharedDtor();
}

void family_log_info::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void family_log_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_log_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_log_info_descriptor_;
}

const family_log_info& family_log_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_log_info* family_log_info::default_instance_ = NULL;

family_log_info* family_log_info::New() const {
  return new family_log_info;
}

void family_log_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    type_ = 0u;
    key_ = 0u;
    value_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_log_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // required uint32 key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_family_name;
        break;
      }

      // required string family_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_log_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->key(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // required string family_name = 5;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_log_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->key(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // required string family_name = 5;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_log_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required string family_name = 5;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_log_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_log_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_log_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_log_info::MergeFrom(const family_log_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_log_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_log_info::CopyFrom(const family_log_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_log_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void family_log_info::Swap(family_log_info* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_log_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_log_info_descriptor_;
  metadata.reflection = family_log_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_log_rsp::kFamilyIdFieldNumber;
const int family_log_rsp::kFliFieldNumber;
#endif  // !_MSC_VER

family_log_rsp::family_log_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_log_rsp::InitAsDefaultInstance() {
}

family_log_rsp::family_log_rsp(const family_log_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_log_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_log_rsp::~family_log_rsp() {
  SharedDtor();
}

void family_log_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_log_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_log_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_log_rsp_descriptor_;
}

const family_log_rsp& family_log_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_log_rsp* family_log_rsp::default_instance_ = NULL;

family_log_rsp* family_log_rsp::New() const {
  return new family_log_rsp;
}

void family_log_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  fli_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_log_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fli;
        break;
      }

      // repeated .client.family_log_info fli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fli;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_log_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.family_log_info fli = 2;
  for (int i = 0; i < this->fli_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fli(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_log_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.family_log_info fli = 2;
  for (int i = 0; i < this->fli_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fli(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_log_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.family_log_info fli = 2;
  total_size += 1 * this->fli_size();
  for (int i = 0; i < this->fli_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fli(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_log_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_log_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_log_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_log_rsp::MergeFrom(const family_log_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fli_.MergeFrom(from.fli_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_log_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_log_rsp::CopyFrom(const family_log_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_log_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fli_size(); i++) {
    if (!this->fli(i).IsInitialized()) return false;
  }
  return true;
}

void family_log_rsp::Swap(family_log_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    fli_.Swap(&other->fli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_log_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_log_rsp_descriptor_;
  metadata.reflection = family_log_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_log_update::kFamilyIdFieldNumber;
const int family_log_update::kFliFieldNumber;
#endif  // !_MSC_VER

family_log_update::family_log_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_log_update::InitAsDefaultInstance() {
}

family_log_update::family_log_update(const family_log_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_log_update::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_log_update::~family_log_update() {
  SharedDtor();
}

void family_log_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_log_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_log_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_log_update_descriptor_;
}

const family_log_update& family_log_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_log_update* family_log_update::default_instance_ = NULL;

family_log_update* family_log_update::New() const {
  return new family_log_update;
}

void family_log_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  fli_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_log_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fli;
        break;
      }

      // repeated .client.family_log_info fli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fli:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fli;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_log_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.family_log_info fli = 2;
  for (int i = 0; i < this->fli_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fli(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_log_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.family_log_info fli = 2;
  for (int i = 0; i < this->fli_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fli(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_log_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.family_log_info fli = 2;
  total_size += 1 * this->fli_size();
  for (int i = 0; i < this->fli_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fli(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_log_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_log_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_log_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_log_update::MergeFrom(const family_log_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  fli_.MergeFrom(from.fli_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_log_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_log_update::CopyFrom(const family_log_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_log_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fli_size(); i++) {
    if (!this->fli(i).IsInitialized()) return false;
  }
  return true;
}

void family_log_update::Swap(family_log_update* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    fli_.Swap(&other->fli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_log_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_log_update_descriptor_;
  metadata.reflection = family_log_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_record_req::kFamilyIdFieldNumber;
const int family_record_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_record_req::family_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_record_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_record_req::family_record_req(const family_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_record_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_record_req::~family_record_req() {
  SharedDtor();
}

void family_record_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_record_req_descriptor_;
}

const family_record_req& family_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_record_req* family_record_req::default_instance_ = NULL;

family_record_req* family_record_req::New() const {
  return new family_record_req;
}

void family_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_record_req::MergeFrom(const family_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_record_req::CopyFrom(const family_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_record_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_record_req::Swap(family_record_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_record_req_descriptor_;
  metadata.reflection = family_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_record_info::kRoleIdFieldNumber;
const int family_record_info::kJoinNumFieldNumber;
const int family_record_info::kKillChiefNumFieldNumber;
const int family_record_info::kKillViceChiefNumFieldNumber;
const int family_record_info::kKillElderNumFieldNumber;
const int family_record_info::kKillEliteNumFieldNumber;
const int family_record_info::kKillMemberNumFieldNumber;
const int family_record_info::kDeadNumFieldNumber;
const int family_record_info::kBeKillFieldNumber;
const int family_record_info::kBeKillNumFieldNumber;
const int family_record_info::kTypeFieldNumber;
#endif  // !_MSC_VER

family_record_info::family_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_record_info::InitAsDefaultInstance() {
}

family_record_info::family_record_info(const family_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_record_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  join_num_ = 0u;
  kill_chief_num_ = 0u;
  kill_vice_chief_num_ = 0u;
  kill_elder_num_ = 0u;
  kill_elite_num_ = 0u;
  kill_member_num_ = 0u;
  dead_num_ = 0u;
  be_kill_ = 0u;
  be_kill_num_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_record_info::~family_record_info() {
  SharedDtor();
}

void family_record_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_record_info_descriptor_;
}

const family_record_info& family_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_record_info* family_record_info::default_instance_ = NULL;

family_record_info* family_record_info::New() const {
  return new family_record_info;
}

void family_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    join_num_ = 0u;
    kill_chief_num_ = 0u;
    kill_vice_chief_num_ = 0u;
    kill_elder_num_ = 0u;
    kill_elite_num_ = 0u;
    kill_member_num_ = 0u;
    dead_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    be_kill_ = 0u;
    be_kill_num_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_join_num;
        break;
      }

      // required uint32 join_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_num_)));
          set_has_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_chief_num;
        break;
      }

      // required uint32 kill_chief_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_chief_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_chief_num_)));
          set_has_kill_chief_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_vice_chief_num;
        break;
      }

      // required uint32 kill_vice_chief_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_vice_chief_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_vice_chief_num_)));
          set_has_kill_vice_chief_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_elder_num;
        break;
      }

      // required uint32 kill_elder_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_elder_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_elder_num_)));
          set_has_kill_elder_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kill_elite_num;
        break;
      }

      // required uint32 kill_elite_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_elite_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_elite_num_)));
          set_has_kill_elite_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_kill_member_num;
        break;
      }

      // required uint32 kill_member_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_member_num_)));
          set_has_kill_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dead_num;
        break;
      }

      // required uint32 dead_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_num_)));
          set_has_dead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_be_kill;
        break;
      }

      // required uint32 be_kill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_kill_)));
          set_has_be_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_be_kill_num;
        break;
      }

      // required uint32 be_kill_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_kill_num_)));
          set_has_be_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }

      // required uint32 type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 join_num = 2;
  if (has_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->join_num(), output);
  }

  // required uint32 kill_chief_num = 3;
  if (has_kill_chief_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_chief_num(), output);
  }

  // required uint32 kill_vice_chief_num = 4;
  if (has_kill_vice_chief_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill_vice_chief_num(), output);
  }

  // required uint32 kill_elder_num = 5;
  if (has_kill_elder_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kill_elder_num(), output);
  }

  // required uint32 kill_elite_num = 6;
  if (has_kill_elite_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kill_elite_num(), output);
  }

  // required uint32 kill_member_num = 7;
  if (has_kill_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_member_num(), output);
  }

  // required uint32 dead_num = 8;
  if (has_dead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dead_num(), output);
  }

  // required uint32 be_kill = 9;
  if (has_be_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->be_kill(), output);
  }

  // required uint32 be_kill_num = 10;
  if (has_be_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->be_kill_num(), output);
  }

  // required uint32 type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 join_num = 2;
  if (has_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->join_num(), target);
  }

  // required uint32 kill_chief_num = 3;
  if (has_kill_chief_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_chief_num(), target);
  }

  // required uint32 kill_vice_chief_num = 4;
  if (has_kill_vice_chief_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill_vice_chief_num(), target);
  }

  // required uint32 kill_elder_num = 5;
  if (has_kill_elder_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kill_elder_num(), target);
  }

  // required uint32 kill_elite_num = 6;
  if (has_kill_elite_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kill_elite_num(), target);
  }

  // required uint32 kill_member_num = 7;
  if (has_kill_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_member_num(), target);
  }

  // required uint32 dead_num = 8;
  if (has_dead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dead_num(), target);
  }

  // required uint32 be_kill = 9;
  if (has_be_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->be_kill(), target);
  }

  // required uint32 be_kill_num = 10;
  if (has_be_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->be_kill_num(), target);
  }

  // required uint32 type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 join_num = 2;
    if (has_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_num());
    }

    // required uint32 kill_chief_num = 3;
    if (has_kill_chief_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_chief_num());
    }

    // required uint32 kill_vice_chief_num = 4;
    if (has_kill_vice_chief_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_vice_chief_num());
    }

    // required uint32 kill_elder_num = 5;
    if (has_kill_elder_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_elder_num());
    }

    // required uint32 kill_elite_num = 6;
    if (has_kill_elite_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_elite_num());
    }

    // required uint32 kill_member_num = 7;
    if (has_kill_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_member_num());
    }

    // required uint32 dead_num = 8;
    if (has_dead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 be_kill = 9;
    if (has_be_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->be_kill());
    }

    // required uint32 be_kill_num = 10;
    if (has_be_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->be_kill_num());
    }

    // required uint32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_record_info::MergeFrom(const family_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_join_num()) {
      set_join_num(from.join_num());
    }
    if (from.has_kill_chief_num()) {
      set_kill_chief_num(from.kill_chief_num());
    }
    if (from.has_kill_vice_chief_num()) {
      set_kill_vice_chief_num(from.kill_vice_chief_num());
    }
    if (from.has_kill_elder_num()) {
      set_kill_elder_num(from.kill_elder_num());
    }
    if (from.has_kill_elite_num()) {
      set_kill_elite_num(from.kill_elite_num());
    }
    if (from.has_kill_member_num()) {
      set_kill_member_num(from.kill_member_num());
    }
    if (from.has_dead_num()) {
      set_dead_num(from.dead_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_be_kill()) {
      set_be_kill(from.be_kill());
    }
    if (from.has_be_kill_num()) {
      set_be_kill_num(from.be_kill_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_record_info::CopyFrom(const family_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_record_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void family_record_info::Swap(family_record_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(join_num_, other->join_num_);
    std::swap(kill_chief_num_, other->kill_chief_num_);
    std::swap(kill_vice_chief_num_, other->kill_vice_chief_num_);
    std::swap(kill_elder_num_, other->kill_elder_num_);
    std::swap(kill_elite_num_, other->kill_elite_num_);
    std::swap(kill_member_num_, other->kill_member_num_);
    std::swap(dead_num_, other->dead_num_);
    std::swap(be_kill_, other->be_kill_);
    std::swap(be_kill_num_, other->be_kill_num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_record_info_descriptor_;
  metadata.reflection = family_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_record_rsp::kFamilyIdFieldNumber;
const int family_record_rsp::kFriFieldNumber;
#endif  // !_MSC_VER

family_record_rsp::family_record_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_record_rsp::InitAsDefaultInstance() {
}

family_record_rsp::family_record_rsp(const family_record_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_record_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_record_rsp::~family_record_rsp() {
  SharedDtor();
}

void family_record_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_record_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_record_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_record_rsp_descriptor_;
}

const family_record_rsp& family_record_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_record_rsp* family_record_rsp::default_instance_ = NULL;

family_record_rsp* family_record_rsp::New() const {
  return new family_record_rsp;
}

void family_record_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  fri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_record_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fri;
        break;
      }

      // repeated .client.family_record_info fri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_record_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.family_record_info fri = 2;
  for (int i = 0; i < this->fri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_record_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.family_record_info fri = 2;
  for (int i = 0; i < this->fri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_record_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.family_record_info fri = 2;
  total_size += 1 * this->fri_size();
  for (int i = 0; i < this->fri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_record_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_record_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_record_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_record_rsp::MergeFrom(const family_record_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fri_.MergeFrom(from.fri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_record_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_record_rsp::CopyFrom(const family_record_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_record_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fri_size(); i++) {
    if (!this->fri(i).IsInitialized()) return false;
  }
  return true;
}

void family_record_rsp::Swap(family_record_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    fri_.Swap(&other->fri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_record_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_record_rsp_descriptor_;
  metadata.reflection = family_record_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_record_update::kTypeFieldNumber;
const int family_record_update::kKillerFamilyFieldNumber;
const int family_record_update::kKillerFieldNumber;
const int family_record_update::kSlainFamilyFieldNumber;
const int family_record_update::kSlainTitleFieldNumber;
const int family_record_update::kSlainFieldNumber;
const int family_record_update::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

family_record_update::family_record_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_record_update::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

family_record_update::family_record_update(const family_record_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_record_update::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  killer_family_ = 0u;
  killer_ = 0u;
  slain_family_ = 0u;
  slain_title_ = 0u;
  slain_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_record_update::~family_record_update() {
  SharedDtor();
}

void family_record_update::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void family_record_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_record_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_record_update_descriptor_;
}

const family_record_update& family_record_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_record_update* family_record_update::default_instance_ = NULL;

family_record_update* family_record_update::New() const {
  return new family_record_update;
}

void family_record_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    killer_family_ = 0u;
    killer_ = 0u;
    slain_family_ = 0u;
    slain_title_ = 0u;
    slain_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_record_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killer_family;
        break;
      }

      // required uint32 killer_family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_family_)));
          set_has_killer_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killer;
        break;
      }

      // required uint32 killer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slain_family;
        break;
      }

      // required uint32 slain_family = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slain_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slain_family_)));
          set_has_slain_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slain_title;
        break;
      }

      // required uint32 slain_title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slain_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slain_title_)));
          set_has_slain_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slain;
        break;
      }

      // required uint32 slain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slain_)));
          set_has_slain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_record_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 killer_family = 2;
  if (has_killer_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killer_family(), output);
  }

  // required uint32 killer = 3;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killer(), output);
  }

  // required uint32 slain_family = 4;
  if (has_slain_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slain_family(), output);
  }

  // required uint32 slain_title = 5;
  if (has_slain_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slain_title(), output);
  }

  // required uint32 slain = 6;
  if (has_slain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slain(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_record_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 killer_family = 2;
  if (has_killer_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killer_family(), target);
  }

  // required uint32 killer = 3;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killer(), target);
  }

  // required uint32 slain_family = 4;
  if (has_slain_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slain_family(), target);
  }

  // required uint32 slain_title = 5;
  if (has_slain_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slain_title(), target);
  }

  // required uint32 slain = 6;
  if (has_slain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slain(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_record_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 killer_family = 2;
    if (has_killer_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_family());
    }

    // required uint32 killer = 3;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer());
    }

    // required uint32 slain_family = 4;
    if (has_slain_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slain_family());
    }

    // required uint32 slain_title = 5;
    if (has_slain_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slain_title());
    }

    // required uint32 slain = 6;
    if (has_slain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slain());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_record_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_record_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_record_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_record_update::MergeFrom(const family_record_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_killer_family()) {
      set_killer_family(from.killer_family());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_slain_family()) {
      set_slain_family(from.slain_family());
    }
    if (from.has_slain_title()) {
      set_slain_title(from.slain_title());
    }
    if (from.has_slain()) {
      set_slain(from.slain());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_record_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_record_update::CopyFrom(const family_record_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_record_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void family_record_update::Swap(family_record_update* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(killer_family_, other->killer_family_);
    std::swap(killer_, other->killer_);
    std::swap(slain_family_, other->slain_family_);
    std::swap(slain_title_, other->slain_title_);
    std::swap(slain_, other->slain_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_record_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_record_update_descriptor_;
  metadata.reflection = family_record_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_family_flag_id_req::kFamilyIdFieldNumber;
const int change_family_flag_id_req::kFlagIdFieldNumber;
const int change_family_flag_id_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

change_family_flag_id_req::change_family_flag_id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_family_flag_id_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

change_family_flag_id_req::change_family_flag_id_req(const change_family_flag_id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_family_flag_id_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  flag_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_family_flag_id_req::~change_family_flag_id_req() {
  SharedDtor();
}

void change_family_flag_id_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void change_family_flag_id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_family_flag_id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_family_flag_id_req_descriptor_;
}

const change_family_flag_id_req& change_family_flag_id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

change_family_flag_id_req* change_family_flag_id_req::default_instance_ = NULL;

change_family_flag_id_req* change_family_flag_id_req::New() const {
  return new change_family_flag_id_req;
}

void change_family_flag_id_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    flag_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_family_flag_id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag_id;
        break;
      }

      // required uint32 flag_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_family_flag_id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 flag_id = 2;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_family_flag_id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 flag_id = 2;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_family_flag_id_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 flag_id = 2;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_family_flag_id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_family_flag_id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_family_flag_id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_family_flag_id_req::MergeFrom(const change_family_flag_id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_family_flag_id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_family_flag_id_req::CopyFrom(const change_family_flag_id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_family_flag_id_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void change_family_flag_id_req::Swap(change_family_flag_id_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_family_flag_id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_family_flag_id_req_descriptor_;
  metadata.reflection = change_family_flag_id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_family_flag_id_rsp::kResultTypeFieldNumber;
const int change_family_flag_id_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

change_family_flag_id_rsp::change_family_flag_id_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_family_flag_id_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

change_family_flag_id_rsp::change_family_flag_id_rsp(const change_family_flag_id_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_family_flag_id_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_family_flag_id_rsp::~change_family_flag_id_rsp() {
  SharedDtor();
}

void change_family_flag_id_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void change_family_flag_id_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_family_flag_id_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_family_flag_id_rsp_descriptor_;
}

const change_family_flag_id_rsp& change_family_flag_id_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

change_family_flag_id_rsp* change_family_flag_id_rsp::default_instance_ = NULL;

change_family_flag_id_rsp* change_family_flag_id_rsp::New() const {
  return new change_family_flag_id_rsp;
}

void change_family_flag_id_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_family_flag_id_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .client.family_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_family_flag_id_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_family_flag_id_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_family_flag_id_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.family_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_family_flag_id_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_family_flag_id_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_family_flag_id_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_family_flag_id_rsp::MergeFrom(const change_family_flag_id_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_family_flag_id_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_family_flag_id_rsp::CopyFrom(const change_family_flag_id_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_family_flag_id_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void change_family_flag_id_rsp::Swap(change_family_flag_id_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_family_flag_id_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_family_flag_id_rsp_descriptor_;
  metadata.reflection = change_family_flag_id_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_family_flag_name_req::kFamilyIdFieldNumber;
const int change_family_flag_name_req::kFlagNameFieldNumber;
const int change_family_flag_name_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

change_family_flag_name_req::change_family_flag_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_family_flag_name_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

change_family_flag_name_req::change_family_flag_name_req(const change_family_flag_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_family_flag_name_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_family_flag_name_req::~change_family_flag_name_req() {
  SharedDtor();
}

void change_family_flag_name_req::SharedDtor() {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void change_family_flag_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_family_flag_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_family_flag_name_req_descriptor_;
}

const change_family_flag_name_req& change_family_flag_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

change_family_flag_name_req* change_family_flag_name_req::default_instance_ = NULL;

change_family_flag_name_req* change_family_flag_name_req::New() const {
  return new change_family_flag_name_req;
}

void change_family_flag_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_family_flag_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag_name;
        break;
      }

      // required string flag_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag_name().data(), this->flag_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_family_flag_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required string flag_name = 2;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flag_name(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_family_flag_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required string flag_name = 2;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flag_name(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_family_flag_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required string flag_name = 2;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag_name());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_family_flag_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_family_flag_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_family_flag_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_family_flag_name_req::MergeFrom(const change_family_flag_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_family_flag_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_family_flag_name_req::CopyFrom(const change_family_flag_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_family_flag_name_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void change_family_flag_name_req::Swap(change_family_flag_name_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_family_flag_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_family_flag_name_req_descriptor_;
  metadata.reflection = change_family_flag_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_family_flag_name_rsp::kResultTypeFieldNumber;
const int change_family_flag_name_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

change_family_flag_name_rsp::change_family_flag_name_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_family_flag_name_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

change_family_flag_name_rsp::change_family_flag_name_rsp(const change_family_flag_name_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_family_flag_name_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_family_flag_name_rsp::~change_family_flag_name_rsp() {
  SharedDtor();
}

void change_family_flag_name_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void change_family_flag_name_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_family_flag_name_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_family_flag_name_rsp_descriptor_;
}

const change_family_flag_name_rsp& change_family_flag_name_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

change_family_flag_name_rsp* change_family_flag_name_rsp::default_instance_ = NULL;

change_family_flag_name_rsp* change_family_flag_name_rsp::New() const {
  return new change_family_flag_name_rsp;
}

void change_family_flag_name_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_family_flag_name_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .client.family_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_family_flag_name_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_family_flag_name_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_family_flag_name_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.family_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_family_flag_name_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_family_flag_name_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_family_flag_name_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_family_flag_name_rsp::MergeFrom(const change_family_flag_name_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_family_flag_name_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_family_flag_name_rsp::CopyFrom(const change_family_flag_name_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_family_flag_name_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void change_family_flag_name_rsp::Swap(change_family_flag_name_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_family_flag_name_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_family_flag_name_rsp_descriptor_;
  metadata.reflection = change_family_flag_name_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int impeach_chief_req::kFamilyIdFieldNumber;
const int impeach_chief_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

impeach_chief_req::impeach_chief_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void impeach_chief_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

impeach_chief_req::impeach_chief_req(const impeach_chief_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void impeach_chief_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

impeach_chief_req::~impeach_chief_req() {
  SharedDtor();
}

void impeach_chief_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void impeach_chief_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* impeach_chief_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return impeach_chief_req_descriptor_;
}

const impeach_chief_req& impeach_chief_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

impeach_chief_req* impeach_chief_req::default_instance_ = NULL;

impeach_chief_req* impeach_chief_req::New() const {
  return new impeach_chief_req;
}

void impeach_chief_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool impeach_chief_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void impeach_chief_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* impeach_chief_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int impeach_chief_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void impeach_chief_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const impeach_chief_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const impeach_chief_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void impeach_chief_req::MergeFrom(const impeach_chief_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void impeach_chief_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void impeach_chief_req::CopyFrom(const impeach_chief_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool impeach_chief_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void impeach_chief_req::Swap(impeach_chief_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata impeach_chief_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = impeach_chief_req_descriptor_;
  metadata.reflection = impeach_chief_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int impeach_chief_rsp::kResultTypeFieldNumber;
const int impeach_chief_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

impeach_chief_rsp::impeach_chief_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void impeach_chief_rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::client::family_info*>(&::client::family_info::default_instance());
}

impeach_chief_rsp::impeach_chief_rsp(const impeach_chief_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void impeach_chief_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

impeach_chief_rsp::~impeach_chief_rsp() {
  SharedDtor();
}

void impeach_chief_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void impeach_chief_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* impeach_chief_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return impeach_chief_rsp_descriptor_;
}

const impeach_chief_rsp& impeach_chief_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

impeach_chief_rsp* impeach_chief_rsp::default_instance_ = NULL;

impeach_chief_rsp* impeach_chief_rsp::New() const {
  return new impeach_chief_rsp;
}

void impeach_chief_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::client::family_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool impeach_chief_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .client.family_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void impeach_chief_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* impeach_chief_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional .client.family_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int impeach_chief_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional .client.family_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void impeach_chief_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const impeach_chief_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const impeach_chief_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void impeach_chief_rsp::MergeFrom(const impeach_chief_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_info()) {
      mutable_info()->::client::family_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void impeach_chief_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void impeach_chief_rsp::CopyFrom(const impeach_chief_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool impeach_chief_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void impeach_chief_rsp::Swap(impeach_chief_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata impeach_chief_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = impeach_chief_rsp_descriptor_;
  metadata.reflection = impeach_chief_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ally_family_req::kOptTypeFieldNumber;
const int ally_family_req::kFamilyIdFieldNumber;
const int ally_family_req::kTargetFamilyIdFieldNumber;
const int ally_family_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

ally_family_req::ally_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ally_family_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

ally_family_req::ally_family_req(const ally_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ally_family_req::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0u;
  family_id_ = 0u;
  target_family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ally_family_req::~ally_family_req() {
  SharedDtor();
}

void ally_family_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void ally_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ally_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ally_family_req_descriptor_;
}

const ally_family_req& ally_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

ally_family_req* ally_family_req::default_instance_ = NULL;

ally_family_req* ally_family_req::New() const {
  return new ally_family_req;
}

void ally_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_type_ = 0u;
    family_id_ = 0u;
    target_family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ally_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 opt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_family_id;
        break;
      }

      // required uint32 target_family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_family_id_)));
          set_has_target_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ally_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opt_type(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 target_family_id = 3;
  if (has_target_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ally_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 opt_type = 1;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opt_type(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 target_family_id = 3;
  if (has_target_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ally_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 target_family_id = 3;
    if (has_target_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ally_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ally_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ally_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ally_family_req::MergeFrom(const ally_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_target_family_id()) {
      set_target_family_id(from.target_family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ally_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ally_family_req::CopyFrom(const ally_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ally_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ally_family_req::Swap(ally_family_req* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(family_id_, other->family_id_);
    std::swap(target_family_id_, other->target_family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ally_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ally_family_req_descriptor_;
  metadata.reflection = ally_family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ally_family_rsp::kResultTypeFieldNumber;
const int ally_family_rsp::kOptTypeFieldNumber;
const int ally_family_rsp::kTargetFamilyIdFieldNumber;
#endif  // !_MSC_VER

ally_family_rsp::ally_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ally_family_rsp::InitAsDefaultInstance() {
}

ally_family_rsp::ally_family_rsp(const ally_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ally_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  opt_type_ = 0u;
  target_family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ally_family_rsp::~ally_family_rsp() {
  SharedDtor();
}

void ally_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ally_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ally_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ally_family_rsp_descriptor_;
}

const ally_family_rsp& ally_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

ally_family_rsp* ally_family_rsp::default_instance_ = NULL;

ally_family_rsp* ally_family_rsp::New() const {
  return new ally_family_rsp;
}

void ally_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    opt_type_ = 0u;
    target_family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ally_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt_type;
        break;
      }

      // required uint32 opt_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_family_id;
        break;
      }

      // optional uint32 target_family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_family_id_)));
          set_has_target_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ally_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // required uint32 opt_type = 2;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt_type(), output);
  }

  // optional uint32 target_family_id = 3;
  if (has_target_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ally_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // required uint32 opt_type = 2;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt_type(), target);
  }

  // optional uint32 target_family_id = 3;
  if (has_target_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ally_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // required uint32 opt_type = 2;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // optional uint32 target_family_id = 3;
    if (has_target_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ally_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ally_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ally_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ally_family_rsp::MergeFrom(const ally_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_target_family_id()) {
      set_target_family_id(from.target_family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ally_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ally_family_rsp::CopyFrom(const ally_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ally_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ally_family_rsp::Swap(ally_family_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(target_family_id_, other->target_family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ally_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ally_family_rsp_descriptor_;
  metadata.reflection = ally_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int remove_foreign_req::kFamilyIdFieldNumber;
const int remove_foreign_req::kTargetFamilyIdFieldNumber;
const int remove_foreign_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

remove_foreign_req::remove_foreign_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void remove_foreign_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

remove_foreign_req::remove_foreign_req(const remove_foreign_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void remove_foreign_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  target_family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

remove_foreign_req::~remove_foreign_req() {
  SharedDtor();
}

void remove_foreign_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void remove_foreign_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* remove_foreign_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_foreign_req_descriptor_;
}

const remove_foreign_req& remove_foreign_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

remove_foreign_req* remove_foreign_req::default_instance_ = NULL;

remove_foreign_req* remove_foreign_req::New() const {
  return new remove_foreign_req;
}

void remove_foreign_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    target_family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool remove_foreign_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_family_id;
        break;
      }

      // required uint32 target_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_family_id_)));
          set_has_target_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void remove_foreign_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 target_family_id = 2;
  if (has_target_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* remove_foreign_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 target_family_id = 2;
  if (has_target_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int remove_foreign_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 target_family_id = 2;
    if (has_target_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void remove_foreign_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const remove_foreign_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const remove_foreign_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void remove_foreign_req::MergeFrom(const remove_foreign_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_target_family_id()) {
      set_target_family_id(from.target_family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void remove_foreign_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remove_foreign_req::CopyFrom(const remove_foreign_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_foreign_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void remove_foreign_req::Swap(remove_foreign_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(target_family_id_, other->target_family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata remove_foreign_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = remove_foreign_req_descriptor_;
  metadata.reflection = remove_foreign_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int remove_foreign_rsp::kResultTypeFieldNumber;
const int remove_foreign_rsp::kSrcFamilyIdFieldNumber;
const int remove_foreign_rsp::kTargetFamilyIdFieldNumber;
#endif  // !_MSC_VER

remove_foreign_rsp::remove_foreign_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void remove_foreign_rsp::InitAsDefaultInstance() {
}

remove_foreign_rsp::remove_foreign_rsp(const remove_foreign_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void remove_foreign_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  src_family_id_ = 0u;
  target_family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

remove_foreign_rsp::~remove_foreign_rsp() {
  SharedDtor();
}

void remove_foreign_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void remove_foreign_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* remove_foreign_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_foreign_rsp_descriptor_;
}

const remove_foreign_rsp& remove_foreign_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

remove_foreign_rsp* remove_foreign_rsp::default_instance_ = NULL;

remove_foreign_rsp* remove_foreign_rsp::New() const {
  return new remove_foreign_rsp;
}

void remove_foreign_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
    src_family_id_ = 0u;
    target_family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool remove_foreign_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_family_id;
        break;
      }

      // optional uint32 src_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_family_id_)));
          set_has_src_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_family_id;
        break;
      }

      // optional uint32 target_family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_family_id_)));
          set_has_target_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void remove_foreign_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  // optional uint32 src_family_id = 2;
  if (has_src_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_family_id(), output);
  }

  // optional uint32 target_family_id = 3;
  if (has_target_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* remove_foreign_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  // optional uint32 src_family_id = 2;
  if (has_src_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_family_id(), target);
  }

  // optional uint32 target_family_id = 3;
  if (has_target_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int remove_foreign_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

    // optional uint32 src_family_id = 2;
    if (has_src_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_family_id());
    }

    // optional uint32 target_family_id = 3;
    if (has_target_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void remove_foreign_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const remove_foreign_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const remove_foreign_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void remove_foreign_rsp::MergeFrom(const remove_foreign_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_src_family_id()) {
      set_src_family_id(from.src_family_id());
    }
    if (from.has_target_family_id()) {
      set_target_family_id(from.target_family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void remove_foreign_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remove_foreign_rsp::CopyFrom(const remove_foreign_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_foreign_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void remove_foreign_rsp::Swap(remove_foreign_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(src_family_id_, other->src_family_id_);
    std::swap(target_family_id_, other->target_family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata remove_foreign_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = remove_foreign_rsp_descriptor_;
  metadata.reflection = remove_foreign_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ally_family_list_req::kFamilyIdFieldNumber;
const int ally_family_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

ally_family_list_req::ally_family_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ally_family_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

ally_family_list_req::ally_family_list_req(const ally_family_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ally_family_list_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ally_family_list_req::~ally_family_list_req() {
  SharedDtor();
}

void ally_family_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void ally_family_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ally_family_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ally_family_list_req_descriptor_;
}

const ally_family_list_req& ally_family_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

ally_family_list_req* ally_family_list_req::default_instance_ = NULL;

ally_family_list_req* ally_family_list_req::New() const {
  return new ally_family_list_req;
}

void ally_family_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ally_family_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ally_family_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ally_family_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ally_family_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ally_family_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ally_family_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ally_family_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ally_family_list_req::MergeFrom(const ally_family_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ally_family_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ally_family_list_req::CopyFrom(const ally_family_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ally_family_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ally_family_list_req::Swap(ally_family_list_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ally_family_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ally_family_list_req_descriptor_;
  metadata.reflection = ally_family_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ally_info::kCampTypeFieldNumber;
const int ally_info::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

ally_info::ally_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ally_info::InitAsDefaultInstance() {
}

ally_info::ally_info(const ally_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ally_info::SharedCtor() {
  _cached_size_ = 0;
  camp_type_ = 0u;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ally_info::~ally_info() {
  SharedDtor();
}

void ally_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ally_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ally_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ally_info_descriptor_;
}

const ally_info& ally_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

ally_info* ally_info::default_instance_ = NULL;

ally_info* ally_info::New() const {
  return new ally_info;
}

void ally_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_type_ = 0u;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ally_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camp_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_type_)));
          set_has_camp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ally_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 camp_type = 1;
  if (has_camp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp_type(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ally_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 camp_type = 1;
  if (has_camp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp_type(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ally_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 camp_type = 1;
    if (has_camp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp_type());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ally_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ally_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ally_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ally_info::MergeFrom(const ally_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_type()) {
      set_camp_type(from.camp_type());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ally_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ally_info::CopyFrom(const ally_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ally_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ally_info::Swap(ally_info* other) {
  if (other != this) {
    std::swap(camp_type_, other->camp_type_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ally_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ally_info_descriptor_;
  metadata.reflection = ally_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ally_family_list_rsp::kFamilyIdFieldNumber;
const int ally_family_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

ally_family_list_rsp::ally_family_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ally_family_list_rsp::InitAsDefaultInstance() {
}

ally_family_list_rsp::ally_family_list_rsp(const ally_family_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ally_family_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ally_family_list_rsp::~ally_family_list_rsp() {
  SharedDtor();
}

void ally_family_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ally_family_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ally_family_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ally_family_list_rsp_descriptor_;
}

const ally_family_list_rsp& ally_family_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

ally_family_list_rsp* ally_family_list_rsp::default_instance_ = NULL;

ally_family_list_rsp* ally_family_list_rsp::New() const {
  return new ally_family_list_rsp;
}

void ally_family_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ally_family_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.ally_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ally_family_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // repeated .client.ally_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ally_family_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // repeated .client.ally_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ally_family_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  // repeated .client.ally_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ally_family_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ally_family_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ally_family_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ally_family_list_rsp::MergeFrom(const ally_family_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ally_family_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ally_family_list_rsp::CopyFrom(const ally_family_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ally_family_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void ally_family_list_rsp::Swap(ally_family_list_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ally_family_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ally_family_list_rsp_descriptor_;
  metadata.reflection = ally_family_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_opt_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

activity_opt_rsp::activity_opt_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_opt_rsp::InitAsDefaultInstance() {
}

activity_opt_rsp::activity_opt_rsp(const activity_opt_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_opt_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_opt_rsp::~activity_opt_rsp() {
  SharedDtor();
}

void activity_opt_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_opt_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_opt_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_opt_rsp_descriptor_;
}

const activity_opt_rsp& activity_opt_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

activity_opt_rsp* activity_opt_rsp::default_instance_ = NULL;

activity_opt_rsp* activity_opt_rsp::New() const {
  return new activity_opt_rsp;
}

void activity_opt_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_opt_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_opt_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_opt_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_opt_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_opt_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_opt_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_opt_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_opt_rsp::MergeFrom(const activity_opt_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_opt_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_opt_rsp::CopyFrom(const activity_opt_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_opt_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void activity_opt_rsp::Swap(activity_opt_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_opt_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_opt_rsp_descriptor_;
  metadata.reflection = activity_opt_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_friend_family_req::kFamilyIdFieldNumber;
const int load_friend_family_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

load_friend_family_req::load_friend_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_friend_family_req::InitAsDefaultInstance() {
}

load_friend_family_req::load_friend_family_req(const load_friend_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_friend_family_req::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_friend_family_req::~load_friend_family_req() {
  SharedDtor();
}

void load_friend_family_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void load_friend_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_friend_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_friend_family_req_descriptor_;
}

const load_friend_family_req& load_friend_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

load_friend_family_req* load_friend_family_req::default_instance_ = NULL;

load_friend_family_req* load_friend_family_req::New() const {
  return new load_friend_family_req;
}

void load_friend_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_friend_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_friend_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_friend_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_friend_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_friend_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_friend_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_friend_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_friend_family_req::MergeFrom(const load_friend_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_friend_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_friend_family_req::CopyFrom(const load_friend_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_friend_family_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void load_friend_family_req::Swap(load_friend_family_req* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_friend_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_friend_family_req_descriptor_;
  metadata.reflection = load_friend_family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int load_friend_family_rsp::kRoleIdFieldNumber;
const int load_friend_family_rsp::kIdFieldNumber;
#endif  // !_MSC_VER

load_friend_family_rsp::load_friend_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void load_friend_family_rsp::InitAsDefaultInstance() {
}

load_friend_family_rsp::load_friend_family_rsp(const load_friend_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void load_friend_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

load_friend_family_rsp::~load_friend_family_rsp() {
  SharedDtor();
}

void load_friend_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void load_friend_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* load_friend_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return load_friend_family_rsp_descriptor_;
}

const load_friend_family_rsp& load_friend_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

load_friend_family_rsp* load_friend_family_rsp::default_instance_ = NULL;

load_friend_family_rsp* load_friend_family_rsp::New() const {
  return new load_friend_family_rsp;
}

void load_friend_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool load_friend_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void load_friend_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* load_friend_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int load_friend_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void load_friend_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const load_friend_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const load_friend_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void load_friend_family_rsp::MergeFrom(const load_friend_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void load_friend_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void load_friend_family_rsp::CopyFrom(const load_friend_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_friend_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void load_friend_family_rsp::Swap(load_friend_family_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata load_friend_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = load_friend_family_rsp_descriptor_;
  metadata.reflection = load_friend_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_friend_family_rsp::kRoleIdFieldNumber;
const int update_friend_family_rsp::kTypeFieldNumber;
const int update_friend_family_rsp::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

update_friend_family_rsp::update_friend_family_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_friend_family_rsp::InitAsDefaultInstance() {
}

update_friend_family_rsp::update_friend_family_rsp(const update_friend_family_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_friend_family_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  type_ = 0u;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_friend_family_rsp::~update_friend_family_rsp() {
  SharedDtor();
}

void update_friend_family_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_friend_family_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_friend_family_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_friend_family_rsp_descriptor_;
}

const update_friend_family_rsp& update_friend_family_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

update_friend_family_rsp* update_friend_family_rsp::default_instance_ = NULL;

update_friend_family_rsp* update_friend_family_rsp::New() const {
  return new update_friend_family_rsp;
}

void update_friend_family_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    type_ = 0u;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_friend_family_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_friend_family_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_friend_family_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_friend_family_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 family_id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_friend_family_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_friend_family_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_friend_family_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_friend_family_rsp::MergeFrom(const update_friend_family_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_friend_family_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_friend_family_rsp::CopyFrom(const update_friend_family_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_friend_family_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void update_friend_family_rsp::Swap(update_friend_family_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_friend_family_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_friend_family_rsp_descriptor_;
  metadata.reflection = update_friend_family_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_relation_list::kAllianceFieldNumber;
const int family_relation_list::kEnemyFieldNumber;
#endif  // !_MSC_VER

family_relation_list::family_relation_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_relation_list::InitAsDefaultInstance() {
}

family_relation_list::family_relation_list(const family_relation_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_relation_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_relation_list::~family_relation_list() {
  SharedDtor();
}

void family_relation_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_relation_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_relation_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_relation_list_descriptor_;
}

const family_relation_list& family_relation_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_relation_list* family_relation_list::default_instance_ = NULL;

family_relation_list* family_relation_list::New() const {
  return new family_relation_list;
}

void family_relation_list::Clear() {
  alliance_.Clear();
  enemy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_relation_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 alliance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alliance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_alliance())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alliance())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_alliance;
        if (input->ExpectTag(16)) goto parse_enemy;
        break;
      }

      // repeated uint32 enemy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_enemy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_relation_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->alliance(i), output);
  }

  // repeated uint32 enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->enemy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_relation_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->alliance(i), target);
  }

  // repeated uint32 enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->enemy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_relation_list::ByteSize() const {
  int total_size = 0;

  // repeated uint32 alliance = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->alliance_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alliance(i));
    }
    total_size += 1 * this->alliance_size() + data_size;
  }

  // repeated uint32 enemy = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemy(i));
    }
    total_size += 1 * this->enemy_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_relation_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_relation_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_relation_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_relation_list::MergeFrom(const family_relation_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliance_.MergeFrom(from.alliance_);
  enemy_.MergeFrom(from.enemy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_relation_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_relation_list::CopyFrom(const family_relation_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_relation_list::IsInitialized() const {

  return true;
}

void family_relation_list::Swap(family_relation_list* other) {
  if (other != this) {
    alliance_.Swap(&other->alliance_);
    enemy_.Swap(&other->enemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_relation_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_relation_list_descriptor_;
  metadata.reflection = family_relation_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_family_relation::kOpTypeFieldNumber;
const int update_family_relation::kReTypeFieldNumber;
const int update_family_relation::kIdFieldNumber;
#endif  // !_MSC_VER

update_family_relation::update_family_relation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_family_relation::InitAsDefaultInstance() {
}

update_family_relation::update_family_relation(const update_family_relation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_family_relation::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0u;
  re_type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_family_relation::~update_family_relation() {
  SharedDtor();
}

void update_family_relation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_family_relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_family_relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_family_relation_descriptor_;
}

const update_family_relation& update_family_relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

update_family_relation* update_family_relation::default_instance_ = NULL;

update_family_relation* update_family_relation::New() const {
  return new update_family_relation;
}

void update_family_relation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0u;
    re_type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_family_relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_re_type;
        break;
      }

      // required uint32 re_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_re_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &re_type_)));
          set_has_re_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_family_relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->op_type(), output);
  }

  // required uint32 re_type = 2;
  if (has_re_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->re_type(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_family_relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->op_type(), target);
  }

  // required uint32 re_type = 2;
  if (has_re_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->re_type(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_family_relation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 re_type = 2;
    if (has_re_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->re_type());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_family_relation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_family_relation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_family_relation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_family_relation::MergeFrom(const update_family_relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_re_type()) {
      set_re_type(from.re_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_family_relation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_family_relation::CopyFrom(const update_family_relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_family_relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void update_family_relation::Swap(update_family_relation* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(re_type_, other->re_type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_family_relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_family_relation_descriptor_;
  metadata.reflection = update_family_relation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_title_info::kFamilyIdFieldNumber;
const int family_title_info::kNameFieldNumber;
#endif  // !_MSC_VER

family_title_info::family_title_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_title_info::InitAsDefaultInstance() {
}

family_title_info::family_title_info(const family_title_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_title_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_title_info::~family_title_info() {
  SharedDtor();
}

void family_title_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void family_title_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_title_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_title_info_descriptor_;
}

const family_title_info& family_title_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_title_info* family_title_info::default_instance_ = NULL;

family_title_info* family_title_info::New() const {
  return new family_title_info;
}

void family_title_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_title_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_title_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_title_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_title_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_title_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_title_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_title_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_title_info::MergeFrom(const family_title_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_title_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_title_info::CopyFrom(const family_title_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_title_info::IsInitialized() const {

  return true;
}

void family_title_info::Swap(family_title_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_title_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_title_info_descriptor_;
  metadata.reflection = family_title_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_title_list_rsp::kTypeFieldNumber;
const int family_title_list_rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

family_title_list_rsp::family_title_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_title_list_rsp::InitAsDefaultInstance() {
}

family_title_list_rsp::family_title_list_rsp(const family_title_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_title_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_title_list_rsp::~family_title_list_rsp() {
  SharedDtor();
}

void family_title_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_title_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_title_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_title_list_rsp_descriptor_;
}

const family_title_list_rsp& family_title_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efamily_2eproto();
  return *default_instance_;
}

family_title_list_rsp* family_title_list_rsp::default_instance_ = NULL;

family_title_list_rsp* family_title_list_rsp::New() const {
  return new family_title_list_rsp;
}

void family_title_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_title_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .client.family_title_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_title_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .client.family_title_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_title_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .client.family_title_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_title_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .client.family_title_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_title_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_title_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_title_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_title_list_rsp::MergeFrom(const family_title_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_title_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_title_list_rsp::CopyFrom(const family_title_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_title_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void family_title_list_rsp::Swap(family_title_list_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_title_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_title_list_rsp_descriptor_;
  metadata.reflection = family_title_list_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
