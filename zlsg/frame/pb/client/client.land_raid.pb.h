// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.land_raid.proto

#ifndef PROTOBUF_client_2eland_5fraid_2eproto__INCLUDED
#define PROTOBUF_client_2eland_5fraid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

class land_tax_info;
class get_land_tax_req;
class get_land_tax_rsp;
class set_land_tax_req;
class set_land_tax_rsp;
class land_lucky_star_req;
class land_lucky_star_rsp;
class get_land_tax_reward_req;
class get_land_tax_reward_rsp;
class land_pay_tax_req;
class land_pay_tax_rsp;
class get_land_tax_reward_via;

// ===================================================================

class land_tax_info : public ::google::protobuf::Message {
 public:
  land_tax_info();
  virtual ~land_tax_info();

  land_tax_info(const land_tax_info& from);

  inline land_tax_info& operator=(const land_tax_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_tax_info& default_instance();

  void Swap(land_tax_info* other);

  // implements Message ----------------------------------------------

  land_tax_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_tax_info& from);
  void MergeFrom(const land_tax_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 tax = 2;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 2;
  inline ::google::protobuf::uint32 tax() const;
  inline void set_tax(::google::protobuf::uint32 value);

  // required uint32 coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional uint32 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.land_tax_info)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 tax_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static land_tax_info* default_instance_;
};
// -------------------------------------------------------------------

class get_land_tax_req : public ::google::protobuf::Message {
 public:
  get_land_tax_req();
  virtual ~get_land_tax_req();

  get_land_tax_req(const get_land_tax_req& from);

  inline get_land_tax_req& operator=(const get_land_tax_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_land_tax_req& default_instance();

  void Swap(get_land_tax_req* other);

  // implements Message ----------------------------------------------

  get_land_tax_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_land_tax_req& from);
  void MergeFrom(const get_land_tax_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.get_land_tax_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static get_land_tax_req* default_instance_;
};
// -------------------------------------------------------------------

class get_land_tax_rsp : public ::google::protobuf::Message {
 public:
  get_land_tax_rsp();
  virtual ~get_land_tax_rsp();

  get_land_tax_rsp(const get_land_tax_rsp& from);

  inline get_land_tax_rsp& operator=(const get_land_tax_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_land_tax_rsp& default_instance();

  void Swap(get_land_tax_rsp* other);

  // implements Message ----------------------------------------------

  get_land_tax_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_land_tax_rsp& from);
  void MergeFrom(const get_land_tax_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 all_tax = 1;
  inline bool has_all_tax() const;
  inline void clear_all_tax();
  static const int kAllTaxFieldNumber = 1;
  inline ::google::protobuf::uint32 all_tax() const;
  inline void set_all_tax(::google::protobuf::uint32 value);

  // repeated .client.land_tax_info cur = 2;
  inline int cur_size() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline const ::client::land_tax_info& cur(int index) const;
  inline ::client::land_tax_info* mutable_cur(int index);
  inline ::client::land_tax_info* add_cur();
  inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
      cur() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
      mutable_cur();

  // @@protoc_insertion_point(class_scope:client.get_land_tax_rsp)
 private:
  inline void set_has_all_tax();
  inline void clear_has_all_tax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::land_tax_info > cur_;
  ::google::protobuf::uint32 all_tax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static get_land_tax_rsp* default_instance_;
};
// -------------------------------------------------------------------

class set_land_tax_req : public ::google::protobuf::Message {
 public:
  set_land_tax_req();
  virtual ~set_land_tax_req();

  set_land_tax_req(const set_land_tax_req& from);

  inline set_land_tax_req& operator=(const set_land_tax_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_land_tax_req& default_instance();

  void Swap(set_land_tax_req* other);

  // implements Message ----------------------------------------------

  set_land_tax_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_land_tax_req& from);
  void MergeFrom(const set_land_tax_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.land_tax_info lti = 1;
  inline int lti_size() const;
  inline void clear_lti();
  static const int kLtiFieldNumber = 1;
  inline const ::client::land_tax_info& lti(int index) const;
  inline ::client::land_tax_info* mutable_lti(int index);
  inline ::client::land_tax_info* add_lti();
  inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
      lti() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
      mutable_lti();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.set_land_tax_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::land_tax_info > lti_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static set_land_tax_req* default_instance_;
};
// -------------------------------------------------------------------

class set_land_tax_rsp : public ::google::protobuf::Message {
 public:
  set_land_tax_rsp();
  virtual ~set_land_tax_rsp();

  set_land_tax_rsp(const set_land_tax_rsp& from);

  inline set_land_tax_rsp& operator=(const set_land_tax_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_land_tax_rsp& default_instance();

  void Swap(set_land_tax_rsp* other);

  // implements Message ----------------------------------------------

  set_land_tax_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_land_tax_rsp& from);
  void MergeFrom(const set_land_tax_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.land_tax_info lti = 1;
  inline int lti_size() const;
  inline void clear_lti();
  static const int kLtiFieldNumber = 1;
  inline const ::client::land_tax_info& lti(int index) const;
  inline ::client::land_tax_info* mutable_lti(int index);
  inline ::client::land_tax_info* add_lti();
  inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
      lti() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
      mutable_lti();

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.set_land_tax_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::land_tax_info > lti_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static set_land_tax_rsp* default_instance_;
};
// -------------------------------------------------------------------

class land_lucky_star_req : public ::google::protobuf::Message {
 public:
  land_lucky_star_req();
  virtual ~land_lucky_star_req();

  land_lucky_star_req(const land_lucky_star_req& from);

  inline land_lucky_star_req& operator=(const land_lucky_star_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_lucky_star_req& default_instance();

  void Swap(land_lucky_star_req* other);

  // implements Message ----------------------------------------------

  land_lucky_star_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_lucky_star_req& from);
  void MergeFrom(const land_lucky_star_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.land_lucky_star_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static land_lucky_star_req* default_instance_;
};
// -------------------------------------------------------------------

class land_lucky_star_rsp : public ::google::protobuf::Message {
 public:
  land_lucky_star_rsp();
  virtual ~land_lucky_star_rsp();

  land_lucky_star_rsp(const land_lucky_star_rsp& from);

  inline land_lucky_star_rsp& operator=(const land_lucky_star_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_lucky_star_rsp& default_instance();

  void Swap(land_lucky_star_rsp* other);

  // implements Message ----------------------------------------------

  land_lucky_star_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_lucky_star_rsp& from);
  void MergeFrom(const land_lucky_star_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.land_lucky_star_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static land_lucky_star_rsp* default_instance_;
};
// -------------------------------------------------------------------

class get_land_tax_reward_req : public ::google::protobuf::Message {
 public:
  get_land_tax_reward_req();
  virtual ~get_land_tax_reward_req();

  get_land_tax_reward_req(const get_land_tax_reward_req& from);

  inline get_land_tax_reward_req& operator=(const get_land_tax_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_land_tax_reward_req& default_instance();

  void Swap(get_land_tax_reward_req* other);

  // implements Message ----------------------------------------------

  get_land_tax_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_land_tax_reward_req& from);
  void MergeFrom(const get_land_tax_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.get_land_tax_reward_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static get_land_tax_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class get_land_tax_reward_rsp : public ::google::protobuf::Message {
 public:
  get_land_tax_reward_rsp();
  virtual ~get_land_tax_reward_rsp();

  get_land_tax_reward_rsp(const get_land_tax_reward_rsp& from);

  inline get_land_tax_reward_rsp& operator=(const get_land_tax_reward_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_land_tax_reward_rsp& default_instance();

  void Swap(get_land_tax_reward_rsp* other);

  // implements Message ----------------------------------------------

  get_land_tax_reward_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_land_tax_reward_rsp& from);
  void MergeFrom(const get_land_tax_reward_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.get_land_tax_reward_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static get_land_tax_reward_rsp* default_instance_;
};
// -------------------------------------------------------------------

class land_pay_tax_req : public ::google::protobuf::Message {
 public:
  land_pay_tax_req();
  virtual ~land_pay_tax_req();

  land_pay_tax_req(const land_pay_tax_req& from);

  inline land_pay_tax_req& operator=(const land_pay_tax_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_pay_tax_req& default_instance();

  void Swap(land_pay_tax_req* other);

  // implements Message ----------------------------------------------

  land_pay_tax_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_pay_tax_req& from);
  void MergeFrom(const land_pay_tax_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 power = 2;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 2;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required uint32 family_id = 3;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.land_pay_tax_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 coin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static land_pay_tax_req* default_instance_;
};
// -------------------------------------------------------------------

class land_pay_tax_rsp : public ::google::protobuf::Message {
 public:
  land_pay_tax_rsp();
  virtual ~land_pay_tax_rsp();

  land_pay_tax_rsp(const land_pay_tax_rsp& from);

  inline land_pay_tax_rsp& operator=(const land_pay_tax_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_pay_tax_rsp& default_instance();

  void Swap(land_pay_tax_rsp* other);

  // implements Message ----------------------------------------------

  land_pay_tax_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_pay_tax_rsp& from);
  void MergeFrom(const land_pay_tax_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 power = 2;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 2;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required uint32 family_Id = 3;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.land_pay_tax_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 coin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static land_pay_tax_rsp* default_instance_;
};
// -------------------------------------------------------------------

class get_land_tax_reward_via : public ::google::protobuf::Message {
 public:
  get_land_tax_reward_via();
  virtual ~get_land_tax_reward_via();

  get_land_tax_reward_via(const get_land_tax_reward_via& from);

  inline get_land_tax_reward_via& operator=(const get_land_tax_reward_via& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_land_tax_reward_via& default_instance();

  void Swap(get_land_tax_reward_via* other);

  // implements Message ----------------------------------------------

  get_land_tax_reward_via* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_land_tax_reward_via& from);
  void MergeFrom(const get_land_tax_reward_via& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.get_land_tax_reward_via)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 coin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eland_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eland_5fraid_2eproto();

  void InitAsDefaultInstance();
  static get_land_tax_reward_via* default_instance_;
};
// ===================================================================


// ===================================================================

// land_tax_info

// required uint32 rank = 1;
inline bool land_tax_info::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_tax_info::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_tax_info::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_tax_info::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 land_tax_info::rank() const {
  return rank_;
}
inline void land_tax_info::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 tax = 2;
inline bool land_tax_info::has_tax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_tax_info::set_has_tax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_tax_info::clear_has_tax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_tax_info::clear_tax() {
  tax_ = 0u;
  clear_has_tax();
}
inline ::google::protobuf::uint32 land_tax_info::tax() const {
  return tax_;
}
inline void land_tax_info::set_tax(::google::protobuf::uint32 value) {
  set_has_tax();
  tax_ = value;
}

// required uint32 coin = 3;
inline bool land_tax_info::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_tax_info::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_tax_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_tax_info::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 land_tax_info::coin() const {
  return coin_;
}
inline void land_tax_info::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// optional uint32 role_id = 4;
inline bool land_tax_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_tax_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_tax_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_tax_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 land_tax_info::role_id() const {
  return role_id_;
}
inline void land_tax_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 power = 5;
inline bool land_tax_info::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void land_tax_info::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void land_tax_info::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void land_tax_info::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 land_tax_info::power() const {
  return power_;
}
inline void land_tax_info::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// get_land_tax_req

// required uint32 unixtime = 1;
inline bool get_land_tax_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_land_tax_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_land_tax_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_land_tax_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 get_land_tax_req::unixtime() const {
  return unixtime_;
}
inline void get_land_tax_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool get_land_tax_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_land_tax_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_land_tax_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_land_tax_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& get_land_tax_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* get_land_tax_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* get_land_tax_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void get_land_tax_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// get_land_tax_rsp

// required uint32 all_tax = 1;
inline bool get_land_tax_rsp::has_all_tax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_land_tax_rsp::set_has_all_tax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_land_tax_rsp::clear_has_all_tax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_land_tax_rsp::clear_all_tax() {
  all_tax_ = 0u;
  clear_has_all_tax();
}
inline ::google::protobuf::uint32 get_land_tax_rsp::all_tax() const {
  return all_tax_;
}
inline void get_land_tax_rsp::set_all_tax(::google::protobuf::uint32 value) {
  set_has_all_tax();
  all_tax_ = value;
}

// repeated .client.land_tax_info cur = 2;
inline int get_land_tax_rsp::cur_size() const {
  return cur_.size();
}
inline void get_land_tax_rsp::clear_cur() {
  cur_.Clear();
}
inline const ::client::land_tax_info& get_land_tax_rsp::cur(int index) const {
  return cur_.Get(index);
}
inline ::client::land_tax_info* get_land_tax_rsp::mutable_cur(int index) {
  return cur_.Mutable(index);
}
inline ::client::land_tax_info* get_land_tax_rsp::add_cur() {
  return cur_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
get_land_tax_rsp::cur() const {
  return cur_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
get_land_tax_rsp::mutable_cur() {
  return &cur_;
}

// -------------------------------------------------------------------

// set_land_tax_req

// repeated .client.land_tax_info lti = 1;
inline int set_land_tax_req::lti_size() const {
  return lti_.size();
}
inline void set_land_tax_req::clear_lti() {
  lti_.Clear();
}
inline const ::client::land_tax_info& set_land_tax_req::lti(int index) const {
  return lti_.Get(index);
}
inline ::client::land_tax_info* set_land_tax_req::mutable_lti(int index) {
  return lti_.Mutable(index);
}
inline ::client::land_tax_info* set_land_tax_req::add_lti() {
  return lti_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
set_land_tax_req::lti() const {
  return lti_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
set_land_tax_req::mutable_lti() {
  return &lti_;
}

// optional .client.server_head svr_head = 1000;
inline bool set_land_tax_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_land_tax_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_land_tax_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_land_tax_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& set_land_tax_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* set_land_tax_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* set_land_tax_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void set_land_tax_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// set_land_tax_rsp

// repeated .client.land_tax_info lti = 1;
inline int set_land_tax_rsp::lti_size() const {
  return lti_.size();
}
inline void set_land_tax_rsp::clear_lti() {
  lti_.Clear();
}
inline const ::client::land_tax_info& set_land_tax_rsp::lti(int index) const {
  return lti_.Get(index);
}
inline ::client::land_tax_info* set_land_tax_rsp::mutable_lti(int index) {
  return lti_.Mutable(index);
}
inline ::client::land_tax_info* set_land_tax_rsp::add_lti() {
  return lti_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >&
set_land_tax_rsp::lti() const {
  return lti_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::land_tax_info >*
set_land_tax_rsp::mutable_lti() {
  return &lti_;
}

// required uint32 ret = 2;
inline bool set_land_tax_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_land_tax_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_land_tax_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_land_tax_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 set_land_tax_rsp::ret() const {
  return ret_;
}
inline void set_land_tax_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// land_lucky_star_req

// required uint32 unixtime = 1;
inline bool land_lucky_star_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_lucky_star_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_lucky_star_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_lucky_star_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 land_lucky_star_req::unixtime() const {
  return unixtime_;
}
inline void land_lucky_star_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool land_lucky_star_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_lucky_star_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_lucky_star_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_lucky_star_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& land_lucky_star_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* land_lucky_star_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* land_lucky_star_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void land_lucky_star_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// land_lucky_star_rsp

// required uint32 role_id = 1;
inline bool land_lucky_star_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_lucky_star_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_lucky_star_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_lucky_star_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 land_lucky_star_rsp::role_id() const {
  return role_id_;
}
inline void land_lucky_star_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// get_land_tax_reward_req

// required uint32 unixtime = 1;
inline bool get_land_tax_reward_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_land_tax_reward_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_land_tax_reward_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_land_tax_reward_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 get_land_tax_reward_req::unixtime() const {
  return unixtime_;
}
inline void get_land_tax_reward_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool get_land_tax_reward_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_land_tax_reward_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_land_tax_reward_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_land_tax_reward_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& get_land_tax_reward_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* get_land_tax_reward_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* get_land_tax_reward_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void get_land_tax_reward_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// get_land_tax_reward_rsp

// required uint32 ret = 1;
inline bool get_land_tax_reward_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_land_tax_reward_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_land_tax_reward_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_land_tax_reward_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_land_tax_reward_rsp::ret() const {
  return ret_;
}
inline void get_land_tax_reward_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// land_pay_tax_req

// required uint32 role_id = 1;
inline bool land_pay_tax_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_pay_tax_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_pay_tax_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_pay_tax_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 land_pay_tax_req::role_id() const {
  return role_id_;
}
inline void land_pay_tax_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 power = 2;
inline bool land_pay_tax_req::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_pay_tax_req::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_pay_tax_req::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_pay_tax_req::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 land_pay_tax_req::power() const {
  return power_;
}
inline void land_pay_tax_req::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required uint32 family_id = 3;
inline bool land_pay_tax_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_pay_tax_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_pay_tax_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_pay_tax_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 land_pay_tax_req::family_id() const {
  return family_id_;
}
inline void land_pay_tax_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 coin = 4;
inline bool land_pay_tax_req::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_pay_tax_req::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_pay_tax_req::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_pay_tax_req::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 land_pay_tax_req::coin() const {
  return coin_;
}
inline void land_pay_tax_req::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// -------------------------------------------------------------------

// land_pay_tax_rsp

// required uint32 role_id = 1;
inline bool land_pay_tax_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_pay_tax_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_pay_tax_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_pay_tax_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 land_pay_tax_rsp::role_id() const {
  return role_id_;
}
inline void land_pay_tax_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 power = 2;
inline bool land_pay_tax_rsp::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_pay_tax_rsp::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_pay_tax_rsp::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_pay_tax_rsp::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 land_pay_tax_rsp::power() const {
  return power_;
}
inline void land_pay_tax_rsp::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required uint32 family_Id = 3;
inline bool land_pay_tax_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_pay_tax_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_pay_tax_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_pay_tax_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 land_pay_tax_rsp::family_id() const {
  return family_id_;
}
inline void land_pay_tax_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 coin = 4;
inline bool land_pay_tax_rsp::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_pay_tax_rsp::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_pay_tax_rsp::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_pay_tax_rsp::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 land_pay_tax_rsp::coin() const {
  return coin_;
}
inline void land_pay_tax_rsp::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// -------------------------------------------------------------------

// get_land_tax_reward_via

// required uint32 role_id = 1;
inline bool get_land_tax_reward_via::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_land_tax_reward_via::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_land_tax_reward_via::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_land_tax_reward_via::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 get_land_tax_reward_via::role_id() const {
  return role_id_;
}
inline void get_land_tax_reward_via::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 coin = 2;
inline bool get_land_tax_reward_via::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_land_tax_reward_via::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_land_tax_reward_via::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_land_tax_reward_via::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 get_land_tax_reward_via::coin() const {
  return coin_;
}
inline void get_land_tax_reward_via::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eland_5fraid_2eproto__INCLUDED
