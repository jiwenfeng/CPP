// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.field_score.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.field_score.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* field_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* field_score_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_score_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* filed_score_exchange_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filed_score_exchange_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* filed_score_exchange_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filed_score_exchange_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* filed_score_find_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filed_score_find_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* filed_score_role_pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filed_score_role_pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* filed_score_find_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filed_score_find_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2efield_5fscore_2eproto() {
  protobuf_AddDesc_client_2efield_5fscore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.field_score.proto");
  GOOGLE_CHECK(file != NULL);
  field_score_info_descriptor_ = file->message_type(0);
  static const int field_score_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_info, type_),
  };
  field_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_score_info_descriptor_,
      field_score_info::default_instance_,
      field_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_score_info));
  field_score_msg_descriptor_ = file->message_type(1);
  static const int field_score_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_msg, fsi_),
  };
  field_score_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_score_msg_descriptor_,
      field_score_msg::default_instance_,
      field_score_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_score_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_score_msg));
  filed_score_exchange_req_descriptor_ = file->message_type(2);
  static const int filed_score_exchange_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_req, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_req, svr_head_),
  };
  filed_score_exchange_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filed_score_exchange_req_descriptor_,
      filed_score_exchange_req::default_instance_,
      filed_score_exchange_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filed_score_exchange_req));
  filed_score_exchange_rsp_descriptor_ = file->message_type(3);
  static const int filed_score_exchange_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_rsp, ret_),
  };
  filed_score_exchange_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filed_score_exchange_rsp_descriptor_,
      filed_score_exchange_rsp::default_instance_,
      filed_score_exchange_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_exchange_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filed_score_exchange_rsp));
  filed_score_find_req_descriptor_ = file->message_type(4);
  static const int filed_score_find_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_req, svr_head_),
  };
  filed_score_find_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filed_score_find_req_descriptor_,
      filed_score_find_req::default_instance_,
      filed_score_find_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filed_score_find_req));
  filed_score_role_pos_descriptor_ = file->message_type(5);
  static const int filed_score_role_pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_role_pos, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_role_pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_role_pos, y_),
  };
  filed_score_role_pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filed_score_role_pos_descriptor_,
      filed_score_role_pos::default_instance_,
      filed_score_role_pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_role_pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_role_pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filed_score_role_pos));
  filed_score_find_rsp_descriptor_ = file->message_type(6);
  static const int filed_score_find_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_rsp, fsrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_rsp, svr_head_),
  };
  filed_score_find_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filed_score_find_rsp_descriptor_,
      filed_score_find_rsp::default_instance_,
      filed_score_find_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filed_score_find_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filed_score_find_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2efield_5fscore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_score_info_descriptor_, &field_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_score_msg_descriptor_, &field_score_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filed_score_exchange_req_descriptor_, &filed_score_exchange_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filed_score_exchange_rsp_descriptor_, &filed_score_exchange_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filed_score_find_req_descriptor_, &filed_score_find_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filed_score_role_pos_descriptor_, &filed_score_role_pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filed_score_find_rsp_descriptor_, &filed_score_find_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2efield_5fscore_2eproto() {
  delete field_score_info::default_instance_;
  delete field_score_info_reflection_;
  delete field_score_msg::default_instance_;
  delete field_score_msg_reflection_;
  delete filed_score_exchange_req::default_instance_;
  delete filed_score_exchange_req_reflection_;
  delete filed_score_exchange_rsp::default_instance_;
  delete filed_score_exchange_rsp_reflection_;
  delete filed_score_find_req::default_instance_;
  delete filed_score_find_req_reflection_;
  delete filed_score_role_pos::default_instance_;
  delete filed_score_role_pos_reflection_;
  delete filed_score_find_rsp::default_instance_;
  delete filed_score_find_rsp_reflection_;
}

void protobuf_AddDesc_client_2efield_5fscore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client.field_score.proto\022\006client\032\021clie"
    "nt.comm.proto\"@\n\020field_score_info\022\017\n\007rol"
    "e_id\030\001 \002(\r\022\r\n\005score\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\""
    "8\n\017field_score_msg\022%\n\003fsi\030\001 \003(\0132\030.client"
    ".field_score_info\"Q\n\030filed_score_exchang"
    "e_req\022\r\n\005score\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"\'\n\030filed_score_exch"
    "ange_rsp\022\013\n\003ret\030\001 \002(\r\"O\n\024filed_score_fin"
    "d_req\022\017\n\007role_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"=\n\024filed_score_ro"
    "le_pos\022\017\n\007role_id\030\001 \002(\r\022\t\n\001x\030\002 \002(\r\022\t\n\001y\030"
    "\003 \002(\r\"j\n\024filed_score_find_rsp\022*\n\004fsrp\030\001 "
    "\003(\0132\034.client.filed_score_role_pos\022&\n\010svr"
    "_head\030\350\007 \001(\0132\023.client.server_head", 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.field_score.proto", &protobuf_RegisterTypes);
  field_score_info::default_instance_ = new field_score_info();
  field_score_msg::default_instance_ = new field_score_msg();
  filed_score_exchange_req::default_instance_ = new filed_score_exchange_req();
  filed_score_exchange_rsp::default_instance_ = new filed_score_exchange_rsp();
  filed_score_find_req::default_instance_ = new filed_score_find_req();
  filed_score_role_pos::default_instance_ = new filed_score_role_pos();
  filed_score_find_rsp::default_instance_ = new filed_score_find_rsp();
  field_score_info::default_instance_->InitAsDefaultInstance();
  field_score_msg::default_instance_->InitAsDefaultInstance();
  filed_score_exchange_req::default_instance_->InitAsDefaultInstance();
  filed_score_exchange_rsp::default_instance_->InitAsDefaultInstance();
  filed_score_find_req::default_instance_->InitAsDefaultInstance();
  filed_score_role_pos::default_instance_->InitAsDefaultInstance();
  filed_score_find_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2efield_5fscore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2efield_5fscore_2eproto {
  StaticDescriptorInitializer_client_2efield_5fscore_2eproto() {
    protobuf_AddDesc_client_2efield_5fscore_2eproto();
  }
} static_descriptor_initializer_client_2efield_5fscore_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int field_score_info::kRoleIdFieldNumber;
const int field_score_info::kScoreFieldNumber;
const int field_score_info::kTypeFieldNumber;
#endif  // !_MSC_VER

field_score_info::field_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_score_info::InitAsDefaultInstance() {
}

field_score_info::field_score_info(const field_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_score_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  score_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_score_info::~field_score_info() {
  SharedDtor();
}

void field_score_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void field_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_score_info_descriptor_;
}

const field_score_info& field_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

field_score_info* field_score_info::default_instance_ = NULL;

field_score_info* field_score_info::New() const {
  return new field_score_info;
}

void field_score_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    score_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_score_info::MergeFrom(const field_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_score_info::CopyFrom(const field_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_score_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void field_score_info::Swap(field_score_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(score_, other->score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_score_info_descriptor_;
  metadata.reflection = field_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int field_score_msg::kFsiFieldNumber;
#endif  // !_MSC_VER

field_score_msg::field_score_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_score_msg::InitAsDefaultInstance() {
}

field_score_msg::field_score_msg(const field_score_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_score_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_score_msg::~field_score_msg() {
  SharedDtor();
}

void field_score_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void field_score_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_score_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_score_msg_descriptor_;
}

const field_score_msg& field_score_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

field_score_msg* field_score_msg::default_instance_ = NULL;

field_score_msg* field_score_msg::New() const {
  return new field_score_msg;
}

void field_score_msg::Clear() {
  fsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_score_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.field_score_info fsi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fsi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_score_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.field_score_info fsi = 1;
  for (int i = 0; i < this->fsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fsi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_score_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.field_score_info fsi = 1;
  for (int i = 0; i < this->fsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fsi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_score_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.field_score_info fsi = 1;
  total_size += 1 * this->fsi_size();
  for (int i = 0; i < this->fsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_score_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_score_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_score_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_score_msg::MergeFrom(const field_score_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  fsi_.MergeFrom(from.fsi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_score_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_score_msg::CopyFrom(const field_score_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_score_msg::IsInitialized() const {

  for (int i = 0; i < fsi_size(); i++) {
    if (!this->fsi(i).IsInitialized()) return false;
  }
  return true;
}

void field_score_msg::Swap(field_score_msg* other) {
  if (other != this) {
    fsi_.Swap(&other->fsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_score_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_score_msg_descriptor_;
  metadata.reflection = field_score_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filed_score_exchange_req::kScoreFieldNumber;
const int filed_score_exchange_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

filed_score_exchange_req::filed_score_exchange_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filed_score_exchange_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

filed_score_exchange_req::filed_score_exchange_req(const filed_score_exchange_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filed_score_exchange_req::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filed_score_exchange_req::~filed_score_exchange_req() {
  SharedDtor();
}

void filed_score_exchange_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void filed_score_exchange_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filed_score_exchange_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filed_score_exchange_req_descriptor_;
}

const filed_score_exchange_req& filed_score_exchange_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

filed_score_exchange_req* filed_score_exchange_req::default_instance_ = NULL;

filed_score_exchange_req* filed_score_exchange_req::New() const {
  return new filed_score_exchange_req;
}

void filed_score_exchange_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filed_score_exchange_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filed_score_exchange_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filed_score_exchange_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filed_score_exchange_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filed_score_exchange_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filed_score_exchange_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filed_score_exchange_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filed_score_exchange_req::MergeFrom(const filed_score_exchange_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filed_score_exchange_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filed_score_exchange_req::CopyFrom(const filed_score_exchange_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filed_score_exchange_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void filed_score_exchange_req::Swap(filed_score_exchange_req* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filed_score_exchange_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filed_score_exchange_req_descriptor_;
  metadata.reflection = filed_score_exchange_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filed_score_exchange_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

filed_score_exchange_rsp::filed_score_exchange_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filed_score_exchange_rsp::InitAsDefaultInstance() {
}

filed_score_exchange_rsp::filed_score_exchange_rsp(const filed_score_exchange_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filed_score_exchange_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filed_score_exchange_rsp::~filed_score_exchange_rsp() {
  SharedDtor();
}

void filed_score_exchange_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void filed_score_exchange_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filed_score_exchange_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filed_score_exchange_rsp_descriptor_;
}

const filed_score_exchange_rsp& filed_score_exchange_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

filed_score_exchange_rsp* filed_score_exchange_rsp::default_instance_ = NULL;

filed_score_exchange_rsp* filed_score_exchange_rsp::New() const {
  return new filed_score_exchange_rsp;
}

void filed_score_exchange_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filed_score_exchange_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filed_score_exchange_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filed_score_exchange_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filed_score_exchange_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filed_score_exchange_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filed_score_exchange_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filed_score_exchange_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filed_score_exchange_rsp::MergeFrom(const filed_score_exchange_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filed_score_exchange_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filed_score_exchange_rsp::CopyFrom(const filed_score_exchange_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filed_score_exchange_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void filed_score_exchange_rsp::Swap(filed_score_exchange_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filed_score_exchange_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filed_score_exchange_rsp_descriptor_;
  metadata.reflection = filed_score_exchange_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filed_score_find_req::kRoleIdFieldNumber;
const int filed_score_find_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

filed_score_find_req::filed_score_find_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filed_score_find_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

filed_score_find_req::filed_score_find_req(const filed_score_find_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filed_score_find_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filed_score_find_req::~filed_score_find_req() {
  SharedDtor();
}

void filed_score_find_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void filed_score_find_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filed_score_find_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filed_score_find_req_descriptor_;
}

const filed_score_find_req& filed_score_find_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

filed_score_find_req* filed_score_find_req::default_instance_ = NULL;

filed_score_find_req* filed_score_find_req::New() const {
  return new filed_score_find_req;
}

void filed_score_find_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filed_score_find_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filed_score_find_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filed_score_find_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filed_score_find_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filed_score_find_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filed_score_find_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filed_score_find_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filed_score_find_req::MergeFrom(const filed_score_find_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filed_score_find_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filed_score_find_req::CopyFrom(const filed_score_find_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filed_score_find_req::IsInitialized() const {

  return true;
}

void filed_score_find_req::Swap(filed_score_find_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filed_score_find_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filed_score_find_req_descriptor_;
  metadata.reflection = filed_score_find_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filed_score_role_pos::kRoleIdFieldNumber;
const int filed_score_role_pos::kXFieldNumber;
const int filed_score_role_pos::kYFieldNumber;
#endif  // !_MSC_VER

filed_score_role_pos::filed_score_role_pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filed_score_role_pos::InitAsDefaultInstance() {
}

filed_score_role_pos::filed_score_role_pos(const filed_score_role_pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filed_score_role_pos::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filed_score_role_pos::~filed_score_role_pos() {
  SharedDtor();
}

void filed_score_role_pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void filed_score_role_pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filed_score_role_pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filed_score_role_pos_descriptor_;
}

const filed_score_role_pos& filed_score_role_pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

filed_score_role_pos* filed_score_role_pos::default_instance_ = NULL;

filed_score_role_pos* filed_score_role_pos::New() const {
  return new filed_score_role_pos;
}

void filed_score_role_pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filed_score_role_pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filed_score_role_pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filed_score_role_pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // required uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filed_score_role_pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filed_score_role_pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filed_score_role_pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filed_score_role_pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filed_score_role_pos::MergeFrom(const filed_score_role_pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filed_score_role_pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filed_score_role_pos::CopyFrom(const filed_score_role_pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filed_score_role_pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void filed_score_role_pos::Swap(filed_score_role_pos* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filed_score_role_pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filed_score_role_pos_descriptor_;
  metadata.reflection = filed_score_role_pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filed_score_find_rsp::kFsrpFieldNumber;
const int filed_score_find_rsp::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

filed_score_find_rsp::filed_score_find_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filed_score_find_rsp::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

filed_score_find_rsp::filed_score_find_rsp(const filed_score_find_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filed_score_find_rsp::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filed_score_find_rsp::~filed_score_find_rsp() {
  SharedDtor();
}

void filed_score_find_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void filed_score_find_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filed_score_find_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filed_score_find_rsp_descriptor_;
}

const filed_score_find_rsp& filed_score_find_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efield_5fscore_2eproto();
  return *default_instance_;
}

filed_score_find_rsp* filed_score_find_rsp::default_instance_ = NULL;

filed_score_find_rsp* filed_score_find_rsp::New() const {
  return new filed_score_find_rsp;
}

void filed_score_find_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  fsrp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filed_score_find_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.filed_score_role_pos fsrp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fsrp;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filed_score_find_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.filed_score_role_pos fsrp = 1;
  for (int i = 0; i < this->fsrp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fsrp(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filed_score_find_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.filed_score_role_pos fsrp = 1;
  for (int i = 0; i < this->fsrp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fsrp(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filed_score_find_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.filed_score_role_pos fsrp = 1;
  total_size += 1 * this->fsrp_size();
  for (int i = 0; i < this->fsrp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsrp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filed_score_find_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filed_score_find_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filed_score_find_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filed_score_find_rsp::MergeFrom(const filed_score_find_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fsrp_.MergeFrom(from.fsrp_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filed_score_find_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filed_score_find_rsp::CopyFrom(const filed_score_find_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filed_score_find_rsp::IsInitialized() const {

  for (int i = 0; i < fsrp_size(); i++) {
    if (!this->fsrp(i).IsInitialized()) return false;
  }
  return true;
}

void filed_score_find_rsp::Swap(filed_score_find_rsp* other) {
  if (other != this) {
    fsrp_.Swap(&other->fsrp_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filed_score_find_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filed_score_find_rsp_descriptor_;
  metadata.reflection = filed_score_find_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
