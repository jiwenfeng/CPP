// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.query.proto

#ifndef PROTOBUF_client_2equery_2eproto__INCLUDED
#define PROTOBUF_client_2equery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.role_attr_msg.pb.h"
#include "client.role_props.pb.h"
#include "client.role_skill_msg.pb.h"
#include "client.role_potential.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2equery_2eproto();
void protobuf_AssignDesc_client_2equery_2eproto();
void protobuf_ShutdownFile_client_2equery_2eproto();

class query_req;
class role_smy_info;
class update_smy_role_lvl;
class update_smy_role_fight_power;
class update_smy_mount_data;
class update_smy_info;
class role_query_info;
class mount_query_info;
class pet_query_info;
class potential_query_info;
class bows_query_info;
class gem_query_info;
class query_rsp;
class game_to_center_query;

enum CLIENT_QUERY_TYPE_E {
  CQTE_SMY = 1,
  CQTE_ROLE_ATTR = 2,
  CQTE_ROLE_MOUNT = 3,
  CQTE_ROLE_PET = 4,
  CQTE_SMY_BY_NAME = 5,
  CQTE_ROLE_POTENTIAL = 6,
  CQTE_ROLE_AIRCRAFT = 7,
  CQTE_ROLE_BOW = 8,
  CQTE_ROLE_GEM = 9
};
bool CLIENT_QUERY_TYPE_E_IsValid(int value);
const CLIENT_QUERY_TYPE_E CLIENT_QUERY_TYPE_E_MIN = CQTE_SMY;
const CLIENT_QUERY_TYPE_E CLIENT_QUERY_TYPE_E_MAX = CQTE_ROLE_GEM;
const int CLIENT_QUERY_TYPE_E_ARRAYSIZE = CLIENT_QUERY_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_QUERY_TYPE_E_descriptor();
inline const ::std::string& CLIENT_QUERY_TYPE_E_Name(CLIENT_QUERY_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_QUERY_TYPE_E_descriptor(), value);
}
inline bool CLIENT_QUERY_TYPE_E_Parse(
    const ::std::string& name, CLIENT_QUERY_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_QUERY_TYPE_E>(
    CLIENT_QUERY_TYPE_E_descriptor(), name, value);
}
enum UPDATE_TYPE_E {
  SMY_ROLE_LEVEL = 1,
  SMY_ROLE_FIGHT_POWER = 2,
  SMY_MOUNT_DATA = 3,
  SMY_ROLE_VIP = 4,
  SMY_ROLE_WEAPON_ID = 5,
  SMY_ROLE_ARMOR_ID = 6
};
bool UPDATE_TYPE_E_IsValid(int value);
const UPDATE_TYPE_E UPDATE_TYPE_E_MIN = SMY_ROLE_LEVEL;
const UPDATE_TYPE_E UPDATE_TYPE_E_MAX = SMY_ROLE_ARMOR_ID;
const int UPDATE_TYPE_E_ARRAYSIZE = UPDATE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* UPDATE_TYPE_E_descriptor();
inline const ::std::string& UPDATE_TYPE_E_Name(UPDATE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    UPDATE_TYPE_E_descriptor(), value);
}
inline bool UPDATE_TYPE_E_Parse(
    const ::std::string& name, UPDATE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UPDATE_TYPE_E>(
    UPDATE_TYPE_E_descriptor(), name, value);
}
enum OPEN_TYPE_E {
  ROLE_MOUNT = 1,
  ROLE_PET = 2,
  ROLE_POTENTIAL = 4,
  ROLE_BOW = 8,
  ROLE_GEM = 16
};
bool OPEN_TYPE_E_IsValid(int value);
const OPEN_TYPE_E OPEN_TYPE_E_MIN = ROLE_MOUNT;
const OPEN_TYPE_E OPEN_TYPE_E_MAX = ROLE_GEM;
const int OPEN_TYPE_E_ARRAYSIZE = OPEN_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPEN_TYPE_E_descriptor();
inline const ::std::string& OPEN_TYPE_E_Name(OPEN_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPEN_TYPE_E_descriptor(), value);
}
inline bool OPEN_TYPE_E_Parse(
    const ::std::string& name, OPEN_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPEN_TYPE_E>(
    OPEN_TYPE_E_descriptor(), name, value);
}
// ===================================================================

class query_req : public ::google::protobuf::Message {
 public:
  query_req();
  virtual ~query_req();

  query_req(const query_req& from);

  inline query_req& operator=(const query_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_req& default_instance();

  void Swap(query_req* other);

  // implements Message ----------------------------------------------

  query_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_req& from);
  void MergeFrom(const query_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::CLIENT_QUERY_TYPE_E type() const;
  inline void set_type(::client::CLIENT_QUERY_TYPE_E value);

  // repeated uint32 role_ids = 2;
  inline int role_ids_size() const;
  inline void clear_role_ids();
  static const int kRoleIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 role_ids(int index) const;
  inline void set_role_ids(int index, ::google::protobuf::uint32 value);
  inline void add_role_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_ids();

  // repeated string role_names = 3;
  inline int role_names_size() const;
  inline void clear_role_names();
  static const int kRoleNamesFieldNumber = 3;
  inline const ::std::string& role_names(int index) const;
  inline ::std::string* mutable_role_names(int index);
  inline void set_role_names(int index, const ::std::string& value);
  inline void set_role_names(int index, const char* value);
  inline void set_role_names(int index, const char* value, size_t size);
  inline ::std::string* add_role_names();
  inline void add_role_names(const ::std::string& value);
  inline void add_role_names(const char* value);
  inline void add_role_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& role_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_role_names();

  // optional uint32 opt_flag = 4;
  inline bool has_opt_flag() const;
  inline void clear_opt_flag();
  static const int kOptFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 opt_flag() const;
  inline void set_opt_flag(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.query_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt_flag();
  inline void clear_has_opt_flag();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_ids_;
  int type_;
  ::google::protobuf::uint32 opt_flag_;
  ::google::protobuf::RepeatedPtrField< ::std::string> role_names_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static query_req* default_instance_;
};
// -------------------------------------------------------------------

class role_smy_info : public ::google::protobuf::Message {
 public:
  role_smy_info();
  virtual ~role_smy_info();

  role_smy_info(const role_smy_info& from);

  inline role_smy_info& operator=(const role_smy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_smy_info& default_instance();

  void Swap(role_smy_info* other);

  // implements Message ----------------------------------------------

  role_smy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_smy_info& from);
  void MergeFrom(const role_smy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 fight_power = 3;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // required uint32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional bool online = 5;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 5;
  inline bool online() const;
  inline void set_online(bool value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 family_id = 7;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 7;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string family_name = 8;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 8;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // optional uint32 family_postion = 9;
  inline bool has_family_postion() const;
  inline void clear_family_postion();
  static const int kFamilyPostionFieldNumber = 9;
  inline ::google::protobuf::uint32 family_postion() const;
  inline void set_family_postion(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 10;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 mount_level = 11;
  inline bool has_mount_level() const;
  inline void clear_mount_level();
  static const int kMountLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 mount_level() const;
  inline void set_mount_level(::google::protobuf::uint32 value);

  // optional uint32 mount_power = 12;
  inline bool has_mount_power() const;
  inline void clear_mount_power();
  static const int kMountPowerFieldNumber = 12;
  inline ::google::protobuf::uint32 mount_power() const;
  inline void set_mount_power(::google::protobuf::uint32 value);

  // optional uint32 weapon_id = 13;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 13;
  inline ::google::protobuf::uint32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::uint32 value);

  // optional uint32 armor_id = 14;
  inline bool has_armor_id() const;
  inline void clear_armor_id();
  static const int kArmorIdFieldNumber = 14;
  inline ::google::protobuf::uint32 armor_id() const;
  inline void set_armor_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.role_smy_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_family_postion();
  inline void clear_has_family_postion();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_mount_level();
  inline void clear_has_mount_level();
  inline void set_has_mount_power();
  inline void clear_has_mount_power();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_armor_id();
  inline void clear_has_armor_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 profession_;
  bool online_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* family_name_;
  ::google::protobuf::uint32 family_postion_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 mount_level_;
  ::google::protobuf::uint32 mount_power_;
  ::google::protobuf::uint32 weapon_id_;
  ::google::protobuf::uint32 armor_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static role_smy_info* default_instance_;
};
// -------------------------------------------------------------------

class update_smy_role_lvl : public ::google::protobuf::Message {
 public:
  update_smy_role_lvl();
  virtual ~update_smy_role_lvl();

  update_smy_role_lvl(const update_smy_role_lvl& from);

  inline update_smy_role_lvl& operator=(const update_smy_role_lvl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_smy_role_lvl& default_instance();

  void Swap(update_smy_role_lvl* other);

  // implements Message ----------------------------------------------

  update_smy_role_lvl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_smy_role_lvl& from);
  void MergeFrom(const update_smy_role_lvl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_smy_role_lvl)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static update_smy_role_lvl* default_instance_;
};
// -------------------------------------------------------------------

class update_smy_role_fight_power : public ::google::protobuf::Message {
 public:
  update_smy_role_fight_power();
  virtual ~update_smy_role_fight_power();

  update_smy_role_fight_power(const update_smy_role_fight_power& from);

  inline update_smy_role_fight_power& operator=(const update_smy_role_fight_power& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_smy_role_fight_power& default_instance();

  void Swap(update_smy_role_fight_power* other);

  // implements Message ----------------------------------------------

  update_smy_role_fight_power* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_smy_role_fight_power& from);
  void MergeFrom(const update_smy_role_fight_power& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 fight_power = 2;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 2;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_smy_role_fight_power)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 fight_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static update_smy_role_fight_power* default_instance_;
};
// -------------------------------------------------------------------

class update_smy_mount_data : public ::google::protobuf::Message {
 public:
  update_smy_mount_data();
  virtual ~update_smy_mount_data();

  update_smy_mount_data(const update_smy_mount_data& from);

  inline update_smy_mount_data& operator=(const update_smy_mount_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_smy_mount_data& default_instance();

  void Swap(update_smy_mount_data* other);

  // implements Message ----------------------------------------------

  update_smy_mount_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_smy_mount_data& from);
  void MergeFrom(const update_smy_mount_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 mount_level = 2;
  inline bool has_mount_level() const;
  inline void clear_mount_level();
  static const int kMountLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 mount_level() const;
  inline void set_mount_level(::google::protobuf::uint32 value);

  // required uint32 mount_power = 3;
  inline bool has_mount_power() const;
  inline void clear_mount_power();
  static const int kMountPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 mount_power() const;
  inline void set_mount_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_smy_mount_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mount_level();
  inline void clear_has_mount_level();
  inline void set_has_mount_power();
  inline void clear_has_mount_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 mount_level_;
  ::google::protobuf::uint32 mount_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static update_smy_mount_data* default_instance_;
};
// -------------------------------------------------------------------

class update_smy_info : public ::google::protobuf::Message {
 public:
  update_smy_info();
  virtual ~update_smy_info();

  update_smy_info(const update_smy_info& from);

  inline update_smy_info& operator=(const update_smy_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_smy_info& default_instance();

  void Swap(update_smy_info* other);

  // implements Message ----------------------------------------------

  update_smy_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_smy_info& from);
  void MergeFrom(const update_smy_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.UPDATE_TYPE_E type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::UPDATE_TYPE_E type() const;
  inline void set_type(::client::UPDATE_TYPE_E value);

  // optional uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 val1 = 3;
  inline bool has_val1() const;
  inline void clear_val1();
  static const int kVal1FieldNumber = 3;
  inline ::google::protobuf::uint32 val1() const;
  inline void set_val1(::google::protobuf::uint32 value);

  // optional uint32 val2 = 4;
  inline bool has_val2() const;
  inline void clear_val2();
  static const int kVal2FieldNumber = 4;
  inline ::google::protobuf::uint32 val2() const;
  inline void set_val2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.update_smy_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_val1();
  inline void clear_has_val1();
  inline void set_has_val2();
  inline void clear_has_val2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 val1_;
  ::google::protobuf::uint32 val2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static update_smy_info* default_instance_;
};
// -------------------------------------------------------------------

class role_query_info : public ::google::protobuf::Message {
 public:
  role_query_info();
  virtual ~role_query_info();

  role_query_info(const role_query_info& from);

  inline role_query_info& operator=(const role_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_query_info& default_instance();

  void Swap(role_query_info* other);

  // implements Message ----------------------------------------------

  role_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_query_info& from);
  void MergeFrom(const role_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 fight_power = 3;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // required uint32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 weapon_id = 6;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 6;
  inline ::google::protobuf::uint32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::uint32 value);

  // optional uint32 armor_id = 7;
  inline bool has_armor_id() const;
  inline void clear_armor_id();
  static const int kArmorIdFieldNumber = 7;
  inline ::google::protobuf::uint32 armor_id() const;
  inline void set_armor_id(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 8;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 family_id = 9;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 9;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string family_name = 10;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 10;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // optional uint32 family_position = 11;
  inline bool has_family_position() const;
  inline void clear_family_position();
  static const int kFamilyPositionFieldNumber = 11;
  inline ::google::protobuf::uint32 family_position() const;
  inline void set_family_position(::google::protobuf::uint32 value);

  // repeated .client.props_info equip_info = 12;
  inline int equip_info_size() const;
  inline void clear_equip_info();
  static const int kEquipInfoFieldNumber = 12;
  inline const ::client::props_info& equip_info(int index) const;
  inline ::client::props_info* mutable_equip_info(int index);
  inline ::client::props_info* add_equip_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      equip_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_equip_info();

  // optional uint32 open_type = 13;
  inline bool has_open_type() const;
  inline void clear_open_type();
  static const int kOpenTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 open_type() const;
  inline void set_open_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.role_query_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_armor_id();
  inline void clear_has_armor_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_family_position();
  inline void clear_has_family_position();
  inline void set_has_open_type();
  inline void clear_has_open_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 weapon_id_;
  ::google::protobuf::uint32 armor_id_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* family_name_;
  ::google::protobuf::RepeatedPtrField< ::client::props_info > equip_info_;
  ::google::protobuf::uint32 family_position_;
  ::google::protobuf::uint32 open_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static role_query_info* default_instance_;
};
// -------------------------------------------------------------------

class mount_query_info : public ::google::protobuf::Message {
 public:
  mount_query_info();
  virtual ~mount_query_info();

  mount_query_info(const mount_query_info& from);

  inline mount_query_info& operator=(const mount_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mount_query_info& default_instance();

  void Swap(mount_query_info* other);

  // implements Message ----------------------------------------------

  mount_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mount_query_info& from);
  void MergeFrom(const mount_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mount_id = 1;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint32 value);

  // optional uint32 mount_level = 2;
  inline bool has_mount_level() const;
  inline void clear_mount_level();
  static const int kMountLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 mount_level() const;
  inline void set_mount_level(::google::protobuf::uint32 value);

  // optional uint32 mount_power = 3;
  inline bool has_mount_power() const;
  inline void clear_mount_power();
  static const int kMountPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 mount_power() const;
  inline void set_mount_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mount_query_info)
 private:
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_mount_level();
  inline void clear_has_mount_level();
  inline void set_has_mount_power();
  inline void clear_has_mount_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mount_id_;
  ::google::protobuf::uint32 mount_level_;
  ::google::protobuf::uint32 mount_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static mount_query_info* default_instance_;
};
// -------------------------------------------------------------------

class pet_query_info : public ::google::protobuf::Message {
 public:
  pet_query_info();
  virtual ~pet_query_info();

  pet_query_info(const pet_query_info& from);

  inline pet_query_info& operator=(const pet_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_query_info& default_instance();

  void Swap(pet_query_info* other);

  // implements Message ----------------------------------------------

  pet_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_query_info& from);
  void MergeFrom(const pet_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional uint32 pet_level = 2;
  inline bool has_pet_level() const;
  inline void clear_pet_level();
  static const int kPetLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_level() const;
  inline void set_pet_level(::google::protobuf::uint32 value);

  // optional uint32 magic_star = 3;
  inline bool has_magic_star() const;
  inline void clear_magic_star();
  static const int kMagicStarFieldNumber = 3;
  inline ::google::protobuf::uint32 magic_star() const;
  inline void set_magic_star(::google::protobuf::uint32 value);

  // optional uint32 move_speed = 4;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 4;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // repeated .client.skill_data skill_info = 5;
  inline int skill_info_size() const;
  inline void clear_skill_info();
  static const int kSkillInfoFieldNumber = 5;
  inline const ::client::skill_data& skill_info(int index) const;
  inline ::client::skill_data* mutable_skill_info(int index);
  inline ::client::skill_data* add_skill_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
      skill_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
      mutable_skill_info();

  // repeated .client.props_info equip_info = 6;
  inline int equip_info_size() const;
  inline void clear_equip_info();
  static const int kEquipInfoFieldNumber = 6;
  inline const ::client::props_info& equip_info(int index) const;
  inline ::client::props_info* mutable_equip_info(int index);
  inline ::client::props_info* add_equip_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      equip_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_equip_info();

  // @@protoc_insertion_point(class_scope:client.pet_query_info)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_level();
  inline void clear_has_pet_level();
  inline void set_has_magic_star();
  inline void clear_has_magic_star();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 pet_level_;
  ::google::protobuf::uint32 magic_star_;
  ::google::protobuf::uint32 move_speed_;
  ::google::protobuf::RepeatedPtrField< ::client::skill_data > skill_info_;
  ::google::protobuf::RepeatedPtrField< ::client::props_info > equip_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static pet_query_info* default_instance_;
};
// -------------------------------------------------------------------

class potential_query_info : public ::google::protobuf::Message {
 public:
  potential_query_info();
  virtual ~potential_query_info();

  potential_query_info(const potential_query_info& from);

  inline potential_query_info& operator=(const potential_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const potential_query_info& default_instance();

  void Swap(potential_query_info* other);

  // implements Message ----------------------------------------------

  potential_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const potential_query_info& from);
  void MergeFrom(const potential_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.client_point_info point_info = 1;
  inline int point_info_size() const;
  inline void clear_point_info();
  static const int kPointInfoFieldNumber = 1;
  inline const ::client::client_point_info& point_info(int index) const;
  inline ::client::client_point_info* mutable_point_info(int index);
  inline ::client::client_point_info* add_point_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
      point_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
      mutable_point_info();

  // @@protoc_insertion_point(class_scope:client.potential_query_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::client_point_info > point_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static potential_query_info* default_instance_;
};
// -------------------------------------------------------------------

class bows_query_info : public ::google::protobuf::Message {
 public:
  bows_query_info();
  virtual ~bows_query_info();

  bows_query_info(const bows_query_info& from);

  inline bows_query_info& operator=(const bows_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bows_query_info& default_instance();

  void Swap(bows_query_info* other);

  // implements Message ----------------------------------------------

  bows_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bows_query_info& from);
  void MergeFrom(const bows_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bow_id = 1;
  inline bool has_bow_id() const;
  inline void clear_bow_id();
  static const int kBowIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bow_id() const;
  inline void set_bow_id(::google::protobuf::uint32 value);

  // optional uint32 bow_level = 2;
  inline bool has_bow_level() const;
  inline void clear_bow_level();
  static const int kBowLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 bow_level() const;
  inline void set_bow_level(::google::protobuf::uint32 value);

  // optional uint32 bow_power = 3;
  inline bool has_bow_power() const;
  inline void clear_bow_power();
  static const int kBowPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 bow_power() const;
  inline void set_bow_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.bows_query_info)
 private:
  inline void set_has_bow_id();
  inline void clear_has_bow_id();
  inline void set_has_bow_level();
  inline void clear_has_bow_level();
  inline void set_has_bow_power();
  inline void clear_has_bow_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bow_id_;
  ::google::protobuf::uint32 bow_level_;
  ::google::protobuf::uint32 bow_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static bows_query_info* default_instance_;
};
// -------------------------------------------------------------------

class gem_query_info : public ::google::protobuf::Message {
 public:
  gem_query_info();
  virtual ~gem_query_info();

  gem_query_info(const gem_query_info& from);

  inline gem_query_info& operator=(const gem_query_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gem_query_info& default_instance();

  void Swap(gem_query_info* other);

  // implements Message ----------------------------------------------

  gem_query_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gem_query_info& from);
  void MergeFrom(const gem_query_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_level = 1;
  inline bool has_total_level() const;
  inline void clear_total_level();
  static const int kTotalLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 total_level() const;
  inline void set_total_level(::google::protobuf::uint32 value);

  // optional uint32 power = 2;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 2;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.gem_query_info)
 private:
  inline void set_has_total_level();
  inline void clear_has_total_level();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_level_;
  ::google::protobuf::uint32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static gem_query_info* default_instance_;
};
// -------------------------------------------------------------------

class query_rsp : public ::google::protobuf::Message {
 public:
  query_rsp();
  virtual ~query_rsp();

  query_rsp(const query_rsp& from);

  inline query_rsp& operator=(const query_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_rsp& default_instance();

  void Swap(query_rsp* other);

  // implements Message ----------------------------------------------

  query_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_rsp& from);
  void MergeFrom(const query_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.CLIENT_QUERY_TYPE_E type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::CLIENT_QUERY_TYPE_E type() const;
  inline void set_type(::client::CLIENT_QUERY_TYPE_E value);

  // optional uint32 opt_flag = 2;
  inline bool has_opt_flag() const;
  inline void clear_opt_flag();
  static const int kOptFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 opt_flag() const;
  inline void set_opt_flag(::google::protobuf::uint32 value);

  // optional uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // repeated .client.role_smy_info rsi = 4;
  inline int rsi_size() const;
  inline void clear_rsi();
  static const int kRsiFieldNumber = 4;
  inline const ::client::role_smy_info& rsi(int index) const;
  inline ::client::role_smy_info* mutable_rsi(int index);
  inline ::client::role_smy_info* add_rsi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::role_smy_info >&
      rsi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::role_smy_info >*
      mutable_rsi();

  // repeated .client.role_query_info role_info = 5;
  inline int role_info_size() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 5;
  inline const ::client::role_query_info& role_info(int index) const;
  inline ::client::role_query_info* mutable_role_info(int index);
  inline ::client::role_query_info* add_role_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::role_query_info >&
      role_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::role_query_info >*
      mutable_role_info();

  // optional .client.mount_query_info mount_info = 6;
  inline bool has_mount_info() const;
  inline void clear_mount_info();
  static const int kMountInfoFieldNumber = 6;
  inline const ::client::mount_query_info& mount_info() const;
  inline ::client::mount_query_info* mutable_mount_info();
  inline ::client::mount_query_info* release_mount_info();
  inline void set_allocated_mount_info(::client::mount_query_info* mount_info);

  // optional .client.pet_query_info pet_info = 7;
  inline bool has_pet_info() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 7;
  inline const ::client::pet_query_info& pet_info() const;
  inline ::client::pet_query_info* mutable_pet_info();
  inline ::client::pet_query_info* release_pet_info();
  inline void set_allocated_pet_info(::client::pet_query_info* pet_info);

  // repeated .client.potential_query_info potential_info = 8;
  inline int potential_info_size() const;
  inline void clear_potential_info();
  static const int kPotentialInfoFieldNumber = 8;
  inline const ::client::potential_query_info& potential_info(int index) const;
  inline ::client::potential_query_info* mutable_potential_info(int index);
  inline ::client::potential_query_info* add_potential_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::potential_query_info >&
      potential_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::potential_query_info >*
      mutable_potential_info();

  // optional .client.bows_query_info bow_info = 9;
  inline bool has_bow_info() const;
  inline void clear_bow_info();
  static const int kBowInfoFieldNumber = 9;
  inline const ::client::bows_query_info& bow_info() const;
  inline ::client::bows_query_info* mutable_bow_info();
  inline ::client::bows_query_info* release_bow_info();
  inline void set_allocated_bow_info(::client::bows_query_info* bow_info);

  // optional .client.gem_query_info gem_info = 10;
  inline bool has_gem_info() const;
  inline void clear_gem_info();
  static const int kGemInfoFieldNumber = 10;
  inline const ::client::gem_query_info& gem_info() const;
  inline ::client::gem_query_info* mutable_gem_info();
  inline ::client::gem_query_info* release_gem_info();
  inline void set_allocated_gem_info(::client::gem_query_info* gem_info);

  // @@protoc_insertion_point(class_scope:client.query_rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt_flag();
  inline void clear_has_opt_flag();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mount_info();
  inline void clear_has_mount_info();
  inline void set_has_pet_info();
  inline void clear_has_pet_info();
  inline void set_has_bow_info();
  inline void clear_has_bow_info();
  inline void set_has_gem_info();
  inline void clear_has_gem_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 opt_flag_;
  ::google::protobuf::RepeatedPtrField< ::client::role_smy_info > rsi_;
  ::google::protobuf::RepeatedPtrField< ::client::role_query_info > role_info_;
  ::client::mount_query_info* mount_info_;
  ::client::pet_query_info* pet_info_;
  ::google::protobuf::RepeatedPtrField< ::client::potential_query_info > potential_info_;
  ::client::bows_query_info* bow_info_;
  ::client::gem_query_info* gem_info_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static query_rsp* default_instance_;
};
// -------------------------------------------------------------------

class game_to_center_query : public ::google::protobuf::Message {
 public:
  game_to_center_query();
  virtual ~game_to_center_query();

  game_to_center_query(const game_to_center_query& from);

  inline game_to_center_query& operator=(const game_to_center_query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_to_center_query& default_instance();

  void Swap(game_to_center_query* other);

  // implements Message ----------------------------------------------

  game_to_center_query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_to_center_query& from);
  void MergeFrom(const game_to_center_query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 query_id = 2;
  inline bool has_query_id() const;
  inline void clear_query_id();
  static const int kQueryIdFieldNumber = 2;
  inline ::google::protobuf::uint32 query_id() const;
  inline void set_query_id(::google::protobuf::uint32 value);

  // optional .client.query_rsp query_info = 3;
  inline bool has_query_info() const;
  inline void clear_query_info();
  static const int kQueryInfoFieldNumber = 3;
  inline const ::client::query_rsp& query_info() const;
  inline ::client::query_rsp* mutable_query_info();
  inline ::client::query_rsp* release_query_info();
  inline void set_allocated_query_info(::client::query_rsp* query_info);

  // @@protoc_insertion_point(class_scope:client.game_to_center_query)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_query_id();
  inline void clear_has_query_id();
  inline void set_has_query_info();
  inline void clear_has_query_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 query_id_;
  ::client::query_rsp* query_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2equery_2eproto();
  friend void protobuf_AssignDesc_client_2equery_2eproto();
  friend void protobuf_ShutdownFile_client_2equery_2eproto();

  void InitAsDefaultInstance();
  static game_to_center_query* default_instance_;
};
// ===================================================================


// ===================================================================

// query_req

// required .client.CLIENT_QUERY_TYPE_E type = 1;
inline bool query_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::CLIENT_QUERY_TYPE_E query_req::type() const {
  return static_cast< ::client::CLIENT_QUERY_TYPE_E >(type_);
}
inline void query_req::set_type(::client::CLIENT_QUERY_TYPE_E value) {
  assert(::client::CLIENT_QUERY_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated uint32 role_ids = 2;
inline int query_req::role_ids_size() const {
  return role_ids_.size();
}
inline void query_req::clear_role_ids() {
  role_ids_.Clear();
}
inline ::google::protobuf::uint32 query_req::role_ids(int index) const {
  return role_ids_.Get(index);
}
inline void query_req::set_role_ids(int index, ::google::protobuf::uint32 value) {
  role_ids_.Set(index, value);
}
inline void query_req::add_role_ids(::google::protobuf::uint32 value) {
  role_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
query_req::role_ids() const {
  return role_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
query_req::mutable_role_ids() {
  return &role_ids_;
}

// repeated string role_names = 3;
inline int query_req::role_names_size() const {
  return role_names_.size();
}
inline void query_req::clear_role_names() {
  role_names_.Clear();
}
inline const ::std::string& query_req::role_names(int index) const {
  return role_names_.Get(index);
}
inline ::std::string* query_req::mutable_role_names(int index) {
  return role_names_.Mutable(index);
}
inline void query_req::set_role_names(int index, const ::std::string& value) {
  role_names_.Mutable(index)->assign(value);
}
inline void query_req::set_role_names(int index, const char* value) {
  role_names_.Mutable(index)->assign(value);
}
inline void query_req::set_role_names(int index, const char* value, size_t size) {
  role_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_req::add_role_names() {
  return role_names_.Add();
}
inline void query_req::add_role_names(const ::std::string& value) {
  role_names_.Add()->assign(value);
}
inline void query_req::add_role_names(const char* value) {
  role_names_.Add()->assign(value);
}
inline void query_req::add_role_names(const char* value, size_t size) {
  role_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
query_req::role_names() const {
  return role_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
query_req::mutable_role_names() {
  return &role_names_;
}

// optional uint32 opt_flag = 4;
inline bool query_req::has_opt_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void query_req::set_has_opt_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void query_req::clear_has_opt_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void query_req::clear_opt_flag() {
  opt_flag_ = 0u;
  clear_has_opt_flag();
}
inline ::google::protobuf::uint32 query_req::opt_flag() const {
  return opt_flag_;
}
inline void query_req::set_opt_flag(::google::protobuf::uint32 value) {
  set_has_opt_flag();
  opt_flag_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool query_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void query_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void query_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void query_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& query_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* query_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* query_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void query_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_smy_info

// required uint32 role_id = 1;
inline bool role_smy_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_smy_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_smy_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_smy_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_smy_info::role_id() const {
  return role_id_;
}
inline void role_smy_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool role_smy_info::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_smy_info::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_smy_info::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_smy_info::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& role_smy_info::role_name() const {
  return *role_name_;
}
inline void role_smy_info::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_smy_info::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_smy_info::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_smy_info::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* role_smy_info::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_smy_info::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 fight_power = 3;
inline bool role_smy_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_smy_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_smy_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_smy_info::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 role_smy_info::fight_power() const {
  return fight_power_;
}
inline void role_smy_info::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// required uint32 profession = 4;
inline bool role_smy_info::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_smy_info::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_smy_info::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_smy_info::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 role_smy_info::profession() const {
  return profession_;
}
inline void role_smy_info::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
}

// optional bool online = 5;
inline bool role_smy_info::has_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_smy_info::set_has_online() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_smy_info::clear_has_online() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_smy_info::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool role_smy_info::online() const {
  return online_;
}
inline void role_smy_info::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional uint32 level = 6;
inline bool role_smy_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_smy_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_smy_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_smy_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_smy_info::level() const {
  return level_;
}
inline void role_smy_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 family_id = 7;
inline bool role_smy_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_smy_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_smy_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_smy_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 role_smy_info::family_id() const {
  return family_id_;
}
inline void role_smy_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string family_name = 8;
inline bool role_smy_info::has_family_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_smy_info::set_has_family_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_smy_info::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_smy_info::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& role_smy_info::family_name() const {
  return *family_name_;
}
inline void role_smy_info::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void role_smy_info::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void role_smy_info::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_smy_info::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* role_smy_info::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_smy_info::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_postion = 9;
inline bool role_smy_info::has_family_postion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_smy_info::set_has_family_postion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_smy_info::clear_has_family_postion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_smy_info::clear_family_postion() {
  family_postion_ = 0u;
  clear_has_family_postion();
}
inline ::google::protobuf::uint32 role_smy_info::family_postion() const {
  return family_postion_;
}
inline void role_smy_info::set_family_postion(::google::protobuf::uint32 value) {
  set_has_family_postion();
  family_postion_ = value;
}

// optional uint32 vip_level = 10;
inline bool role_smy_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_smy_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_smy_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_smy_info::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 role_smy_info::vip_level() const {
  return vip_level_;
}
inline void role_smy_info::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 mount_level = 11;
inline bool role_smy_info::has_mount_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_smy_info::set_has_mount_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_smy_info::clear_has_mount_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_smy_info::clear_mount_level() {
  mount_level_ = 0u;
  clear_has_mount_level();
}
inline ::google::protobuf::uint32 role_smy_info::mount_level() const {
  return mount_level_;
}
inline void role_smy_info::set_mount_level(::google::protobuf::uint32 value) {
  set_has_mount_level();
  mount_level_ = value;
}

// optional uint32 mount_power = 12;
inline bool role_smy_info::has_mount_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_smy_info::set_has_mount_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_smy_info::clear_has_mount_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_smy_info::clear_mount_power() {
  mount_power_ = 0u;
  clear_has_mount_power();
}
inline ::google::protobuf::uint32 role_smy_info::mount_power() const {
  return mount_power_;
}
inline void role_smy_info::set_mount_power(::google::protobuf::uint32 value) {
  set_has_mount_power();
  mount_power_ = value;
}

// optional uint32 weapon_id = 13;
inline bool role_smy_info::has_weapon_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_smy_info::set_has_weapon_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_smy_info::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_smy_info::clear_weapon_id() {
  weapon_id_ = 0u;
  clear_has_weapon_id();
}
inline ::google::protobuf::uint32 role_smy_info::weapon_id() const {
  return weapon_id_;
}
inline void role_smy_info::set_weapon_id(::google::protobuf::uint32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// optional uint32 armor_id = 14;
inline bool role_smy_info::has_armor_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_smy_info::set_has_armor_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_smy_info::clear_has_armor_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_smy_info::clear_armor_id() {
  armor_id_ = 0u;
  clear_has_armor_id();
}
inline ::google::protobuf::uint32 role_smy_info::armor_id() const {
  return armor_id_;
}
inline void role_smy_info::set_armor_id(::google::protobuf::uint32 value) {
  set_has_armor_id();
  armor_id_ = value;
}

// -------------------------------------------------------------------

// update_smy_role_lvl

// required uint32 role_id = 1;
inline bool update_smy_role_lvl::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_smy_role_lvl::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_smy_role_lvl::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_smy_role_lvl::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_smy_role_lvl::role_id() const {
  return role_id_;
}
inline void update_smy_role_lvl::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2;
inline bool update_smy_role_lvl::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_smy_role_lvl::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_smy_role_lvl::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_smy_role_lvl::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 update_smy_role_lvl::level() const {
  return level_;
}
inline void update_smy_role_lvl::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// update_smy_role_fight_power

// required uint32 role_id = 1;
inline bool update_smy_role_fight_power::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_smy_role_fight_power::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_smy_role_fight_power::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_smy_role_fight_power::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_smy_role_fight_power::role_id() const {
  return role_id_;
}
inline void update_smy_role_fight_power::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 fight_power = 2;
inline bool update_smy_role_fight_power::has_fight_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_smy_role_fight_power::set_has_fight_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_smy_role_fight_power::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_smy_role_fight_power::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 update_smy_role_fight_power::fight_power() const {
  return fight_power_;
}
inline void update_smy_role_fight_power::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// -------------------------------------------------------------------

// update_smy_mount_data

// required uint32 role_id = 1;
inline bool update_smy_mount_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_smy_mount_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_smy_mount_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_smy_mount_data::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_smy_mount_data::role_id() const {
  return role_id_;
}
inline void update_smy_mount_data::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 mount_level = 2;
inline bool update_smy_mount_data::has_mount_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_smy_mount_data::set_has_mount_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_smy_mount_data::clear_has_mount_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_smy_mount_data::clear_mount_level() {
  mount_level_ = 0u;
  clear_has_mount_level();
}
inline ::google::protobuf::uint32 update_smy_mount_data::mount_level() const {
  return mount_level_;
}
inline void update_smy_mount_data::set_mount_level(::google::protobuf::uint32 value) {
  set_has_mount_level();
  mount_level_ = value;
}

// required uint32 mount_power = 3;
inline bool update_smy_mount_data::has_mount_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_smy_mount_data::set_has_mount_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_smy_mount_data::clear_has_mount_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_smy_mount_data::clear_mount_power() {
  mount_power_ = 0u;
  clear_has_mount_power();
}
inline ::google::protobuf::uint32 update_smy_mount_data::mount_power() const {
  return mount_power_;
}
inline void update_smy_mount_data::set_mount_power(::google::protobuf::uint32 value) {
  set_has_mount_power();
  mount_power_ = value;
}

// -------------------------------------------------------------------

// update_smy_info

// required .client.UPDATE_TYPE_E type = 1;
inline bool update_smy_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_smy_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_smy_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_smy_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::UPDATE_TYPE_E update_smy_info::type() const {
  return static_cast< ::client::UPDATE_TYPE_E >(type_);
}
inline void update_smy_info::set_type(::client::UPDATE_TYPE_E value) {
  assert(::client::UPDATE_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 role_id = 2;
inline bool update_smy_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_smy_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_smy_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_smy_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 update_smy_info::role_id() const {
  return role_id_;
}
inline void update_smy_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 val1 = 3;
inline bool update_smy_info::has_val1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_smy_info::set_has_val1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_smy_info::clear_has_val1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_smy_info::clear_val1() {
  val1_ = 0u;
  clear_has_val1();
}
inline ::google::protobuf::uint32 update_smy_info::val1() const {
  return val1_;
}
inline void update_smy_info::set_val1(::google::protobuf::uint32 value) {
  set_has_val1();
  val1_ = value;
}

// optional uint32 val2 = 4;
inline bool update_smy_info::has_val2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void update_smy_info::set_has_val2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void update_smy_info::clear_has_val2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void update_smy_info::clear_val2() {
  val2_ = 0u;
  clear_has_val2();
}
inline ::google::protobuf::uint32 update_smy_info::val2() const {
  return val2_;
}
inline void update_smy_info::set_val2(::google::protobuf::uint32 value) {
  set_has_val2();
  val2_ = value;
}

// -------------------------------------------------------------------

// role_query_info

// required uint32 role_id = 1;
inline bool role_query_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_query_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_query_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_query_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_query_info::role_id() const {
  return role_id_;
}
inline void role_query_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool role_query_info::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_query_info::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_query_info::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_query_info::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& role_query_info::role_name() const {
  return *role_name_;
}
inline void role_query_info::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_query_info::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_query_info::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_query_info::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* role_query_info::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_query_info::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 fight_power = 3;
inline bool role_query_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_query_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_query_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_query_info::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 role_query_info::fight_power() const {
  return fight_power_;
}
inline void role_query_info::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// required uint32 profession = 4;
inline bool role_query_info::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_query_info::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_query_info::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_query_info::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 role_query_info::profession() const {
  return profession_;
}
inline void role_query_info::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
}

// optional uint32 level = 5;
inline bool role_query_info::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_query_info::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_query_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_query_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_query_info::level() const {
  return level_;
}
inline void role_query_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 weapon_id = 6;
inline bool role_query_info::has_weapon_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_query_info::set_has_weapon_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_query_info::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_query_info::clear_weapon_id() {
  weapon_id_ = 0u;
  clear_has_weapon_id();
}
inline ::google::protobuf::uint32 role_query_info::weapon_id() const {
  return weapon_id_;
}
inline void role_query_info::set_weapon_id(::google::protobuf::uint32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// optional uint32 armor_id = 7;
inline bool role_query_info::has_armor_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_query_info::set_has_armor_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_query_info::clear_has_armor_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_query_info::clear_armor_id() {
  armor_id_ = 0u;
  clear_has_armor_id();
}
inline ::google::protobuf::uint32 role_query_info::armor_id() const {
  return armor_id_;
}
inline void role_query_info::set_armor_id(::google::protobuf::uint32 value) {
  set_has_armor_id();
  armor_id_ = value;
}

// optional uint32 vip_level = 8;
inline bool role_query_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_query_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_query_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_query_info::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 role_query_info::vip_level() const {
  return vip_level_;
}
inline void role_query_info::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 family_id = 9;
inline bool role_query_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_query_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_query_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_query_info::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 role_query_info::family_id() const {
  return family_id_;
}
inline void role_query_info::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string family_name = 10;
inline bool role_query_info::has_family_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_query_info::set_has_family_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_query_info::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_query_info::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& role_query_info::family_name() const {
  return *family_name_;
}
inline void role_query_info::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void role_query_info::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void role_query_info::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_query_info::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* role_query_info::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_query_info::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_position = 11;
inline bool role_query_info::has_family_position() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_query_info::set_has_family_position() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_query_info::clear_has_family_position() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_query_info::clear_family_position() {
  family_position_ = 0u;
  clear_has_family_position();
}
inline ::google::protobuf::uint32 role_query_info::family_position() const {
  return family_position_;
}
inline void role_query_info::set_family_position(::google::protobuf::uint32 value) {
  set_has_family_position();
  family_position_ = value;
}

// repeated .client.props_info equip_info = 12;
inline int role_query_info::equip_info_size() const {
  return equip_info_.size();
}
inline void role_query_info::clear_equip_info() {
  equip_info_.Clear();
}
inline const ::client::props_info& role_query_info::equip_info(int index) const {
  return equip_info_.Get(index);
}
inline ::client::props_info* role_query_info::mutable_equip_info(int index) {
  return equip_info_.Mutable(index);
}
inline ::client::props_info* role_query_info::add_equip_info() {
  return equip_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
role_query_info::equip_info() const {
  return equip_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
role_query_info::mutable_equip_info() {
  return &equip_info_;
}

// optional uint32 open_type = 13;
inline bool role_query_info::has_open_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_query_info::set_has_open_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_query_info::clear_has_open_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_query_info::clear_open_type() {
  open_type_ = 0u;
  clear_has_open_type();
}
inline ::google::protobuf::uint32 role_query_info::open_type() const {
  return open_type_;
}
inline void role_query_info::set_open_type(::google::protobuf::uint32 value) {
  set_has_open_type();
  open_type_ = value;
}

// -------------------------------------------------------------------

// mount_query_info

// optional uint32 mount_id = 1;
inline bool mount_query_info::has_mount_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mount_query_info::set_has_mount_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mount_query_info::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mount_query_info::clear_mount_id() {
  mount_id_ = 0u;
  clear_has_mount_id();
}
inline ::google::protobuf::uint32 mount_query_info::mount_id() const {
  return mount_id_;
}
inline void mount_query_info::set_mount_id(::google::protobuf::uint32 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// optional uint32 mount_level = 2;
inline bool mount_query_info::has_mount_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mount_query_info::set_has_mount_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mount_query_info::clear_has_mount_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mount_query_info::clear_mount_level() {
  mount_level_ = 0u;
  clear_has_mount_level();
}
inline ::google::protobuf::uint32 mount_query_info::mount_level() const {
  return mount_level_;
}
inline void mount_query_info::set_mount_level(::google::protobuf::uint32 value) {
  set_has_mount_level();
  mount_level_ = value;
}

// optional uint32 mount_power = 3;
inline bool mount_query_info::has_mount_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mount_query_info::set_has_mount_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mount_query_info::clear_has_mount_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mount_query_info::clear_mount_power() {
  mount_power_ = 0u;
  clear_has_mount_power();
}
inline ::google::protobuf::uint32 mount_query_info::mount_power() const {
  return mount_power_;
}
inline void mount_query_info::set_mount_power(::google::protobuf::uint32 value) {
  set_has_mount_power();
  mount_power_ = value;
}

// -------------------------------------------------------------------

// pet_query_info

// optional uint32 pet_id = 1;
inline bool pet_query_info::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_query_info::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_query_info::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_query_info::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_query_info::pet_id() const {
  return pet_id_;
}
inline void pet_query_info::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional uint32 pet_level = 2;
inline bool pet_query_info::has_pet_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_query_info::set_has_pet_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_query_info::clear_has_pet_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_query_info::clear_pet_level() {
  pet_level_ = 0u;
  clear_has_pet_level();
}
inline ::google::protobuf::uint32 pet_query_info::pet_level() const {
  return pet_level_;
}
inline void pet_query_info::set_pet_level(::google::protobuf::uint32 value) {
  set_has_pet_level();
  pet_level_ = value;
}

// optional uint32 magic_star = 3;
inline bool pet_query_info::has_magic_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_query_info::set_has_magic_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_query_info::clear_has_magic_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_query_info::clear_magic_star() {
  magic_star_ = 0u;
  clear_has_magic_star();
}
inline ::google::protobuf::uint32 pet_query_info::magic_star() const {
  return magic_star_;
}
inline void pet_query_info::set_magic_star(::google::protobuf::uint32 value) {
  set_has_magic_star();
  magic_star_ = value;
}

// optional uint32 move_speed = 4;
inline bool pet_query_info::has_move_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_query_info::set_has_move_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_query_info::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_query_info::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
}
inline ::google::protobuf::uint32 pet_query_info::move_speed() const {
  return move_speed_;
}
inline void pet_query_info::set_move_speed(::google::protobuf::uint32 value) {
  set_has_move_speed();
  move_speed_ = value;
}

// repeated .client.skill_data skill_info = 5;
inline int pet_query_info::skill_info_size() const {
  return skill_info_.size();
}
inline void pet_query_info::clear_skill_info() {
  skill_info_.Clear();
}
inline const ::client::skill_data& pet_query_info::skill_info(int index) const {
  return skill_info_.Get(index);
}
inline ::client::skill_data* pet_query_info::mutable_skill_info(int index) {
  return skill_info_.Mutable(index);
}
inline ::client::skill_data* pet_query_info::add_skill_info() {
  return skill_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::skill_data >&
pet_query_info::skill_info() const {
  return skill_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::skill_data >*
pet_query_info::mutable_skill_info() {
  return &skill_info_;
}

// repeated .client.props_info equip_info = 6;
inline int pet_query_info::equip_info_size() const {
  return equip_info_.size();
}
inline void pet_query_info::clear_equip_info() {
  equip_info_.Clear();
}
inline const ::client::props_info& pet_query_info::equip_info(int index) const {
  return equip_info_.Get(index);
}
inline ::client::props_info* pet_query_info::mutable_equip_info(int index) {
  return equip_info_.Mutable(index);
}
inline ::client::props_info* pet_query_info::add_equip_info() {
  return equip_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
pet_query_info::equip_info() const {
  return equip_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
pet_query_info::mutable_equip_info() {
  return &equip_info_;
}

// -------------------------------------------------------------------

// potential_query_info

// repeated .client.client_point_info point_info = 1;
inline int potential_query_info::point_info_size() const {
  return point_info_.size();
}
inline void potential_query_info::clear_point_info() {
  point_info_.Clear();
}
inline const ::client::client_point_info& potential_query_info::point_info(int index) const {
  return point_info_.Get(index);
}
inline ::client::client_point_info* potential_query_info::mutable_point_info(int index) {
  return point_info_.Mutable(index);
}
inline ::client::client_point_info* potential_query_info::add_point_info() {
  return point_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::client_point_info >&
potential_query_info::point_info() const {
  return point_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::client_point_info >*
potential_query_info::mutable_point_info() {
  return &point_info_;
}

// -------------------------------------------------------------------

// bows_query_info

// optional uint32 bow_id = 1;
inline bool bows_query_info::has_bow_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bows_query_info::set_has_bow_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bows_query_info::clear_has_bow_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bows_query_info::clear_bow_id() {
  bow_id_ = 0u;
  clear_has_bow_id();
}
inline ::google::protobuf::uint32 bows_query_info::bow_id() const {
  return bow_id_;
}
inline void bows_query_info::set_bow_id(::google::protobuf::uint32 value) {
  set_has_bow_id();
  bow_id_ = value;
}

// optional uint32 bow_level = 2;
inline bool bows_query_info::has_bow_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bows_query_info::set_has_bow_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bows_query_info::clear_has_bow_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bows_query_info::clear_bow_level() {
  bow_level_ = 0u;
  clear_has_bow_level();
}
inline ::google::protobuf::uint32 bows_query_info::bow_level() const {
  return bow_level_;
}
inline void bows_query_info::set_bow_level(::google::protobuf::uint32 value) {
  set_has_bow_level();
  bow_level_ = value;
}

// optional uint32 bow_power = 3;
inline bool bows_query_info::has_bow_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bows_query_info::set_has_bow_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bows_query_info::clear_has_bow_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bows_query_info::clear_bow_power() {
  bow_power_ = 0u;
  clear_has_bow_power();
}
inline ::google::protobuf::uint32 bows_query_info::bow_power() const {
  return bow_power_;
}
inline void bows_query_info::set_bow_power(::google::protobuf::uint32 value) {
  set_has_bow_power();
  bow_power_ = value;
}

// -------------------------------------------------------------------

// gem_query_info

// optional uint32 total_level = 1;
inline bool gem_query_info::has_total_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gem_query_info::set_has_total_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gem_query_info::clear_has_total_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gem_query_info::clear_total_level() {
  total_level_ = 0u;
  clear_has_total_level();
}
inline ::google::protobuf::uint32 gem_query_info::total_level() const {
  return total_level_;
}
inline void gem_query_info::set_total_level(::google::protobuf::uint32 value) {
  set_has_total_level();
  total_level_ = value;
}

// optional uint32 power = 2;
inline bool gem_query_info::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gem_query_info::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gem_query_info::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gem_query_info::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 gem_query_info::power() const {
  return power_;
}
inline void gem_query_info::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// query_rsp

// required .client.CLIENT_QUERY_TYPE_E type = 1;
inline bool query_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_rsp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::CLIENT_QUERY_TYPE_E query_rsp::type() const {
  return static_cast< ::client::CLIENT_QUERY_TYPE_E >(type_);
}
inline void query_rsp::set_type(::client::CLIENT_QUERY_TYPE_E value) {
  assert(::client::CLIENT_QUERY_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 opt_flag = 2;
inline bool query_rsp::has_opt_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_rsp::set_has_opt_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_rsp::clear_has_opt_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_rsp::clear_opt_flag() {
  opt_flag_ = 0u;
  clear_has_opt_flag();
}
inline ::google::protobuf::uint32 query_rsp::opt_flag() const {
  return opt_flag_;
}
inline void query_rsp::set_opt_flag(::google::protobuf::uint32 value) {
  set_has_opt_flag();
  opt_flag_ = value;
}

// optional uint32 role_id = 3;
inline bool query_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 query_rsp::role_id() const {
  return role_id_;
}
inline void query_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .client.role_smy_info rsi = 4;
inline int query_rsp::rsi_size() const {
  return rsi_.size();
}
inline void query_rsp::clear_rsi() {
  rsi_.Clear();
}
inline const ::client::role_smy_info& query_rsp::rsi(int index) const {
  return rsi_.Get(index);
}
inline ::client::role_smy_info* query_rsp::mutable_rsi(int index) {
  return rsi_.Mutable(index);
}
inline ::client::role_smy_info* query_rsp::add_rsi() {
  return rsi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::role_smy_info >&
query_rsp::rsi() const {
  return rsi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::role_smy_info >*
query_rsp::mutable_rsi() {
  return &rsi_;
}

// repeated .client.role_query_info role_info = 5;
inline int query_rsp::role_info_size() const {
  return role_info_.size();
}
inline void query_rsp::clear_role_info() {
  role_info_.Clear();
}
inline const ::client::role_query_info& query_rsp::role_info(int index) const {
  return role_info_.Get(index);
}
inline ::client::role_query_info* query_rsp::mutable_role_info(int index) {
  return role_info_.Mutable(index);
}
inline ::client::role_query_info* query_rsp::add_role_info() {
  return role_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::role_query_info >&
query_rsp::role_info() const {
  return role_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::role_query_info >*
query_rsp::mutable_role_info() {
  return &role_info_;
}

// optional .client.mount_query_info mount_info = 6;
inline bool query_rsp::has_mount_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void query_rsp::set_has_mount_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void query_rsp::clear_has_mount_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void query_rsp::clear_mount_info() {
  if (mount_info_ != NULL) mount_info_->::client::mount_query_info::Clear();
  clear_has_mount_info();
}
inline const ::client::mount_query_info& query_rsp::mount_info() const {
  return mount_info_ != NULL ? *mount_info_ : *default_instance_->mount_info_;
}
inline ::client::mount_query_info* query_rsp::mutable_mount_info() {
  set_has_mount_info();
  if (mount_info_ == NULL) mount_info_ = new ::client::mount_query_info;
  return mount_info_;
}
inline ::client::mount_query_info* query_rsp::release_mount_info() {
  clear_has_mount_info();
  ::client::mount_query_info* temp = mount_info_;
  mount_info_ = NULL;
  return temp;
}
inline void query_rsp::set_allocated_mount_info(::client::mount_query_info* mount_info) {
  delete mount_info_;
  mount_info_ = mount_info;
  if (mount_info) {
    set_has_mount_info();
  } else {
    clear_has_mount_info();
  }
}

// optional .client.pet_query_info pet_info = 7;
inline bool query_rsp::has_pet_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void query_rsp::set_has_pet_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void query_rsp::clear_has_pet_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void query_rsp::clear_pet_info() {
  if (pet_info_ != NULL) pet_info_->::client::pet_query_info::Clear();
  clear_has_pet_info();
}
inline const ::client::pet_query_info& query_rsp::pet_info() const {
  return pet_info_ != NULL ? *pet_info_ : *default_instance_->pet_info_;
}
inline ::client::pet_query_info* query_rsp::mutable_pet_info() {
  set_has_pet_info();
  if (pet_info_ == NULL) pet_info_ = new ::client::pet_query_info;
  return pet_info_;
}
inline ::client::pet_query_info* query_rsp::release_pet_info() {
  clear_has_pet_info();
  ::client::pet_query_info* temp = pet_info_;
  pet_info_ = NULL;
  return temp;
}
inline void query_rsp::set_allocated_pet_info(::client::pet_query_info* pet_info) {
  delete pet_info_;
  pet_info_ = pet_info;
  if (pet_info) {
    set_has_pet_info();
  } else {
    clear_has_pet_info();
  }
}

// repeated .client.potential_query_info potential_info = 8;
inline int query_rsp::potential_info_size() const {
  return potential_info_.size();
}
inline void query_rsp::clear_potential_info() {
  potential_info_.Clear();
}
inline const ::client::potential_query_info& query_rsp::potential_info(int index) const {
  return potential_info_.Get(index);
}
inline ::client::potential_query_info* query_rsp::mutable_potential_info(int index) {
  return potential_info_.Mutable(index);
}
inline ::client::potential_query_info* query_rsp::add_potential_info() {
  return potential_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::potential_query_info >&
query_rsp::potential_info() const {
  return potential_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::potential_query_info >*
query_rsp::mutable_potential_info() {
  return &potential_info_;
}

// optional .client.bows_query_info bow_info = 9;
inline bool query_rsp::has_bow_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void query_rsp::set_has_bow_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void query_rsp::clear_has_bow_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void query_rsp::clear_bow_info() {
  if (bow_info_ != NULL) bow_info_->::client::bows_query_info::Clear();
  clear_has_bow_info();
}
inline const ::client::bows_query_info& query_rsp::bow_info() const {
  return bow_info_ != NULL ? *bow_info_ : *default_instance_->bow_info_;
}
inline ::client::bows_query_info* query_rsp::mutable_bow_info() {
  set_has_bow_info();
  if (bow_info_ == NULL) bow_info_ = new ::client::bows_query_info;
  return bow_info_;
}
inline ::client::bows_query_info* query_rsp::release_bow_info() {
  clear_has_bow_info();
  ::client::bows_query_info* temp = bow_info_;
  bow_info_ = NULL;
  return temp;
}
inline void query_rsp::set_allocated_bow_info(::client::bows_query_info* bow_info) {
  delete bow_info_;
  bow_info_ = bow_info;
  if (bow_info) {
    set_has_bow_info();
  } else {
    clear_has_bow_info();
  }
}

// optional .client.gem_query_info gem_info = 10;
inline bool query_rsp::has_gem_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void query_rsp::set_has_gem_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void query_rsp::clear_has_gem_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void query_rsp::clear_gem_info() {
  if (gem_info_ != NULL) gem_info_->::client::gem_query_info::Clear();
  clear_has_gem_info();
}
inline const ::client::gem_query_info& query_rsp::gem_info() const {
  return gem_info_ != NULL ? *gem_info_ : *default_instance_->gem_info_;
}
inline ::client::gem_query_info* query_rsp::mutable_gem_info() {
  set_has_gem_info();
  if (gem_info_ == NULL) gem_info_ = new ::client::gem_query_info;
  return gem_info_;
}
inline ::client::gem_query_info* query_rsp::release_gem_info() {
  clear_has_gem_info();
  ::client::gem_query_info* temp = gem_info_;
  gem_info_ = NULL;
  return temp;
}
inline void query_rsp::set_allocated_gem_info(::client::gem_query_info* gem_info) {
  delete gem_info_;
  gem_info_ = gem_info;
  if (gem_info) {
    set_has_gem_info();
  } else {
    clear_has_gem_info();
  }
}

// -------------------------------------------------------------------

// game_to_center_query

// required uint32 role_id = 1;
inline bool game_to_center_query::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_to_center_query::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_to_center_query::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_to_center_query::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 game_to_center_query::role_id() const {
  return role_id_;
}
inline void game_to_center_query::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 query_id = 2;
inline bool game_to_center_query::has_query_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_to_center_query::set_has_query_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_to_center_query::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_to_center_query::clear_query_id() {
  query_id_ = 0u;
  clear_has_query_id();
}
inline ::google::protobuf::uint32 game_to_center_query::query_id() const {
  return query_id_;
}
inline void game_to_center_query::set_query_id(::google::protobuf::uint32 value) {
  set_has_query_id();
  query_id_ = value;
}

// optional .client.query_rsp query_info = 3;
inline bool game_to_center_query::has_query_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_to_center_query::set_has_query_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_to_center_query::clear_has_query_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_to_center_query::clear_query_info() {
  if (query_info_ != NULL) query_info_->::client::query_rsp::Clear();
  clear_has_query_info();
}
inline const ::client::query_rsp& game_to_center_query::query_info() const {
  return query_info_ != NULL ? *query_info_ : *default_instance_->query_info_;
}
inline ::client::query_rsp* game_to_center_query::mutable_query_info() {
  set_has_query_info();
  if (query_info_ == NULL) query_info_ = new ::client::query_rsp;
  return query_info_;
}
inline ::client::query_rsp* game_to_center_query::release_query_info() {
  clear_has_query_info();
  ::client::query_rsp* temp = query_info_;
  query_info_ = NULL;
  return temp;
}
inline void game_to_center_query::set_allocated_query_info(::client::query_rsp* query_info) {
  delete query_info_;
  query_info_ = query_info;
  if (query_info) {
    set_has_query_info();
  } else {
    clear_has_query_info();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::CLIENT_QUERY_TYPE_E>() {
  return ::client::CLIENT_QUERY_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::UPDATE_TYPE_E>() {
  return ::client::UPDATE_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::OPEN_TYPE_E>() {
  return ::client::OPEN_TYPE_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2equery_2eproto__INCLUDED
