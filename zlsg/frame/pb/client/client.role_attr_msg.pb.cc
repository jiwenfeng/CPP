// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_attr_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_attr_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* role_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* multi_role_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  multi_role_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* yellow_vip_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yellow_vip_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* yellow_vip_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yellow_vip_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* yellow_vip_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yellow_vip_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_attr_change_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_attr_change_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* recover_hp_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recover_hp_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_role_attr_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_role_attr_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fattr_5fmsg_2eproto() {
  protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_attr_msg.proto");
  GOOGLE_CHECK(file != NULL);
  role_attr_descriptor_ = file->message_type(0);
  static const int role_attr_offsets_[81] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, tael_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, gift_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, is_suspended_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, family_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, can_be_raised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, famiy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, can_join_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, can_be_transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, pk_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, pk_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, military_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, siege_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, cross_svr_war_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, absorb_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, max_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, cur_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, absorb_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, attack_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, attack_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, defense_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, defense_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, hit_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, frozen_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, poisoning_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, palsy_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, dizziness_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, frozen_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, poisoning_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, palsy_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, dizziness_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, output_hurt_promote_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, suffer_hurt_reduce_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, ignore_defense_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, rebound_hurt_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, exp_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, mounts_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, backpack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, warehouse_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, physical_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, anger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, history_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, melting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, potential_share_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, potential_accumulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, skill_point_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, store_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, bow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, bow_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, cavalry_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, bow_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, equip_power_),
  };
  role_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_attr_descriptor_,
      role_attr::default_instance_,
      role_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_attr));
  role_msg_descriptor_ = file->message_type(1);
  static const int role_msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, born_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, atk_mode_),
  };
  role_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_msg_descriptor_,
      role_msg::default_instance_,
      role_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_msg));
  multi_role_msg_descriptor_ = file->message_type(2);
  static const int multi_role_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_role_msg, rm_),
  };
  multi_role_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      multi_role_msg_descriptor_,
      multi_role_msg::default_instance_,
      multi_role_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_role_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_role_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(multi_role_msg));
  yellow_vip_info_req_descriptor_ = file->message_type(3);
  static const int yellow_vip_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_req, svr_head_),
  };
  yellow_vip_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yellow_vip_info_req_descriptor_,
      yellow_vip_info_req::default_instance_,
      yellow_vip_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yellow_vip_info_req));
  yellow_vip_info_descriptor_ = file->message_type(4);
  static const int yellow_vip_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info, year_),
  };
  yellow_vip_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yellow_vip_info_descriptor_,
      yellow_vip_info::default_instance_,
      yellow_vip_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yellow_vip_info));
  yellow_vip_info_rsp_descriptor_ = file->message_type(5);
  static const int yellow_vip_info_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_rsp, yvi_),
  };
  yellow_vip_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yellow_vip_info_rsp_descriptor_,
      yellow_vip_info_rsp::default_instance_,
      yellow_vip_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yellow_vip_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yellow_vip_info_rsp));
  role_attr_change_msg_descriptor_ = file->message_type(6);
  static const int role_attr_change_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, now_),
  };
  role_attr_change_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_attr_change_msg_descriptor_,
      role_attr_change_msg::default_instance_,
      role_attr_change_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_change_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_attr_change_msg));
  recover_hp_msg_descriptor_ = file->message_type(7);
  static const int recover_hp_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recover_hp_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recover_hp_msg, hp_),
  };
  recover_hp_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recover_hp_msg_descriptor_,
      recover_hp_msg::default_instance_,
      recover_hp_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recover_hp_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recover_hp_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recover_hp_msg));
  update_role_attr_msg_descriptor_ = file->message_type(8);
  static const int update_role_attr_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_attr_msg, rm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_attr_msg, svr_head_),
  };
  update_role_attr_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_role_attr_msg_descriptor_,
      update_role_attr_msg::default_instance_,
      update_role_attr_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_attr_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_attr_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_role_attr_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fattr_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_attr_descriptor_, &role_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_msg_descriptor_, &role_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    multi_role_msg_descriptor_, &multi_role_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yellow_vip_info_req_descriptor_, &yellow_vip_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yellow_vip_info_descriptor_, &yellow_vip_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yellow_vip_info_rsp_descriptor_, &yellow_vip_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_attr_change_msg_descriptor_, &role_attr_change_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recover_hp_msg_descriptor_, &recover_hp_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_role_attr_msg_descriptor_, &update_role_attr_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fattr_5fmsg_2eproto() {
  delete role_attr::default_instance_;
  delete role_attr_reflection_;
  delete role_msg::default_instance_;
  delete role_msg_reflection_;
  delete multi_role_msg::default_instance_;
  delete multi_role_msg_reflection_;
  delete yellow_vip_info_req::default_instance_;
  delete yellow_vip_info_req_reflection_;
  delete yellow_vip_info::default_instance_;
  delete yellow_vip_info_reflection_;
  delete yellow_vip_info_rsp::default_instance_;
  delete yellow_vip_info_rsp_reflection_;
  delete role_attr_change_msg::default_instance_;
  delete role_attr_change_msg_reflection_;
  delete recover_hp_msg::default_instance_;
  delete recover_hp_msg_reflection_;
  delete update_role_attr_msg::default_instance_;
  delete update_role_attr_msg_reflection_;
}

void protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2erole_5fstatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032client.role_attr_msg.proto\022\006client\032\021cl"
    "ient.comm.proto\032\030client.role_status.prot"
    "o\"\205\020\n\trole_attr\022\016\n\003sex\030\001 \001(\r:\0010\022\025\n\nprofe"
    "ssion\030\002 \001(\r:\0010\022\025\n\nexperience\030\003 \001(\004:\0010\022\020\n"
    "\005level\030\004 \001(\r:\0010\022\017\n\004tael\030\005 \001(\r:\0010\022\020\n\005ingo"
    "t\030\006 \001(\r:\0010\022\025\n\ngift_money\030\007 \001(\r:\0010\022\037\n\024is_"
    "suspended_account\030\010 \001(\r:\0010\022\025\n\npartner_id"
    "\030\t \001(\r:\0010\022\024\n\tfamily_id\030\n \001(\r:\0010\022\032\n\017famil"
    "y_position\030\013 \001(\r:\0010\022\030\n\rcan_be_raised\030\014 \001"
    "(\r:\0010\022\026\n\013famiy_level\030\r \001(\r:\0010\022\032\n\017can_joi"
    "n_family\030\016 \001(\r:\0010\022\032\n\017can_be_transmit\030\017 \001"
    "(\r:\0010\022\023\n\010pk_model\030\020 \001(\r:\0010\022\023\n\010pk_value\030\021"
    " \001(\r:\0010\022\034\n\021military_strategy\030\022 \001(\r:\0010\022\021\n"
    "\006map_id\030\023 \001(\r:\0010\022\020\n\005x_pos\030\024 \001(\r:\0010\022\020\n\005y_"
    "pos\030\025 \001(\r:\0010\022\033\n\020siege_reputation\030\026 \001(\r:\001"
    "0\022#\n\030cross_svr_war_reputation\030\027 \001(\r:\0010\022\021"
    "\n\006max_hp\030\030 \001(\r:\0010\022\021\n\006cur_hp\030\031 \001(\r:\0010\022\024\n\t"
    "absorb_hp\030\032 \001(\r:\0010\022\021\n\006max_mp\030\033 \001(\r:\0010\022\021\n"
    "\006cur_mp\030\034 \001(\r:\0010\022\024\n\tabsorb_mp\030\035 \001(\r:\0010\022\025"
    "\n\nattack_min\030\036 \001(\r:\0010\022\025\n\nattack_max\030\037 \001("
    "\r:\0010\022\026\n\013defense_min\030  \001(\r:\0010\022\026\n\013defense_"
    "max\030! \001(\r:\0010\022\024\n\thit_point\030\" \001(\r:\0010\022\020\n\005do"
    "dge\030# \001(\r:\0010\022\024\n\tstability\030$ \001(\r:\0010\022\022\n\007re"
    "cover\030% \001(\r:\0010\022\027\n\014attack_speed\030& \001(\r:\0010\022"
    " \n\025frozen_addition_ratio\030\' \001(\r:\0010\022#\n\030poi"
    "soning_addition_ratio\030( \001(\r:\0010\022\037\n\024palsy_"
    "addition_ratio\030) \001(\r:\0010\022#\n\030dizziness_add"
    "ition_ratio\030* \001(\r:\0010\022\"\n\027frozen_resistanc"
    "e_ratio\030+ \001(\r:\0010\022%\n\032poisoning_resistance"
    "_ratio\030, \001(\r:\0010\022!\n\026palsy_resistance_rati"
    "o\030- \001(\r:\0010\022%\n\032dizziness_resistance_ratio"
    "\030. \001(\r:\0010\022$\n\031output_hurt_promote_ratio\030/"
    " \001(\r:\0010\022#\n\030suffer_hurt_reduce_ratio\0300 \001("
    "\r:\0010\022\037\n\024ignore_defense_ratio\0301 \001(\r:\0010\022\035\n"
    "\022rebound_hurt_ratio\0302 \001(\r:\0010\022\032\n\017exp_coef"
    "ficient\0303 \001(\r:\0010\022\025\n\nmove_speed\0304 \001(\r:\0010\022"
    "\023\n\010armor_id\0305 \001(\r:\0010\022\024\n\tweapon_id\0306 \001(\r:"
    "\0010\022\024\n\tmounts_id\0307 \001(\r:\0010\022\030\n\rbackpack_siz"
    "e\0308 \001(\r:\0010\022\031\n\016warehouse_size\0309 \001(\r:\0010\022\031\n"
    "\016physical_power\030: \001(\r:\0010\022\031\n\016fighting_pow"
    "er\030; \001(\r:\0010\022\020\n\005anger\030< \001(\r:\0010\022\026\n\013create_"
    "time\030= \001(\r:\0010\022\026\n\013online_time\030> \001(\r:\0010\022\027\n"
    "\014offline_time\030\? \001(\r:\0010\022\026\n\013update_time\030@ "
    "\001(\r:\0010\022\031\n\016history_online\030A \001(\r:\0010\022\022\n\007mel"
    "ting\030B \001(\r:\0010\022\036\n\023potential_share_max\030C \001"
    "(\r:\0010\022!\n\026potential_accumulation\030D \001(\r:\0010"
    "\022\026\n\013skill_point\030E \001(\r:\0010\022\025\n\npopularity\030F"
    " \001(\r:\0010\022\033\n\020skill_point_time\030G \001(\r:\0010\022\024\n\t"
    "vip_level\030H \001(\r:\0010\022\022\n\007team_id\030I \001(\r:\0010\022\022"
    "\n\007camp_id\030J \001(\r:\0010\022\023\n\010strategy\030K \001(\r:\0010\022"
    "\027\n\014store_weapon\030L \001(\r:\0010\022\021\n\006bow_id\030M \001(\r"
    ":\0010\022\024\n\tbow_index\030N \001(\r:\0010\022\030\n\rcavalry_ind"
    "ex\030O \001(\r:\0010\022\024\n\tbow_speed\030P \001(\r:\0010\022\026\n\013equ"
    "ip_power\030Q \001(\r:\0010\"\226\001\n\010role_msg\022\035\n\002rd\030\001 \001"
    "(\0132\021.client.role_data\022\037\n\004attr\030\002 \001(\0132\021.cl"
    "ient.role_attr\022#\n\006status\030\003 \001(\0132\023.client."
    "role_status\022\023\n\004born\030\004 \001(\010:\005false\022\020\n\010atk_"
    "mode\030\005 \001(\r\".\n\016multi_role_msg\022\034\n\002rm\030\001 \003(\013"
    "2\020.client.role_msg\"N\n\023yellow_vip_info_re"
    "q\022\017\n\007role_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"=\n\017yellow_vip_info\022\017\n"
    "\007role_id\030\001 \002(\r\022\013\n\003lvl\030\002 \002(\r\022\014\n\004year\030\003 \002("
    "\010\";\n\023yellow_vip_info_rsp\022$\n\003yvi\030\001 \003(\0132\027."
    "client.yellow_vip_info\"]\n\024role_attr_chan"
    "ge_msg\022\035\n\002rd\030\001 \002(\0132\021.client.role_data\022\014\n"
    "\004type\030\002 \002(\r\022\013\n\003old\030\003 \002(\004\022\013\n\003now\030\004 \002(\004\";\n"
    "\016recover_hp_msg\022\035\n\002rd\030\001 \002(\0132\021.client.rol"
    "e_data\022\n\n\002hp\030\002 \002(\r\"\\\n\024update_role_attr_m"
    "sg\022\034\n\002rm\030\001 \003(\0132\020.client.role_msg\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head", 2792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_attr_msg.proto", &protobuf_RegisterTypes);
  role_attr::default_instance_ = new role_attr();
  role_msg::default_instance_ = new role_msg();
  multi_role_msg::default_instance_ = new multi_role_msg();
  yellow_vip_info_req::default_instance_ = new yellow_vip_info_req();
  yellow_vip_info::default_instance_ = new yellow_vip_info();
  yellow_vip_info_rsp::default_instance_ = new yellow_vip_info_rsp();
  role_attr_change_msg::default_instance_ = new role_attr_change_msg();
  recover_hp_msg::default_instance_ = new recover_hp_msg();
  update_role_attr_msg::default_instance_ = new update_role_attr_msg();
  role_attr::default_instance_->InitAsDefaultInstance();
  role_msg::default_instance_->InitAsDefaultInstance();
  multi_role_msg::default_instance_->InitAsDefaultInstance();
  yellow_vip_info_req::default_instance_->InitAsDefaultInstance();
  yellow_vip_info::default_instance_->InitAsDefaultInstance();
  yellow_vip_info_rsp::default_instance_->InitAsDefaultInstance();
  role_attr_change_msg::default_instance_->InitAsDefaultInstance();
  recover_hp_msg::default_instance_->InitAsDefaultInstance();
  update_role_attr_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fattr_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fattr_5fmsg_2eproto {
  StaticDescriptorInitializer_client_2erole_5fattr_5fmsg_2eproto() {
    protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fattr_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int role_attr::kSexFieldNumber;
const int role_attr::kProfessionFieldNumber;
const int role_attr::kExperienceFieldNumber;
const int role_attr::kLevelFieldNumber;
const int role_attr::kTaelFieldNumber;
const int role_attr::kIngotFieldNumber;
const int role_attr::kGiftMoneyFieldNumber;
const int role_attr::kIsSuspendedAccountFieldNumber;
const int role_attr::kPartnerIdFieldNumber;
const int role_attr::kFamilyIdFieldNumber;
const int role_attr::kFamilyPositionFieldNumber;
const int role_attr::kCanBeRaisedFieldNumber;
const int role_attr::kFamiyLevelFieldNumber;
const int role_attr::kCanJoinFamilyFieldNumber;
const int role_attr::kCanBeTransmitFieldNumber;
const int role_attr::kPkModelFieldNumber;
const int role_attr::kPkValueFieldNumber;
const int role_attr::kMilitaryStrategyFieldNumber;
const int role_attr::kMapIdFieldNumber;
const int role_attr::kXPosFieldNumber;
const int role_attr::kYPosFieldNumber;
const int role_attr::kSiegeReputationFieldNumber;
const int role_attr::kCrossSvrWarReputationFieldNumber;
const int role_attr::kMaxHpFieldNumber;
const int role_attr::kCurHpFieldNumber;
const int role_attr::kAbsorbHpFieldNumber;
const int role_attr::kMaxMpFieldNumber;
const int role_attr::kCurMpFieldNumber;
const int role_attr::kAbsorbMpFieldNumber;
const int role_attr::kAttackMinFieldNumber;
const int role_attr::kAttackMaxFieldNumber;
const int role_attr::kDefenseMinFieldNumber;
const int role_attr::kDefenseMaxFieldNumber;
const int role_attr::kHitPointFieldNumber;
const int role_attr::kDodgeFieldNumber;
const int role_attr::kStabilityFieldNumber;
const int role_attr::kRecoverFieldNumber;
const int role_attr::kAttackSpeedFieldNumber;
const int role_attr::kFrozenAdditionRatioFieldNumber;
const int role_attr::kPoisoningAdditionRatioFieldNumber;
const int role_attr::kPalsyAdditionRatioFieldNumber;
const int role_attr::kDizzinessAdditionRatioFieldNumber;
const int role_attr::kFrozenResistanceRatioFieldNumber;
const int role_attr::kPoisoningResistanceRatioFieldNumber;
const int role_attr::kPalsyResistanceRatioFieldNumber;
const int role_attr::kDizzinessResistanceRatioFieldNumber;
const int role_attr::kOutputHurtPromoteRatioFieldNumber;
const int role_attr::kSufferHurtReduceRatioFieldNumber;
const int role_attr::kIgnoreDefenseRatioFieldNumber;
const int role_attr::kReboundHurtRatioFieldNumber;
const int role_attr::kExpCoefficientFieldNumber;
const int role_attr::kMoveSpeedFieldNumber;
const int role_attr::kArmorIdFieldNumber;
const int role_attr::kWeaponIdFieldNumber;
const int role_attr::kMountsIdFieldNumber;
const int role_attr::kBackpackSizeFieldNumber;
const int role_attr::kWarehouseSizeFieldNumber;
const int role_attr::kPhysicalPowerFieldNumber;
const int role_attr::kFightingPowerFieldNumber;
const int role_attr::kAngerFieldNumber;
const int role_attr::kCreateTimeFieldNumber;
const int role_attr::kOnlineTimeFieldNumber;
const int role_attr::kOfflineTimeFieldNumber;
const int role_attr::kUpdateTimeFieldNumber;
const int role_attr::kHistoryOnlineFieldNumber;
const int role_attr::kMeltingFieldNumber;
const int role_attr::kPotentialShareMaxFieldNumber;
const int role_attr::kPotentialAccumulationFieldNumber;
const int role_attr::kSkillPointFieldNumber;
const int role_attr::kPopularityFieldNumber;
const int role_attr::kSkillPointTimeFieldNumber;
const int role_attr::kVipLevelFieldNumber;
const int role_attr::kTeamIdFieldNumber;
const int role_attr::kCampIdFieldNumber;
const int role_attr::kStrategyFieldNumber;
const int role_attr::kStoreWeaponFieldNumber;
const int role_attr::kBowIdFieldNumber;
const int role_attr::kBowIndexFieldNumber;
const int role_attr::kCavalryIndexFieldNumber;
const int role_attr::kBowSpeedFieldNumber;
const int role_attr::kEquipPowerFieldNumber;
#endif  // !_MSC_VER

role_attr::role_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_attr::InitAsDefaultInstance() {
}

role_attr::role_attr(const role_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_attr::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0u;
  profession_ = 0u;
  experience_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  tael_ = 0u;
  ingot_ = 0u;
  gift_money_ = 0u;
  is_suspended_account_ = 0u;
  partner_id_ = 0u;
  family_id_ = 0u;
  family_position_ = 0u;
  can_be_raised_ = 0u;
  famiy_level_ = 0u;
  can_join_family_ = 0u;
  can_be_transmit_ = 0u;
  pk_model_ = 0u;
  pk_value_ = 0u;
  military_strategy_ = 0u;
  map_id_ = 0u;
  x_pos_ = 0u;
  y_pos_ = 0u;
  siege_reputation_ = 0u;
  cross_svr_war_reputation_ = 0u;
  max_hp_ = 0u;
  cur_hp_ = 0u;
  absorb_hp_ = 0u;
  max_mp_ = 0u;
  cur_mp_ = 0u;
  absorb_mp_ = 0u;
  attack_min_ = 0u;
  attack_max_ = 0u;
  defense_min_ = 0u;
  defense_max_ = 0u;
  hit_point_ = 0u;
  dodge_ = 0u;
  stability_ = 0u;
  recover_ = 0u;
  attack_speed_ = 0u;
  frozen_addition_ratio_ = 0u;
  poisoning_addition_ratio_ = 0u;
  palsy_addition_ratio_ = 0u;
  dizziness_addition_ratio_ = 0u;
  frozen_resistance_ratio_ = 0u;
  poisoning_resistance_ratio_ = 0u;
  palsy_resistance_ratio_ = 0u;
  dizziness_resistance_ratio_ = 0u;
  output_hurt_promote_ratio_ = 0u;
  suffer_hurt_reduce_ratio_ = 0u;
  ignore_defense_ratio_ = 0u;
  rebound_hurt_ratio_ = 0u;
  exp_coefficient_ = 0u;
  move_speed_ = 0u;
  armor_id_ = 0u;
  weapon_id_ = 0u;
  mounts_id_ = 0u;
  backpack_size_ = 0u;
  warehouse_size_ = 0u;
  physical_power_ = 0u;
  fighting_power_ = 0u;
  anger_ = 0u;
  create_time_ = 0u;
  online_time_ = 0u;
  offline_time_ = 0u;
  update_time_ = 0u;
  history_online_ = 0u;
  melting_ = 0u;
  potential_share_max_ = 0u;
  potential_accumulation_ = 0u;
  skill_point_ = 0u;
  popularity_ = 0u;
  skill_point_time_ = 0u;
  vip_level_ = 0u;
  team_id_ = 0u;
  camp_id_ = 0u;
  strategy_ = 0u;
  store_weapon_ = 0u;
  bow_id_ = 0u;
  bow_index_ = 0u;
  cavalry_index_ = 0u;
  bow_speed_ = 0u;
  equip_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_attr::~role_attr() {
  SharedDtor();
}

void role_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_attr_descriptor_;
}

const role_attr& role_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

role_attr* role_attr::default_instance_ = NULL;

role_attr* role_attr::New() const {
  return new role_attr;
}

void role_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0u;
    profession_ = 0u;
    experience_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    tael_ = 0u;
    ingot_ = 0u;
    gift_money_ = 0u;
    is_suspended_account_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    partner_id_ = 0u;
    family_id_ = 0u;
    family_position_ = 0u;
    can_be_raised_ = 0u;
    famiy_level_ = 0u;
    can_join_family_ = 0u;
    can_be_transmit_ = 0u;
    pk_model_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pk_value_ = 0u;
    military_strategy_ = 0u;
    map_id_ = 0u;
    x_pos_ = 0u;
    y_pos_ = 0u;
    siege_reputation_ = 0u;
    cross_svr_war_reputation_ = 0u;
    max_hp_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    cur_hp_ = 0u;
    absorb_hp_ = 0u;
    max_mp_ = 0u;
    cur_mp_ = 0u;
    absorb_mp_ = 0u;
    attack_min_ = 0u;
    attack_max_ = 0u;
    defense_min_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    defense_max_ = 0u;
    hit_point_ = 0u;
    dodge_ = 0u;
    stability_ = 0u;
    recover_ = 0u;
    attack_speed_ = 0u;
    frozen_addition_ratio_ = 0u;
    poisoning_addition_ratio_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    palsy_addition_ratio_ = 0u;
    dizziness_addition_ratio_ = 0u;
    frozen_resistance_ratio_ = 0u;
    poisoning_resistance_ratio_ = 0u;
    palsy_resistance_ratio_ = 0u;
    dizziness_resistance_ratio_ = 0u;
    output_hurt_promote_ratio_ = 0u;
    suffer_hurt_reduce_ratio_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    ignore_defense_ratio_ = 0u;
    rebound_hurt_ratio_ = 0u;
    exp_coefficient_ = 0u;
    move_speed_ = 0u;
    armor_id_ = 0u;
    weapon_id_ = 0u;
    mounts_id_ = 0u;
    backpack_size_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    warehouse_size_ = 0u;
    physical_power_ = 0u;
    fighting_power_ = 0u;
    anger_ = 0u;
    create_time_ = 0u;
    online_time_ = 0u;
    offline_time_ = 0u;
    update_time_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    history_online_ = 0u;
    melting_ = 0u;
    potential_share_max_ = 0u;
    potential_accumulation_ = 0u;
    skill_point_ = 0u;
    popularity_ = 0u;
    skill_point_time_ = 0u;
    vip_level_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    team_id_ = 0u;
    camp_id_ = 0u;
    strategy_ = 0u;
    store_weapon_ = 0u;
    bow_id_ = 0u;
    bow_index_ = 0u;
    cavalry_index_ = 0u;
    bow_speed_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    equip_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sex = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional uint64 experience = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tael;
        break;
      }

      // optional uint32 tael = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tael:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tael_)));
          set_has_tael();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ingot;
        break;
      }

      // optional uint32 ingot = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gift_money;
        break;
      }

      // optional uint32 gift_money = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_money_)));
          set_has_gift_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_suspended_account;
        break;
      }

      // optional uint32 is_suspended_account = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suspended_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_suspended_account_)));
          set_has_is_suspended_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_partner_id;
        break;
      }

      // optional uint32 partner_id = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_family_position;
        break;
      }

      // optional uint32 family_position = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_position_)));
          set_has_family_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_can_be_raised;
        break;
      }

      // optional uint32 can_be_raised = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_raised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_be_raised_)));
          set_has_can_be_raised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_famiy_level;
        break;
      }

      // optional uint32 famiy_level = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_famiy_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &famiy_level_)));
          set_has_famiy_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_can_join_family;
        break;
      }

      // optional uint32 can_join_family = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_join_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_join_family_)));
          set_has_can_join_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_can_be_transmit;
        break;
      }

      // optional uint32 can_be_transmit = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_transmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_be_transmit_)));
          set_has_can_be_transmit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pk_model;
        break;
      }

      // optional uint32 pk_model = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_model_)));
          set_has_pk_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pk_value;
        break;
      }

      // optional uint32 pk_value = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_value_)));
          set_has_pk_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_military_strategy;
        break;
      }

      // optional uint32 military_strategy = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_military_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_strategy_)));
          set_has_military_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_x_pos;
        break;
      }

      // optional uint32 x_pos = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_y_pos;
        break;
      }

      // optional uint32 y_pos = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_siege_reputation;
        break;
      }

      // optional uint32 siege_reputation = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siege_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &siege_reputation_)));
          set_has_siege_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_cross_svr_war_reputation;
        break;
      }

      // optional uint32 cross_svr_war_reputation = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_svr_war_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_svr_war_reputation_)));
          set_has_cross_svr_war_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_max_hp;
        break;
      }

      // optional uint32 max_hp = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cur_hp;
        break;
      }

      // optional uint32 cur_hp = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_absorb_hp;
        break;
      }

      // optional uint32 absorb_hp = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absorb_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absorb_hp_)));
          set_has_absorb_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_max_mp;
        break;
      }

      // optional uint32 max_mp = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_mp_)));
          set_has_max_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cur_mp;
        break;
      }

      // optional uint32 cur_mp = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_mp_)));
          set_has_cur_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_absorb_mp;
        break;
      }

      // optional uint32 absorb_mp = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absorb_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absorb_mp_)));
          set_has_absorb_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_attack_min;
        break;
      }

      // optional uint32 attack_min = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_min_)));
          set_has_attack_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_attack_max;
        break;
      }

      // optional uint32 attack_max = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_max_)));
          set_has_attack_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_defense_min;
        break;
      }

      // optional uint32 defense_min = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_min_)));
          set_has_defense_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_defense_max;
        break;
      }

      // optional uint32 defense_max = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_max_)));
          set_has_defense_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_hit_point;
        break;
      }

      // optional uint32 hit_point = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_point_)));
          set_has_hit_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_dodge;
        break;
      }

      // optional uint32 dodge = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_stability;
        break;
      }

      // optional uint32 stability = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stability_)));
          set_has_stability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_recover;
        break;
      }

      // optional uint32 recover = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_)));
          set_has_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_attack_speed;
        break;
      }

      // optional uint32 attack_speed = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_frozen_addition_ratio;
        break;
      }

      // optional uint32 frozen_addition_ratio = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_addition_ratio_)));
          set_has_frozen_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_poisoning_addition_ratio;
        break;
      }

      // optional uint32 poisoning_addition_ratio = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poisoning_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poisoning_addition_ratio_)));
          set_has_poisoning_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_palsy_addition_ratio;
        break;
      }

      // optional uint32 palsy_addition_ratio = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palsy_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &palsy_addition_ratio_)));
          set_has_palsy_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_dizziness_addition_ratio;
        break;
      }

      // optional uint32 dizziness_addition_ratio = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dizziness_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dizziness_addition_ratio_)));
          set_has_dizziness_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_frozen_resistance_ratio;
        break;
      }

      // optional uint32 frozen_resistance_ratio = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_resistance_ratio_)));
          set_has_frozen_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_poisoning_resistance_ratio;
        break;
      }

      // optional uint32 poisoning_resistance_ratio = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poisoning_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poisoning_resistance_ratio_)));
          set_has_poisoning_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_palsy_resistance_ratio;
        break;
      }

      // optional uint32 palsy_resistance_ratio = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palsy_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &palsy_resistance_ratio_)));
          set_has_palsy_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_dizziness_resistance_ratio;
        break;
      }

      // optional uint32 dizziness_resistance_ratio = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dizziness_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dizziness_resistance_ratio_)));
          set_has_dizziness_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_output_hurt_promote_ratio;
        break;
      }

      // optional uint32 output_hurt_promote_ratio = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_hurt_promote_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_hurt_promote_ratio_)));
          set_has_output_hurt_promote_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_suffer_hurt_reduce_ratio;
        break;
      }

      // optional uint32 suffer_hurt_reduce_ratio = 48 [default = 0];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suffer_hurt_reduce_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suffer_hurt_reduce_ratio_)));
          set_has_suffer_hurt_reduce_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_ignore_defense_ratio;
        break;
      }

      // optional uint32 ignore_defense_ratio = 49 [default = 0];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_defense_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_defense_ratio_)));
          set_has_ignore_defense_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_rebound_hurt_ratio;
        break;
      }

      // optional uint32 rebound_hurt_ratio = 50 [default = 0];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebound_hurt_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebound_hurt_ratio_)));
          set_has_rebound_hurt_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_exp_coefficient;
        break;
      }

      // optional uint32 exp_coefficient = 51 [default = 0];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_coefficient_)));
          set_has_exp_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_move_speed;
        break;
      }

      // optional uint32 move_speed = 52 [default = 0];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_armor_id;
        break;
      }

      // optional uint32 armor_id = 53 [default = 0];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 54 [default = 0];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_mounts_id;
        break;
      }

      // optional uint32 mounts_id = 55 [default = 0];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mounts_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounts_id_)));
          set_has_mounts_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_backpack_size;
        break;
      }

      // optional uint32 backpack_size = 56 [default = 0];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backpack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backpack_size_)));
          set_has_backpack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_warehouse_size;
        break;
      }

      // optional uint32 warehouse_size = 57 [default = 0];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warehouse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warehouse_size_)));
          set_has_warehouse_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_physical_power;
        break;
      }

      // optional uint32 physical_power = 58 [default = 0];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_power_)));
          set_has_physical_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_fighting_power;
        break;
      }

      // optional uint32 fighting_power = 59 [default = 0];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_anger;
        break;
      }

      // optional uint32 anger = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anger_)));
          set_has_anger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 61 [default = 0];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_online_time;
        break;
      }

      // optional uint32 online_time = 62 [default = 0];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_offline_time;
        break;
      }

      // optional uint32 offline_time = 63 [default = 0];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_update_time;
        break;
      }

      // optional uint32 update_time = 64 [default = 0];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_history_online;
        break;
      }

      // optional uint32 history_online = 65 [default = 0];
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_online_)));
          set_has_history_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_melting;
        break;
      }

      // optional uint32 melting = 66 [default = 0];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_melting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &melting_)));
          set_has_melting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_potential_share_max;
        break;
      }

      // optional uint32 potential_share_max = 67 [default = 0];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential_share_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_share_max_)));
          set_has_potential_share_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_potential_accumulation;
        break;
      }

      // optional uint32 potential_accumulation = 68 [default = 0];
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential_accumulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_accumulation_)));
          set_has_potential_accumulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_skill_point;
        break;
      }

      // optional uint32 skill_point = 69 [default = 0];
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_popularity;
        break;
      }

      // optional uint32 popularity = 70 [default = 0];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_skill_point_time;
        break;
      }

      // optional uint32 skill_point_time = 71 [default = 0];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_time_)));
          set_has_skill_point_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 72 [default = 0];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 73 [default = 0];
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_camp_id;
        break;
      }

      // optional uint32 camp_id = 74 [default = 0];
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_strategy;
        break;
      }

      // optional uint32 strategy = 75 [default = 0];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_store_weapon;
        break;
      }

      // optional uint32 store_weapon = 76 [default = 0];
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_weapon_)));
          set_has_store_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_bow_id;
        break;
      }

      // optional uint32 bow_id = 77 [default = 0];
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_id_)));
          set_has_bow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_bow_index;
        break;
      }

      // optional uint32 bow_index = 78 [default = 0];
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_index_)));
          set_has_bow_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_cavalry_index;
        break;
      }

      // optional uint32 cavalry_index = 79 [default = 0];
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cavalry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavalry_index_)));
          set_has_cavalry_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_bow_speed;
        break;
      }

      // optional uint32 bow_speed = 80 [default = 0];
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_speed_)));
          set_has_bow_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_equip_power;
        break;
      }

      // optional uint32 equip_power = 81 [default = 0];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_power_)));
          set_has_equip_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sex = 1 [default = 0];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sex(), output);
  }

  // optional uint32 profession = 2 [default = 0];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profession(), output);
  }

  // optional uint64 experience = 3 [default = 0];
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->experience(), output);
  }

  // optional uint32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 tael = 5 [default = 0];
  if (has_tael()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tael(), output);
  }

  // optional uint32 ingot = 6 [default = 0];
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ingot(), output);
  }

  // optional uint32 gift_money = 7 [default = 0];
  if (has_gift_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gift_money(), output);
  }

  // optional uint32 is_suspended_account = 8 [default = 0];
  if (has_is_suspended_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_suspended_account(), output);
  }

  // optional uint32 partner_id = 9 [default = 0];
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->partner_id(), output);
  }

  // optional uint32 family_id = 10 [default = 0];
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->family_id(), output);
  }

  // optional uint32 family_position = 11 [default = 0];
  if (has_family_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->family_position(), output);
  }

  // optional uint32 can_be_raised = 12 [default = 0];
  if (has_can_be_raised()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->can_be_raised(), output);
  }

  // optional uint32 famiy_level = 13 [default = 0];
  if (has_famiy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->famiy_level(), output);
  }

  // optional uint32 can_join_family = 14 [default = 0];
  if (has_can_join_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->can_join_family(), output);
  }

  // optional uint32 can_be_transmit = 15 [default = 0];
  if (has_can_be_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->can_be_transmit(), output);
  }

  // optional uint32 pk_model = 16 [default = 0];
  if (has_pk_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pk_model(), output);
  }

  // optional uint32 pk_value = 17 [default = 0];
  if (has_pk_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pk_value(), output);
  }

  // optional uint32 military_strategy = 18 [default = 0];
  if (has_military_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->military_strategy(), output);
  }

  // optional uint32 map_id = 19 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->map_id(), output);
  }

  // optional uint32 x_pos = 20 [default = 0];
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->x_pos(), output);
  }

  // optional uint32 y_pos = 21 [default = 0];
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->y_pos(), output);
  }

  // optional uint32 siege_reputation = 22 [default = 0];
  if (has_siege_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->siege_reputation(), output);
  }

  // optional uint32 cross_svr_war_reputation = 23 [default = 0];
  if (has_cross_svr_war_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->cross_svr_war_reputation(), output);
  }

  // optional uint32 max_hp = 24 [default = 0];
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->max_hp(), output);
  }

  // optional uint32 cur_hp = 25 [default = 0];
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->cur_hp(), output);
  }

  // optional uint32 absorb_hp = 26 [default = 0];
  if (has_absorb_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->absorb_hp(), output);
  }

  // optional uint32 max_mp = 27 [default = 0];
  if (has_max_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->max_mp(), output);
  }

  // optional uint32 cur_mp = 28 [default = 0];
  if (has_cur_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cur_mp(), output);
  }

  // optional uint32 absorb_mp = 29 [default = 0];
  if (has_absorb_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->absorb_mp(), output);
  }

  // optional uint32 attack_min = 30 [default = 0];
  if (has_attack_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->attack_min(), output);
  }

  // optional uint32 attack_max = 31 [default = 0];
  if (has_attack_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->attack_max(), output);
  }

  // optional uint32 defense_min = 32 [default = 0];
  if (has_defense_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->defense_min(), output);
  }

  // optional uint32 defense_max = 33 [default = 0];
  if (has_defense_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->defense_max(), output);
  }

  // optional uint32 hit_point = 34 [default = 0];
  if (has_hit_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->hit_point(), output);
  }

  // optional uint32 dodge = 35 [default = 0];
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->dodge(), output);
  }

  // optional uint32 stability = 36 [default = 0];
  if (has_stability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->stability(), output);
  }

  // optional uint32 recover = 37 [default = 0];
  if (has_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->recover(), output);
  }

  // optional uint32 attack_speed = 38 [default = 0];
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->attack_speed(), output);
  }

  // optional uint32 frozen_addition_ratio = 39 [default = 0];
  if (has_frozen_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->frozen_addition_ratio(), output);
  }

  // optional uint32 poisoning_addition_ratio = 40 [default = 0];
  if (has_poisoning_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->poisoning_addition_ratio(), output);
  }

  // optional uint32 palsy_addition_ratio = 41 [default = 0];
  if (has_palsy_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->palsy_addition_ratio(), output);
  }

  // optional uint32 dizziness_addition_ratio = 42 [default = 0];
  if (has_dizziness_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->dizziness_addition_ratio(), output);
  }

  // optional uint32 frozen_resistance_ratio = 43 [default = 0];
  if (has_frozen_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->frozen_resistance_ratio(), output);
  }

  // optional uint32 poisoning_resistance_ratio = 44 [default = 0];
  if (has_poisoning_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->poisoning_resistance_ratio(), output);
  }

  // optional uint32 palsy_resistance_ratio = 45 [default = 0];
  if (has_palsy_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->palsy_resistance_ratio(), output);
  }

  // optional uint32 dizziness_resistance_ratio = 46 [default = 0];
  if (has_dizziness_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->dizziness_resistance_ratio(), output);
  }

  // optional uint32 output_hurt_promote_ratio = 47 [default = 0];
  if (has_output_hurt_promote_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->output_hurt_promote_ratio(), output);
  }

  // optional uint32 suffer_hurt_reduce_ratio = 48 [default = 0];
  if (has_suffer_hurt_reduce_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->suffer_hurt_reduce_ratio(), output);
  }

  // optional uint32 ignore_defense_ratio = 49 [default = 0];
  if (has_ignore_defense_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ignore_defense_ratio(), output);
  }

  // optional uint32 rebound_hurt_ratio = 50 [default = 0];
  if (has_rebound_hurt_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->rebound_hurt_ratio(), output);
  }

  // optional uint32 exp_coefficient = 51 [default = 0];
  if (has_exp_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->exp_coefficient(), output);
  }

  // optional uint32 move_speed = 52 [default = 0];
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->move_speed(), output);
  }

  // optional uint32 armor_id = 53 [default = 0];
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->armor_id(), output);
  }

  // optional uint32 weapon_id = 54 [default = 0];
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->weapon_id(), output);
  }

  // optional uint32 mounts_id = 55 [default = 0];
  if (has_mounts_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->mounts_id(), output);
  }

  // optional uint32 backpack_size = 56 [default = 0];
  if (has_backpack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->backpack_size(), output);
  }

  // optional uint32 warehouse_size = 57 [default = 0];
  if (has_warehouse_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->warehouse_size(), output);
  }

  // optional uint32 physical_power = 58 [default = 0];
  if (has_physical_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->physical_power(), output);
  }

  // optional uint32 fighting_power = 59 [default = 0];
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->fighting_power(), output);
  }

  // optional uint32 anger = 60 [default = 0];
  if (has_anger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->anger(), output);
  }

  // optional uint32 create_time = 61 [default = 0];
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->create_time(), output);
  }

  // optional uint32 online_time = 62 [default = 0];
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->online_time(), output);
  }

  // optional uint32 offline_time = 63 [default = 0];
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->offline_time(), output);
  }

  // optional uint32 update_time = 64 [default = 0];
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->update_time(), output);
  }

  // optional uint32 history_online = 65 [default = 0];
  if (has_history_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->history_online(), output);
  }

  // optional uint32 melting = 66 [default = 0];
  if (has_melting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->melting(), output);
  }

  // optional uint32 potential_share_max = 67 [default = 0];
  if (has_potential_share_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->potential_share_max(), output);
  }

  // optional uint32 potential_accumulation = 68 [default = 0];
  if (has_potential_accumulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->potential_accumulation(), output);
  }

  // optional uint32 skill_point = 69 [default = 0];
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->skill_point(), output);
  }

  // optional uint32 popularity = 70 [default = 0];
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->popularity(), output);
  }

  // optional uint32 skill_point_time = 71 [default = 0];
  if (has_skill_point_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->skill_point_time(), output);
  }

  // optional uint32 vip_level = 72 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->vip_level(), output);
  }

  // optional uint32 team_id = 73 [default = 0];
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->team_id(), output);
  }

  // optional uint32 camp_id = 74 [default = 0];
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->camp_id(), output);
  }

  // optional uint32 strategy = 75 [default = 0];
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->strategy(), output);
  }

  // optional uint32 store_weapon = 76 [default = 0];
  if (has_store_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->store_weapon(), output);
  }

  // optional uint32 bow_id = 77 [default = 0];
  if (has_bow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->bow_id(), output);
  }

  // optional uint32 bow_index = 78 [default = 0];
  if (has_bow_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->bow_index(), output);
  }

  // optional uint32 cavalry_index = 79 [default = 0];
  if (has_cavalry_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->cavalry_index(), output);
  }

  // optional uint32 bow_speed = 80 [default = 0];
  if (has_bow_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->bow_speed(), output);
  }

  // optional uint32 equip_power = 81 [default = 0];
  if (has_equip_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->equip_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sex = 1 [default = 0];
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sex(), target);
  }

  // optional uint32 profession = 2 [default = 0];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profession(), target);
  }

  // optional uint64 experience = 3 [default = 0];
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->experience(), target);
  }

  // optional uint32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 tael = 5 [default = 0];
  if (has_tael()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tael(), target);
  }

  // optional uint32 ingot = 6 [default = 0];
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ingot(), target);
  }

  // optional uint32 gift_money = 7 [default = 0];
  if (has_gift_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gift_money(), target);
  }

  // optional uint32 is_suspended_account = 8 [default = 0];
  if (has_is_suspended_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_suspended_account(), target);
  }

  // optional uint32 partner_id = 9 [default = 0];
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->partner_id(), target);
  }

  // optional uint32 family_id = 10 [default = 0];
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->family_id(), target);
  }

  // optional uint32 family_position = 11 [default = 0];
  if (has_family_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->family_position(), target);
  }

  // optional uint32 can_be_raised = 12 [default = 0];
  if (has_can_be_raised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->can_be_raised(), target);
  }

  // optional uint32 famiy_level = 13 [default = 0];
  if (has_famiy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->famiy_level(), target);
  }

  // optional uint32 can_join_family = 14 [default = 0];
  if (has_can_join_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->can_join_family(), target);
  }

  // optional uint32 can_be_transmit = 15 [default = 0];
  if (has_can_be_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->can_be_transmit(), target);
  }

  // optional uint32 pk_model = 16 [default = 0];
  if (has_pk_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pk_model(), target);
  }

  // optional uint32 pk_value = 17 [default = 0];
  if (has_pk_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pk_value(), target);
  }

  // optional uint32 military_strategy = 18 [default = 0];
  if (has_military_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->military_strategy(), target);
  }

  // optional uint32 map_id = 19 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->map_id(), target);
  }

  // optional uint32 x_pos = 20 [default = 0];
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->x_pos(), target);
  }

  // optional uint32 y_pos = 21 [default = 0];
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->y_pos(), target);
  }

  // optional uint32 siege_reputation = 22 [default = 0];
  if (has_siege_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->siege_reputation(), target);
  }

  // optional uint32 cross_svr_war_reputation = 23 [default = 0];
  if (has_cross_svr_war_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->cross_svr_war_reputation(), target);
  }

  // optional uint32 max_hp = 24 [default = 0];
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->max_hp(), target);
  }

  // optional uint32 cur_hp = 25 [default = 0];
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->cur_hp(), target);
  }

  // optional uint32 absorb_hp = 26 [default = 0];
  if (has_absorb_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->absorb_hp(), target);
  }

  // optional uint32 max_mp = 27 [default = 0];
  if (has_max_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->max_mp(), target);
  }

  // optional uint32 cur_mp = 28 [default = 0];
  if (has_cur_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cur_mp(), target);
  }

  // optional uint32 absorb_mp = 29 [default = 0];
  if (has_absorb_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->absorb_mp(), target);
  }

  // optional uint32 attack_min = 30 [default = 0];
  if (has_attack_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->attack_min(), target);
  }

  // optional uint32 attack_max = 31 [default = 0];
  if (has_attack_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->attack_max(), target);
  }

  // optional uint32 defense_min = 32 [default = 0];
  if (has_defense_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->defense_min(), target);
  }

  // optional uint32 defense_max = 33 [default = 0];
  if (has_defense_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->defense_max(), target);
  }

  // optional uint32 hit_point = 34 [default = 0];
  if (has_hit_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->hit_point(), target);
  }

  // optional uint32 dodge = 35 [default = 0];
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->dodge(), target);
  }

  // optional uint32 stability = 36 [default = 0];
  if (has_stability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->stability(), target);
  }

  // optional uint32 recover = 37 [default = 0];
  if (has_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->recover(), target);
  }

  // optional uint32 attack_speed = 38 [default = 0];
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->attack_speed(), target);
  }

  // optional uint32 frozen_addition_ratio = 39 [default = 0];
  if (has_frozen_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->frozen_addition_ratio(), target);
  }

  // optional uint32 poisoning_addition_ratio = 40 [default = 0];
  if (has_poisoning_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->poisoning_addition_ratio(), target);
  }

  // optional uint32 palsy_addition_ratio = 41 [default = 0];
  if (has_palsy_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->palsy_addition_ratio(), target);
  }

  // optional uint32 dizziness_addition_ratio = 42 [default = 0];
  if (has_dizziness_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->dizziness_addition_ratio(), target);
  }

  // optional uint32 frozen_resistance_ratio = 43 [default = 0];
  if (has_frozen_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->frozen_resistance_ratio(), target);
  }

  // optional uint32 poisoning_resistance_ratio = 44 [default = 0];
  if (has_poisoning_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->poisoning_resistance_ratio(), target);
  }

  // optional uint32 palsy_resistance_ratio = 45 [default = 0];
  if (has_palsy_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->palsy_resistance_ratio(), target);
  }

  // optional uint32 dizziness_resistance_ratio = 46 [default = 0];
  if (has_dizziness_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->dizziness_resistance_ratio(), target);
  }

  // optional uint32 output_hurt_promote_ratio = 47 [default = 0];
  if (has_output_hurt_promote_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->output_hurt_promote_ratio(), target);
  }

  // optional uint32 suffer_hurt_reduce_ratio = 48 [default = 0];
  if (has_suffer_hurt_reduce_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->suffer_hurt_reduce_ratio(), target);
  }

  // optional uint32 ignore_defense_ratio = 49 [default = 0];
  if (has_ignore_defense_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ignore_defense_ratio(), target);
  }

  // optional uint32 rebound_hurt_ratio = 50 [default = 0];
  if (has_rebound_hurt_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->rebound_hurt_ratio(), target);
  }

  // optional uint32 exp_coefficient = 51 [default = 0];
  if (has_exp_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->exp_coefficient(), target);
  }

  // optional uint32 move_speed = 52 [default = 0];
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->move_speed(), target);
  }

  // optional uint32 armor_id = 53 [default = 0];
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->armor_id(), target);
  }

  // optional uint32 weapon_id = 54 [default = 0];
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->weapon_id(), target);
  }

  // optional uint32 mounts_id = 55 [default = 0];
  if (has_mounts_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->mounts_id(), target);
  }

  // optional uint32 backpack_size = 56 [default = 0];
  if (has_backpack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->backpack_size(), target);
  }

  // optional uint32 warehouse_size = 57 [default = 0];
  if (has_warehouse_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->warehouse_size(), target);
  }

  // optional uint32 physical_power = 58 [default = 0];
  if (has_physical_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->physical_power(), target);
  }

  // optional uint32 fighting_power = 59 [default = 0];
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->fighting_power(), target);
  }

  // optional uint32 anger = 60 [default = 0];
  if (has_anger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->anger(), target);
  }

  // optional uint32 create_time = 61 [default = 0];
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->create_time(), target);
  }

  // optional uint32 online_time = 62 [default = 0];
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->online_time(), target);
  }

  // optional uint32 offline_time = 63 [default = 0];
  if (has_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->offline_time(), target);
  }

  // optional uint32 update_time = 64 [default = 0];
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->update_time(), target);
  }

  // optional uint32 history_online = 65 [default = 0];
  if (has_history_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->history_online(), target);
  }

  // optional uint32 melting = 66 [default = 0];
  if (has_melting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->melting(), target);
  }

  // optional uint32 potential_share_max = 67 [default = 0];
  if (has_potential_share_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->potential_share_max(), target);
  }

  // optional uint32 potential_accumulation = 68 [default = 0];
  if (has_potential_accumulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->potential_accumulation(), target);
  }

  // optional uint32 skill_point = 69 [default = 0];
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->skill_point(), target);
  }

  // optional uint32 popularity = 70 [default = 0];
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->popularity(), target);
  }

  // optional uint32 skill_point_time = 71 [default = 0];
  if (has_skill_point_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->skill_point_time(), target);
  }

  // optional uint32 vip_level = 72 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->vip_level(), target);
  }

  // optional uint32 team_id = 73 [default = 0];
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->team_id(), target);
  }

  // optional uint32 camp_id = 74 [default = 0];
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->camp_id(), target);
  }

  // optional uint32 strategy = 75 [default = 0];
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->strategy(), target);
  }

  // optional uint32 store_weapon = 76 [default = 0];
  if (has_store_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->store_weapon(), target);
  }

  // optional uint32 bow_id = 77 [default = 0];
  if (has_bow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->bow_id(), target);
  }

  // optional uint32 bow_index = 78 [default = 0];
  if (has_bow_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->bow_index(), target);
  }

  // optional uint32 cavalry_index = 79 [default = 0];
  if (has_cavalry_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->cavalry_index(), target);
  }

  // optional uint32 bow_speed = 80 [default = 0];
  if (has_bow_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->bow_speed(), target);
  }

  // optional uint32 equip_power = 81 [default = 0];
  if (has_equip_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->equip_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sex = 1 [default = 0];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 profession = 2 [default = 0];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint64 experience = 3 [default = 0];
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experience());
    }

    // optional uint32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 tael = 5 [default = 0];
    if (has_tael()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tael());
    }

    // optional uint32 ingot = 6 [default = 0];
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ingot());
    }

    // optional uint32 gift_money = 7 [default = 0];
    if (has_gift_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_money());
    }

    // optional uint32 is_suspended_account = 8 [default = 0];
    if (has_is_suspended_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_suspended_account());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 partner_id = 9 [default = 0];
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

    // optional uint32 family_id = 10 [default = 0];
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional uint32 family_position = 11 [default = 0];
    if (has_family_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_position());
    }

    // optional uint32 can_be_raised = 12 [default = 0];
    if (has_can_be_raised()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_be_raised());
    }

    // optional uint32 famiy_level = 13 [default = 0];
    if (has_famiy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->famiy_level());
    }

    // optional uint32 can_join_family = 14 [default = 0];
    if (has_can_join_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_join_family());
    }

    // optional uint32 can_be_transmit = 15 [default = 0];
    if (has_can_be_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_be_transmit());
    }

    // optional uint32 pk_model = 16 [default = 0];
    if (has_pk_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_model());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 pk_value = 17 [default = 0];
    if (has_pk_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_value());
    }

    // optional uint32 military_strategy = 18 [default = 0];
    if (has_military_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->military_strategy());
    }

    // optional uint32 map_id = 19 [default = 0];
    if (has_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 x_pos = 20 [default = 0];
    if (has_x_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }

    // optional uint32 y_pos = 21 [default = 0];
    if (has_y_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }

    // optional uint32 siege_reputation = 22 [default = 0];
    if (has_siege_reputation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->siege_reputation());
    }

    // optional uint32 cross_svr_war_reputation = 23 [default = 0];
    if (has_cross_svr_war_reputation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_svr_war_reputation());
    }

    // optional uint32 max_hp = 24 [default = 0];
    if (has_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 cur_hp = 25 [default = 0];
    if (has_cur_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_hp());
    }

    // optional uint32 absorb_hp = 26 [default = 0];
    if (has_absorb_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absorb_hp());
    }

    // optional uint32 max_mp = 27 [default = 0];
    if (has_max_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_mp());
    }

    // optional uint32 cur_mp = 28 [default = 0];
    if (has_cur_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_mp());
    }

    // optional uint32 absorb_mp = 29 [default = 0];
    if (has_absorb_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absorb_mp());
    }

    // optional uint32 attack_min = 30 [default = 0];
    if (has_attack_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_min());
    }

    // optional uint32 attack_max = 31 [default = 0];
    if (has_attack_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_max());
    }

    // optional uint32 defense_min = 32 [default = 0];
    if (has_defense_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_min());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 defense_max = 33 [default = 0];
    if (has_defense_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_max());
    }

    // optional uint32 hit_point = 34 [default = 0];
    if (has_hit_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_point());
    }

    // optional uint32 dodge = 35 [default = 0];
    if (has_dodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // optional uint32 stability = 36 [default = 0];
    if (has_stability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stability());
    }

    // optional uint32 recover = 37 [default = 0];
    if (has_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover());
    }

    // optional uint32 attack_speed = 38 [default = 0];
    if (has_attack_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_speed());
    }

    // optional uint32 frozen_addition_ratio = 39 [default = 0];
    if (has_frozen_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_addition_ratio());
    }

    // optional uint32 poisoning_addition_ratio = 40 [default = 0];
    if (has_poisoning_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poisoning_addition_ratio());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 palsy_addition_ratio = 41 [default = 0];
    if (has_palsy_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->palsy_addition_ratio());
    }

    // optional uint32 dizziness_addition_ratio = 42 [default = 0];
    if (has_dizziness_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dizziness_addition_ratio());
    }

    // optional uint32 frozen_resistance_ratio = 43 [default = 0];
    if (has_frozen_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_resistance_ratio());
    }

    // optional uint32 poisoning_resistance_ratio = 44 [default = 0];
    if (has_poisoning_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poisoning_resistance_ratio());
    }

    // optional uint32 palsy_resistance_ratio = 45 [default = 0];
    if (has_palsy_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->palsy_resistance_ratio());
    }

    // optional uint32 dizziness_resistance_ratio = 46 [default = 0];
    if (has_dizziness_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dizziness_resistance_ratio());
    }

    // optional uint32 output_hurt_promote_ratio = 47 [default = 0];
    if (has_output_hurt_promote_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_hurt_promote_ratio());
    }

    // optional uint32 suffer_hurt_reduce_ratio = 48 [default = 0];
    if (has_suffer_hurt_reduce_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suffer_hurt_reduce_ratio());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 ignore_defense_ratio = 49 [default = 0];
    if (has_ignore_defense_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_defense_ratio());
    }

    // optional uint32 rebound_hurt_ratio = 50 [default = 0];
    if (has_rebound_hurt_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebound_hurt_ratio());
    }

    // optional uint32 exp_coefficient = 51 [default = 0];
    if (has_exp_coefficient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_coefficient());
    }

    // optional uint32 move_speed = 52 [default = 0];
    if (has_move_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed());
    }

    // optional uint32 armor_id = 53 [default = 0];
    if (has_armor_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

    // optional uint32 weapon_id = 54 [default = 0];
    if (has_weapon_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 mounts_id = 55 [default = 0];
    if (has_mounts_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounts_id());
    }

    // optional uint32 backpack_size = 56 [default = 0];
    if (has_backpack_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backpack_size());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 warehouse_size = 57 [default = 0];
    if (has_warehouse_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warehouse_size());
    }

    // optional uint32 physical_power = 58 [default = 0];
    if (has_physical_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_power());
    }

    // optional uint32 fighting_power = 59 [default = 0];
    if (has_fighting_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // optional uint32 anger = 60 [default = 0];
    if (has_anger()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anger());
    }

    // optional uint32 create_time = 61 [default = 0];
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 online_time = 62 [default = 0];
    if (has_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

    // optional uint32 offline_time = 63 [default = 0];
    if (has_offline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_time());
    }

    // optional uint32 update_time = 64 [default = 0];
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 history_online = 65 [default = 0];
    if (has_history_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_online());
    }

    // optional uint32 melting = 66 [default = 0];
    if (has_melting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->melting());
    }

    // optional uint32 potential_share_max = 67 [default = 0];
    if (has_potential_share_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential_share_max());
    }

    // optional uint32 potential_accumulation = 68 [default = 0];
    if (has_potential_accumulation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential_accumulation());
    }

    // optional uint32 skill_point = 69 [default = 0];
    if (has_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // optional uint32 popularity = 70 [default = 0];
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // optional uint32 skill_point_time = 71 [default = 0];
    if (has_skill_point_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_time());
    }

    // optional uint32 vip_level = 72 [default = 0];
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint32 team_id = 73 [default = 0];
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 camp_id = 74 [default = 0];
    if (has_camp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp_id());
    }

    // optional uint32 strategy = 75 [default = 0];
    if (has_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy());
    }

    // optional uint32 store_weapon = 76 [default = 0];
    if (has_store_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_weapon());
    }

    // optional uint32 bow_id = 77 [default = 0];
    if (has_bow_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_id());
    }

    // optional uint32 bow_index = 78 [default = 0];
    if (has_bow_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_index());
    }

    // optional uint32 cavalry_index = 79 [default = 0];
    if (has_cavalry_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cavalry_index());
    }

    // optional uint32 bow_speed = 80 [default = 0];
    if (has_bow_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_speed());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint32 equip_power = 81 [default = 0];
    if (has_equip_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_attr::MergeFrom(const role_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tael()) {
      set_tael(from.tael());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_gift_money()) {
      set_gift_money(from.gift_money());
    }
    if (from.has_is_suspended_account()) {
      set_is_suspended_account(from.is_suspended_account());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_position()) {
      set_family_position(from.family_position());
    }
    if (from.has_can_be_raised()) {
      set_can_be_raised(from.can_be_raised());
    }
    if (from.has_famiy_level()) {
      set_famiy_level(from.famiy_level());
    }
    if (from.has_can_join_family()) {
      set_can_join_family(from.can_join_family());
    }
    if (from.has_can_be_transmit()) {
      set_can_be_transmit(from.can_be_transmit());
    }
    if (from.has_pk_model()) {
      set_pk_model(from.pk_model());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pk_value()) {
      set_pk_value(from.pk_value());
    }
    if (from.has_military_strategy()) {
      set_military_strategy(from.military_strategy());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_siege_reputation()) {
      set_siege_reputation(from.siege_reputation());
    }
    if (from.has_cross_svr_war_reputation()) {
      set_cross_svr_war_reputation(from.cross_svr_war_reputation());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_absorb_hp()) {
      set_absorb_hp(from.absorb_hp());
    }
    if (from.has_max_mp()) {
      set_max_mp(from.max_mp());
    }
    if (from.has_cur_mp()) {
      set_cur_mp(from.cur_mp());
    }
    if (from.has_absorb_mp()) {
      set_absorb_mp(from.absorb_mp());
    }
    if (from.has_attack_min()) {
      set_attack_min(from.attack_min());
    }
    if (from.has_attack_max()) {
      set_attack_max(from.attack_max());
    }
    if (from.has_defense_min()) {
      set_defense_min(from.defense_min());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_defense_max()) {
      set_defense_max(from.defense_max());
    }
    if (from.has_hit_point()) {
      set_hit_point(from.hit_point());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_stability()) {
      set_stability(from.stability());
    }
    if (from.has_recover()) {
      set_recover(from.recover());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
    if (from.has_frozen_addition_ratio()) {
      set_frozen_addition_ratio(from.frozen_addition_ratio());
    }
    if (from.has_poisoning_addition_ratio()) {
      set_poisoning_addition_ratio(from.poisoning_addition_ratio());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_palsy_addition_ratio()) {
      set_palsy_addition_ratio(from.palsy_addition_ratio());
    }
    if (from.has_dizziness_addition_ratio()) {
      set_dizziness_addition_ratio(from.dizziness_addition_ratio());
    }
    if (from.has_frozen_resistance_ratio()) {
      set_frozen_resistance_ratio(from.frozen_resistance_ratio());
    }
    if (from.has_poisoning_resistance_ratio()) {
      set_poisoning_resistance_ratio(from.poisoning_resistance_ratio());
    }
    if (from.has_palsy_resistance_ratio()) {
      set_palsy_resistance_ratio(from.palsy_resistance_ratio());
    }
    if (from.has_dizziness_resistance_ratio()) {
      set_dizziness_resistance_ratio(from.dizziness_resistance_ratio());
    }
    if (from.has_output_hurt_promote_ratio()) {
      set_output_hurt_promote_ratio(from.output_hurt_promote_ratio());
    }
    if (from.has_suffer_hurt_reduce_ratio()) {
      set_suffer_hurt_reduce_ratio(from.suffer_hurt_reduce_ratio());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_ignore_defense_ratio()) {
      set_ignore_defense_ratio(from.ignore_defense_ratio());
    }
    if (from.has_rebound_hurt_ratio()) {
      set_rebound_hurt_ratio(from.rebound_hurt_ratio());
    }
    if (from.has_exp_coefficient()) {
      set_exp_coefficient(from.exp_coefficient());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_mounts_id()) {
      set_mounts_id(from.mounts_id());
    }
    if (from.has_backpack_size()) {
      set_backpack_size(from.backpack_size());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_warehouse_size()) {
      set_warehouse_size(from.warehouse_size());
    }
    if (from.has_physical_power()) {
      set_physical_power(from.physical_power());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_anger()) {
      set_anger(from.anger());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_history_online()) {
      set_history_online(from.history_online());
    }
    if (from.has_melting()) {
      set_melting(from.melting());
    }
    if (from.has_potential_share_max()) {
      set_potential_share_max(from.potential_share_max());
    }
    if (from.has_potential_accumulation()) {
      set_potential_accumulation(from.potential_accumulation());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_skill_point_time()) {
      set_skill_point_time(from.skill_point_time());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_store_weapon()) {
      set_store_weapon(from.store_weapon());
    }
    if (from.has_bow_id()) {
      set_bow_id(from.bow_id());
    }
    if (from.has_bow_index()) {
      set_bow_index(from.bow_index());
    }
    if (from.has_cavalry_index()) {
      set_cavalry_index(from.cavalry_index());
    }
    if (from.has_bow_speed()) {
      set_bow_speed(from.bow_speed());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_equip_power()) {
      set_equip_power(from.equip_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_attr::CopyFrom(const role_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_attr::IsInitialized() const {

  return true;
}

void role_attr::Swap(role_attr* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(experience_, other->experience_);
    std::swap(level_, other->level_);
    std::swap(tael_, other->tael_);
    std::swap(ingot_, other->ingot_);
    std::swap(gift_money_, other->gift_money_);
    std::swap(is_suspended_account_, other->is_suspended_account_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_position_, other->family_position_);
    std::swap(can_be_raised_, other->can_be_raised_);
    std::swap(famiy_level_, other->famiy_level_);
    std::swap(can_join_family_, other->can_join_family_);
    std::swap(can_be_transmit_, other->can_be_transmit_);
    std::swap(pk_model_, other->pk_model_);
    std::swap(pk_value_, other->pk_value_);
    std::swap(military_strategy_, other->military_strategy_);
    std::swap(map_id_, other->map_id_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(siege_reputation_, other->siege_reputation_);
    std::swap(cross_svr_war_reputation_, other->cross_svr_war_reputation_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(absorb_hp_, other->absorb_hp_);
    std::swap(max_mp_, other->max_mp_);
    std::swap(cur_mp_, other->cur_mp_);
    std::swap(absorb_mp_, other->absorb_mp_);
    std::swap(attack_min_, other->attack_min_);
    std::swap(attack_max_, other->attack_max_);
    std::swap(defense_min_, other->defense_min_);
    std::swap(defense_max_, other->defense_max_);
    std::swap(hit_point_, other->hit_point_);
    std::swap(dodge_, other->dodge_);
    std::swap(stability_, other->stability_);
    std::swap(recover_, other->recover_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(frozen_addition_ratio_, other->frozen_addition_ratio_);
    std::swap(poisoning_addition_ratio_, other->poisoning_addition_ratio_);
    std::swap(palsy_addition_ratio_, other->palsy_addition_ratio_);
    std::swap(dizziness_addition_ratio_, other->dizziness_addition_ratio_);
    std::swap(frozen_resistance_ratio_, other->frozen_resistance_ratio_);
    std::swap(poisoning_resistance_ratio_, other->poisoning_resistance_ratio_);
    std::swap(palsy_resistance_ratio_, other->palsy_resistance_ratio_);
    std::swap(dizziness_resistance_ratio_, other->dizziness_resistance_ratio_);
    std::swap(output_hurt_promote_ratio_, other->output_hurt_promote_ratio_);
    std::swap(suffer_hurt_reduce_ratio_, other->suffer_hurt_reduce_ratio_);
    std::swap(ignore_defense_ratio_, other->ignore_defense_ratio_);
    std::swap(rebound_hurt_ratio_, other->rebound_hurt_ratio_);
    std::swap(exp_coefficient_, other->exp_coefficient_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(mounts_id_, other->mounts_id_);
    std::swap(backpack_size_, other->backpack_size_);
    std::swap(warehouse_size_, other->warehouse_size_);
    std::swap(physical_power_, other->physical_power_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(anger_, other->anger_);
    std::swap(create_time_, other->create_time_);
    std::swap(online_time_, other->online_time_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(history_online_, other->history_online_);
    std::swap(melting_, other->melting_);
    std::swap(potential_share_max_, other->potential_share_max_);
    std::swap(potential_accumulation_, other->potential_accumulation_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(popularity_, other->popularity_);
    std::swap(skill_point_time_, other->skill_point_time_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(team_id_, other->team_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(strategy_, other->strategy_);
    std::swap(store_weapon_, other->store_weapon_);
    std::swap(bow_id_, other->bow_id_);
    std::swap(bow_index_, other->bow_index_);
    std::swap(cavalry_index_, other->cavalry_index_);
    std::swap(bow_speed_, other->bow_speed_);
    std::swap(equip_power_, other->equip_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_attr_descriptor_;
  metadata.reflection = role_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_msg::kRdFieldNumber;
const int role_msg::kAttrFieldNumber;
const int role_msg::kStatusFieldNumber;
const int role_msg::kBornFieldNumber;
const int role_msg::kAtkModeFieldNumber;
#endif  // !_MSC_VER

role_msg::role_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  attr_ = const_cast< ::client::role_attr*>(&::client::role_attr::default_instance());
  status_ = const_cast< ::client::role_status*>(&::client::role_status::default_instance());
}

role_msg::role_msg(const role_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  attr_ = NULL;
  status_ = NULL;
  born_ = false;
  atk_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_msg::~role_msg() {
  SharedDtor();
}

void role_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
    delete attr_;
    delete status_;
  }
}

void role_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_msg_descriptor_;
}

const role_msg& role_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

role_msg* role_msg::default_instance_ = NULL;

role_msg* role_msg::New() const {
  return new role_msg;
}

void role_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::client::role_attr::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::client::role_status::Clear();
    }
    born_ = false;
    atk_mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // optional .client.role_attr attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .client.role_status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born;
        break;
      }

      // optional bool born = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &born_)));
          set_has_born();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atk_mode;
        break;
      }

      // optional uint32 atk_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_mode_)));
          set_has_atk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // optional .client.role_attr attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  // optional .client.role_status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  // optional bool born = 4 [default = false];
  if (has_born()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->born(), output);
  }

  // optional uint32 atk_mode = 5;
  if (has_atk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // optional .client.role_attr attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  // optional .client.role_status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  // optional bool born = 4 [default = false];
  if (has_born()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->born(), target);
  }

  // optional uint32 atk_mode = 5;
  if (has_atk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->atk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

    // optional .client.role_attr attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .client.role_status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional bool born = 4 [default = false];
    if (has_born()) {
      total_size += 1 + 1;
    }

    // optional uint32 atk_mode = 5;
    if (has_atk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_msg::MergeFrom(const role_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
    if (from.has_attr()) {
      mutable_attr()->::client::role_attr::MergeFrom(from.attr());
    }
    if (from.has_status()) {
      mutable_status()->::client::role_status::MergeFrom(from.status());
    }
    if (from.has_born()) {
      set_born(from.born());
    }
    if (from.has_atk_mode()) {
      set_atk_mode(from.atk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_msg::CopyFrom(const role_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_msg::IsInitialized() const {

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void role_msg::Swap(role_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    std::swap(attr_, other->attr_);
    std::swap(status_, other->status_);
    std::swap(born_, other->born_);
    std::swap(atk_mode_, other->atk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_msg_descriptor_;
  metadata.reflection = role_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int multi_role_msg::kRmFieldNumber;
#endif  // !_MSC_VER

multi_role_msg::multi_role_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void multi_role_msg::InitAsDefaultInstance() {
}

multi_role_msg::multi_role_msg(const multi_role_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void multi_role_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

multi_role_msg::~multi_role_msg() {
  SharedDtor();
}

void multi_role_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void multi_role_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multi_role_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return multi_role_msg_descriptor_;
}

const multi_role_msg& multi_role_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

multi_role_msg* multi_role_msg::default_instance_ = NULL;

multi_role_msg* multi_role_msg::New() const {
  return new multi_role_msg;
}

void multi_role_msg::Clear() {
  rm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool multi_role_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.role_msg rm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rm;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void multi_role_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.role_msg rm = 1;
  for (int i = 0; i < this->rm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* multi_role_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.role_msg rm = 1;
  for (int i = 0; i < this->rm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int multi_role_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.role_msg rm = 1;
  total_size += 1 * this->rm_size();
  for (int i = 0; i < this->rm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multi_role_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const multi_role_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const multi_role_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void multi_role_msg::MergeFrom(const multi_role_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rm_.MergeFrom(from.rm_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void multi_role_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multi_role_msg::CopyFrom(const multi_role_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multi_role_msg::IsInitialized() const {

  for (int i = 0; i < rm_size(); i++) {
    if (!this->rm(i).IsInitialized()) return false;
  }
  return true;
}

void multi_role_msg::Swap(multi_role_msg* other) {
  if (other != this) {
    rm_.Swap(&other->rm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata multi_role_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = multi_role_msg_descriptor_;
  metadata.reflection = multi_role_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yellow_vip_info_req::kRoleIdFieldNumber;
const int yellow_vip_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

yellow_vip_info_req::yellow_vip_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yellow_vip_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

yellow_vip_info_req::yellow_vip_info_req(const yellow_vip_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yellow_vip_info_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yellow_vip_info_req::~yellow_vip_info_req() {
  SharedDtor();
}

void yellow_vip_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void yellow_vip_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yellow_vip_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yellow_vip_info_req_descriptor_;
}

const yellow_vip_info_req& yellow_vip_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

yellow_vip_info_req* yellow_vip_info_req::default_instance_ = NULL;

yellow_vip_info_req* yellow_vip_info_req::New() const {
  return new yellow_vip_info_req;
}

void yellow_vip_info_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yellow_vip_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yellow_vip_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yellow_vip_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yellow_vip_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yellow_vip_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yellow_vip_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yellow_vip_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yellow_vip_info_req::MergeFrom(const yellow_vip_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yellow_vip_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yellow_vip_info_req::CopyFrom(const yellow_vip_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yellow_vip_info_req::IsInitialized() const {

  return true;
}

void yellow_vip_info_req::Swap(yellow_vip_info_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yellow_vip_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yellow_vip_info_req_descriptor_;
  metadata.reflection = yellow_vip_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yellow_vip_info::kRoleIdFieldNumber;
const int yellow_vip_info::kLvlFieldNumber;
const int yellow_vip_info::kYearFieldNumber;
#endif  // !_MSC_VER

yellow_vip_info::yellow_vip_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yellow_vip_info::InitAsDefaultInstance() {
}

yellow_vip_info::yellow_vip_info(const yellow_vip_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yellow_vip_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  lvl_ = 0u;
  year_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yellow_vip_info::~yellow_vip_info() {
  SharedDtor();
}

void yellow_vip_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yellow_vip_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yellow_vip_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yellow_vip_info_descriptor_;
}

const yellow_vip_info& yellow_vip_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

yellow_vip_info* yellow_vip_info::default_instance_ = NULL;

yellow_vip_info* yellow_vip_info::New() const {
  return new yellow_vip_info;
}

void yellow_vip_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    lvl_ = 0u;
    year_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yellow_vip_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }

      // required bool year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yellow_vip_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvl(), output);
  }

  // required bool year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->year(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yellow_vip_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvl(), target);
  }

  // required bool year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->year(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yellow_vip_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required bool year = 3;
    if (has_year()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yellow_vip_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yellow_vip_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yellow_vip_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yellow_vip_info::MergeFrom(const yellow_vip_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yellow_vip_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yellow_vip_info::CopyFrom(const yellow_vip_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yellow_vip_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void yellow_vip_info::Swap(yellow_vip_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(lvl_, other->lvl_);
    std::swap(year_, other->year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yellow_vip_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yellow_vip_info_descriptor_;
  metadata.reflection = yellow_vip_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yellow_vip_info_rsp::kYviFieldNumber;
#endif  // !_MSC_VER

yellow_vip_info_rsp::yellow_vip_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yellow_vip_info_rsp::InitAsDefaultInstance() {
}

yellow_vip_info_rsp::yellow_vip_info_rsp(const yellow_vip_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yellow_vip_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yellow_vip_info_rsp::~yellow_vip_info_rsp() {
  SharedDtor();
}

void yellow_vip_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yellow_vip_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yellow_vip_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yellow_vip_info_rsp_descriptor_;
}

const yellow_vip_info_rsp& yellow_vip_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

yellow_vip_info_rsp* yellow_vip_info_rsp::default_instance_ = NULL;

yellow_vip_info_rsp* yellow_vip_info_rsp::New() const {
  return new yellow_vip_info_rsp;
}

void yellow_vip_info_rsp::Clear() {
  yvi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yellow_vip_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.yellow_vip_info yvi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yvi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yvi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_yvi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yellow_vip_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.yellow_vip_info yvi = 1;
  for (int i = 0; i < this->yvi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->yvi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yellow_vip_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.yellow_vip_info yvi = 1;
  for (int i = 0; i < this->yvi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->yvi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yellow_vip_info_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.yellow_vip_info yvi = 1;
  total_size += 1 * this->yvi_size();
  for (int i = 0; i < this->yvi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yvi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yellow_vip_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yellow_vip_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yellow_vip_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yellow_vip_info_rsp::MergeFrom(const yellow_vip_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  yvi_.MergeFrom(from.yvi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yellow_vip_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yellow_vip_info_rsp::CopyFrom(const yellow_vip_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yellow_vip_info_rsp::IsInitialized() const {

  for (int i = 0; i < yvi_size(); i++) {
    if (!this->yvi(i).IsInitialized()) return false;
  }
  return true;
}

void yellow_vip_info_rsp::Swap(yellow_vip_info_rsp* other) {
  if (other != this) {
    yvi_.Swap(&other->yvi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yellow_vip_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yellow_vip_info_rsp_descriptor_;
  metadata.reflection = yellow_vip_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_attr_change_msg::kRdFieldNumber;
const int role_attr_change_msg::kTypeFieldNumber;
const int role_attr_change_msg::kOldFieldNumber;
const int role_attr_change_msg::kNowFieldNumber;
#endif  // !_MSC_VER

role_attr_change_msg::role_attr_change_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_attr_change_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

role_attr_change_msg::role_attr_change_msg(const role_attr_change_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_attr_change_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  type_ = 0u;
  old_ = GOOGLE_ULONGLONG(0);
  now_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_attr_change_msg::~role_attr_change_msg() {
  SharedDtor();
}

void role_attr_change_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void role_attr_change_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_attr_change_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_attr_change_msg_descriptor_;
}

const role_attr_change_msg& role_attr_change_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

role_attr_change_msg* role_attr_change_msg::default_instance_ = NULL;

role_attr_change_msg* role_attr_change_msg::New() const {
  return new role_attr_change_msg;
}

void role_attr_change_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
    type_ = 0u;
    old_ = GOOGLE_ULONGLONG(0);
    now_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_attr_change_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old;
        break;
      }

      // required uint64 old = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_)));
          set_has_old();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_now;
        break;
      }

      // required uint64 now = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_attr_change_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint64 old = 3;
  if (has_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->old(), output);
  }

  // required uint64 now = 4;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_attr_change_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint64 old = 3;
  if (has_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->old(), target);
  }

  // required uint64 now = 4;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_attr_change_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 old = 3;
    if (has_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old());
    }

    // required uint64 now = 4;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_attr_change_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_attr_change_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_attr_change_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_attr_change_msg::MergeFrom(const role_attr_change_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_old()) {
      set_old(from.old());
    }
    if (from.has_now()) {
      set_now(from.now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_attr_change_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_attr_change_msg::CopyFrom(const role_attr_change_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_attr_change_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void role_attr_change_msg::Swap(role_attr_change_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    std::swap(type_, other->type_);
    std::swap(old_, other->old_);
    std::swap(now_, other->now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_attr_change_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_attr_change_msg_descriptor_;
  metadata.reflection = role_attr_change_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recover_hp_msg::kRdFieldNumber;
const int recover_hp_msg::kHpFieldNumber;
#endif  // !_MSC_VER

recover_hp_msg::recover_hp_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recover_hp_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

recover_hp_msg::recover_hp_msg(const recover_hp_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recover_hp_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recover_hp_msg::~recover_hp_msg() {
  SharedDtor();
}

void recover_hp_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void recover_hp_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recover_hp_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recover_hp_msg_descriptor_;
}

const recover_hp_msg& recover_hp_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

recover_hp_msg* recover_hp_msg::default_instance_ = NULL;

recover_hp_msg* recover_hp_msg::New() const {
  return new recover_hp_msg;
}

void recover_hp_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recover_hp_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recover_hp_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recover_hp_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recover_hp_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

    // required uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recover_hp_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recover_hp_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recover_hp_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recover_hp_msg::MergeFrom(const recover_hp_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recover_hp_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recover_hp_msg::CopyFrom(const recover_hp_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recover_hp_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void recover_hp_msg::Swap(recover_hp_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recover_hp_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recover_hp_msg_descriptor_;
  metadata.reflection = recover_hp_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_role_attr_msg::kRmFieldNumber;
const int update_role_attr_msg::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

update_role_attr_msg::update_role_attr_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_role_attr_msg::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

update_role_attr_msg::update_role_attr_msg(const update_role_attr_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_role_attr_msg::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_role_attr_msg::~update_role_attr_msg() {
  SharedDtor();
}

void update_role_attr_msg::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void update_role_attr_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_role_attr_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_role_attr_msg_descriptor_;
}

const update_role_attr_msg& update_role_attr_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fattr_5fmsg_2eproto();
  return *default_instance_;
}

update_role_attr_msg* update_role_attr_msg::default_instance_ = NULL;

update_role_attr_msg* update_role_attr_msg::New() const {
  return new update_role_attr_msg;
}

void update_role_attr_msg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  rm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_role_attr_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.role_msg rm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rm;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_role_attr_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.role_msg rm = 1;
  for (int i = 0; i < this->rm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rm(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_role_attr_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.role_msg rm = 1;
  for (int i = 0; i < this->rm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rm(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_role_attr_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.role_msg rm = 1;
  total_size += 1 * this->rm_size();
  for (int i = 0; i < this->rm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_role_attr_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_role_attr_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_role_attr_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_role_attr_msg::MergeFrom(const update_role_attr_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rm_.MergeFrom(from.rm_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_role_attr_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_role_attr_msg::CopyFrom(const update_role_attr_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_role_attr_msg::IsInitialized() const {

  for (int i = 0; i < rm_size(); i++) {
    if (!this->rm(i).IsInitialized()) return false;
  }
  return true;
}

void update_role_attr_msg::Swap(update_role_attr_msg* other) {
  if (other != this) {
    rm_.Swap(&other->rm_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_role_attr_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_role_attr_msg_descriptor_;
  metadata.reflection = update_role_attr_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
