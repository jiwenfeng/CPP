// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_move_msg.proto

#ifndef PROTOBUF_client_2erole_5fmove_5fmsg_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5fmove_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5fmove_5fmsg_2eproto();
void protobuf_AssignDesc_client_2erole_5fmove_5fmsg_2eproto();
void protobuf_ShutdownFile_client_2erole_5fmove_5fmsg_2eproto();

class move_info;
class role_move_msg;
class role_postion_msg;

enum role_move_msg_MOVE_TYPE {
  role_move_msg_MOVE_TYPE_CLIENT_NOTIFY = 0,
  role_move_msg_MOVE_TYPE_MOVE_CONFIRM = 1
};
bool role_move_msg_MOVE_TYPE_IsValid(int value);
const role_move_msg_MOVE_TYPE role_move_msg_MOVE_TYPE_MOVE_TYPE_MIN = role_move_msg_MOVE_TYPE_CLIENT_NOTIFY;
const role_move_msg_MOVE_TYPE role_move_msg_MOVE_TYPE_MOVE_TYPE_MAX = role_move_msg_MOVE_TYPE_MOVE_CONFIRM;
const int role_move_msg_MOVE_TYPE_MOVE_TYPE_ARRAYSIZE = role_move_msg_MOVE_TYPE_MOVE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* role_move_msg_MOVE_TYPE_descriptor();
inline const ::std::string& role_move_msg_MOVE_TYPE_Name(role_move_msg_MOVE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    role_move_msg_MOVE_TYPE_descriptor(), value);
}
inline bool role_move_msg_MOVE_TYPE_Parse(
    const ::std::string& name, role_move_msg_MOVE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<role_move_msg_MOVE_TYPE>(
    role_move_msg_MOVE_TYPE_descriptor(), name, value);
}
// ===================================================================

class move_info : public ::google::protobuf::Message {
 public:
  move_info();
  virtual ~move_info();

  move_info(const move_info& from);

  inline move_info& operator=(const move_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const move_info& default_instance();

  void Swap(move_info* other);

  // implements Message ----------------------------------------------

  move_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const move_info& from);
  void MergeFrom(const move_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rds = 1;
  inline bool has_rds() const;
  inline void clear_rds();
  static const int kRdsFieldNumber = 1;
  inline const ::client::role_data& rds() const;
  inline ::client::role_data* mutable_rds();
  inline ::client::role_data* release_rds();
  inline void set_allocated_rds(::client::role_data* rds);

  // repeated .client.client_map_pos mps = 2;
  inline int mps_size() const;
  inline void clear_mps();
  static const int kMpsFieldNumber = 2;
  inline const ::client::client_map_pos& mps(int index) const;
  inline ::client::client_map_pos* mutable_mps(int index);
  inline ::client::client_map_pos* add_mps();
  inline const ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >&
      mps() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >*
      mutable_mps();

  // @@protoc_insertion_point(class_scope:client.move_info)
 private:
  inline void set_has_rds();
  inline void clear_has_rds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rds_;
  ::google::protobuf::RepeatedPtrField< ::client::client_map_pos > mps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fmove_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static move_info* default_instance_;
};
// -------------------------------------------------------------------

class role_move_msg : public ::google::protobuf::Message {
 public:
  role_move_msg();
  virtual ~role_move_msg();

  role_move_msg(const role_move_msg& from);

  inline role_move_msg& operator=(const role_move_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_move_msg& default_instance();

  void Swap(role_move_msg* other);

  // implements Message ----------------------------------------------

  role_move_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_move_msg& from);
  void MergeFrom(const role_move_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef role_move_msg_MOVE_TYPE MOVE_TYPE;
  static const MOVE_TYPE CLIENT_NOTIFY = role_move_msg_MOVE_TYPE_CLIENT_NOTIFY;
  static const MOVE_TYPE MOVE_CONFIRM = role_move_msg_MOVE_TYPE_MOVE_CONFIRM;
  static inline bool MOVE_TYPE_IsValid(int value) {
    return role_move_msg_MOVE_TYPE_IsValid(value);
  }
  static const MOVE_TYPE MOVE_TYPE_MIN =
    role_move_msg_MOVE_TYPE_MOVE_TYPE_MIN;
  static const MOVE_TYPE MOVE_TYPE_MAX =
    role_move_msg_MOVE_TYPE_MOVE_TYPE_MAX;
  static const int MOVE_TYPE_ARRAYSIZE =
    role_move_msg_MOVE_TYPE_MOVE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MOVE_TYPE_descriptor() {
    return role_move_msg_MOVE_TYPE_descriptor();
  }
  static inline const ::std::string& MOVE_TYPE_Name(MOVE_TYPE value) {
    return role_move_msg_MOVE_TYPE_Name(value);
  }
  static inline bool MOVE_TYPE_Parse(const ::std::string& name,
      MOVE_TYPE* value) {
    return role_move_msg_MOVE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.role_move_msg.MOVE_TYPE move_type = 1;
  inline bool has_move_type() const;
  inline void clear_move_type();
  static const int kMoveTypeFieldNumber = 1;
  inline ::client::role_move_msg_MOVE_TYPE move_type() const;
  inline void set_move_type(::client::role_move_msg_MOVE_TYPE value);

  // repeated .client.move_info mi = 2;
  inline int mi_size() const;
  inline void clear_mi();
  static const int kMiFieldNumber = 2;
  inline const ::client::move_info& mi(int index) const;
  inline ::client::move_info* mutable_mi(int index);
  inline ::client::move_info* add_mi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::move_info >&
      mi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::move_info >*
      mutable_mi();

  // optional uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.role_move_msg)
 private:
  inline void set_has_move_type();
  inline void clear_has_move_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::move_info > mi_;
  int move_type_;
  ::google::protobuf::uint32 timestamp_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fmove_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_move_msg* default_instance_;
};
// -------------------------------------------------------------------

class role_postion_msg : public ::google::protobuf::Message {
 public:
  role_postion_msg();
  virtual ~role_postion_msg();

  role_postion_msg(const role_postion_msg& from);

  inline role_postion_msg& operator=(const role_postion_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_postion_msg& default_instance();

  void Swap(role_postion_msg* other);

  // implements Message ----------------------------------------------

  role_postion_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_postion_msg& from);
  void MergeFrom(const role_postion_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // required uint32 timestamp = 4 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional .client.role_data rd = 5;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 5;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.role_postion_msg)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_rd();
  inline void clear_has_rd();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::uint32 timestamp_;
  ::client::role_data* rd_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fmove_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fmove_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static role_postion_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// move_info

// required .client.role_data rds = 1;
inline bool move_info::has_rds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void move_info::set_has_rds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void move_info::clear_has_rds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void move_info::clear_rds() {
  if (rds_ != NULL) rds_->::client::role_data::Clear();
  clear_has_rds();
}
inline const ::client::role_data& move_info::rds() const {
  return rds_ != NULL ? *rds_ : *default_instance_->rds_;
}
inline ::client::role_data* move_info::mutable_rds() {
  set_has_rds();
  if (rds_ == NULL) rds_ = new ::client::role_data;
  return rds_;
}
inline ::client::role_data* move_info::release_rds() {
  clear_has_rds();
  ::client::role_data* temp = rds_;
  rds_ = NULL;
  return temp;
}
inline void move_info::set_allocated_rds(::client::role_data* rds) {
  delete rds_;
  rds_ = rds;
  if (rds) {
    set_has_rds();
  } else {
    clear_has_rds();
  }
}

// repeated .client.client_map_pos mps = 2;
inline int move_info::mps_size() const {
  return mps_.size();
}
inline void move_info::clear_mps() {
  mps_.Clear();
}
inline const ::client::client_map_pos& move_info::mps(int index) const {
  return mps_.Get(index);
}
inline ::client::client_map_pos* move_info::mutable_mps(int index) {
  return mps_.Mutable(index);
}
inline ::client::client_map_pos* move_info::add_mps() {
  return mps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >&
move_info::mps() const {
  return mps_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >*
move_info::mutable_mps() {
  return &mps_;
}

// -------------------------------------------------------------------

// role_move_msg

// required .client.role_move_msg.MOVE_TYPE move_type = 1;
inline bool role_move_msg::has_move_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_move_msg::set_has_move_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_move_msg::clear_has_move_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_move_msg::clear_move_type() {
  move_type_ = 0;
  clear_has_move_type();
}
inline ::client::role_move_msg_MOVE_TYPE role_move_msg::move_type() const {
  return static_cast< ::client::role_move_msg_MOVE_TYPE >(move_type_);
}
inline void role_move_msg::set_move_type(::client::role_move_msg_MOVE_TYPE value) {
  assert(::client::role_move_msg_MOVE_TYPE_IsValid(value));
  set_has_move_type();
  move_type_ = value;
}

// repeated .client.move_info mi = 2;
inline int role_move_msg::mi_size() const {
  return mi_.size();
}
inline void role_move_msg::clear_mi() {
  mi_.Clear();
}
inline const ::client::move_info& role_move_msg::mi(int index) const {
  return mi_.Get(index);
}
inline ::client::move_info* role_move_msg::mutable_mi(int index) {
  return mi_.Mutable(index);
}
inline ::client::move_info* role_move_msg::add_mi() {
  return mi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::move_info >&
role_move_msg::mi() const {
  return mi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::move_info >*
role_move_msg::mutable_mi() {
  return &mi_;
}

// optional uint32 timestamp = 3;
inline bool role_move_msg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_move_msg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_move_msg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_move_msg::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 role_move_msg::timestamp() const {
  return timestamp_;
}
inline void role_move_msg::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool role_move_msg::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_move_msg::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_move_msg::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_move_msg::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& role_move_msg::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* role_move_msg::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* role_move_msg::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void role_move_msg::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_postion_msg

// required int32 x = 1;
inline bool role_postion_msg::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_postion_msg::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_postion_msg::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_postion_msg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 role_postion_msg::x() const {
  return x_;
}
inline void role_postion_msg::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool role_postion_msg::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_postion_msg::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_postion_msg::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_postion_msg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 role_postion_msg::y() const {
  return y_;
}
inline void role_postion_msg::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool role_postion_msg::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_postion_msg::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_postion_msg::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_postion_msg::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 role_postion_msg::z() const {
  return z_;
}
inline void role_postion_msg::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// required uint32 timestamp = 4 [default = 0];
inline bool role_postion_msg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_postion_msg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_postion_msg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_postion_msg::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 role_postion_msg::timestamp() const {
  return timestamp_;
}
inline void role_postion_msg::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .client.role_data rd = 5;
inline bool role_postion_msg::has_rd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_postion_msg::set_has_rd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_postion_msg::clear_has_rd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_postion_msg::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& role_postion_msg::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* role_postion_msg::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* role_postion_msg::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void role_postion_msg::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// optional .client.server_head svr_head = 1000;
inline bool role_postion_msg::has_svr_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_postion_msg::set_has_svr_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_postion_msg::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_postion_msg::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& role_postion_msg::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* role_postion_msg::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* role_postion_msg::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void role_postion_msg::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::role_move_msg_MOVE_TYPE>() {
  return ::client::role_move_msg_MOVE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5fmove_5fmsg_2eproto__INCLUDED
