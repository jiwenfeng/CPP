// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* recharge_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recharge_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_buy_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_buy_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_buy_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_buy_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_exp_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_exp_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_exp_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_exp_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_op_times_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_times_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_op_times_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_times_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_op_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* vip_op_rsp_op_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* vip_op_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_op_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_op_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OP_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2evip_2eproto() {
  protobuf_AddDesc_client_2evip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.vip.proto");
  GOOGLE_CHECK(file != NULL);
  recharge_info_descriptor_ = file->message_type(0);
  static const int recharge_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_info, num_),
  };
  recharge_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recharge_info_descriptor_,
      recharge_info::default_instance_,
      recharge_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recharge_info));
  vip_buy_info_req_descriptor_ = file->message_type(1);
  static const int vip_buy_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_req, svr_head_),
  };
  vip_buy_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_buy_info_req_descriptor_,
      vip_buy_info_req::default_instance_,
      vip_buy_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_buy_info_req));
  vip_buy_info_rsp_descriptor_ = file->message_type(2);
  static const int vip_buy_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_rsp, ri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_rsp, tick_),
  };
  vip_buy_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_buy_info_rsp_descriptor_,
      vip_buy_info_rsp::default_instance_,
      vip_buy_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_buy_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_buy_info_rsp));
  vip_exp_req_descriptor_ = file->message_type(3);
  static const int vip_exp_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_req, svr_head_),
  };
  vip_exp_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_exp_req_descriptor_,
      vip_exp_req::default_instance_,
      vip_exp_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_exp_req));
  vip_exp_rsp_descriptor_ = file->message_type(4);
  static const int vip_exp_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_rsp, exp_),
  };
  vip_exp_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_exp_rsp_descriptor_,
      vip_exp_rsp::default_instance_,
      vip_exp_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_exp_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_exp_rsp));
  vip_op_times_req_descriptor_ = file->message_type(5);
  static const int vip_op_times_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_req, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_req, svr_head_),
  };
  vip_op_times_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_times_req_descriptor_,
      vip_op_times_req::default_instance_,
      vip_op_times_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op_times_req));
  vip_op_times_rsp_descriptor_ = file->message_type(6);
  static const int vip_op_times_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_rsp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_rsp, times_),
  };
  vip_op_times_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_times_rsp_descriptor_,
      vip_op_times_rsp::default_instance_,
      vip_op_times_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_times_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op_times_rsp));
  vip_op_req_descriptor_ = file->message_type(7);
  static const int vip_op_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_req, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_req, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_req, svr_head_),
  };
  vip_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_req_descriptor_,
      vip_op_req::default_instance_,
      vip_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op_req));
  vip_op_rsp_descriptor_ = file->message_type(8);
  static const int vip_op_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_rsp, op_),
  };
  vip_op_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_rsp_descriptor_,
      vip_op_rsp::default_instance_,
      vip_op_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op_rsp));
  vip_op_rsp_op_e_descriptor_ = vip_op_rsp_descriptor_->enum_type(0);
  vip_op_info_descriptor_ = file->message_type(9);
  static const int vip_op_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_info, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_info, vo_),
  };
  vip_op_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_info_descriptor_,
      vip_op_info::default_instance_,
      vip_op_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op_info));
  vip_op_descriptor_ = file->message_type(10);
  static const int vip_op_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op, id_),
  };
  vip_op_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_op_descriptor_,
      vip_op::default_instance_,
      vip_op_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_op, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_op));
  OP_CODE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2evip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recharge_info_descriptor_, &recharge_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_buy_info_req_descriptor_, &vip_buy_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_buy_info_rsp_descriptor_, &vip_buy_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_exp_req_descriptor_, &vip_exp_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_exp_rsp_descriptor_, &vip_exp_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_times_req_descriptor_, &vip_op_times_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_times_rsp_descriptor_, &vip_op_times_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_req_descriptor_, &vip_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_rsp_descriptor_, &vip_op_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_info_descriptor_, &vip_op_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_op_descriptor_, &vip_op::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2evip_2eproto() {
  delete recharge_info::default_instance_;
  delete recharge_info_reflection_;
  delete vip_buy_info_req::default_instance_;
  delete vip_buy_info_req_reflection_;
  delete vip_buy_info_rsp::default_instance_;
  delete vip_buy_info_rsp_reflection_;
  delete vip_exp_req::default_instance_;
  delete vip_exp_req_reflection_;
  delete vip_exp_rsp::default_instance_;
  delete vip_exp_rsp_reflection_;
  delete vip_op_times_req::default_instance_;
  delete vip_op_times_req_reflection_;
  delete vip_op_times_rsp::default_instance_;
  delete vip_op_times_rsp_reflection_;
  delete vip_op_req::default_instance_;
  delete vip_op_req_reflection_;
  delete vip_op_rsp::default_instance_;
  delete vip_op_rsp_reflection_;
  delete vip_op_info::default_instance_;
  delete vip_op_info_reflection_;
  delete vip_op::default_instance_;
  delete vip_op_reflection_;
}

void protobuf_AddDesc_client_2evip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020client.vip.proto\022\006client\032\021client.comm."
    "proto\"(\n\rrecharge_info\022\n\n\002id\030\001 \002(\r\022\013\n\003nu"
    "m\030\002 \002(\r\"K\n\020vip_buy_info_req\022\017\n\007role_id\030\001"
    " \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_"
    "head\"C\n\020vip_buy_info_rsp\022!\n\002ri\030\001 \003(\0132\025.c"
    "lient.recharge_info\022\014\n\004tick\030\002 \002(\r\"F\n\013vip"
    "_exp_req\022\017\n\007role_id\030\001 \002(\r\022&\n\010svr_head\030\350\007"
    " \001(\0132\023.client.server_head\"\032\n\013vip_exp_rsp"
    "\022\013\n\003exp\030\001 \002(\r\"h\n\020vip_op_times_req\022\033\n\002op\030"
    "\001 \002(\0162\017.client.OP_CODE\022\017\n\007raid_id\030\002 \002(\r\022"
    "&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\""
    "-\n\020vip_op_times_rsp\022\n\n\002op\030\001 \002(\r\022\r\n\005times"
    "\030\002 \002(\r\"b\n\nvip_op_req\022\033\n\002op\030\001 \002(\0162\017.clien"
    "t.OP_CODE\022\017\n\007raid_id\030\002 \001(\r\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"\241\001\n\nvip_op_rs"
    "p\022$\n\003ret\030\001 \002(\0162\027.client.vip_op_rsp.op_e\022"
    "\033\n\002op\030\002 \002(\0162\017.client.OP_CODE\"P\n\004op_e\022\013\n\007"
    "SUCCESS\020\000\022\r\n\tVIP_LIMIT\020\001\022\017\n\013TIMES_LIMIT\020"
    "\002\022\017\n\013INGOT_LIMIT\020\003\022\n\n\006FAILED\020\004\"5\n\013vip_op"
    "_info\022\n\n\002op\030\001 \002(\r\022\032\n\002vo\030\002 \003(\0132\016.client.v"
    "ip_op\"&\n\006vip_op\022\r\n\005count\030\001 \002(\r\022\r\n\002id\030\002 \002"
    "(\r:\0011*\331\001\n\007OP_CODE\022\023\n\017OP_BUY_PHYSICAL\020\001\022\021"
    "\n\rOP_BUY_COPPER\020\002\022\030\n\024OP_BUY_CARBON2_TIME"
    "S\020\003\022\032\n\026OP_BUY_CHALLANGE_TIMES\020\004\022\026\n\022OP_BU"
    "Y_SKILL_POINT\020\005\022\030\n\024OP_RESET_MOUNT_TIMES\020"
    "\006\022\030\n\024OP_RESET_CYCLE_LEVEL\020\007\022\030\n\024OP_RESET_"
    "DEVIL_LEVEL\020\010\022\n\n\006OP_END\020\t", 1065);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.vip.proto", &protobuf_RegisterTypes);
  recharge_info::default_instance_ = new recharge_info();
  vip_buy_info_req::default_instance_ = new vip_buy_info_req();
  vip_buy_info_rsp::default_instance_ = new vip_buy_info_rsp();
  vip_exp_req::default_instance_ = new vip_exp_req();
  vip_exp_rsp::default_instance_ = new vip_exp_rsp();
  vip_op_times_req::default_instance_ = new vip_op_times_req();
  vip_op_times_rsp::default_instance_ = new vip_op_times_rsp();
  vip_op_req::default_instance_ = new vip_op_req();
  vip_op_rsp::default_instance_ = new vip_op_rsp();
  vip_op_info::default_instance_ = new vip_op_info();
  vip_op::default_instance_ = new vip_op();
  recharge_info::default_instance_->InitAsDefaultInstance();
  vip_buy_info_req::default_instance_->InitAsDefaultInstance();
  vip_buy_info_rsp::default_instance_->InitAsDefaultInstance();
  vip_exp_req::default_instance_->InitAsDefaultInstance();
  vip_exp_rsp::default_instance_->InitAsDefaultInstance();
  vip_op_times_req::default_instance_->InitAsDefaultInstance();
  vip_op_times_rsp::default_instance_->InitAsDefaultInstance();
  vip_op_req::default_instance_->InitAsDefaultInstance();
  vip_op_rsp::default_instance_->InitAsDefaultInstance();
  vip_op_info::default_instance_->InitAsDefaultInstance();
  vip_op::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2evip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2evip_2eproto {
  StaticDescriptorInitializer_client_2evip_2eproto() {
    protobuf_AddDesc_client_2evip_2eproto();
  }
} static_descriptor_initializer_client_2evip_2eproto_;
const ::google::protobuf::EnumDescriptor* OP_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OP_CODE_descriptor_;
}
bool OP_CODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int recharge_info::kIdFieldNumber;
const int recharge_info::kNumFieldNumber;
#endif  // !_MSC_VER

recharge_info::recharge_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recharge_info::InitAsDefaultInstance() {
}

recharge_info::recharge_info(const recharge_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recharge_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recharge_info::~recharge_info() {
  SharedDtor();
}

void recharge_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void recharge_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recharge_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recharge_info_descriptor_;
}

const recharge_info& recharge_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

recharge_info* recharge_info::default_instance_ = NULL;

recharge_info* recharge_info::New() const {
  return new recharge_info;
}

void recharge_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recharge_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recharge_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recharge_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recharge_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recharge_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recharge_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recharge_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recharge_info::MergeFrom(const recharge_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recharge_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_info::CopyFrom(const recharge_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void recharge_info::Swap(recharge_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recharge_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recharge_info_descriptor_;
  metadata.reflection = recharge_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_buy_info_req::kRoleIdFieldNumber;
const int vip_buy_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

vip_buy_info_req::vip_buy_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_buy_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

vip_buy_info_req::vip_buy_info_req(const vip_buy_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_buy_info_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_buy_info_req::~vip_buy_info_req() {
  SharedDtor();
}

void vip_buy_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void vip_buy_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_buy_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_buy_info_req_descriptor_;
}

const vip_buy_info_req& vip_buy_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_buy_info_req* vip_buy_info_req::default_instance_ = NULL;

vip_buy_info_req* vip_buy_info_req::New() const {
  return new vip_buy_info_req;
}

void vip_buy_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_buy_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_buy_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_buy_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_buy_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_buy_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_buy_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_buy_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_buy_info_req::MergeFrom(const vip_buy_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_buy_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_buy_info_req::CopyFrom(const vip_buy_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_buy_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_buy_info_req::Swap(vip_buy_info_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_buy_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_buy_info_req_descriptor_;
  metadata.reflection = vip_buy_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_buy_info_rsp::kRiFieldNumber;
const int vip_buy_info_rsp::kTickFieldNumber;
#endif  // !_MSC_VER

vip_buy_info_rsp::vip_buy_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_buy_info_rsp::InitAsDefaultInstance() {
}

vip_buy_info_rsp::vip_buy_info_rsp(const vip_buy_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_buy_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_buy_info_rsp::~vip_buy_info_rsp() {
  SharedDtor();
}

void vip_buy_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_buy_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_buy_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_buy_info_rsp_descriptor_;
}

const vip_buy_info_rsp& vip_buy_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_buy_info_rsp* vip_buy_info_rsp::default_instance_ = NULL;

vip_buy_info_rsp* vip_buy_info_rsp::New() const {
  return new vip_buy_info_rsp;
}

void vip_buy_info_rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    tick_ = 0u;
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_buy_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.recharge_info ri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ri;
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }

      // required uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_buy_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.recharge_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ri(i), output);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_buy_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.recharge_info ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ri(i), target);
  }

  // required uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_buy_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  // repeated .client.recharge_info ri = 1;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_buy_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_buy_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_buy_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_buy_info_rsp::MergeFrom(const vip_buy_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_buy_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_buy_info_rsp::CopyFrom(const vip_buy_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_buy_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void vip_buy_info_rsp::Swap(vip_buy_info_rsp* other) {
  if (other != this) {
    ri_.Swap(&other->ri_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_buy_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_buy_info_rsp_descriptor_;
  metadata.reflection = vip_buy_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_exp_req::kRoleIdFieldNumber;
const int vip_exp_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

vip_exp_req::vip_exp_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_exp_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

vip_exp_req::vip_exp_req(const vip_exp_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_exp_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_exp_req::~vip_exp_req() {
  SharedDtor();
}

void vip_exp_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void vip_exp_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_exp_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_exp_req_descriptor_;
}

const vip_exp_req& vip_exp_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_exp_req* vip_exp_req::default_instance_ = NULL;

vip_exp_req* vip_exp_req::New() const {
  return new vip_exp_req;
}

void vip_exp_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_exp_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_exp_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_exp_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_exp_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_exp_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_exp_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_exp_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_exp_req::MergeFrom(const vip_exp_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_exp_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_exp_req::CopyFrom(const vip_exp_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_exp_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_exp_req::Swap(vip_exp_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_exp_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_exp_req_descriptor_;
  metadata.reflection = vip_exp_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_exp_rsp::kExpFieldNumber;
#endif  // !_MSC_VER

vip_exp_rsp::vip_exp_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_exp_rsp::InitAsDefaultInstance() {
}

vip_exp_rsp::vip_exp_rsp(const vip_exp_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_exp_rsp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_exp_rsp::~vip_exp_rsp() {
  SharedDtor();
}

void vip_exp_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_exp_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_exp_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_exp_rsp_descriptor_;
}

const vip_exp_rsp& vip_exp_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_exp_rsp* vip_exp_rsp::default_instance_ = NULL;

vip_exp_rsp* vip_exp_rsp::New() const {
  return new vip_exp_rsp;
}

void vip_exp_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_exp_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_exp_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_exp_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_exp_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_exp_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_exp_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_exp_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_exp_rsp::MergeFrom(const vip_exp_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_exp_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_exp_rsp::CopyFrom(const vip_exp_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_exp_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_exp_rsp::Swap(vip_exp_rsp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_exp_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_exp_rsp_descriptor_;
  metadata.reflection = vip_exp_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_op_times_req::kOpFieldNumber;
const int vip_op_times_req::kRaidIdFieldNumber;
const int vip_op_times_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

vip_op_times_req::vip_op_times_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op_times_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

vip_op_times_req::vip_op_times_req(const vip_op_times_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op_times_req::SharedCtor() {
  _cached_size_ = 0;
  op_ = 1;
  raid_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op_times_req::~vip_op_times_req() {
  SharedDtor();
}

void vip_op_times_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void vip_op_times_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op_times_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_times_req_descriptor_;
}

const vip_op_times_req& vip_op_times_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op_times_req* vip_op_times_req::default_instance_ = NULL;

vip_op_times_req* vip_op_times_req::New() const {
  return new vip_op_times_req;
}

void vip_op_times_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 1;
    raid_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op_times_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.OP_CODE op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::OP_CODE_IsValid(value)) {
            set_op(static_cast< ::client::OP_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op_times_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.OP_CODE op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op_times_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.OP_CODE op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op_times_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.OP_CODE op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op_times_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op_times_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op_times_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op_times_req::MergeFrom(const vip_op_times_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op_times_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op_times_req::CopyFrom(const vip_op_times_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op_times_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void vip_op_times_req::Swap(vip_op_times_req* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op_times_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_times_req_descriptor_;
  metadata.reflection = vip_op_times_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_op_times_rsp::kOpFieldNumber;
const int vip_op_times_rsp::kTimesFieldNumber;
#endif  // !_MSC_VER

vip_op_times_rsp::vip_op_times_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op_times_rsp::InitAsDefaultInstance() {
}

vip_op_times_rsp::vip_op_times_rsp(const vip_op_times_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op_times_rsp::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op_times_rsp::~vip_op_times_rsp() {
  SharedDtor();
}

void vip_op_times_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_op_times_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op_times_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_times_rsp_descriptor_;
}

const vip_op_times_rsp& vip_op_times_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op_times_rsp* vip_op_times_rsp::default_instance_ = NULL;

vip_op_times_rsp* vip_op_times_rsp::New() const {
  return new vip_op_times_rsp;
}

void vip_op_times_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op_times_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op_times_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->op(), output);
  }

  // required uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op_times_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->op(), target);
  }

  // required uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op_times_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

    // required uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op_times_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op_times_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op_times_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op_times_rsp::MergeFrom(const vip_op_times_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op_times_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op_times_rsp::CopyFrom(const vip_op_times_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op_times_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void vip_op_times_rsp::Swap(vip_op_times_rsp* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op_times_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_times_rsp_descriptor_;
  metadata.reflection = vip_op_times_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_op_req::kOpFieldNumber;
const int vip_op_req::kRaidIdFieldNumber;
const int vip_op_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

vip_op_req::vip_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

vip_op_req::vip_op_req(const vip_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op_req::SharedCtor() {
  _cached_size_ = 0;
  op_ = 1;
  raid_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op_req::~vip_op_req() {
  SharedDtor();
}

void vip_op_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void vip_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_req_descriptor_;
}

const vip_op_req& vip_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op_req* vip_op_req::default_instance_ = NULL;

vip_op_req* vip_op_req::New() const {
  return new vip_op_req;
}

void vip_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 1;
    raid_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.OP_CODE op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::OP_CODE_IsValid(value)) {
            set_op(static_cast< ::client::OP_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // optional uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.OP_CODE op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.OP_CODE op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.OP_CODE op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op_req::MergeFrom(const vip_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op_req::CopyFrom(const vip_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vip_op_req::Swap(vip_op_req* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_req_descriptor_;
  metadata.reflection = vip_op_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* vip_op_rsp_op_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_rsp_op_e_descriptor_;
}
bool vip_op_rsp_op_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const vip_op_rsp_op_e vip_op_rsp::SUCCESS;
const vip_op_rsp_op_e vip_op_rsp::VIP_LIMIT;
const vip_op_rsp_op_e vip_op_rsp::TIMES_LIMIT;
const vip_op_rsp_op_e vip_op_rsp::INGOT_LIMIT;
const vip_op_rsp_op_e vip_op_rsp::FAILED;
const vip_op_rsp_op_e vip_op_rsp::op_e_MIN;
const vip_op_rsp_op_e vip_op_rsp::op_e_MAX;
const int vip_op_rsp::op_e_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int vip_op_rsp::kRetFieldNumber;
const int vip_op_rsp::kOpFieldNumber;
#endif  // !_MSC_VER

vip_op_rsp::vip_op_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op_rsp::InitAsDefaultInstance() {
}

vip_op_rsp::vip_op_rsp(const vip_op_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op_rsp::~vip_op_rsp() {
  SharedDtor();
}

void vip_op_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_op_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_rsp_descriptor_;
}

const vip_op_rsp& vip_op_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op_rsp* vip_op_rsp::default_instance_ = NULL;

vip_op_rsp* vip_op_rsp::New() const {
  return new vip_op_rsp;
}

void vip_op_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.vip_op_rsp.op_e ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::vip_op_rsp_op_e_IsValid(value)) {
            set_ret(static_cast< ::client::vip_op_rsp_op_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // required .client.OP_CODE op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::OP_CODE_IsValid(value)) {
            set_op(static_cast< ::client::OP_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.vip_op_rsp.op_e ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required .client.OP_CODE op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.vip_op_rsp.op_e ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required .client.OP_CODE op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.vip_op_rsp.op_e ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required .client.OP_CODE op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op_rsp::MergeFrom(const vip_op_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op_rsp::CopyFrom(const vip_op_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void vip_op_rsp::Swap(vip_op_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_rsp_descriptor_;
  metadata.reflection = vip_op_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_op_info::kOpFieldNumber;
const int vip_op_info::kVoFieldNumber;
#endif  // !_MSC_VER

vip_op_info::vip_op_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op_info::InitAsDefaultInstance() {
}

vip_op_info::vip_op_info(const vip_op_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op_info::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op_info::~vip_op_info() {
  SharedDtor();
}

void vip_op_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_op_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_info_descriptor_;
}

const vip_op_info& vip_op_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op_info* vip_op_info::default_instance_ = NULL;

vip_op_info* vip_op_info::New() const {
  return new vip_op_info;
}

void vip_op_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0u;
  }
  vo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vo;
        break;
      }

      // repeated .client.vip_op vo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->op(), output);
  }

  // repeated .client.vip_op vo = 2;
  for (int i = 0; i < this->vo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->op(), target);
  }

  // repeated .client.vip_op vo = 2;
  for (int i = 0; i < this->vo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

  }
  // repeated .client.vip_op vo = 2;
  total_size += 1 * this->vo_size();
  for (int i = 0; i < this->vo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op_info::MergeFrom(const vip_op_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  vo_.MergeFrom(from.vo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op_info::CopyFrom(const vip_op_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vo_size(); i++) {
    if (!this->vo(i).IsInitialized()) return false;
  }
  return true;
}

void vip_op_info::Swap(vip_op_info* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    vo_.Swap(&other->vo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_info_descriptor_;
  metadata.reflection = vip_op_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_op::kCountFieldNumber;
const int vip_op::kIdFieldNumber;
#endif  // !_MSC_VER

vip_op::vip_op()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_op::InitAsDefaultInstance() {
}

vip_op::vip_op(const vip_op& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_op::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_op::~vip_op() {
  SharedDtor();
}

void vip_op::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vip_op::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_op::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_op_descriptor_;
}

const vip_op& vip_op::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2evip_2eproto();
  return *default_instance_;
}

vip_op* vip_op::default_instance_ = NULL;

vip_op* vip_op::New() const {
  return new vip_op;
}

void vip_op::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    id_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 id = 2 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_op::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint32 id = 2 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_op::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 id = 2 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_op::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_op* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_op*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_op::MergeFrom(const vip_op& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_op::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_op::CopyFrom(const vip_op& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_op::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void vip_op::Swap(vip_op* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_op::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_op_descriptor_;
  metadata.reflection = vip_op_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
