// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.target.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.target.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* target_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_prize_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_prize_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_prize_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_prize_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* target_prize_rsp_status_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* target_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* cond_equal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cond_equal_reflection_ = NULL;
const ::google::protobuf::Descriptor* cond_great_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cond_great_reflection_ = NULL;
const ::google::protobuf::Descriptor* cond_less_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cond_less_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_complete_cond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_complete_cond_reflection_ = NULL;
const ::google::protobuf::Descriptor* target_progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  target_progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* point_tips_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  point_tips_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TARGET_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TARGET_STATUS_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2etarget_2eproto() {
  protobuf_AddDesc_client_2etarget_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.target.proto");
  GOOGLE_CHECK(file != NULL);
  target_list_req_descriptor_ = file->message_type(0);
  static const int target_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_req, svr_head_),
  };
  target_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_list_req_descriptor_,
      target_list_req::default_instance_,
      target_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_list_req));
  target_item_descriptor_ = file->message_type(1);
  static const int target_item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, extra_),
  };
  target_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_item_descriptor_,
      target_item::default_instance_,
      target_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_item));
  target_list_rsp_descriptor_ = file->message_type(2);
  static const int target_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_rsp, ti_),
  };
  target_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_list_rsp_descriptor_,
      target_list_rsp::default_instance_,
      target_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_list_rsp));
  target_prize_req_descriptor_ = file->message_type(3);
  static const int target_prize_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_req, svr_head_),
  };
  target_prize_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_prize_req_descriptor_,
      target_prize_req::default_instance_,
      target_prize_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_prize_req));
  target_prize_rsp_descriptor_ = file->message_type(4);
  static const int target_prize_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_rsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_rsp, ti_),
  };
  target_prize_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_prize_rsp_descriptor_,
      target_prize_rsp::default_instance_,
      target_prize_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_prize_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_prize_rsp));
  target_prize_rsp_status_e_descriptor_ = target_prize_rsp_descriptor_->enum_type(0);
  target_info_descriptor_ = file->message_type(5);
  static const int target_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_info, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_info, num_),
  };
  target_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_info_descriptor_,
      target_info::default_instance_,
      target_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_info));
  cond_equal_descriptor_ = file->message_type(6);
  static const int cond_equal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_equal, value_),
  };
  cond_equal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cond_equal_descriptor_,
      cond_equal::default_instance_,
      cond_equal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_equal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_equal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cond_equal));
  cond_great_descriptor_ = file->message_type(7);
  static const int cond_great_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_great, value_),
  };
  cond_great_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cond_great_descriptor_,
      cond_great::default_instance_,
      cond_great_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_great, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_great, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cond_great));
  cond_less_descriptor_ = file->message_type(8);
  static const int cond_less_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_less, value_),
  };
  cond_less_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cond_less_descriptor_,
      cond_less::default_instance_,
      cond_less_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_less, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cond_less, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cond_less));
  target_complete_cond_descriptor_ = file->message_type(9);
  static const int target_complete_cond_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_complete_cond, equal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_complete_cond, great_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_complete_cond, less_),
  };
  target_complete_cond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_complete_cond_descriptor_,
      target_complete_cond::default_instance_,
      target_complete_cond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_complete_cond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_complete_cond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_complete_cond));
  target_progress_descriptor_ = file->message_type(10);
  static const int target_progress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, equal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, great_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, less_),
  };
  target_progress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      target_progress_descriptor_,
      target_progress::default_instance_,
      target_progress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(target_progress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(target_progress));
  point_tips_rsp_descriptor_ = file->message_type(11);
  static const int point_tips_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point_tips_rsp, fc_),
  };
  point_tips_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      point_tips_rsp_descriptor_,
      point_tips_rsp::default_instance_,
      point_tips_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point_tips_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point_tips_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(point_tips_rsp));
  TARGET_TYPE_E_descriptor_ = file->enum_type(0);
  TARGET_STATUS_E_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2etarget_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_list_req_descriptor_, &target_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_item_descriptor_, &target_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_list_rsp_descriptor_, &target_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_prize_req_descriptor_, &target_prize_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_prize_rsp_descriptor_, &target_prize_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_info_descriptor_, &target_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cond_equal_descriptor_, &cond_equal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cond_great_descriptor_, &cond_great::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cond_less_descriptor_, &cond_less::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_complete_cond_descriptor_, &target_complete_cond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    target_progress_descriptor_, &target_progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    point_tips_rsp_descriptor_, &point_tips_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2etarget_2eproto() {
  delete target_list_req::default_instance_;
  delete target_list_req_reflection_;
  delete target_item::default_instance_;
  delete target_item_reflection_;
  delete target_list_rsp::default_instance_;
  delete target_list_rsp_reflection_;
  delete target_prize_req::default_instance_;
  delete target_prize_req_reflection_;
  delete target_prize_rsp::default_instance_;
  delete target_prize_rsp_reflection_;
  delete target_info::default_instance_;
  delete target_info_reflection_;
  delete cond_equal::default_instance_;
  delete cond_equal_reflection_;
  delete cond_great::default_instance_;
  delete cond_great_reflection_;
  delete cond_less::default_instance_;
  delete cond_less_reflection_;
  delete target_complete_cond::default_instance_;
  delete target_complete_cond_reflection_;
  delete target_progress::default_instance_;
  delete target_progress_reflection_;
  delete point_tips_rsp::default_instance_;
  delete point_tips_rsp_reflection_;
}

void protobuf_AddDesc_client_2etarget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.target.proto\022\006client\032\021client.co"
    "mm.proto\"^\n\017target_list_req\022#\n\004type\030\001 \002("
    "\0162\025.client.TARGET_TYPE_E\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head\"^\n\013target_item\022"
    "\n\n\002id\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\022\'\n\006status\030\003 \002(\016"
    "2\027.client.TARGET_STATUS_E\022\r\n\005extra\030\004 \001(\r"
    "\"W\n\017target_list_rsp\022#\n\004type\030\001 \002(\0162\025.clie"
    "nt.TARGET_TYPE_E\022\037\n\002ti\030\002 \003(\0132\023.client.ta"
    "rget_item\"F\n\020target_prize_req\022\n\n\002id\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"\274\001\n\020target_prize_rsp\0221\n\006status\030\001 \002(\0162!"
    ".client.target_prize_rsp.status_e\022\n\n\002id\030"
    "\002 \002(\r\022\037\n\002ti\030\003 \001(\0132\023.client.target_item\"H"
    "\n\010status_e\022\013\n\007SUCCESS\020\001\022\r\n\tNEED_PREV\020\002\022\016"
    "\n\nPACK_LIMIT\020\003\022\020\n\014STATUS_LIMIT\020\004\"V\n\013targ"
    "et_info\022\021\n\ttarget_id\030\001 \002(\r\022\'\n\006status\030\002 \002"
    "(\0162\027.client.TARGET_STATUS_E\022\013\n\003num\030\003 \001(\r"
    "\"\033\n\ncond_equal\022\r\n\005value\030\001 \003(\r\"\033\n\ncond_gr"
    "eat\022\r\n\005value\030\001 \003(\r\"\032\n\tcond_less\022\r\n\005value"
    "\030\001 \003(\r\"}\n\024target_complete_cond\022!\n\005equal\030"
    "\001 \003(\0132\022.client.cond_equal\022!\n\005great\030\002 \003(\013"
    "2\022.client.cond_great\022\037\n\004less\030\003 \003(\0132\021.cli"
    "ent.cond_less\"L\n\017target_progress\022\r\n\005valu"
    "e\030\001 \002(\r\022\r\n\005equal\030\002 \003(\r\022\r\n\005great\030\003 \003(\r\022\014\n"
    "\004less\030\004 \003(\r\"3\n\016point_tips_rsp\022!\n\002fc\030\001 \003("
    "\0162\025.client.TARGET_TYPE_E*3\n\rTARGET_TYPE_"
    "E\022\017\n\013ACHIEVEMENT\020\001\022\021\n\rDAILY_MISSION\020\002*H\n"
    "\017TARGET_STATUS_E\022\020\n\014STATUS_DOING\020\001\022\020\n\014ST"
    "ATUS_PRIZE\020\002\022\021\n\rSTATUS_FINISH\020\003", 1151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.target.proto", &protobuf_RegisterTypes);
  target_list_req::default_instance_ = new target_list_req();
  target_item::default_instance_ = new target_item();
  target_list_rsp::default_instance_ = new target_list_rsp();
  target_prize_req::default_instance_ = new target_prize_req();
  target_prize_rsp::default_instance_ = new target_prize_rsp();
  target_info::default_instance_ = new target_info();
  cond_equal::default_instance_ = new cond_equal();
  cond_great::default_instance_ = new cond_great();
  cond_less::default_instance_ = new cond_less();
  target_complete_cond::default_instance_ = new target_complete_cond();
  target_progress::default_instance_ = new target_progress();
  point_tips_rsp::default_instance_ = new point_tips_rsp();
  target_list_req::default_instance_->InitAsDefaultInstance();
  target_item::default_instance_->InitAsDefaultInstance();
  target_list_rsp::default_instance_->InitAsDefaultInstance();
  target_prize_req::default_instance_->InitAsDefaultInstance();
  target_prize_rsp::default_instance_->InitAsDefaultInstance();
  target_info::default_instance_->InitAsDefaultInstance();
  cond_equal::default_instance_->InitAsDefaultInstance();
  cond_great::default_instance_->InitAsDefaultInstance();
  cond_less::default_instance_->InitAsDefaultInstance();
  target_complete_cond::default_instance_->InitAsDefaultInstance();
  target_progress::default_instance_->InitAsDefaultInstance();
  point_tips_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2etarget_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2etarget_2eproto {
  StaticDescriptorInitializer_client_2etarget_2eproto() {
    protobuf_AddDesc_client_2etarget_2eproto();
  }
} static_descriptor_initializer_client_2etarget_2eproto_;
const ::google::protobuf::EnumDescriptor* TARGET_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TARGET_TYPE_E_descriptor_;
}
bool TARGET_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TARGET_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TARGET_STATUS_E_descriptor_;
}
bool TARGET_STATUS_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int target_list_req::kTypeFieldNumber;
const int target_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

target_list_req::target_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

target_list_req::target_list_req(const target_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_list_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_list_req::~target_list_req() {
  SharedDtor();
}

void target_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void target_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_list_req_descriptor_;
}

const target_list_req& target_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_list_req* target_list_req::default_instance_ = NULL;

target_list_req* target_list_req::New() const {
  return new target_list_req;
}

void target_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TARGET_TYPE_E type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TARGET_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::TARGET_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TARGET_TYPE_E type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TARGET_TYPE_E type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TARGET_TYPE_E type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_list_req::MergeFrom(const target_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_list_req::CopyFrom(const target_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void target_list_req::Swap(target_list_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_list_req_descriptor_;
  metadata.reflection = target_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_item::kIdFieldNumber;
const int target_item::kNumFieldNumber;
const int target_item::kStatusFieldNumber;
const int target_item::kExtraFieldNumber;
#endif  // !_MSC_VER

target_item::target_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_item::InitAsDefaultInstance() {
}

target_item::target_item(const target_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  status_ = 1;
  extra_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_item::~target_item() {
  SharedDtor();
}

void target_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void target_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_item_descriptor_;
}

const target_item& target_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_item* target_item::default_instance_ = NULL;

target_item* target_item::New() const {
  return new target_item;
}

void target_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
    status_ = 1;
    extra_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .client.TARGET_STATUS_E status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TARGET_STATUS_E_IsValid(value)) {
            set_status(static_cast< ::client::TARGET_STATUS_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extra;
        break;
      }

      // optional uint32 extra = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_)));
          set_has_extra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // required .client.TARGET_STATUS_E status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional uint32 extra = 4;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // required .client.TARGET_STATUS_E status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional uint32 extra = 4;
  if (has_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required .client.TARGET_STATUS_E status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 extra = 4;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_item::MergeFrom(const target_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_item::CopyFrom(const target_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void target_item::Swap(target_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(status_, other->status_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_item_descriptor_;
  metadata.reflection = target_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_list_rsp::kTypeFieldNumber;
const int target_list_rsp::kTiFieldNumber;
#endif  // !_MSC_VER

target_list_rsp::target_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_list_rsp::InitAsDefaultInstance() {
}

target_list_rsp::target_list_rsp(const target_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_list_rsp::~target_list_rsp() {
  SharedDtor();
}

void target_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void target_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_list_rsp_descriptor_;
}

const target_list_rsp& target_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_list_rsp* target_list_rsp::default_instance_ = NULL;

target_list_rsp* target_list_rsp::New() const {
  return new target_list_rsp;
}

void target_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TARGET_TYPE_E type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TARGET_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::TARGET_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ti;
        break;
      }

      // repeated .client.target_item ti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ti;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TARGET_TYPE_E type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .client.target_item ti = 2;
  for (int i = 0; i < this->ti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ti(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TARGET_TYPE_E type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .client.target_item ti = 2;
  for (int i = 0; i < this->ti_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ti(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TARGET_TYPE_E type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .client.target_item ti = 2;
  total_size += 1 * this->ti_size();
  for (int i = 0; i < this->ti_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ti(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_list_rsp::MergeFrom(const target_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ti_.MergeFrom(from.ti_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_list_rsp::CopyFrom(const target_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ti_size(); i++) {
    if (!this->ti(i).IsInitialized()) return false;
  }
  return true;
}

void target_list_rsp::Swap(target_list_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    ti_.Swap(&other->ti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_list_rsp_descriptor_;
  metadata.reflection = target_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_prize_req::kIdFieldNumber;
const int target_prize_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

target_prize_req::target_prize_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_prize_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

target_prize_req::target_prize_req(const target_prize_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_prize_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_prize_req::~target_prize_req() {
  SharedDtor();
}

void target_prize_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void target_prize_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_prize_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_prize_req_descriptor_;
}

const target_prize_req& target_prize_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_prize_req* target_prize_req::default_instance_ = NULL;

target_prize_req* target_prize_req::New() const {
  return new target_prize_req;
}

void target_prize_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_prize_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_prize_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_prize_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_prize_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_prize_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_prize_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_prize_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_prize_req::MergeFrom(const target_prize_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_prize_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_prize_req::CopyFrom(const target_prize_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_prize_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void target_prize_req::Swap(target_prize_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_prize_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_prize_req_descriptor_;
  metadata.reflection = target_prize_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* target_prize_rsp_status_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_prize_rsp_status_e_descriptor_;
}
bool target_prize_rsp_status_e_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const target_prize_rsp_status_e target_prize_rsp::SUCCESS;
const target_prize_rsp_status_e target_prize_rsp::NEED_PREV;
const target_prize_rsp_status_e target_prize_rsp::PACK_LIMIT;
const target_prize_rsp_status_e target_prize_rsp::STATUS_LIMIT;
const target_prize_rsp_status_e target_prize_rsp::status_e_MIN;
const target_prize_rsp_status_e target_prize_rsp::status_e_MAX;
const int target_prize_rsp::status_e_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int target_prize_rsp::kStatusFieldNumber;
const int target_prize_rsp::kIdFieldNumber;
const int target_prize_rsp::kTiFieldNumber;
#endif  // !_MSC_VER

target_prize_rsp::target_prize_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_prize_rsp::InitAsDefaultInstance() {
  ti_ = const_cast< ::client::target_item*>(&::client::target_item::default_instance());
}

target_prize_rsp::target_prize_rsp(const target_prize_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_prize_rsp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  id_ = 0u;
  ti_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_prize_rsp::~target_prize_rsp() {
  SharedDtor();
}

void target_prize_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete ti_;
  }
}

void target_prize_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_prize_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_prize_rsp_descriptor_;
}

const target_prize_rsp& target_prize_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_prize_rsp* target_prize_rsp::default_instance_ = NULL;

target_prize_rsp* target_prize_rsp::New() const {
  return new target_prize_rsp;
}

void target_prize_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    id_ = 0u;
    if (has_ti()) {
      if (ti_ != NULL) ti_->::client::target_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_prize_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.target_prize_rsp.status_e status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::target_prize_rsp_status_e_IsValid(value)) {
            set_status(static_cast< ::client::target_prize_rsp_status_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ti;
        break;
      }

      // optional .client.target_item ti = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_prize_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.target_prize_rsp.status_e status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .client.target_item ti = 3;
  if (has_ti()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ti(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_prize_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.target_prize_rsp.status_e status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .client.target_item ti = 3;
  if (has_ti()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ti(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_prize_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.target_prize_rsp.status_e status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.target_item ti = 3;
    if (has_ti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ti());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_prize_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_prize_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_prize_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_prize_rsp::MergeFrom(const target_prize_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ti()) {
      mutable_ti()->::client::target_item::MergeFrom(from.ti());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_prize_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_prize_rsp::CopyFrom(const target_prize_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_prize_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ti()) {
    if (!this->ti().IsInitialized()) return false;
  }
  return true;
}

void target_prize_rsp::Swap(target_prize_rsp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(id_, other->id_);
    std::swap(ti_, other->ti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_prize_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_prize_rsp_descriptor_;
  metadata.reflection = target_prize_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_info::kTargetIdFieldNumber;
const int target_info::kStatusFieldNumber;
const int target_info::kNumFieldNumber;
#endif  // !_MSC_VER

target_info::target_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_info::InitAsDefaultInstance() {
}

target_info::target_info(const target_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_info::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  status_ = 1;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_info::~target_info() {
  SharedDtor();
}

void target_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void target_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_info_descriptor_;
}

const target_info& target_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_info* target_info::default_instance_ = NULL;

target_info* target_info::New() const {
  return new target_info;
}

void target_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    status_ = 1;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .client.TARGET_STATUS_E status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TARGET_STATUS_E_IsValid(value)) {
            set_status(static_cast< ::client::TARGET_STATUS_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // required .client.TARGET_STATUS_E status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // required .client.TARGET_STATUS_E status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // required .client.TARGET_STATUS_E status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_info::MergeFrom(const target_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_info::CopyFrom(const target_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void target_info::Swap(target_info* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(status_, other->status_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_info_descriptor_;
  metadata.reflection = target_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cond_equal::kValueFieldNumber;
#endif  // !_MSC_VER

cond_equal::cond_equal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cond_equal::InitAsDefaultInstance() {
}

cond_equal::cond_equal(const cond_equal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cond_equal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cond_equal::~cond_equal() {
  SharedDtor();
}

void cond_equal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cond_equal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cond_equal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cond_equal_descriptor_;
}

const cond_equal& cond_equal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

cond_equal* cond_equal::default_instance_ = NULL;

cond_equal* cond_equal::New() const {
  return new cond_equal;
}

void cond_equal::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cond_equal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cond_equal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cond_equal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cond_equal::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cond_equal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cond_equal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cond_equal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cond_equal::MergeFrom(const cond_equal& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cond_equal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cond_equal::CopyFrom(const cond_equal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cond_equal::IsInitialized() const {

  return true;
}

void cond_equal::Swap(cond_equal* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cond_equal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cond_equal_descriptor_;
  metadata.reflection = cond_equal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cond_great::kValueFieldNumber;
#endif  // !_MSC_VER

cond_great::cond_great()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cond_great::InitAsDefaultInstance() {
}

cond_great::cond_great(const cond_great& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cond_great::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cond_great::~cond_great() {
  SharedDtor();
}

void cond_great::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cond_great::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cond_great::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cond_great_descriptor_;
}

const cond_great& cond_great::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

cond_great* cond_great::default_instance_ = NULL;

cond_great* cond_great::New() const {
  return new cond_great;
}

void cond_great::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cond_great::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cond_great::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cond_great::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cond_great::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cond_great::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cond_great* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cond_great*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cond_great::MergeFrom(const cond_great& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cond_great::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cond_great::CopyFrom(const cond_great& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cond_great::IsInitialized() const {

  return true;
}

void cond_great::Swap(cond_great* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cond_great::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cond_great_descriptor_;
  metadata.reflection = cond_great_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cond_less::kValueFieldNumber;
#endif  // !_MSC_VER

cond_less::cond_less()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cond_less::InitAsDefaultInstance() {
}

cond_less::cond_less(const cond_less& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cond_less::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cond_less::~cond_less() {
  SharedDtor();
}

void cond_less::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cond_less::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cond_less::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cond_less_descriptor_;
}

const cond_less& cond_less::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

cond_less* cond_less::default_instance_ = NULL;

cond_less* cond_less::New() const {
  return new cond_less;
}

void cond_less::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cond_less::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cond_less::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cond_less::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cond_less::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cond_less::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cond_less* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cond_less*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cond_less::MergeFrom(const cond_less& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cond_less::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cond_less::CopyFrom(const cond_less& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cond_less::IsInitialized() const {

  return true;
}

void cond_less::Swap(cond_less* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cond_less::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cond_less_descriptor_;
  metadata.reflection = cond_less_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_complete_cond::kEqualFieldNumber;
const int target_complete_cond::kGreatFieldNumber;
const int target_complete_cond::kLessFieldNumber;
#endif  // !_MSC_VER

target_complete_cond::target_complete_cond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_complete_cond::InitAsDefaultInstance() {
}

target_complete_cond::target_complete_cond(const target_complete_cond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_complete_cond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_complete_cond::~target_complete_cond() {
  SharedDtor();
}

void target_complete_cond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void target_complete_cond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_complete_cond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_complete_cond_descriptor_;
}

const target_complete_cond& target_complete_cond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_complete_cond* target_complete_cond::default_instance_ = NULL;

target_complete_cond* target_complete_cond::New() const {
  return new target_complete_cond;
}

void target_complete_cond::Clear() {
  equal_.Clear();
  great_.Clear();
  less_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_complete_cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.cond_equal equal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equal;
        if (input->ExpectTag(18)) goto parse_great;
        break;
      }

      // repeated .client.cond_great great = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_great:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_great()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_great;
        if (input->ExpectTag(26)) goto parse_less;
        break;
      }

      // repeated .client.cond_less less = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_less:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_less()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_less;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_complete_cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.cond_equal equal = 1;
  for (int i = 0; i < this->equal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equal(i), output);
  }

  // repeated .client.cond_great great = 2;
  for (int i = 0; i < this->great_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->great(i), output);
  }

  // repeated .client.cond_less less = 3;
  for (int i = 0; i < this->less_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->less(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_complete_cond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.cond_equal equal = 1;
  for (int i = 0; i < this->equal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equal(i), target);
  }

  // repeated .client.cond_great great = 2;
  for (int i = 0; i < this->great_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->great(i), target);
  }

  // repeated .client.cond_less less = 3;
  for (int i = 0; i < this->less_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->less(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_complete_cond::ByteSize() const {
  int total_size = 0;

  // repeated .client.cond_equal equal = 1;
  total_size += 1 * this->equal_size();
  for (int i = 0; i < this->equal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equal(i));
  }

  // repeated .client.cond_great great = 2;
  total_size += 1 * this->great_size();
  for (int i = 0; i < this->great_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->great(i));
  }

  // repeated .client.cond_less less = 3;
  total_size += 1 * this->less_size();
  for (int i = 0; i < this->less_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->less(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_complete_cond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_complete_cond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_complete_cond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_complete_cond::MergeFrom(const target_complete_cond& from) {
  GOOGLE_CHECK_NE(&from, this);
  equal_.MergeFrom(from.equal_);
  great_.MergeFrom(from.great_);
  less_.MergeFrom(from.less_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_complete_cond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_complete_cond::CopyFrom(const target_complete_cond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_complete_cond::IsInitialized() const {

  return true;
}

void target_complete_cond::Swap(target_complete_cond* other) {
  if (other != this) {
    equal_.Swap(&other->equal_);
    great_.Swap(&other->great_);
    less_.Swap(&other->less_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_complete_cond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_complete_cond_descriptor_;
  metadata.reflection = target_complete_cond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int target_progress::kValueFieldNumber;
const int target_progress::kEqualFieldNumber;
const int target_progress::kGreatFieldNumber;
const int target_progress::kLessFieldNumber;
#endif  // !_MSC_VER

target_progress::target_progress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void target_progress::InitAsDefaultInstance() {
}

target_progress::target_progress(const target_progress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void target_progress::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

target_progress::~target_progress() {
  SharedDtor();
}

void target_progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void target_progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* target_progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return target_progress_descriptor_;
}

const target_progress& target_progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

target_progress* target_progress::default_instance_ = NULL;

target_progress* target_progress::New() const {
  return new target_progress;
}

void target_progress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
  }
  equal_.Clear();
  great_.Clear();
  less_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool target_progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equal;
        break;
      }

      // repeated uint32 equal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equal;
        if (input->ExpectTag(24)) goto parse_great;
        break;
      }

      // repeated uint32 great = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_great:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_great())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_great())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_great;
        if (input->ExpectTag(32)) goto parse_less;
        break;
      }

      // repeated uint32 less = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_less:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_less())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_less())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_less;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void target_progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // repeated uint32 equal = 2;
  for (int i = 0; i < this->equal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equal(i), output);
  }

  // repeated uint32 great = 3;
  for (int i = 0; i < this->great_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->great(i), output);
  }

  // repeated uint32 less = 4;
  for (int i = 0; i < this->less_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->less(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* target_progress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // repeated uint32 equal = 2;
  for (int i = 0; i < this->equal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equal(i), target);
  }

  // repeated uint32 great = 3;
  for (int i = 0; i < this->great_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->great(i), target);
  }

  // repeated uint32 less = 4;
  for (int i = 0; i < this->less_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->less(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int target_progress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  // repeated uint32 equal = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equal(i));
    }
    total_size += 1 * this->equal_size() + data_size;
  }

  // repeated uint32 great = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->great_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->great(i));
    }
    total_size += 1 * this->great_size() + data_size;
  }

  // repeated uint32 less = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->less_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->less(i));
    }
    total_size += 1 * this->less_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void target_progress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const target_progress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const target_progress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void target_progress::MergeFrom(const target_progress& from) {
  GOOGLE_CHECK_NE(&from, this);
  equal_.MergeFrom(from.equal_);
  great_.MergeFrom(from.great_);
  less_.MergeFrom(from.less_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void target_progress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_progress::CopyFrom(const target_progress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_progress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void target_progress::Swap(target_progress* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    equal_.Swap(&other->equal_);
    great_.Swap(&other->great_);
    less_.Swap(&other->less_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata target_progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = target_progress_descriptor_;
  metadata.reflection = target_progress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int point_tips_rsp::kFcFieldNumber;
#endif  // !_MSC_VER

point_tips_rsp::point_tips_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void point_tips_rsp::InitAsDefaultInstance() {
}

point_tips_rsp::point_tips_rsp(const point_tips_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void point_tips_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

point_tips_rsp::~point_tips_rsp() {
  SharedDtor();
}

void point_tips_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void point_tips_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* point_tips_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return point_tips_rsp_descriptor_;
}

const point_tips_rsp& point_tips_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etarget_2eproto();
  return *default_instance_;
}

point_tips_rsp* point_tips_rsp::default_instance_ = NULL;

point_tips_rsp* point_tips_rsp::New() const {
  return new point_tips_rsp;
}

void point_tips_rsp::Clear() {
  fc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool point_tips_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.TARGET_TYPE_E fc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TARGET_TYPE_E_IsValid(value)) {
            add_fc(static_cast< ::client::TARGET_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::client::TARGET_TYPE_E_IsValid,
                 this->mutable_fc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fc;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void point_tips_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.TARGET_TYPE_E fc = 1;
  for (int i = 0; i < this->fc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* point_tips_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.TARGET_TYPE_E fc = 1;
  for (int i = 0; i < this->fc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int point_tips_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.TARGET_TYPE_E fc = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->fc(i));
    }
    total_size += 1 * this->fc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void point_tips_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const point_tips_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const point_tips_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void point_tips_rsp::MergeFrom(const point_tips_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fc_.MergeFrom(from.fc_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void point_tips_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point_tips_rsp::CopyFrom(const point_tips_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point_tips_rsp::IsInitialized() const {

  return true;
}

void point_tips_rsp::Swap(point_tips_rsp* other) {
  if (other != this) {
    fc_.Swap(&other->fc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata point_tips_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = point_tips_rsp_descriptor_;
  metadata.reflection = point_tips_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
