// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.terrain.proto

#ifndef PROTOBUF_client_2eterrain_2eproto__INCLUDED
#define PROTOBUF_client_2eterrain_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eterrain_2eproto();
void protobuf_AssignDesc_client_2eterrain_2eproto();
void protobuf_ShutdownFile_client_2eterrain_2eproto();

class point;
class rectangle;
class terrain_info;
class terrain_operate_info;
class terrain_list;

enum TERRAIN_LIST_METHOD_E {
  TLME_ADD = 1,
  TLME_UPDATE = 2,
  TLME_DELETE = 3
};
bool TERRAIN_LIST_METHOD_E_IsValid(int value);
const TERRAIN_LIST_METHOD_E TERRAIN_LIST_METHOD_E_MIN = TLME_ADD;
const TERRAIN_LIST_METHOD_E TERRAIN_LIST_METHOD_E_MAX = TLME_DELETE;
const int TERRAIN_LIST_METHOD_E_ARRAYSIZE = TERRAIN_LIST_METHOD_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* TERRAIN_LIST_METHOD_E_descriptor();
inline const ::std::string& TERRAIN_LIST_METHOD_E_Name(TERRAIN_LIST_METHOD_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    TERRAIN_LIST_METHOD_E_descriptor(), value);
}
inline bool TERRAIN_LIST_METHOD_E_Parse(
    const ::std::string& name, TERRAIN_LIST_METHOD_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TERRAIN_LIST_METHOD_E>(
    TERRAIN_LIST_METHOD_E_descriptor(), name, value);
}
// ===================================================================

class point : public ::google::protobuf::Message {
 public:
  point();
  virtual ~point();

  point(const point& from);

  inline point& operator=(const point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const point& default_instance();

  void Swap(point* other);

  // implements Message ----------------------------------------------

  point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const point& from);
  void MergeFrom(const point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eterrain_2eproto();
  friend void protobuf_AssignDesc_client_2eterrain_2eproto();
  friend void protobuf_ShutdownFile_client_2eterrain_2eproto();

  void InitAsDefaultInstance();
  static point* default_instance_;
};
// -------------------------------------------------------------------

class rectangle : public ::google::protobuf::Message {
 public:
  rectangle();
  virtual ~rectangle();

  rectangle(const rectangle& from);

  inline rectangle& operator=(const rectangle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rectangle& default_instance();

  void Swap(rectangle* other);

  // implements Message ----------------------------------------------

  rectangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rectangle& from);
  void MergeFrom(const rectangle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.point a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::client::point& a() const;
  inline ::client::point* mutable_a();
  inline ::client::point* release_a();
  inline void set_allocated_a(::client::point* a);

  // required .client.point b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::client::point& b() const;
  inline ::client::point* mutable_b();
  inline ::client::point* release_b();
  inline void set_allocated_b(::client::point* b);

  // required .client.point c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline const ::client::point& c() const;
  inline ::client::point* mutable_c();
  inline ::client::point* release_c();
  inline void set_allocated_c(::client::point* c);

  // required .client.point d = 4;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline const ::client::point& d() const;
  inline ::client::point* mutable_d();
  inline ::client::point* release_d();
  inline void set_allocated_d(::client::point* d);

  // @@protoc_insertion_point(class_scope:client.rectangle)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_d();
  inline void clear_has_d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::point* a_;
  ::client::point* b_;
  ::client::point* c_;
  ::client::point* d_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eterrain_2eproto();
  friend void protobuf_AssignDesc_client_2eterrain_2eproto();
  friend void protobuf_ShutdownFile_client_2eterrain_2eproto();

  void InitAsDefaultInstance();
  static rectangle* default_instance_;
};
// -------------------------------------------------------------------

class terrain_info : public ::google::protobuf::Message {
 public:
  terrain_info();
  virtual ~terrain_info();

  terrain_info(const terrain_info& from);

  inline terrain_info& operator=(const terrain_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const terrain_info& default_instance();

  void Swap(terrain_info* other);

  // implements Message ----------------------------------------------

  terrain_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const terrain_info& from);
  void MergeFrom(const terrain_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 terrain_id = 1;
  inline bool has_terrain_id() const;
  inline void clear_terrain_id();
  static const int kTerrainIdFieldNumber = 1;
  inline ::google::protobuf::uint32 terrain_id() const;
  inline void set_terrain_id(::google::protobuf::uint32 value);

  // required uint32 effect_id = 2;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 2;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);

  // required .client.rectangle rect = 3;
  inline bool has_rect() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 3;
  inline const ::client::rectangle& rect() const;
  inline ::client::rectangle* mutable_rect();
  inline ::client::rectangle* release_rect();
  inline void set_allocated_rect(::client::rectangle* rect);

  // required uint32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // required uint32 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required .client.role_data rd = 6;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 6;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated uint32 trigger_effects = 7;
  inline int trigger_effects_size() const;
  inline void clear_trigger_effects();
  static const int kTriggerEffectsFieldNumber = 7;
  inline ::google::protobuf::uint32 trigger_effects(int index) const;
  inline void set_trigger_effects(int index, ::google::protobuf::uint32 value);
  inline void add_trigger_effects(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      trigger_effects() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_trigger_effects();

  // @@protoc_insertion_point(class_scope:client.terrain_info)
 private:
  inline void set_has_terrain_id();
  inline void clear_has_terrain_id();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_rect();
  inline void clear_has_rect();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 terrain_id_;
  ::google::protobuf::uint32 effect_id_;
  ::client::rectangle* rect_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::client::role_data* rd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > trigger_effects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eterrain_2eproto();
  friend void protobuf_AssignDesc_client_2eterrain_2eproto();
  friend void protobuf_ShutdownFile_client_2eterrain_2eproto();

  void InitAsDefaultInstance();
  static terrain_info* default_instance_;
};
// -------------------------------------------------------------------

class terrain_operate_info : public ::google::protobuf::Message {
 public:
  terrain_operate_info();
  virtual ~terrain_operate_info();

  terrain_operate_info(const terrain_operate_info& from);

  inline terrain_operate_info& operator=(const terrain_operate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const terrain_operate_info& default_instance();

  void Swap(terrain_operate_info* other);

  // implements Message ----------------------------------------------

  terrain_operate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const terrain_operate_info& from);
  void MergeFrom(const terrain_operate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.TERRAIN_LIST_METHOD_E method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline ::client::TERRAIN_LIST_METHOD_E method() const;
  inline void set_method(::client::TERRAIN_LIST_METHOD_E value);

  // required .client.terrain_info ti = 2;
  inline bool has_ti() const;
  inline void clear_ti();
  static const int kTiFieldNumber = 2;
  inline const ::client::terrain_info& ti() const;
  inline ::client::terrain_info* mutable_ti();
  inline ::client::terrain_info* release_ti();
  inline void set_allocated_ti(::client::terrain_info* ti);

  // @@protoc_insertion_point(class_scope:client.terrain_operate_info)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_ti();
  inline void clear_has_ti();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::terrain_info* ti_;
  int method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eterrain_2eproto();
  friend void protobuf_AssignDesc_client_2eterrain_2eproto();
  friend void protobuf_ShutdownFile_client_2eterrain_2eproto();

  void InitAsDefaultInstance();
  static terrain_operate_info* default_instance_;
};
// -------------------------------------------------------------------

class terrain_list : public ::google::protobuf::Message {
 public:
  terrain_list();
  virtual ~terrain_list();

  terrain_list(const terrain_list& from);

  inline terrain_list& operator=(const terrain_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const terrain_list& default_instance();

  void Swap(terrain_list* other);

  // implements Message ----------------------------------------------

  terrain_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const terrain_list& from);
  void MergeFrom(const terrain_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.terrain_operate_info toi = 1;
  inline int toi_size() const;
  inline void clear_toi();
  static const int kToiFieldNumber = 1;
  inline const ::client::terrain_operate_info& toi(int index) const;
  inline ::client::terrain_operate_info* mutable_toi(int index);
  inline ::client::terrain_operate_info* add_toi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::terrain_operate_info >&
      toi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::terrain_operate_info >*
      mutable_toi();

  // @@protoc_insertion_point(class_scope:client.terrain_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::terrain_operate_info > toi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eterrain_2eproto();
  friend void protobuf_AssignDesc_client_2eterrain_2eproto();
  friend void protobuf_ShutdownFile_client_2eterrain_2eproto();

  void InitAsDefaultInstance();
  static terrain_list* default_instance_;
};
// ===================================================================


// ===================================================================

// point

// required uint32 x = 1 [default = 0];
inline bool point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void point::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 point::x() const {
  return x_;
}
inline void point::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 2 [default = 0];
inline bool point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void point::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 point::y() const {
  return y_;
}
inline void point::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// rectangle

// required .client.point a = 1;
inline bool rectangle::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rectangle::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rectangle::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rectangle::clear_a() {
  if (a_ != NULL) a_->::client::point::Clear();
  clear_has_a();
}
inline const ::client::point& rectangle::a() const {
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::client::point* rectangle::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::client::point;
  return a_;
}
inline ::client::point* rectangle::release_a() {
  clear_has_a();
  ::client::point* temp = a_;
  a_ = NULL;
  return temp;
}
inline void rectangle::set_allocated_a(::client::point* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
}

// required .client.point b = 2;
inline bool rectangle::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rectangle::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rectangle::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rectangle::clear_b() {
  if (b_ != NULL) b_->::client::point::Clear();
  clear_has_b();
}
inline const ::client::point& rectangle::b() const {
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::client::point* rectangle::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::client::point;
  return b_;
}
inline ::client::point* rectangle::release_b() {
  clear_has_b();
  ::client::point* temp = b_;
  b_ = NULL;
  return temp;
}
inline void rectangle::set_allocated_b(::client::point* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
}

// required .client.point c = 3;
inline bool rectangle::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rectangle::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rectangle::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rectangle::clear_c() {
  if (c_ != NULL) c_->::client::point::Clear();
  clear_has_c();
}
inline const ::client::point& rectangle::c() const {
  return c_ != NULL ? *c_ : *default_instance_->c_;
}
inline ::client::point* rectangle::mutable_c() {
  set_has_c();
  if (c_ == NULL) c_ = new ::client::point;
  return c_;
}
inline ::client::point* rectangle::release_c() {
  clear_has_c();
  ::client::point* temp = c_;
  c_ = NULL;
  return temp;
}
inline void rectangle::set_allocated_c(::client::point* c) {
  delete c_;
  c_ = c;
  if (c) {
    set_has_c();
  } else {
    clear_has_c();
  }
}

// required .client.point d = 4;
inline bool rectangle::has_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rectangle::set_has_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rectangle::clear_has_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rectangle::clear_d() {
  if (d_ != NULL) d_->::client::point::Clear();
  clear_has_d();
}
inline const ::client::point& rectangle::d() const {
  return d_ != NULL ? *d_ : *default_instance_->d_;
}
inline ::client::point* rectangle::mutable_d() {
  set_has_d();
  if (d_ == NULL) d_ = new ::client::point;
  return d_;
}
inline ::client::point* rectangle::release_d() {
  clear_has_d();
  ::client::point* temp = d_;
  d_ = NULL;
  return temp;
}
inline void rectangle::set_allocated_d(::client::point* d) {
  delete d_;
  d_ = d;
  if (d) {
    set_has_d();
  } else {
    clear_has_d();
  }
}

// -------------------------------------------------------------------

// terrain_info

// required uint32 terrain_id = 1;
inline bool terrain_info::has_terrain_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void terrain_info::set_has_terrain_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void terrain_info::clear_has_terrain_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void terrain_info::clear_terrain_id() {
  terrain_id_ = 0u;
  clear_has_terrain_id();
}
inline ::google::protobuf::uint32 terrain_info::terrain_id() const {
  return terrain_id_;
}
inline void terrain_info::set_terrain_id(::google::protobuf::uint32 value) {
  set_has_terrain_id();
  terrain_id_ = value;
}

// required uint32 effect_id = 2;
inline bool terrain_info::has_effect_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void terrain_info::set_has_effect_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void terrain_info::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void terrain_info::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 terrain_info::effect_id() const {
  return effect_id_;
}
inline void terrain_info::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// required .client.rectangle rect = 3;
inline bool terrain_info::has_rect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void terrain_info::set_has_rect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void terrain_info::clear_has_rect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void terrain_info::clear_rect() {
  if (rect_ != NULL) rect_->::client::rectangle::Clear();
  clear_has_rect();
}
inline const ::client::rectangle& terrain_info::rect() const {
  return rect_ != NULL ? *rect_ : *default_instance_->rect_;
}
inline ::client::rectangle* terrain_info::mutable_rect() {
  set_has_rect();
  if (rect_ == NULL) rect_ = new ::client::rectangle;
  return rect_;
}
inline ::client::rectangle* terrain_info::release_rect() {
  clear_has_rect();
  ::client::rectangle* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void terrain_info::set_allocated_rect(::client::rectangle* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    set_has_rect();
  } else {
    clear_has_rect();
  }
}

// required uint32 start_time = 4;
inline bool terrain_info::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void terrain_info::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void terrain_info::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void terrain_info::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 terrain_info::start_time() const {
  return start_time_;
}
inline void terrain_info::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required uint32 end_time = 5;
inline bool terrain_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void terrain_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void terrain_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void terrain_info::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 terrain_info::end_time() const {
  return end_time_;
}
inline void terrain_info::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required .client.role_data rd = 6;
inline bool terrain_info::has_rd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void terrain_info::set_has_rd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void terrain_info::clear_has_rd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void terrain_info::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& terrain_info::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* terrain_info::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* terrain_info::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void terrain_info::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated uint32 trigger_effects = 7;
inline int terrain_info::trigger_effects_size() const {
  return trigger_effects_.size();
}
inline void terrain_info::clear_trigger_effects() {
  trigger_effects_.Clear();
}
inline ::google::protobuf::uint32 terrain_info::trigger_effects(int index) const {
  return trigger_effects_.Get(index);
}
inline void terrain_info::set_trigger_effects(int index, ::google::protobuf::uint32 value) {
  trigger_effects_.Set(index, value);
}
inline void terrain_info::add_trigger_effects(::google::protobuf::uint32 value) {
  trigger_effects_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
terrain_info::trigger_effects() const {
  return trigger_effects_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
terrain_info::mutable_trigger_effects() {
  return &trigger_effects_;
}

// -------------------------------------------------------------------

// terrain_operate_info

// required .client.TERRAIN_LIST_METHOD_E method = 1;
inline bool terrain_operate_info::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void terrain_operate_info::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void terrain_operate_info::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void terrain_operate_info::clear_method() {
  method_ = 1;
  clear_has_method();
}
inline ::client::TERRAIN_LIST_METHOD_E terrain_operate_info::method() const {
  return static_cast< ::client::TERRAIN_LIST_METHOD_E >(method_);
}
inline void terrain_operate_info::set_method(::client::TERRAIN_LIST_METHOD_E value) {
  assert(::client::TERRAIN_LIST_METHOD_E_IsValid(value));
  set_has_method();
  method_ = value;
}

// required .client.terrain_info ti = 2;
inline bool terrain_operate_info::has_ti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void terrain_operate_info::set_has_ti() {
  _has_bits_[0] |= 0x00000002u;
}
inline void terrain_operate_info::clear_has_ti() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void terrain_operate_info::clear_ti() {
  if (ti_ != NULL) ti_->::client::terrain_info::Clear();
  clear_has_ti();
}
inline const ::client::terrain_info& terrain_operate_info::ti() const {
  return ti_ != NULL ? *ti_ : *default_instance_->ti_;
}
inline ::client::terrain_info* terrain_operate_info::mutable_ti() {
  set_has_ti();
  if (ti_ == NULL) ti_ = new ::client::terrain_info;
  return ti_;
}
inline ::client::terrain_info* terrain_operate_info::release_ti() {
  clear_has_ti();
  ::client::terrain_info* temp = ti_;
  ti_ = NULL;
  return temp;
}
inline void terrain_operate_info::set_allocated_ti(::client::terrain_info* ti) {
  delete ti_;
  ti_ = ti;
  if (ti) {
    set_has_ti();
  } else {
    clear_has_ti();
  }
}

// -------------------------------------------------------------------

// terrain_list

// repeated .client.terrain_operate_info toi = 1;
inline int terrain_list::toi_size() const {
  return toi_.size();
}
inline void terrain_list::clear_toi() {
  toi_.Clear();
}
inline const ::client::terrain_operate_info& terrain_list::toi(int index) const {
  return toi_.Get(index);
}
inline ::client::terrain_operate_info* terrain_list::mutable_toi(int index) {
  return toi_.Mutable(index);
}
inline ::client::terrain_operate_info* terrain_list::add_toi() {
  return toi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::terrain_operate_info >&
terrain_list::toi() const {
  return toi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::terrain_operate_info >*
terrain_list::mutable_toi() {
  return &toi_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::TERRAIN_LIST_METHOD_E>() {
  return ::client::TERRAIN_LIST_METHOD_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eterrain_2eproto__INCLUDED
