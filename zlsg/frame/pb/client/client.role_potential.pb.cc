// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_potential.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_potential.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* acupoint_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  acupoint_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* potential_info_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  potential_info_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* potential_info_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  potential_info_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_point_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_point_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_potential_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_potential_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_potential_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_potential_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* act_potential_rsp_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* potential_share_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  potential_share_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* record_exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  record_exp_reflection_ = NULL;
const ::google::protobuf::Descriptor* effects_brocast_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  effects_brocast_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIVITION_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fpotential_2eproto() {
  protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_potential.proto");
  GOOGLE_CHECK(file != NULL);
  acupoint_info_descriptor_ = file->message_type(0);
  static const int acupoint_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(acupoint_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(acupoint_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(acupoint_info, act_count_),
  };
  acupoint_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      acupoint_info_descriptor_,
      acupoint_info::default_instance_,
      acupoint_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(acupoint_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(acupoint_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(acupoint_info));
  potential_info_list_descriptor_ = file->message_type(1);
  static const int potential_info_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list, svr_head_),
  };
  potential_info_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      potential_info_list_descriptor_,
      potential_info_list::default_instance_,
      potential_info_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(potential_info_list));
  potential_info_list_rsp_descriptor_ = file->message_type(2);
  static const int potential_info_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list_rsp, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list_rsp, point_info_),
  };
  potential_info_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      potential_info_list_rsp_descriptor_,
      potential_info_list_rsp::default_instance_,
      potential_info_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_info_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(potential_info_list_rsp));
  client_point_info_descriptor_ = file->message_type(3);
  static const int client_point_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_point_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_point_info, status_),
  };
  client_point_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_point_info_descriptor_,
      client_point_info::default_instance_,
      client_point_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_point_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_point_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_point_info));
  act_potential_req_descriptor_ = file->message_type(4);
  static const int act_potential_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_req, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_req, svr_head_),
  };
  act_potential_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_potential_req_descriptor_,
      act_potential_req::default_instance_,
      act_potential_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_potential_req));
  act_potential_rsp_descriptor_ = file->message_type(5);
  static const int act_potential_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_rsp, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_rsp, point_info_),
  };
  act_potential_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_potential_rsp_descriptor_,
      act_potential_rsp::default_instance_,
      act_potential_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_potential_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_potential_rsp));
  act_potential_rsp_result_descriptor_ = act_potential_rsp_descriptor_->enum_type(0);
  potential_share_rsp_descriptor_ = file->message_type(6);
  static const int potential_share_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_share_rsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_share_rsp, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_share_rsp, role_id_),
  };
  potential_share_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      potential_share_rsp_descriptor_,
      potential_share_rsp::default_instance_,
      potential_share_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_share_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(potential_share_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(potential_share_rsp));
  record_exp_descriptor_ = file->message_type(7);
  static const int record_exp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_exp, old_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_exp, new_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_exp, add_exp_),
  };
  record_exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      record_exp_descriptor_,
      record_exp::default_instance_,
      record_exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(record_exp));
  effects_brocast_rsp_descriptor_ = file->message_type(8);
  static const int effects_brocast_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effects_brocast_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effects_brocast_rsp, effect_type_),
  };
  effects_brocast_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      effects_brocast_rsp_descriptor_,
      effects_brocast_rsp::default_instance_,
      effects_brocast_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effects_brocast_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effects_brocast_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(effects_brocast_rsp));
  ACTIVITION_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fpotential_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    acupoint_info_descriptor_, &acupoint_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    potential_info_list_descriptor_, &potential_info_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    potential_info_list_rsp_descriptor_, &potential_info_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_point_info_descriptor_, &client_point_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_potential_req_descriptor_, &act_potential_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_potential_rsp_descriptor_, &act_potential_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    potential_share_rsp_descriptor_, &potential_share_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    record_exp_descriptor_, &record_exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    effects_brocast_rsp_descriptor_, &effects_brocast_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fpotential_2eproto() {
  delete acupoint_info::default_instance_;
  delete acupoint_info_reflection_;
  delete potential_info_list::default_instance_;
  delete potential_info_list_reflection_;
  delete potential_info_list_rsp::default_instance_;
  delete potential_info_list_rsp_reflection_;
  delete client_point_info::default_instance_;
  delete client_point_info_reflection_;
  delete act_potential_req::default_instance_;
  delete act_potential_req_reflection_;
  delete act_potential_rsp::default_instance_;
  delete act_potential_rsp_reflection_;
  delete potential_share_rsp::default_instance_;
  delete potential_share_rsp_reflection_;
  delete record_exp::default_instance_;
  delete record_exp_reflection_;
  delete effects_brocast_rsp::default_instance_;
  delete effects_brocast_rsp_reflection_;
}

void protobuf_AddDesc_client_2erole_5fpotential_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033client.role_potential.proto\022\006client\032\021c"
    "lient.comm.proto\"J\n\racupoint_info\022\020\n\005ind"
    "ex\030\001 \002(\r:\0010\022\021\n\006status\030\002 \002(\r:\0010\022\024\n\tact_co"
    "unt\030\005 \002(\r:\0010\"O\n\023potential_info_list\022\020\n\010u"
    "nixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clien"
    "t.server_head\"g\n\027potential_info_list_rsp"
    "\022\035\n\002rd\030\002 \002(\0132\021.client.role_data\022-\n\npoint"
    "_info\030\001 \003(\0132\031.client.client_point_info\"8"
    "\n\021client_point_info\022\020\n\005index\030\001 \002(\r:\0010\022\021\n"
    "\006status\030\002 \002(\r:\0010\"q\n\021act_potential_req\022%\n"
    "\004type\030\001 \002(\0162\027.client.ACTIVITION_TYPE\022\r\n\005"
    "index\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"\234\001\n\021act_potential_rsp\0225\n\013res"
    "ult_type\030\001 \002(\0162 .client.act_potential_rs"
    "p.result\022-\n\npoint_info\030\002 \003(\0132\031.client.cl"
    "ient_point_info\"!\n\006result\022\013\n\007success\020\001\022\n"
    "\n\006failed\020\002\"E\n\023potential_share_rsp\022\014\n\004nam"
    "e\030\001 \002(\t\022\017\n\007add_exp\030\002 \002(\r\022\017\n\007role_id\030\003 \002("
    "\004\"\?\n\nrecord_exp\022\017\n\007old_exp\030\001 \001(\r\022\017\n\007new_"
    "exp\030\002 \001(\r\022\017\n\007add_exp\030\003 \001(\r\";\n\023effects_br"
    "ocast_rsp\022\017\n\007role_id\030\001 \002(\r\022\023\n\013effect_typ"
    "e\030\002 \002(\r*5\n\017ACTIVITION_TYPE\022\020\n\014ACT_TYPE_A"
    "CT\020\001\022\020\n\014ACT_TYPE_ICE\020\002", 902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_potential.proto", &protobuf_RegisterTypes);
  acupoint_info::default_instance_ = new acupoint_info();
  potential_info_list::default_instance_ = new potential_info_list();
  potential_info_list_rsp::default_instance_ = new potential_info_list_rsp();
  client_point_info::default_instance_ = new client_point_info();
  act_potential_req::default_instance_ = new act_potential_req();
  act_potential_rsp::default_instance_ = new act_potential_rsp();
  potential_share_rsp::default_instance_ = new potential_share_rsp();
  record_exp::default_instance_ = new record_exp();
  effects_brocast_rsp::default_instance_ = new effects_brocast_rsp();
  acupoint_info::default_instance_->InitAsDefaultInstance();
  potential_info_list::default_instance_->InitAsDefaultInstance();
  potential_info_list_rsp::default_instance_->InitAsDefaultInstance();
  client_point_info::default_instance_->InitAsDefaultInstance();
  act_potential_req::default_instance_->InitAsDefaultInstance();
  act_potential_rsp::default_instance_->InitAsDefaultInstance();
  potential_share_rsp::default_instance_->InitAsDefaultInstance();
  record_exp::default_instance_->InitAsDefaultInstance();
  effects_brocast_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fpotential_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fpotential_2eproto {
  StaticDescriptorInitializer_client_2erole_5fpotential_2eproto() {
    protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fpotential_2eproto_;
const ::google::protobuf::EnumDescriptor* ACTIVITION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIVITION_TYPE_descriptor_;
}
bool ACTIVITION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int acupoint_info::kIndexFieldNumber;
const int acupoint_info::kStatusFieldNumber;
const int acupoint_info::kActCountFieldNumber;
#endif  // !_MSC_VER

acupoint_info::acupoint_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void acupoint_info::InitAsDefaultInstance() {
}

acupoint_info::acupoint_info(const acupoint_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void acupoint_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  act_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

acupoint_info::~acupoint_info() {
  SharedDtor();
}

void acupoint_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void acupoint_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* acupoint_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return acupoint_info_descriptor_;
}

const acupoint_info& acupoint_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

acupoint_info* acupoint_info::default_instance_ = NULL;

acupoint_info* acupoint_info::New() const {
  return new acupoint_info;
}

void acupoint_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    status_ = 0u;
    act_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool acupoint_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_act_count;
        break;
      }

      // required uint32 act_count = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_count_)));
          set_has_act_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void acupoint_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 status = 2 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 act_count = 5 [default = 0];
  if (has_act_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->act_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* acupoint_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 status = 2 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 act_count = 5 [default = 0];
  if (has_act_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->act_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int acupoint_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 status = 2 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 act_count = 5 [default = 0];
    if (has_act_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void acupoint_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const acupoint_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const acupoint_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void acupoint_info::MergeFrom(const acupoint_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_act_count()) {
      set_act_count(from.act_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void acupoint_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void acupoint_info::CopyFrom(const acupoint_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool acupoint_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void acupoint_info::Swap(acupoint_info* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(act_count_, other->act_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata acupoint_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = acupoint_info_descriptor_;
  metadata.reflection = acupoint_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int potential_info_list::kUnixtimeFieldNumber;
const int potential_info_list::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

potential_info_list::potential_info_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void potential_info_list::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

potential_info_list::potential_info_list(const potential_info_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void potential_info_list::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

potential_info_list::~potential_info_list() {
  SharedDtor();
}

void potential_info_list::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void potential_info_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* potential_info_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return potential_info_list_descriptor_;
}

const potential_info_list& potential_info_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

potential_info_list* potential_info_list::default_instance_ = NULL;

potential_info_list* potential_info_list::New() const {
  return new potential_info_list;
}

void potential_info_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool potential_info_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void potential_info_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* potential_info_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int potential_info_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void potential_info_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const potential_info_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const potential_info_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void potential_info_list::MergeFrom(const potential_info_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void potential_info_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void potential_info_list::CopyFrom(const potential_info_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool potential_info_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void potential_info_list::Swap(potential_info_list* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata potential_info_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = potential_info_list_descriptor_;
  metadata.reflection = potential_info_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int potential_info_list_rsp::kRdFieldNumber;
const int potential_info_list_rsp::kPointInfoFieldNumber;
#endif  // !_MSC_VER

potential_info_list_rsp::potential_info_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void potential_info_list_rsp::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

potential_info_list_rsp::potential_info_list_rsp(const potential_info_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void potential_info_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

potential_info_list_rsp::~potential_info_list_rsp() {
  SharedDtor();
}

void potential_info_list_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void potential_info_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* potential_info_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return potential_info_list_rsp_descriptor_;
}

const potential_info_list_rsp& potential_info_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

potential_info_list_rsp* potential_info_list_rsp::default_instance_ = NULL;

potential_info_list_rsp* potential_info_list_rsp::New() const {
  return new potential_info_list_rsp;
}

void potential_info_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  point_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool potential_info_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.client_point_info point_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_point_info;
        if (input->ExpectTag(18)) goto parse_rd;
        break;
      }

      // required .client.role_data rd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void potential_info_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.client_point_info point_info = 1;
  for (int i = 0; i < this->point_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_info(i), output);
  }

  // required .client.role_data rd = 2;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* potential_info_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.client_point_info point_info = 1;
  for (int i = 0; i < this->point_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point_info(i), target);
  }

  // required .client.role_data rd = 2;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int potential_info_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 2;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.client_point_info point_info = 1;
  total_size += 1 * this->point_info_size();
  for (int i = 0; i < this->point_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void potential_info_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const potential_info_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const potential_info_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void potential_info_list_rsp::MergeFrom(const potential_info_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_info_.MergeFrom(from.point_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void potential_info_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void potential_info_list_rsp::CopyFrom(const potential_info_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool potential_info_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  for (int i = 0; i < point_info_size(); i++) {
    if (!this->point_info(i).IsInitialized()) return false;
  }
  return true;
}

void potential_info_list_rsp::Swap(potential_info_list_rsp* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    point_info_.Swap(&other->point_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata potential_info_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = potential_info_list_rsp_descriptor_;
  metadata.reflection = potential_info_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_point_info::kIndexFieldNumber;
const int client_point_info::kStatusFieldNumber;
#endif  // !_MSC_VER

client_point_info::client_point_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_point_info::InitAsDefaultInstance() {
}

client_point_info::client_point_info(const client_point_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_point_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_point_info::~client_point_info() {
  SharedDtor();
}

void client_point_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_point_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_point_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_point_info_descriptor_;
}

const client_point_info& client_point_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

client_point_info* client_point_info::default_instance_ = NULL;

client_point_info* client_point_info::New() const {
  return new client_point_info;
}

void client_point_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_point_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_point_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 status = 2 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_point_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 status = 2 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_point_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 status = 2 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_point_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_point_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_point_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_point_info::MergeFrom(const client_point_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_point_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_point_info::CopyFrom(const client_point_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_point_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void client_point_info::Swap(client_point_info* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_point_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_point_info_descriptor_;
  metadata.reflection = client_point_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int act_potential_req::kTypeFieldNumber;
const int act_potential_req::kIndexFieldNumber;
const int act_potential_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

act_potential_req::act_potential_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void act_potential_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

act_potential_req::act_potential_req(const act_potential_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void act_potential_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  index_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_potential_req::~act_potential_req() {
  SharedDtor();
}

void act_potential_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void act_potential_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_potential_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_potential_req_descriptor_;
}

const act_potential_req& act_potential_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

act_potential_req* act_potential_req::default_instance_ = NULL;

act_potential_req* act_potential_req::New() const {
  return new act_potential_req;
}

void act_potential_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    index_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_potential_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.ACTIVITION_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::ACTIVITION_TYPE_IsValid(value)) {
            set_type(static_cast< ::client::ACTIVITION_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void act_potential_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.ACTIVITION_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* act_potential_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.ACTIVITION_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int act_potential_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.ACTIVITION_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_potential_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_potential_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_potential_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_potential_req::MergeFrom(const act_potential_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_potential_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_potential_req::CopyFrom(const act_potential_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_potential_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void act_potential_req::Swap(act_potential_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_potential_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_potential_req_descriptor_;
  metadata.reflection = act_potential_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* act_potential_rsp_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_potential_rsp_result_descriptor_;
}
bool act_potential_rsp_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const act_potential_rsp_result act_potential_rsp::success;
const act_potential_rsp_result act_potential_rsp::failed;
const act_potential_rsp_result act_potential_rsp::result_MIN;
const act_potential_rsp_result act_potential_rsp::result_MAX;
const int act_potential_rsp::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int act_potential_rsp::kResultTypeFieldNumber;
const int act_potential_rsp::kPointInfoFieldNumber;
#endif  // !_MSC_VER

act_potential_rsp::act_potential_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void act_potential_rsp::InitAsDefaultInstance() {
}

act_potential_rsp::act_potential_rsp(const act_potential_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void act_potential_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_potential_rsp::~act_potential_rsp() {
  SharedDtor();
}

void act_potential_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void act_potential_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_potential_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_potential_rsp_descriptor_;
}

const act_potential_rsp& act_potential_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

act_potential_rsp* act_potential_rsp::default_instance_ = NULL;

act_potential_rsp* act_potential_rsp::New() const {
  return new act_potential_rsp;
}

void act_potential_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 1;
  }
  point_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_potential_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.act_potential_rsp.result result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::act_potential_rsp_result_IsValid(value)) {
            set_result_type(static_cast< ::client::act_potential_rsp_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_info;
        break;
      }

      // repeated .client.client_point_info point_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void act_potential_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.act_potential_rsp.result result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // repeated .client.client_point_info point_info = 2;
  for (int i = 0; i < this->point_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* act_potential_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.act_potential_rsp.result result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // repeated .client.client_point_info point_info = 2;
  for (int i = 0; i < this->point_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int act_potential_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.act_potential_rsp.result result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

  }
  // repeated .client.client_point_info point_info = 2;
  total_size += 1 * this->point_info_size();
  for (int i = 0; i < this->point_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_potential_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_potential_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_potential_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_potential_rsp::MergeFrom(const act_potential_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_info_.MergeFrom(from.point_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_potential_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_potential_rsp::CopyFrom(const act_potential_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_potential_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < point_info_size(); i++) {
    if (!this->point_info(i).IsInitialized()) return false;
  }
  return true;
}

void act_potential_rsp::Swap(act_potential_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    point_info_.Swap(&other->point_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_potential_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_potential_rsp_descriptor_;
  metadata.reflection = act_potential_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int potential_share_rsp::kNameFieldNumber;
const int potential_share_rsp::kAddExpFieldNumber;
const int potential_share_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

potential_share_rsp::potential_share_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void potential_share_rsp::InitAsDefaultInstance() {
}

potential_share_rsp::potential_share_rsp(const potential_share_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void potential_share_rsp::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_exp_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

potential_share_rsp::~potential_share_rsp() {
  SharedDtor();
}

void potential_share_rsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void potential_share_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* potential_share_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return potential_share_rsp_descriptor_;
}

const potential_share_rsp& potential_share_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

potential_share_rsp* potential_share_rsp::default_instance_ = NULL;

potential_share_rsp* potential_share_rsp::New() const {
  return new potential_share_rsp;
}

void potential_share_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    add_exp_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool potential_share_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_exp;
        break;
      }

      // required uint32 add_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void potential_share_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 add_exp = 2;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_exp(), output);
  }

  // required uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* potential_share_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 add_exp = 2;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_exp(), target);
  }

  // required uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int potential_share_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 add_exp = 2;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_exp());
    }

    // required uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void potential_share_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const potential_share_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const potential_share_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void potential_share_rsp::MergeFrom(const potential_share_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void potential_share_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void potential_share_rsp::CopyFrom(const potential_share_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool potential_share_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void potential_share_rsp::Swap(potential_share_rsp* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata potential_share_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = potential_share_rsp_descriptor_;
  metadata.reflection = potential_share_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int record_exp::kOldExpFieldNumber;
const int record_exp::kNewExpFieldNumber;
const int record_exp::kAddExpFieldNumber;
#endif  // !_MSC_VER

record_exp::record_exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void record_exp::InitAsDefaultInstance() {
}

record_exp::record_exp(const record_exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void record_exp::SharedCtor() {
  _cached_size_ = 0;
  old_exp_ = 0u;
  new_exp_ = 0u;
  add_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

record_exp::~record_exp() {
  SharedDtor();
}

void record_exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void record_exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* record_exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_exp_descriptor_;
}

const record_exp& record_exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

record_exp* record_exp::default_instance_ = NULL;

record_exp* record_exp::New() const {
  return new record_exp;
}

void record_exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_exp_ = 0u;
    new_exp_ = 0u;
    add_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool record_exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 old_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_exp;
        break;
      }

      // optional uint32 new_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_exp_)));
          set_has_new_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }

      // optional uint32 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void record_exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 old_exp = 1;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_exp(), output);
  }

  // optional uint32 new_exp = 2;
  if (has_new_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_exp(), output);
  }

  // optional uint32 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* record_exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 old_exp = 1;
  if (has_old_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_exp(), target);
  }

  // optional uint32 new_exp = 2;
  if (has_new_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_exp(), target);
  }

  // optional uint32 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->add_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int record_exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 old_exp = 1;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_exp());
    }

    // optional uint32 new_exp = 2;
    if (has_new_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_exp());
    }

    // optional uint32 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void record_exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const record_exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const record_exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void record_exp::MergeFrom(const record_exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
    if (from.has_new_exp()) {
      set_new_exp(from.new_exp());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void record_exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record_exp::CopyFrom(const record_exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record_exp::IsInitialized() const {

  return true;
}

void record_exp::Swap(record_exp* other) {
  if (other != this) {
    std::swap(old_exp_, other->old_exp_);
    std::swap(new_exp_, other->new_exp_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata record_exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = record_exp_descriptor_;
  metadata.reflection = record_exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int effects_brocast_rsp::kRoleIdFieldNumber;
const int effects_brocast_rsp::kEffectTypeFieldNumber;
#endif  // !_MSC_VER

effects_brocast_rsp::effects_brocast_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void effects_brocast_rsp::InitAsDefaultInstance() {
}

effects_brocast_rsp::effects_brocast_rsp(const effects_brocast_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void effects_brocast_rsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  effect_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

effects_brocast_rsp::~effects_brocast_rsp() {
  SharedDtor();
}

void effects_brocast_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void effects_brocast_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* effects_brocast_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return effects_brocast_rsp_descriptor_;
}

const effects_brocast_rsp& effects_brocast_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fpotential_2eproto();
  return *default_instance_;
}

effects_brocast_rsp* effects_brocast_rsp::default_instance_ = NULL;

effects_brocast_rsp* effects_brocast_rsp::New() const {
  return new effects_brocast_rsp;
}

void effects_brocast_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    effect_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool effects_brocast_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_type;
        break;
      }

      // required uint32 effect_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_type_)));
          set_has_effect_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void effects_brocast_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 effect_type = 2;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* effects_brocast_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 effect_type = 2;
  if (has_effect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int effects_brocast_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 effect_type = 2;
    if (has_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void effects_brocast_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const effects_brocast_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const effects_brocast_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void effects_brocast_rsp::MergeFrom(const effects_brocast_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_effect_type()) {
      set_effect_type(from.effect_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void effects_brocast_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void effects_brocast_rsp::CopyFrom(const effects_brocast_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effects_brocast_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void effects_brocast_rsp::Swap(effects_brocast_rsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(effect_type_, other->effect_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata effects_brocast_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = effects_brocast_rsp_descriptor_;
  metadata.reflection = effects_brocast_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
